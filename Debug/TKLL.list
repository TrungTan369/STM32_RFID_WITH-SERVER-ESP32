
TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065cc  080065cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080065cc  080065cc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065cc  080065cc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080065d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000007c  08006650  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08006650  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcff  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d5  00000000  00000000  0003fda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00043778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00044ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145ad  00000000  00000000  00045c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a76c  00000000  00000000  0005a22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bdf1  00000000  00000000  00074999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e078a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004740  00000000  00000000  000e07e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800648c 	.word	0x0800648c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	0800648c 	.word	0x0800648c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af02      	add	r7, sp, #8
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000410:	240f      	movs	r4, #15
 8000412:	193a      	adds	r2, r7, r4
 8000414:	1df9      	adds	r1, r7, #7
 8000416:	4806      	ldr	r0, [pc, #24]	; (8000430 <RC522_SPI_Transfer+0x2c>)
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2301      	movs	r3, #1
 800041e:	f003 fb09 	bl	8003a34 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	781b      	ldrb	r3, [r3, #0]
}
 8000426:	0018      	movs	r0, r3
 8000428:	46bd      	mov	sp, r7
 800042a:	b005      	add	sp, #20
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	20000234 	.word	0x20000234

08000434 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	0002      	movs	r2, r0
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	1dbb      	adds	r3, r7, #6
 8000442:	1c0a      	adds	r2, r1, #0
 8000444:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000446:	2390      	movs	r3, #144	; 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f849 	bl	80024e6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	227e      	movs	r2, #126	; 0x7e
 800045e:	4013      	ands	r3, r2
 8000460:	b2db      	uxtb	r3, r3
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff ffce 	bl	8000404 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ffc9 	bl	8000404 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2201      	movs	r2, #1
 8000478:	2110      	movs	r1, #16
 800047a:	0018      	movs	r0, r3
 800047c:	f002 f833 	bl	80024e6 <HAL_GPIO_WritePin>
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	0002      	movs	r2, r0
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000494:	2390      	movs	r3, #144	; 0x90
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	2200      	movs	r2, #0
 800049a:	2110      	movs	r1, #16
 800049c:	0018      	movs	r0, r3
 800049e:	f002 f822 	bl	80024e6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	227e      	movs	r2, #126	; 0x7e
 80004ac:	4013      	ands	r3, r2
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	4252      	negs	r2, r2
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff ffa2 	bl	8000404 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80004c0:	250f      	movs	r5, #15
 80004c2:	197c      	adds	r4, r7, r5
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ff9d 	bl	8000404 <RC522_SPI_Transfer>
 80004ca:	0003      	movs	r3, r0
 80004cc:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80004ce:	2390      	movs	r3, #144	; 0x90
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	2201      	movs	r2, #1
 80004d4:	2110      	movs	r1, #16
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 f805 	bl	80024e6 <HAL_GPIO_WritePin>

	return val;
 80004dc:	197b      	adds	r3, r7, r5
 80004de:	781b      	ldrb	r3, [r3, #0]

}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}

080004e8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	1c0a      	adds	r2, r1, #0
 80004f8:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80004fa:	250f      	movs	r5, #15
 80004fc:	197c      	adds	r4, r7, r5
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ffc0 	bl	8000488 <Read_MFRC522>
 8000508:	0003      	movs	r3, r0
 800050a:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800050c:	197a      	adds	r2, r7, r5
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	7812      	ldrb	r2, [r2, #0]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff ff88 	bl	8000434 <Write_MFRC522>
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bdb0      	pop	{r4, r5, r7, pc}

0800052c <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800053e:	250f      	movs	r5, #15
 8000540:	197c      	adds	r4, r7, r5
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ff9e 	bl	8000488 <Read_MFRC522>
 800054c:	0003      	movs	r3, r0
 800054e:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b25b      	sxtb	r3, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	b25b      	sxtb	r3, r3
 800055a:	197a      	adds	r2, r7, r5
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	b252      	sxtb	r2, r2
 8000560:	4013      	ands	r3, r2
 8000562:	b25b      	sxtb	r3, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ff61 	bl	8000434 <Write_MFRC522>
}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b004      	add	sp, #16
 8000578:	bdb0      	pop	{r4, r5, r7, pc}

0800057a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800057e:	2014      	movs	r0, #20
 8000580:	f7ff ff82 	bl	8000488 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000584:	2103      	movs	r1, #3
 8000586:	2014      	movs	r0, #20
 8000588:	f7ff ffae 	bl	80004e8 <SetBitMask>
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000596:	210f      	movs	r1, #15
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ff4b 	bl	8000434 <Write_MFRC522>
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 ff98 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2201      	movs	r2, #1
 80005bc:	2101      	movs	r1, #1
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 ff91 	bl	80024e6 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80005c4:	f7ff ffe5 	bl	8000592 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80005c8:	218d      	movs	r1, #141	; 0x8d
 80005ca:	202a      	movs	r0, #42	; 0x2a
 80005cc:	f7ff ff32 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80005d0:	213e      	movs	r1, #62	; 0x3e
 80005d2:	202b      	movs	r0, #43	; 0x2b
 80005d4:	f7ff ff2e 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80005d8:	211e      	movs	r1, #30
 80005da:	202d      	movs	r0, #45	; 0x2d
 80005dc:	f7ff ff2a 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	202c      	movs	r0, #44	; 0x2c
 80005e4:	f7ff ff26 	bl	8000434 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	2015      	movs	r0, #21
 80005ec:	f7ff ff22 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80005f0:	213d      	movs	r1, #61	; 0x3d
 80005f2:	2011      	movs	r0, #17
 80005f4:	f7ff ff1e 	bl	8000434 <Write_MFRC522>

	AntennaOn();
 80005f8:	f7ff ffbf 	bl	800057a <AntennaOn>
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000602:	b5b0      	push	{r4, r5, r7, lr}
 8000604:	b088      	sub	sp, #32
 8000606:	af00      	add	r7, sp, #0
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	0011      	movs	r1, r2
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	240f      	movs	r4, #15
 8000610:	193b      	adds	r3, r7, r4
 8000612:	1c02      	adds	r2, r0, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	230e      	movs	r3, #14
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	1c0a      	adds	r2, r1, #0
 800061c:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 800061e:	231f      	movs	r3, #31
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	2202      	movs	r2, #2
 8000624:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 8000626:	211e      	movs	r1, #30
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 800062e:	201d      	movs	r0, #29
 8000630:	183b      	adds	r3, r7, r0
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000636:	193b      	adds	r3, r7, r4
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b0c      	cmp	r3, #12
 800063c:	d008      	beq.n	8000650 <MFRC522_ToCard+0x4e>
 800063e:	2b0e      	cmp	r3, #14
 8000640:	d10f      	bne.n	8000662 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2212      	movs	r2, #18
 8000646:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8000648:	183b      	adds	r3, r7, r0
 800064a:	2210      	movs	r2, #16
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e009      	b.n	8000664 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000650:	231e      	movs	r3, #30
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2277      	movs	r2, #119	; 0x77
 8000656:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8000658:	231d      	movs	r3, #29
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2230      	movs	r2, #48	; 0x30
 800065e:	701a      	strb	r2, [r3, #0]
			break;
 8000660:	e000      	b.n	8000664 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 8000662:	46c0      	nop			; (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000664:	231e      	movs	r3, #30
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	4252      	negs	r2, r2
 800066e:	4313      	orrs	r3, r2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	0019      	movs	r1, r3
 8000674:	2002      	movs	r0, #2
 8000676:	f7ff fedd 	bl	8000434 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff55 	bl	800052c <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	200a      	movs	r0, #10
 8000686:	f7ff ff2f 	bl	80004e8 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fed1 	bl	8000434 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	e00a      	b.n	80006ae <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	18d3      	adds	r3, r2, r3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	2009      	movs	r0, #9
 80006a4:	f7ff fec6 	bl	8000434 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	3301      	adds	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	230e      	movs	r3, #14
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d3ee      	bcc.n	8000698 <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80006ba:	240f      	movs	r4, #15
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	0019      	movs	r1, r3
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff feb6 	bl	8000434 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0c      	cmp	r3, #12
 80006ce:	d103      	bne.n	80006d8 <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	200d      	movs	r0, #13
 80006d4:	f7ff ff08 	bl	80004e8 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80006d8:	23fa      	movs	r3, #250	; 0xfa
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80006de:	251c      	movs	r5, #28
 80006e0:	197c      	adds	r4, r7, r5
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff fed0 	bl	8000488 <Read_MFRC522>
 80006e8:	0003      	movs	r3, r0
 80006ea:	7023      	strb	r3, [r4, #0]
        i--;
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00d      	beq.n	8000714 <MFRC522_ToCard+0x112>
 80006f8:	197b      	adds	r3, r7, r5
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4013      	ands	r3, r2
 8000700:	d108      	bne.n	8000714 <MFRC522_ToCard+0x112>
 8000702:	197b      	adds	r3, r7, r5
 8000704:	221d      	movs	r2, #29
 8000706:	18ba      	adds	r2, r7, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	7812      	ldrb	r2, [r2, #0]
 800070c:	4013      	ands	r3, r2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0e4      	beq.n	80006de <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	200d      	movs	r0, #13
 8000718:	f7ff ff08 	bl	800052c <ClearBitMask>

    if (i != 0)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d100      	bne.n	8000724 <MFRC522_ToCard+0x122>
 8000722:	e070      	b.n	8000806 <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000724:	2006      	movs	r0, #6
 8000726:	f7ff feaf 	bl	8000488 <Read_MFRC522>
 800072a:	0003      	movs	r3, r0
 800072c:	001a      	movs	r2, r3
 800072e:	231b      	movs	r3, #27
 8000730:	4013      	ands	r3, r2
 8000732:	d164      	bne.n	80007fe <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8000734:	211f      	movs	r1, #31
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 800073c:	231c      	movs	r3, #28
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	221e      	movs	r2, #30
 8000742:	18ba      	adds	r2, r7, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	4013      	ands	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	001a      	movs	r2, r3
 800074e:	2301      	movs	r3, #1
 8000750:	4013      	ands	r3, r2
 8000752:	d002      	beq.n	800075a <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 800075a:	230f      	movs	r3, #15
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	d150      	bne.n	8000806 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000764:	251c      	movs	r5, #28
 8000766:	197c      	adds	r4, r7, r5
 8000768:	200a      	movs	r0, #10
 800076a:	f7ff fe8d 	bl	8000488 <Read_MFRC522>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000772:	200c      	movs	r0, #12
 8000774:	f7ff fe88 	bl	8000488 <Read_MFRC522>
 8000778:	0003      	movs	r3, r0
 800077a:	0019      	movs	r1, r3
 800077c:	2017      	movs	r0, #23
 800077e:	183b      	adds	r3, r7, r0
 8000780:	2207      	movs	r2, #7
 8000782:	400a      	ands	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8000786:	0001      	movs	r1, r0
 8000788:	187b      	adds	r3, r7, r1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 8000790:	197b      	adds	r3, r7, r5
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	00da      	lsls	r2, r3, #3
 8000798:	187b      	adds	r3, r7, r1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	001a      	movs	r2, r3
 80007a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e006      	b.n	80007b4 <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 80007a6:	231c      	movs	r3, #28
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	001a      	movs	r2, r3
 80007b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b2:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80007b4:	221c      	movs	r2, #28
 80007b6:	18bb      	adds	r3, r7, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d102      	bne.n	80007c4 <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 80007be:	18bb      	adds	r3, r7, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 80007c4:	221c      	movs	r2, #28
 80007c6:	18bb      	adds	r3, r7, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d902      	bls.n	80007d4 <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 80007ce:	18bb      	adds	r3, r7, r2
 80007d0:	2210      	movs	r2, #16
 80007d2:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	e00a      	b.n	80007f0 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	18d4      	adds	r4, r2, r3
 80007e0:	2009      	movs	r0, #9
 80007e2:	f7ff fe51 	bl	8000488 <Read_MFRC522>
 80007e6:	0003      	movs	r3, r0
 80007e8:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3301      	adds	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	231c      	movs	r3, #28
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3ee      	bcc.n	80007da <MFRC522_ToCard+0x1d8>
 80007fc:	e003      	b.n	8000806 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80007fe:	231f      	movs	r3, #31
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	2202      	movs	r2, #2
 8000804:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000806:	231f      	movs	r3, #31
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	781b      	ldrb	r3, [r3, #0]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b008      	add	sp, #32
 8000812:	bdb0      	pop	{r4, r5, r7, pc}

08000814 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000814:	b5b0      	push	{r4, r5, r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	0002      	movs	r2, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000822:	2107      	movs	r1, #7
 8000824:	200d      	movs	r0, #13
 8000826:	f7ff fe05 	bl	8000434 <Write_MFRC522>

	TagType[0] = reqMode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	1dfa      	adds	r2, r7, #7
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000832:	250f      	movs	r5, #15
 8000834:	197c      	adds	r4, r7, r5
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	2308      	movs	r3, #8
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	0013      	movs	r3, r2
 8000842:	2201      	movs	r2, #1
 8000844:	200c      	movs	r0, #12
 8000846:	f7ff fedc 	bl	8000602 <MFRC522_ToCard>
 800084a:	0003      	movs	r3, r0
 800084c:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 800084e:	197b      	adds	r3, r7, r5
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d102      	bne.n	800085c <MFRC522_Request+0x48>
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b10      	cmp	r3, #16
 800085a:	d003      	beq.n	8000864 <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 800085c:	230f      	movs	r3, #15
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000864:	230f      	movs	r3, #15
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	781b      	ldrb	r3, [r3, #0]
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bdb0      	pop	{r4, r5, r7, pc}

08000872 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000872:	b5b0      	push	{r4, r5, r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af02      	add	r7, sp, #8
 8000878:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800087a:	230d      	movs	r3, #13
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000882:	2100      	movs	r1, #0
 8000884:	200d      	movs	r0, #13
 8000886:	f7ff fdd5 	bl	8000434 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2293      	movs	r2, #147	; 0x93
 800088e:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3301      	adds	r3, #1
 8000894:	2220      	movs	r2, #32
 8000896:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000898:	250f      	movs	r5, #15
 800089a:	197c      	adds	r4, r7, r5
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2308      	movs	r3, #8
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	0013      	movs	r3, r2
 80008a8:	2202      	movs	r2, #2
 80008aa:	200c      	movs	r0, #12
 80008ac:	f7ff fea9 	bl	8000602 <MFRC522_ToCard>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 80008b4:	197b      	adds	r3, r7, r5
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d128      	bne.n	800090e <MFRC522_Anticoll+0x9c>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80008bc:	230e      	movs	r3, #14
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e010      	b.n	80008e8 <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 80008c6:	200e      	movs	r0, #14
 80008c8:	183b      	adds	r3, r7, r0
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	7819      	ldrb	r1, [r3, #0]
 80008d2:	220d      	movs	r2, #13
 80008d4:	18bb      	adds	r3, r7, r2
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	404a      	eors	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 80008de:	183b      	adds	r3, r7, r0
 80008e0:	781a      	ldrb	r2, [r3, #0]
 80008e2:	183b      	adds	r3, r7, r0
 80008e4:	3201      	adds	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	220e      	movs	r2, #14
 80008ea:	18bb      	adds	r3, r7, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d9e9      	bls.n	80008c6 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 80008f2:	18bb      	adds	r3, r7, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	220d      	movs	r2, #13
 80008fe:	18ba      	adds	r2, r7, r2
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d003      	beq.n	800090e <MFRC522_Anticoll+0x9c>
		{
			status = MI_ERR;
 8000906:	230f      	movs	r3, #15
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2202      	movs	r2, #2
 800090c:	701a      	strb	r2, [r3, #0]
		}
    }

    return status;
 800090e:	230f      	movs	r3, #15
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bdb0      	pop	{r4, r5, r7, pc}

0800091c <rgb>:
int red = 0;
int status_led =1;
int increasing = 1;
int decreasing = 0;

void rgb(int red, int green, int blue){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100 - blue);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2264      	movs	r2, #100	; 0x64
 800092c:	1ad2      	subs	r2, r2, r3
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <rgb+0x38>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 110 - green);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	226e      	movs	r2, #110	; 0x6e
 8000938:	1ad2      	subs	r2, r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <rgb+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 120 - red);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2278      	movs	r2, #120	; 0x78
 8000944:	1ad2      	subs	r2, r2, r3
 8000946:	4b03      	ldr	r3, [pc, #12]	; (8000954 <rgb+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b004      	add	sp, #16
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000c4 	.word	0x200000c4

08000958 <getKeyinput>:
 *      Author: HOME
 */
#include "button.h"

int buttonFlag[2] = {0,0};
void getKeyinput(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------
	if((timer_flag[2] == 1) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <getKeyinput+0x60>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d110      	bne.n	8000986 <getKeyinput+0x2e>
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2102      	movs	r1, #2
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fd9e 	bl	80024ac <HAL_GPIO_ReadPin>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d108      	bne.n	8000986 <getKeyinput+0x2e>

		buttonFlag[0] = 1;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <getKeyinput+0x64>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
		setTimer(2, 300);
 800097a:	2396      	movs	r3, #150	; 0x96
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	0019      	movs	r1, r3
 8000980:	2002      	movs	r0, #2
 8000982:	f001 f8a7 	bl	8001ad4 <setTimer>
	}
	// ----PROCESS BUTTON 2-----------
	if((timer_flag[2] == 1) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <getKeyinput+0x60>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d110      	bne.n	80009b0 <getKeyinput+0x58>
 800098e:	2390      	movs	r3, #144	; 0x90
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	2108      	movs	r1, #8
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fd89 	bl	80024ac <HAL_GPIO_ReadPin>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d108      	bne.n	80009b0 <getKeyinput+0x58>

		buttonFlag[1] = 1;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <getKeyinput+0x64>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
		setTimer(2, 300);
 80009a4:	2396      	movs	r3, #150	; 0x96
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	0019      	movs	r1, r3
 80009aa:	2002      	movs	r0, #2
 80009ac:	f001 f892 	bl	8001ad4 <setTimer>
	}
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000004 	.word	0x20000004
 80009bc:	20000098 	.word	0x20000098

080009c0 <isButtonPress>:
int isButtonPress(int i){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <isButtonPress+0x2c>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	58d3      	ldr	r3, [r2, r3]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d106      	bne.n	80009e2 <isButtonPress+0x22>
		buttonFlag[i] = 0;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <isButtonPress+0x2c>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	2100      	movs	r1, #0
 80009dc:	50d1      	str	r1, [r2, r3]
		return 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <isButtonPress+0x24>
	}
	return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000098 	.word	0x20000098

080009f0 <fsm>:

#include "fsm.h"

int status = INIT;
uint8_t * data_uart ;
void fsm(uint8_t * readCard, uint8_t status_read){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	000a      	movs	r2, r1
 80009fa:	1cfb      	adds	r3, r7, #3
 80009fc:	701a      	strb	r2, [r3, #0]
	switch (status) {
 80009fe:	4b98      	ldr	r3, [pc, #608]	; (8000c60 <fsm+0x270>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d900      	bls.n	8000a08 <fsm+0x18>
 8000a06:	e112      	b.n	8000c2e <fsm+0x23e>
 8000a08:	009a      	lsls	r2, r3, #2
 8000a0a:	4b96      	ldr	r3, [pc, #600]	; (8000c64 <fsm+0x274>)
 8000a0c:	18d3      	adds	r3, r2, r3
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	469f      	mov	pc, r3
		case INIT:
			lcd_clear_display();
 8000a12:	f000 fb2f 	bl	8001074 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 fb36 	bl	800108a <lcd_goto_XY>
			lcd_send_string("PUT ON YOUR CARD");
 8000a1e:	4b92      	ldr	r3, [pc, #584]	; (8000c68 <fsm+0x278>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fb12 	bl	800104a <lcd_send_string>
			lcd_goto_XY(0, 0);
 8000a26:	2100      	movs	r1, #0
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 fb2e 	bl	800108a <lcd_goto_XY>
			lcd_send_string("TO CONTROL LED");
 8000a2e:	4b8f      	ldr	r3, [pc, #572]	; (8000c6c <fsm+0x27c>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fb0a 	bl	800104a <lcd_send_string>
			status = WAITCARD;
 8000a36:	4b8a      	ldr	r3, [pc, #552]	; (8000c60 <fsm+0x270>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
		case WAITCARD:
			if(status_read != MI_OK){
 8000a3c:	1cfb      	adds	r3, r7, #3
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d000      	beq.n	8000a46 <fsm+0x56>
 8000a44:	e0f5      	b.n	8000c32 <fsm+0x242>
				break;
			}
			if(check_Card(readCard) == 2){ // MASTER CARD
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f92d 	bl	8000ca8 <check_Card>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d123      	bne.n	8000a9c <fsm+0xac>
				sendDataToESP32("MASTER LOGGIN\r\n");
 8000a54:	4b86      	ldr	r3, [pc, #536]	; (8000c70 <fsm+0x280>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 f896 	bl	8001b88 <sendDataToESP32>
				setTimer(0, 3000);
 8000a5c:	4b85      	ldr	r3, [pc, #532]	; (8000c74 <fsm+0x284>)
 8000a5e:	0019      	movs	r1, r3
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 f837 	bl	8001ad4 <setTimer>
				rgb(60, 60, 60); // PINK
 8000a66:	223c      	movs	r2, #60	; 0x3c
 8000a68:	213c      	movs	r1, #60	; 0x3c
 8000a6a:	203c      	movs	r0, #60	; 0x3c
 8000a6c:	f7ff ff56 	bl	800091c <rgb>
				status = MASTER_INIT;
 8000a70:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <fsm+0x270>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 8000a76:	f000 fafd 	bl	8001074 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 fb04 	bl	800108a <lcd_goto_XY>
				lcd_send_string("1. ADD CARD");
 8000a82:	4b7d      	ldr	r3, [pc, #500]	; (8000c78 <fsm+0x288>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fae0 	bl	800104a <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 fafc 	bl	800108a <lcd_goto_XY>
				lcd_send_string("2. DELETE CARD");
 8000a92:	4b7a      	ldr	r3, [pc, #488]	; (8000c7c <fsm+0x28c>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fad8 	bl	800104a <lcd_send_string>
				break;
 8000a9a:	e0d3      	b.n	8000c44 <fsm+0x254>
			}
			if( check_Card(readCard) == 1){ // NORMAL CARD
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f902 	bl	8000ca8 <check_Card>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10e      	bne.n	8000ac8 <fsm+0xd8>
				sendDataToESP32("TURN LED\r\n");
 8000aaa:	4b75      	ldr	r3, [pc, #468]	; (8000c80 <fsm+0x290>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f86b 	bl	8001b88 <sendDataToESP32>
				setTimer(0, 3000);
 8000ab2:	4b70      	ldr	r3, [pc, #448]	; (8000c74 <fsm+0x284>)
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f001 f80c 	bl	8001ad4 <setTimer>
				rgb(0, 100, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2164      	movs	r1, #100	; 0x64
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff ff2b 	bl	800091c <rgb>
				break;
 8000ac6:	e0bd      	b.n	8000c44 <fsm+0x254>
			}
			if (check_Card(readCard) == 0) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f8ec 	bl	8000ca8 <check_Card>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d000      	beq.n	8000ad6 <fsm+0xe6>
 8000ad4:	e0af      	b.n	8000c36 <fsm+0x246>
				lcd_clear_display();
 8000ad6:	f000 facd 	bl	8001074 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 fad4 	bl	800108a <lcd_goto_XY>
				lcd_send_string("CARD NOT EXIST");
 8000ae2:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <fsm+0x294>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fab0 	bl	800104a <lcd_send_string>
				HAL_Delay(1000);
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 f8ee 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000af4:	4b5a      	ldr	r3, [pc, #360]	; (8000c60 <fsm+0x270>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000afa:	e09c      	b.n	8000c36 <fsm+0x246>
		case MASTER_INIT:
			if(isButtonPress(0) == 1){
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff5f 	bl	80009c0 <isButtonPress>
 8000b02:	0003      	movs	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <fsm+0x132>
				lcd_clear_display();
 8000b08:	f000 fab4 	bl	8001074 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f000 fabb 	bl	800108a <lcd_goto_XY>
				lcd_send_string("SET CLOSER CARD");
 8000b14:	4b5c      	ldr	r3, [pc, #368]	; (8000c88 <fsm+0x298>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fa97 	bl	800104a <lcd_send_string>
				status = MASTER_ADDCARD;
 8000b1c:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <fsm+0x270>)
 8000b1e:	2203      	movs	r2, #3
 8000b20:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(1) == 1){
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff ff4c 	bl	80009c0 <isButtonPress>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d000      	beq.n	8000b30 <fsm+0x140>
 8000b2e:	e084      	b.n	8000c3a <fsm+0x24a>
				lcd_clear_display();
 8000b30:	f000 faa0 	bl	8001074 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 faa7 	bl	800108a <lcd_goto_XY>
				lcd_send_string("SET CLOSER CARD");
 8000b3c:	4b52      	ldr	r3, [pc, #328]	; (8000c88 <fsm+0x298>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fa83 	bl	800104a <lcd_send_string>
				status = MASTER_DELCARD;
 8000b44:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <fsm+0x270>)
 8000b46:	2204      	movs	r2, #4
 8000b48:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b4a:	e076      	b.n	8000c3a <fsm+0x24a>
		case MASTER_ADDCARD:
			if(status_read == MI_OK){
 8000b4c:	1cfb      	adds	r3, r7, #3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d000      	beq.n	8000b56 <fsm+0x166>
 8000b54:	e073      	b.n	8000c3e <fsm+0x24e>
				if(check_Card(readCard) == 1){
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 f8a5 	bl	8000ca8 <check_Card>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d108      	bne.n	8000b76 <fsm+0x186>
					lcd_goto_XY(0, 0);
 8000b64:	2100      	movs	r1, #0
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 fa8f 	bl	800108a <lcd_goto_XY>
					lcd_send_string("CARD EXISTED");
 8000b6c:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <fsm+0x29c>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 fa6b 	bl	800104a <lcd_send_string>
 8000b74:	e015      	b.n	8000ba2 <fsm+0x1b2>
				}
				else {
					add_Card(readCard);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 f8bf 	bl	8000cfc <add_Card>
					lcd_goto_XY(0, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fa82 	bl	800108a <lcd_goto_XY>
					lcd_send_string("ADDED CARD");
 8000b86:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <fsm+0x2a0>)
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fa5e 	bl	800104a <lcd_send_string>
					sendDataToESP32("ADDED CARD\r\n");
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <fsm+0x2a4>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fff9 	bl	8001b88 <sendDataToESP32>
					setTimer(3, 2000);
 8000b96:	23fa      	movs	r3, #250	; 0xfa
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 ff99 	bl	8001ad4 <setTimer>
				}
				HAL_Delay(1000);
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 f892 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000bac:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <fsm+0x270>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bb2:	e044      	b.n	8000c3e <fsm+0x24e>
		case MASTER_DELCARD:
			if(num_Card() == 0){
 8000bb4:	f000 f948 	bl	8000e48 <num_Card>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d110      	bne.n	8000bde <fsm+0x1ee>
				lcd_goto_XY(0, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fa63 	bl	800108a <lcd_goto_XY>
				lcd_send_string(" LIST CARD EMPTY");
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <fsm+0x2a8>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fa3f 	bl	800104a <lcd_send_string>
				HAL_Delay(1000);
 8000bcc:	23fa      	movs	r3, #250	; 0xfa
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 f87d 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <fsm+0x270>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
				break;
 8000bdc:	e032      	b.n	8000c44 <fsm+0x254>
			}
			if(status_read == MI_OK){
 8000bde:	1cfb      	adds	r3, r7, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d12d      	bne.n	8000c42 <fsm+0x252>
				if( delete_Card(readCard) == 0){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 f937 	bl	8000e5c <delete_Card>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d108      	bne.n	8000c04 <fsm+0x214>
					lcd_goto_XY(0, 0);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 fa48 	bl	800108a <lcd_goto_XY>
					lcd_send_string("CARD NOT EXIST");
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <fsm+0x294>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 fa24 	bl	800104a <lcd_send_string>
 8000c02:	e00b      	b.n	8000c1c <fsm+0x22c>
				}
				else {
					lcd_goto_XY(0, 0);
 8000c04:	2100      	movs	r1, #0
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 fa3f 	bl	800108a <lcd_goto_XY>
					lcd_send_string("DELETED CARD");
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <fsm+0x2ac>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fa1b 	bl	800104a <lcd_send_string>
					sendDataToESP32("DELETED CARD\r\n");
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <fsm+0x2b0>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 ffb6 	bl	8001b88 <sendDataToESP32>
				}
				HAL_Delay(1000);
 8000c1c:	23fa      	movs	r3, #250	; 0xfa
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 f855 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <fsm+0x270>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
				break;
 8000c2c:	e00a      	b.n	8000c44 <fsm+0x254>
			}
			break;
		default:
			break;
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	e008      	b.n	8000c44 <fsm+0x254>
				break;
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	e006      	b.n	8000c44 <fsm+0x254>
			break;
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	e004      	b.n	8000c44 <fsm+0x254>
			break;
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	e002      	b.n	8000c44 <fsm+0x254>
			break;
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e000      	b.n	8000c44 <fsm+0x254>
			break;
 8000c42:	46c0      	nop			; (mov r8, r8)
	}

	if(timer_flag[0] == 1){ // sang trong 3 s
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <fsm+0x2b4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d104      	bne.n	8000c56 <fsm+0x266>
		rgb(100, 0, 0); // RED
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2064      	movs	r0, #100	; 0x64
 8000c52:	f7ff fe63 	bl	800091c <rgb>
	}
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	08006580 	.word	0x08006580
 8000c68:	080064a4 	.word	0x080064a4
 8000c6c:	080064b8 	.word	0x080064b8
 8000c70:	080064c8 	.word	0x080064c8
 8000c74:	00000bb8 	.word	0x00000bb8
 8000c78:	080064d8 	.word	0x080064d8
 8000c7c:	080064e4 	.word	0x080064e4
 8000c80:	080064f4 	.word	0x080064f4
 8000c84:	08006500 	.word	0x08006500
 8000c88:	08006510 	.word	0x08006510
 8000c8c:	08006520 	.word	0x08006520
 8000c90:	08006530 	.word	0x08006530
 8000c94:	0800653c 	.word	0x0800653c
 8000c98:	0800654c 	.word	0x0800654c
 8000c9c:	08006560 	.word	0x08006560
 8000ca0:	08006570 	.word	0x08006570
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <check_Card>:
uint8_t ** data = NULL;
uint8_t numCard = 0;



uint8_t check_Card(uint8_t * readCard){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if(readCard[0] == master[0] && readCard[1] == master[1] && readCard[2] == master[2] && readCard[3] == master[3]){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	22f3      	movs	r2, #243	; 0xf3
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d113      	bne.n	8000ce2 <check_Card+0x3a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2219      	movs	r2, #25
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <check_Card+0x3a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	228e      	movs	r2, #142	; 0x8e
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d107      	bne.n	8000ce2 <check_Card+0x3a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3303      	adds	r3, #3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2213      	movs	r2, #19
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <check_Card+0x3a>
		return 2; // MASTERCARD
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e008      	b.n	8000cf4 <check_Card+0x4c>
	}
	if (search_Card(readCard) >= 0){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 f85f 	bl	8000da8 <search_Card>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	db01      	blt.n	8000cf2 <check_Card+0x4a>
		return 1; // NORMAL CARD
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <check_Card+0x4c>
	}
	return 0; // CARD not exist
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <add_Card>:

void add_Card(uint8_t * readCard){
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	data = (uint8_t **)realloc(data, (numCard + 1) * sizeof(uint8_t *));
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <add_Card+0xa4>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <add_Card+0xa8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f005 fb5e 	bl	80063d4 <realloc>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <add_Card+0xa4>)
 8000d1c:	601a      	str	r2, [r3, #0]
	data[numCard] = (uint8_t *)malloc(4 * sizeof(int));
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <add_Card+0xa4>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <add_Card+0xa8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	18d4      	adds	r4, r2, r3
 8000d2a:	2010      	movs	r0, #16
 8000d2c:	f005 fa84 	bl	8006238 <malloc>
 8000d30:	0003      	movs	r3, r0
 8000d32:	6023      	str	r3, [r4, #0]
	data[numCard][0] = readCard[0];
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <add_Card+0xa4>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <add_Card+0xa8>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	18d3      	adds	r3, r2, r3
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	701a      	strb	r2, [r3, #0]
	data[numCard][1] = readCard[1];
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <add_Card+0xa4>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <add_Card+0xa8>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	7852      	ldrb	r2, [r2, #1]
 8000d5c:	701a      	strb	r2, [r3, #0]
	data[numCard][2] = readCard[2];
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <add_Card+0xa4>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <add_Card+0xa8>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	7892      	ldrb	r2, [r2, #2]
 8000d72:	701a      	strb	r2, [r3, #0]
	data[numCard][3] = readCard[3];
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <add_Card+0xa4>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <add_Card+0xa8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	18d3      	adds	r3, r2, r3
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3303      	adds	r3, #3
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	78d2      	ldrb	r2, [r2, #3]
 8000d88:	701a      	strb	r2, [r3, #0]
	numCard++;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <add_Card+0xa8>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <add_Card+0xa8>)
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b003      	add	sp, #12
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	200000a4 	.word	0x200000a4
 8000da4:	200000a8 	.word	0x200000a8

08000da8 <search_Card>:

int8_t search_Card(uint8_t *readCard){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < numCard; i++){
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e037      	b.n	8000e26 <search_Card+0x7e>
		if(data[i][0] == readCard[0] && data[i][1] == readCard[1] && data[i][2] == readCard[2] && data[i][3] == readCard[3] ){
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <search_Card+0x98>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d129      	bne.n	8000e20 <search_Card+0x78>
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <search_Card+0x98>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3301      	adds	r3, #1
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d11c      	bne.n	8000e20 <search_Card+0x78>
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <search_Card+0x98>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	18d3      	adds	r3, r2, r3
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3302      	adds	r3, #2
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3302      	adds	r3, #2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10f      	bne.n	8000e20 <search_Card+0x78>
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <search_Card+0x98>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3303      	adds	r3, #3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d102      	bne.n	8000e20 <search_Card+0x78>
			return i;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	e00a      	b.n	8000e36 <search_Card+0x8e>
	for(int i = 0; i < numCard; i++){
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <search_Card+0x9c>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	dbc1      	blt.n	8000db6 <search_Card+0xe>
		}
	}
	return -1; // can't searched
 8000e32:	2301      	movs	r3, #1
 8000e34:	425b      	negs	r3, r3
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200000a4 	.word	0x200000a4
 8000e44:	200000a8 	.word	0x200000a8

08000e48 <num_Card>:
uint8_t num_Card(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	return numCard;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <num_Card+0x10>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	200000a8 	.word	0x200000a8

08000e5c <delete_Card>:
uint8_t delete_Card(uint8_t * readCard){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	int index = search_Card(readCard);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff9e 	bl	8000da8 <search_Card>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	60bb      	str	r3, [r7, #8]
	if(index == -1){
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3301      	adds	r3, #1
 8000e74:	d101      	bne.n	8000e7a <delete_Card+0x1e>
		return 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e034      	b.n	8000ee4 <delete_Card+0x88>
	}
	free(data[index]);
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <delete_Card+0x90>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f005 f9e0 	bl	800624c <free>
	for (int i = index; i < numCard - 1; i++) {
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e00f      	b.n	8000eb2 <delete_Card+0x56>
	    data[i] = data[i + 1];
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <delete_Card+0x90>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	18d2      	adds	r2, r2, r3
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <delete_Card+0x90>)
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18cb      	adds	r3, r1, r3
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	601a      	str	r2, [r3, #0]
	for (int i = index; i < numCard - 1; i++) {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <delete_Card+0x94>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dbe9      	blt.n	8000e92 <delete_Card+0x36>
	}
	data = (uint8_t **)realloc(data, numCard * sizeof(uint8_t *));
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <delete_Card+0x90>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <delete_Card+0x94>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0010      	movs	r0, r2
 8000ecc:	f005 fa82 	bl	80063d4 <realloc>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <delete_Card+0x90>)
 8000ed4:	601a      	str	r2, [r3, #0]
	numCard--;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <delete_Card+0x94>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <delete_Card+0x94>)
 8000ee0:	701a      	strb	r2, [r3, #0]
	return 1;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000a4 	.word	0x200000a4
 8000ef0:	200000a8 	.word	0x200000a8

08000ef4 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	0002      	movs	r2, r0
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f00:	200f      	movs	r0, #15
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	1dfa      	adds	r2, r7, #7
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	210f      	movs	r1, #15
 8000f0a:	438a      	bics	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	011a      	lsls	r2, r3, #4
 8000f14:	240e      	movs	r4, #14
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f1a:	183b      	adds	r3, r7, r0
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	220c      	movs	r2, #12
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	2108      	movs	r1, #8
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2208      	movs	r2, #8
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f54:	187a      	adds	r2, r7, r1
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <lcd_send_cmd+0x78>)
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	214e      	movs	r1, #78	; 0x4e
 8000f60:	f001 fb84 	bl	800266c <HAL_I2C_Master_Transmit>
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b005      	add	sp, #20
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	20000150 	.word	0x20000150

08000f70 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f7c:	200f      	movs	r0, #15
 8000f7e:	183b      	adds	r3, r7, r0
 8000f80:	1dfa      	adds	r2, r7, #7
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	210f      	movs	r1, #15
 8000f86:	438a      	bics	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	011a      	lsls	r2, r3, #4
 8000f90:	240e      	movs	r4, #14
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	220d      	movs	r2, #13
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fa6:	183b      	adds	r3, r7, r0
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2209      	movs	r2, #9
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	220d      	movs	r2, #13
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2209      	movs	r2, #9
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fd0:	187a      	adds	r2, r7, r1
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <lcd_send_data+0x78>)
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2304      	movs	r3, #4
 8000fda:	214e      	movs	r1, #78	; 0x4e
 8000fdc:	f001 fb46 	bl	800266c <HAL_I2C_Master_Transmit>
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b005      	add	sp, #20
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	20000150 	.word	0x20000150

08000fec <lcd_init>:

void lcd_init (void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000ff0:	2033      	movs	r0, #51	; 0x33
 8000ff2:	f7ff ff7f 	bl	8000ef4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000ff6:	2032      	movs	r0, #50	; 0x32
 8000ff8:	f7ff ff7c 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ffc:	2032      	movs	r0, #50	; 0x32
 8000ffe:	f000 fe67 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001002:	2028      	movs	r0, #40	; 0x28
 8001004:	f7ff ff76 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(50);
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	f000 fe61 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff ff70 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(50);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f000 fe5b 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800101a:	2006      	movs	r0, #6
 800101c:	f7ff ff6a 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(50);
 8001020:	2032      	movs	r0, #50	; 0x32
 8001022:	f000 fe55 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001026:	200c      	movs	r0, #12
 8001028:	f7ff ff64 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(50);
 800102c:	2032      	movs	r0, #50	; 0x32
 800102e:	f000 fe4f 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff ff5e 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(50);
 8001038:	2032      	movs	r0, #50	; 0x32
 800103a:	f000 fe49 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800103e:	2080      	movs	r0, #128	; 0x80
 8001040:	f7ff ff58 	bl	8000ef4 <lcd_send_cmd>
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001052:	e006      	b.n	8001062 <lcd_send_string+0x18>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff87 	bl	8000f70 <lcd_send_data>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f4      	bne.n	8001054 <lcd_send_string+0xa>
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff ff3b 	bl	8000ef4 <lcd_send_cmd>
	HAL_Delay(20);
 800107e:	2014      	movs	r0, #20
 8001080:	f000 fe26 	bl	8001cd0 <HAL_Delay>
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lcd_goto_XY>:

void lcd_goto_XY (int row, int col) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 1) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d106      	bne.n	80010a8 <lcd_goto_XY+0x1e>
        pos_Addr = 0x80 + col; // Địa chỉ cho dòng đầu tiên
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	230f      	movs	r3, #15
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	3a80      	subs	r2, #128	; 0x80
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e005      	b.n	80010b4 <lcd_goto_XY+0x2a>
    } else {
        pos_Addr = 0xC0 + col; // Địa chỉ cho dòng thứ hai
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	230f      	movs	r3, #15
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	3a40      	subs	r2, #64	; 0x40
 80010b2:	701a      	strb	r2, [r3, #0]
    }
    lcd_send_cmd(pos_Addr);
 80010b4:	230f      	movs	r3, #15
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff ff1a 	bl	8000ef4 <lcd_send_cmd>
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b004      	add	sp, #16
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 fd9c 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f86e 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 fa26 	bl	8001524 <MX_GPIO_Init>
  MX_TIM3_Init();
 80010d8:	f000 f942 	bl	8001360 <MX_TIM3_Init>
  MX_DMA_Init();
 80010dc:	f000 fa04 	bl	80014e8 <MX_DMA_Init>
  MX_SPI1_Init();
 80010e0:	f000 f900 	bl	80012e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010e4:	f000 f9d0 	bl	8001488 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010e8:	f000 f8bc 	bl	8001264 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <main+0xd0>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f003 f964 	bl	80043bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <main+0xd0>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f003 fa03 	bl	8004504 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <main+0xd0>)
 8001100:	2104      	movs	r1, #4
 8001102:	0018      	movs	r0, r3
 8001104:	f003 f9fe 	bl	8004504 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <main+0xd0>)
 800110a:	210c      	movs	r1, #12
 800110c:	0018      	movs	r0, r3
 800110e:	f003 f9f9 	bl	8004504 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 8001112:	f7ff ff6b 	bl	8000fec <lcd_init>
  MFRC522_Init();
 8001116:	f7ff fa45 	bl	80005a4 <MFRC522_Init>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <main+0xd4>)
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	0018      	movs	r0, r3
 8001122:	f001 f9e0 	bl	80024e6 <HAL_GPIO_WritePin>

   while (1)
   {
		status_read = MFRC522_Request(PICC_REQIDL, str);
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <main+0xd8>)
 8001128:	0019      	movs	r1, r3
 800112a:	2026      	movs	r0, #38	; 0x26
 800112c:	f7ff fb72 	bl	8000814 <MFRC522_Request>
 8001130:	0003      	movs	r3, r0
 8001132:	001a      	movs	r2, r3
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <main+0xdc>)
 8001136:	701a      	strb	r2, [r3, #0]
		status_read = MFRC522_Anticoll(str);
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0xd8>)
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff fb99 	bl	8000872 <MFRC522_Anticoll>
 8001140:	0003      	movs	r3, r0
 8001142:	001a      	movs	r2, r3
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <main+0xdc>)
 8001146:	701a      	strb	r2, [r3, #0]
		memcpy(readCard, str, 4);
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <main+0xe0>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <main+0xd8>)
 800114c:	0010      	movs	r0, r2
 800114e:	0019      	movs	r1, r3
 8001150:	2304      	movs	r3, #4
 8001152:	001a      	movs	r2, r3
 8001154:	f005 f884 	bl	8006260 <memcpy>

		if(status_read == MI_OK){
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <main+0xdc>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <main+0xac>
			setTimer(1, 60);// buzz
 8001160:	213c      	movs	r1, #60	; 0x3c
 8001162:	2001      	movs	r0, #1
 8001164:	f000 fcb6 	bl	8001ad4 <setTimer>
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 1);
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <main+0xd4>)
 800116a:	2201      	movs	r2, #1
 800116c:	2101      	movs	r1, #1
 800116e:	0018      	movs	r0, r3
 8001170:	f001 f9b9 	bl	80024e6 <HAL_GPIO_WritePin>
		}
		if(timer_flag[1] == 1){
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <main+0xe4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <main+0xc0>
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <main+0xd4>)
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	0018      	movs	r0, r3
 8001184:	f001 f9af 	bl	80024e6 <HAL_GPIO_WritePin>
		}
		fsm(readCard, status_read);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <main+0xdc>)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <main+0xe0>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fc2d 	bl	80009f0 <fsm>
		status_read = MFRC522_Request(PICC_REQIDL, str);
 8001196:	e7c6      	b.n	8001126 <main+0x5e>
 8001198:	200000c4 	.word	0x200000c4
 800119c:	48001400 	.word	0x48001400
 80011a0:	20000298 	.word	0x20000298
 80011a4:	20000230 	.word	0x20000230
 80011a8:	200001a4 	.word	0x200001a4
 80011ac:	20000004 	.word	0x20000004

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b095      	sub	sp, #84	; 0x54
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	2420      	movs	r4, #32
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	0018      	movs	r0, r3
 80011bc:	2330      	movs	r3, #48	; 0x30
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f005 f856 	bl	8006272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	2310      	movs	r3, #16
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	2310      	movs	r3, #16
 80011ce:	001a      	movs	r2, r3
 80011d0:	2100      	movs	r1, #0
 80011d2:	f005 f84e 	bl	8006272 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d6:	003b      	movs	r3, r7
 80011d8:	0018      	movs	r0, r3
 80011da:	2310      	movs	r3, #16
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f005 f847 	bl	8006272 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	0021      	movs	r1, r4
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2202      	movs	r2, #2
 80011ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2201      	movs	r2, #1
 80011f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2210      	movs	r2, #16
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fe33 	bl	8002e6c <HAL_RCC_OscConfig>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800120a:	f000 fa25 	bl	8001658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	2110      	movs	r1, #16
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2207      	movs	r2, #7
 8001214:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2100      	movs	r1, #0
 800122c:	0018      	movs	r0, r3
 800122e:	f002 f937 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001232:	1e03      	subs	r3, r0, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001236:	f000 fa0f 	bl	8001658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800123a:	003b      	movs	r3, r7
 800123c:	2221      	movs	r2, #33	; 0x21
 800123e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001240:	003b      	movs	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001246:	003b      	movs	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	003b      	movs	r3, r7
 800124e:	0018      	movs	r0, r3
 8001250:	f002 fa6a 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001258:	f000 f9fe 	bl	8001658 <Error_Handler>
  }
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b015      	add	sp, #84	; 0x54
 8001262:	bd90      	pop	{r4, r7, pc}

08001264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_I2C1_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_I2C1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MX_I2C1_Init+0x7c>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_I2C1_Init+0x74>)
 800127c:	2201      	movs	r2, #1
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 f93d 	bl	8002520 <HAL_I2C_Init>
 80012a6:	1e03      	subs	r3, r0, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012aa:	f000 f9d5 	bl	8001658 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	0018      	movs	r0, r3
 80012b4:	f001 fd42 	bl	8002d3c <HAL_I2CEx_ConfigAnalogFilter>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f000 f9cc 	bl	8001658 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MX_I2C1_Init+0x74>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	0018      	movs	r0, r3
 80012c6:	f001 fd85 	bl	8002dd4 <HAL_I2CEx_ConfigDigitalFilter>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 f9c3 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000150 	.word	0x20000150
 80012dc:	40005400 	.word	0x40005400
 80012e0:	2000090e 	.word	0x2000090e

080012e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_SPI1_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_SPI1_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_SPI1_Init+0x74>)
 80012f0:	2282      	movs	r2, #130	; 0x82
 80012f2:	0052      	lsls	r2, r2, #1
 80012f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI1_Init+0x74>)
 80012fe:	22e0      	movs	r2, #224	; 0xe0
 8001300:	00d2      	lsls	r2, r2, #3
 8001302:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_SPI1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI1_Init+0x74>)
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_SPI1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI1_Init+0x74>)
 8001332:	2207      	movs	r2, #7
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_SPI1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI1_Init+0x74>)
 800133e:	2208      	movs	r2, #8
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <MX_SPI1_Init+0x74>)
 8001344:	0018      	movs	r0, r3
 8001346:	f002 fabd 	bl	80038c4 <HAL_SPI_Init>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800134e:	f000 f983 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000234 	.word	0x20000234
 800135c:	40013000 	.word	0x40013000

08001360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	2328      	movs	r3, #40	; 0x28
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	0018      	movs	r0, r3
 800136c:	2310      	movs	r3, #16
 800136e:	001a      	movs	r2, r3
 8001370:	2100      	movs	r1, #0
 8001372:	f004 ff7e 	bl	8006272 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	2320      	movs	r3, #32
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	0018      	movs	r0, r3
 800137c:	2308      	movs	r3, #8
 800137e:	001a      	movs	r2, r3
 8001380:	2100      	movs	r1, #0
 8001382:	f004 ff76 	bl	8006272 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	0018      	movs	r0, r3
 800138a:	231c      	movs	r3, #28
 800138c:	001a      	movs	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	f004 ff6f 	bl	8006272 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <MX_TIM3_Init+0x11c>)
 8001396:	4a3a      	ldr	r2, [pc, #232]	; (8001480 <MX_TIM3_Init+0x120>)
 8001398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <MX_TIM3_Init+0x11c>)
 800139c:	4a39      	ldr	r2, [pc, #228]	; (8001484 <MX_TIM3_Init+0x124>)
 800139e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <MX_TIM3_Init+0x11c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80013a6:	4b35      	ldr	r3, [pc, #212]	; (800147c <MX_TIM3_Init+0x11c>)
 80013a8:	2263      	movs	r2, #99	; 0x63
 80013aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <MX_TIM3_Init+0x11c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b32      	ldr	r3, [pc, #200]	; (800147c <MX_TIM3_Init+0x11c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <MX_TIM3_Init+0x11c>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f002 ffae 	bl	800431c <HAL_TIM_Base_Init>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013c4:	f000 f948 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c8:	2128      	movs	r1, #40	; 0x28
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	0152      	lsls	r2, r2, #5
 80013d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d2:	187a      	adds	r2, r7, r1
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_TIM3_Init+0x11c>)
 80013d6:	0011      	movs	r1, r2
 80013d8:	0018      	movs	r0, r3
 80013da:	f003 faf3 	bl	80049c4 <HAL_TIM_ConfigClockSource>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013e2:	f000 f939 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_TIM3_Init+0x11c>)
 80013e8:	0018      	movs	r0, r3
 80013ea:	f003 f833 	bl	8004454 <HAL_TIM_PWM_Init>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013f2:	f000 f931 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2120      	movs	r1, #32
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	187a      	adds	r2, r7, r1
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM3_Init+0x11c>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f003 fef0 	bl	80051f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001414:	f000 f920 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2260      	movs	r2, #96	; 0x60
 800141c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001430:	1d39      	adds	r1, r7, #4
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_TIM3_Init+0x11c>)
 8001434:	2200      	movs	r2, #0
 8001436:	0018      	movs	r0, r3
 8001438:	f003 f9fe 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001440:	f000 f90a 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001444:	1d39      	adds	r1, r7, #4
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_TIM3_Init+0x11c>)
 8001448:	2204      	movs	r2, #4
 800144a:	0018      	movs	r0, r3
 800144c:	f003 f9f4 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8001454:	f000 f900 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001458:	1d39      	adds	r1, r7, #4
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_TIM3_Init+0x11c>)
 800145c:	220c      	movs	r2, #12
 800145e:	0018      	movs	r0, r3
 8001460:	f003 f9ea 	bl	8004838 <HAL_TIM_PWM_ConfigChannel>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8001468:	f000 f8f6 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <MX_TIM3_Init+0x11c>)
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fa16 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b00e      	add	sp, #56	; 0x38
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200000c4 	.word	0x200000c4
 8001480:	40000400 	.word	0x40000400
 8001484:	0000031f 	.word	0x0000031f

08001488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <MX_USART1_UART_Init+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 8001494:	22e1      	movs	r2, #225	; 0xe1
 8001496:	0252      	lsls	r2, r2, #9
 8001498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f003 fef7 	bl	80052c0 <HAL_UART_Init>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014d6:	f000 f8bf 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001a8 	.word	0x200001a8
 80014e4:	40013800 	.word	0x40013800

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_DMA_Init+0x38>)
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_DMA_Init+0x38>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_DMA_Init+0x38>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200a      	movs	r0, #10
 800150c:	f000 fcb0 	bl	8001e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001510:	200a      	movs	r0, #10
 8001512:	f000 fcc2 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40021000 	.word	0x40021000

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	240c      	movs	r4, #12
 800152c:	193b      	adds	r3, r7, r4
 800152e:	0018      	movs	r0, r3
 8001530:	2314      	movs	r3, #20
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f004 fe9c 	bl	8006272 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <MX_GPIO_Init+0x128>)
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <MX_GPIO_Init+0x128>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	03c9      	lsls	r1, r1, #15
 8001544:	430a      	orrs	r2, r1
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	4b40      	ldr	r3, [pc, #256]	; (800164c <MX_GPIO_Init+0x128>)
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	03db      	lsls	r3, r3, #15
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <MX_GPIO_Init+0x128>)
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <MX_GPIO_Init+0x128>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	0289      	lsls	r1, r1, #10
 8001560:	430a      	orrs	r2, r1
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <MX_GPIO_Init+0x128>)
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <MX_GPIO_Init+0x128>)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <MX_GPIO_Init+0x128>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	02c9      	lsls	r1, r1, #11
 800157c:	430a      	orrs	r2, r1
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <MX_GPIO_Init+0x128>)
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	02db      	lsls	r3, r3, #11
 8001588:	4013      	ands	r3, r2
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_GPIO_Init+0x12c>)
 8001590:	2200      	movs	r2, #0
 8001592:	2101      	movs	r1, #1
 8001594:	0018      	movs	r0, r3
 8001596:	f000 ffa6 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_RESET_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 800159a:	2390      	movs	r3, #144	; 0x90
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	2200      	movs	r2, #0
 80015a0:	2111      	movs	r1, #17
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 ff9f 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <MX_GPIO_Init+0x130>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	2108      	movs	r1, #8
 80015ae:	0018      	movs	r0, r3
 80015b0:	f000 ff99 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	2201      	movs	r2, #1
 80015be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80015cc:	193b      	adds	r3, r7, r4
 80015ce:	4a20      	ldr	r2, [pc, #128]	; (8001650 <MX_GPIO_Init+0x12c>)
 80015d0:	0019      	movs	r1, r3
 80015d2:	0010      	movs	r0, r2
 80015d4:	f000 fe02 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_RESET_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin|RC522_CS_Pin;
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	2211      	movs	r2, #17
 80015dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	2201      	movs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	193a      	adds	r2, r7, r4
 80015f2:	2390      	movs	r3, #144	; 0x90
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f000 fdef 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	220a      	movs	r2, #10
 8001602:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	193b      	adds	r3, r7, r4
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2201      	movs	r2, #1
 800160e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	193a      	adds	r2, r7, r4
 8001612:	2390      	movs	r3, #144	; 0x90
 8001614:	05db      	lsls	r3, r3, #23
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f000 fddf 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 800161e:	0021      	movs	r1, r4
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2208      	movs	r2, #8
 8001624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2201      	movs	r2, #1
 800162a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001638:	187b      	adds	r3, r7, r1
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <MX_GPIO_Init+0x130>)
 800163c:	0019      	movs	r1, r3
 800163e:	0010      	movs	r0, r2
 8001640:	f000 fdcc 	bl	80021dc <HAL_GPIO_Init>

}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b009      	add	sp, #36	; 0x24
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	48001400 	.word	0x48001400
 8001654:	48000400 	.word	0x48000400

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_MspInit+0x44>)
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_MspInit+0x44>)
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	619a      	str	r2, [r3, #24]
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_MspInit+0x44>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2201      	movs	r2, #1
 800167c:	4013      	ands	r3, r2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x44>)
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_MspInit+0x44>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0549      	lsls	r1, r1, #21
 800168c:	430a      	orrs	r2, r1
 800168e:	61da      	str	r2, [r3, #28]
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_MspInit+0x44>)
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	055b      	lsls	r3, r3, #21
 8001698:	4013      	ands	r3, r2
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b08b      	sub	sp, #44	; 0x2c
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	2414      	movs	r4, #20
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	0018      	movs	r0, r3
 80016ba:	2314      	movs	r3, #20
 80016bc:	001a      	movs	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	f004 fdd7 	bl	8006272 <memset>
  if(hi2c->Instance==I2C1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_I2C_MspInit+0x94>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d133      	bne.n	8001736 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_I2C_MspInit+0x98>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_I2C_MspInit+0x98>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0289      	lsls	r1, r1, #10
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_I2C_MspInit+0x98>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	029b      	lsls	r3, r3, #10
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	22c0      	movs	r2, #192	; 0xc0
 80016ee:	00d2      	lsls	r2, r2, #3
 80016f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	0021      	movs	r1, r4
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2212      	movs	r2, #18
 80016f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2203      	movs	r2, #3
 8001704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2204      	movs	r2, #4
 800170a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	187a      	adds	r2, r7, r1
 800170e:	2390      	movs	r3, #144	; 0x90
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f000 fd61 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_I2C_MspInit+0x98>)
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_I2C_MspInit+0x98>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0389      	lsls	r1, r1, #14
 8001724:	430a      	orrs	r2, r1
 8001726:	61da      	str	r2, [r3, #28]
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_I2C_MspInit+0x98>)
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	039b      	lsls	r3, r3, #14
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b00b      	add	sp, #44	; 0x2c
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	40005400 	.word	0x40005400
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	; 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	2414      	movs	r4, #20
 8001752:	193b      	adds	r3, r7, r4
 8001754:	0018      	movs	r0, r3
 8001756:	2314      	movs	r3, #20
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f004 fd89 	bl	8006272 <memset>
  if(hspi->Instance==SPI1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <HAL_SPI_MspInit+0xa0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d13a      	bne.n	80017e0 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_SPI_MspInit+0xa4>)
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_SPI_MspInit+0xa4>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0149      	lsls	r1, r1, #5
 8001774:	430a      	orrs	r2, r1
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_SPI_MspInit+0xa4>)
 800177a:	699a      	ldr	r2, [r3, #24]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_SPI_MspInit+0xa4>)
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_SPI_MspInit+0xa4>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0289      	lsls	r1, r1, #10
 8001790:	430a      	orrs	r2, r1
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_SPI_MspInit+0xa4>)
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017a2:	0021      	movs	r1, r4
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	22e0      	movs	r2, #224	; 0xe0
 80017a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2202      	movs	r2, #2
 80017ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2203      	movs	r2, #3
 80017ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	187a      	adds	r2, r7, r1
 80017c4:	2390      	movs	r3, #144	; 0x90
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	0011      	movs	r1, r2
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 fd06 	bl	80021dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2019      	movs	r0, #25
 80017d6:	f000 fb4b 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017da:	2019      	movs	r0, #25
 80017dc:	f000 fb5d 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b00b      	add	sp, #44	; 0x2c
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	40013000 	.word	0x40013000
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_TIM_Base_MspInit+0xa0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d141      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001808:	2102      	movs	r1, #2
 800180a:	430a      	orrs	r2, r1
 800180c:	61da      	str	r2, [r3, #28]
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_TIM_Base_MspInit+0xa4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 800181c:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_TIM_Base_MspInit+0xac>)
 800181e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001822:	2210      	movs	r2, #16
 8001824:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	0052      	lsls	r2, r2, #1
 8001838:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001850:	0018      	movs	r0, r3
 8001852:	f000 fb3f 	bl	8001ed4 <HAL_DMA_Init>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d001      	beq.n	800185e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800185a:	f7ff fefd 	bl	8001658 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 800186e:	621a      	str	r2, [r3, #32]
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0xa8>)
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2010      	movs	r0, #16
 800187c:	f000 faf8 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001880:	2010      	movs	r0, #16
 8001882:	f000 fb0a 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40000400 	.word	0x40000400
 8001894:	40021000 	.word	0x40021000
 8001898:	2000010c 	.word	0x2000010c
 800189c:	40020030 	.word	0x40020030

080018a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	240c      	movs	r4, #12
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f004 fcdd 	bl	8006272 <memset>
  if(htim->Instance==TIM3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a15      	ldr	r2, [pc, #84]	; (8001914 <HAL_TIM_MspPostInit+0x74>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d123      	bne.n	800190a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_TIM_MspPostInit+0x78>)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_TIM_MspPostInit+0x78>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	02c9      	lsls	r1, r1, #11
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_TIM_MspPostInit+0x78>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	02db      	lsls	r3, r3, #11
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 80018de:	0021      	movs	r1, r4
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2232      	movs	r2, #50	; 0x32
 80018e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2202      	movs	r2, #2
 80018ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2201      	movs	r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_TIM_MspPostInit+0x7c>)
 8001902:	0019      	movs	r1, r3
 8001904:	0010      	movs	r0, r2
 8001906:	f000 fc69 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b009      	add	sp, #36	; 0x24
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40000400 	.word	0x40000400
 8001918:	40021000 	.word	0x40021000
 800191c:	48000400 	.word	0x48000400

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	2414      	movs	r4, #20
 800192a:	193b      	adds	r3, r7, r4
 800192c:	0018      	movs	r0, r3
 800192e:	2314      	movs	r3, #20
 8001930:	001a      	movs	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	f004 fc9d 	bl	8006272 <memset>
  if(huart->Instance==USART1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <HAL_UART_MspInit+0xa0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d139      	bne.n	80019b6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	01c9      	lsls	r1, r1, #7
 800194c:	430a      	orrs	r2, r1
 800194e:	619a      	str	r2, [r3, #24]
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	01db      	lsls	r3, r3, #7
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	02c9      	lsls	r1, r1, #11
 8001968:	430a      	orrs	r2, r1
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0xa4>)
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	02db      	lsls	r3, r3, #11
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197a:	0021      	movs	r1, r4
 800197c:	187b      	adds	r3, r7, r1
 800197e:	22c0      	movs	r2, #192	; 0xc0
 8001980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2202      	movs	r2, #2
 8001986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2203      	movs	r2, #3
 8001992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	187b      	adds	r3, r7, r1
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_UART_MspInit+0xa8>)
 800199e:	0019      	movs	r1, r3
 80019a0:	0010      	movs	r0, r2
 80019a2:	f000 fc1b 	bl	80021dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	201b      	movs	r0, #27
 80019ac:	f000 fa60 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b0:	201b      	movs	r0, #27
 80019b2:	f000 fa72 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b00b      	add	sp, #44	; 0x2c
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48000400 	.word	0x48000400

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f952 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 fb2b 	bl	800205e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	2000010c 	.word	0x2000010c

08001a14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <TIM3_IRQHandler+0x14>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 fe1e 	bl	800465c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	200000c4 	.word	0x200000c4

08001a2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <SPI1_IRQHandler+0x14>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f002 f9e0 	bl	8003df8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000234 	.word	0x20000234

08001a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <USART1_IRQHandler+0x14>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f003 fd2c 	bl	80054a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	200001a8 	.word	0x200001a8

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f004 fbaa 	bl	80061e4 <__errno>
 8001a90:	0003      	movs	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	425b      	negs	r3, r3
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	18d2      	adds	r2, r2, r3
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b006      	add	sp, #24
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20001000 	.word	0x20001000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200000ac 	.word	0x200000ac
 8001ac4:	200002c0 	.word	0x200002c0

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <setTimer>:


int counter[3] = {0, 0, 0};
int timer_flag[3] = {0, 0, 1};// FLAG[2] = 1 TO READY READ BUTTON
									// FLAG[4] = 1 TO READY READ CARD
void setTimer(int timer, int duration){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7fe fba2 	bl	800022c <__divsi3>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	0019      	movs	r1, r3
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <setTimer+0x34>)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <setTimer+0x38>)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	2100      	movs	r1, #0
 8001afc:	50d1      	str	r1, [r2, r3]
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	200000b0 	.word	0x200000b0
 8001b0c:	20000004 	.word	0x20000004

08001b10 <timer_run>:
void timer_run(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	e01c      	b.n	8001b56 <timer_run+0x46>
		if(counter[i] > 0){
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <timer_run+0x58>)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dd13      	ble.n	8001b50 <timer_run+0x40>
			counter[i]--;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <timer_run+0x58>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	58d3      	ldr	r3, [r2, r3]
 8001b30:	1e59      	subs	r1, r3, #1
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <timer_run+0x58>)
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <timer_run+0x58>)
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	58d3      	ldr	r3, [r2, r3]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc04      	bgt.n	8001b50 <timer_run+0x40>
				timer_flag[i] = 1;
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <timer_run+0x5c>)
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 3; i++){
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	dddf      	ble.n	8001b1c <timer_run+0xc>
		}
	}
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	200000b0 	.word	0x200000b0
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8001b78:	f7fe feee 	bl	8000958 <getKeyinput>
	timer_run();
 8001b7c:	f7ff ffc8 	bl	8001b10 <timer_run>
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <sendDataToESP32>:
 *  Created on: Nov 17, 2024
 *      Author: HOME
 */
#include "uart_ESP.h"

void sendDataToESP32(char *data) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)data, strlen(data), HAL_MAX_DELAY); // Gửi dữ liệu qua UART
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fab8 	bl	8000108 <strlen>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <sendDataToESP32+0x28>)
 8001ba4:	f003 fbe0 	bl	8005368 <HAL_UART_Transmit>
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200001a8 	.word	0x200001a8

08001bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb8:	f7ff ff86 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be2:	f004 fb05 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff fa6f 	bl	80010c8 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   r0, =_estack
 8001bec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001bf8:	080065d4 	.word	0x080065d4
  ldr r2, =_sbss
 8001bfc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c00:	200002bc 	.word	0x200002bc

08001c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_IRQHandler>
	...

08001c08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_Init+0x24>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_Init+0x24>)
 8001c12:	2110      	movs	r1, #16
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f809 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1e:	f7ff fd21 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0019      	movs	r1, r3
 8001c42:	23fa      	movs	r3, #250	; 0xfa
 8001c44:	0098      	lsls	r0, r3, #2
 8001c46:	f7fe fa67 	bl	8000118 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0020      	movs	r0, r4
 8001c50:	f7fe fa62 	bl	8000118 <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f92f 	bl	8001eba <HAL_SYSTICK_Config>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e00f      	b.n	8001c84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d80b      	bhi.n	8001c82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	425b      	negs	r3, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f8fc 	bl	8001e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_InitTick+0x64>)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b003      	add	sp, #12
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000014 	.word	0x20000014
 8001c94:	20000010 	.word	0x20000010

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	18d2      	adds	r2, r2, r3
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	20000014 	.word	0x20000014
 8001cb8:	200002a8 	.word	0x200002a8

08001cbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	200002a8 	.word	0x200002a8

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	001a      	movs	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	189b      	adds	r3, r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b004      	add	sp, #16
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	20000014 	.word	0x20000014

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	0002      	movs	r2, r0
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2a:	d809      	bhi.n	8001d40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	001a      	movs	r2, r3
 8001d32:	231f      	movs	r3, #31
 8001d34:	401a      	ands	r2, r3
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_EnableIRQ+0x30>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4091      	lsls	r1, r2
 8001d3c:	000a      	movs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
  }
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	0002      	movs	r2, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d60:	d828      	bhi.n	8001db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d62:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <__NVIC_SetPriority+0xd4>)
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	33c0      	adds	r3, #192	; 0xc0
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	589b      	ldr	r3, [r3, r2]
 8001d72:	1dfa      	adds	r2, r7, #7
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	0011      	movs	r1, r2
 8001d78:	2203      	movs	r2, #3
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	21ff      	movs	r1, #255	; 0xff
 8001d80:	4091      	lsls	r1, r2
 8001d82:	000a      	movs	r2, r1
 8001d84:	43d2      	mvns	r2, r2
 8001d86:	401a      	ands	r2, r3
 8001d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	401a      	ands	r2, r3
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	2303      	movs	r3, #3
 8001d9a:	4003      	ands	r3, r0
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da0:	481f      	ldr	r0, [pc, #124]	; (8001e20 <__NVIC_SetPriority+0xd4>)
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	430a      	orrs	r2, r1
 8001dac:	33c0      	adds	r3, #192	; 0xc0
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001db2:	e031      	b.n	8001e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <__NVIC_SetPriority+0xd8>)
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	0019      	movs	r1, r3
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	3b08      	subs	r3, #8
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	3304      	adds	r3, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1dfa      	adds	r2, r7, #7
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	00d2      	lsls	r2, r2, #3
 8001dda:	21ff      	movs	r1, #255	; 0xff
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	43d2      	mvns	r2, r2
 8001de2:	401a      	ands	r2, r3
 8001de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	401a      	ands	r2, r3
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	2303      	movs	r3, #3
 8001df6:	4003      	ands	r3, r0
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <__NVIC_SetPriority+0xd8>)
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	001c      	movs	r4, r3
 8001e04:	230f      	movs	r3, #15
 8001e06:	4023      	ands	r3, r4
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	3306      	adds	r3, #6
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	18c3      	adds	r3, r0, r3
 8001e14:	3304      	adds	r3, #4
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	045b      	lsls	r3, r3, #17
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d301      	bcc.n	8001e40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e010      	b.n	8001e62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <SysTick_Config+0x44>)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	3a01      	subs	r2, #1
 8001e46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e48:	2301      	movs	r3, #1
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff ff7c 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x44>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x44>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	1c02      	adds	r2, r0, #0
 8001e80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ff33 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ffaf 	bl	8001e28 <SysTick_Config>
 8001eca:	0003      	movs	r3, r0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e036      	b.n	8001f58 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2221      	movs	r2, #33	; 0x21
 8001eee:	2102      	movs	r1, #2
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_DMA_Init+0x8c>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f932 	bl	80021a4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2221      	movs	r2, #33	; 0x21
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b004      	add	sp, #16
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	ffffc00f 	.word	0xffffc00f

08001f64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2221      	movs	r2, #33	; 0x21
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e020      	b.n	8001fcc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	210e      	movs	r1, #14
 8001f96:	438a      	bics	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2221      	movs	r2, #33	; 0x21
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	210f      	movs	r1, #15
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d006      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e028      	b.n	8002050 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	210e      	movs	r1, #14
 800200a:	438a      	bics	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	438a      	bics	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	2101      	movs	r1, #1
 8002028:	4091      	lsls	r1, r2
 800202a:	000a      	movs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2221      	movs	r2, #33	; 0x21
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	0010      	movs	r0, r2
 800204e:	4798      	blx	r3
    }
  }
  return status;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2204      	movs	r2, #4
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	d024      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x72>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2204      	movs	r2, #4
 800208a:	4013      	ands	r3, r2
 800208c:	d020      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d107      	bne.n	80020aa <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2104      	movs	r1, #4
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	2104      	movs	r1, #4
 80020b4:	4091      	lsls	r1, r2
 80020b6:	000a      	movs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x66>
 80020c2:	e06a      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	0010      	movs	r0, r2
 80020cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020ce:	e064      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	2202      	movs	r2, #2
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	d02b      	beq.n	8002138 <HAL_DMA_IRQHandler+0xda>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d027      	beq.n	8002138 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2220      	movs	r2, #32
 80020f0:	4013      	ands	r3, r2
 80020f2:	d10b      	bne.n	800210c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	210a      	movs	r1, #10
 8002100:	438a      	bics	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2221      	movs	r2, #33	; 0x21
 8002108:	2101      	movs	r1, #1
 800210a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2102      	movs	r1, #2
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d036      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	0010      	movs	r0, r2
 8002134:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002136:	e030      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2208      	movs	r2, #8
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	d028      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2208      	movs	r2, #8
 800214c:	4013      	ands	r3, r2
 800214e:	d024      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	210e      	movs	r1, #14
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	2101      	movs	r1, #1
 800216a:	4091      	lsls	r1, r2
 800216c:	000a      	movs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2221      	movs	r2, #33	; 0x21
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	0010      	movs	r0, r2
 8002196:	4798      	blx	r3
    }
  }
}
 8002198:	e7ff      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <DMA_CalcBaseAndBitshift+0x30>)
 80021b2:	4694      	mov	ip, r2
 80021b4:	4463      	add	r3, ip
 80021b6:	2114      	movs	r1, #20
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fd ffad 	bl	8000118 <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	009a      	lsls	r2, r3, #2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <DMA_CalcBaseAndBitshift+0x34>)
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	bffdfff8 	.word	0xbffdfff8
 80021d8:	40020000 	.word	0x40020000

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e149      	b.n	8002480 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4091      	lsls	r1, r2
 80021f6:	000a      	movs	r2, r1
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d100      	bne.n	8002204 <HAL_GPIO_Init+0x28>
 8002202:	e13a      	b.n	800247a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	4013      	ands	r3, r2
 800220c:	2b01      	cmp	r3, #1
 800220e:	d005      	beq.n	800221c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2203      	movs	r2, #3
 8002216:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002218:	2b02      	cmp	r3, #2
 800221a:	d130      	bne.n	800227e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	409a      	lsls	r2, r3
 800222a:	0013      	movs	r3, r2
 800222c:	43da      	mvns	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	0013      	movs	r3, r2
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002252:	2201      	movs	r2, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	43da      	mvns	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	2201      	movs	r2, #1
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2203      	movs	r2, #3
 8002284:	4013      	ands	r3, r2
 8002286:	2b03      	cmp	r3, #3
 8002288:	d017      	beq.n	80022ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d123      	bne.n	800230e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	58d3      	ldr	r3, [r2, r3]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2207      	movs	r2, #7
 80022d8:	4013      	ands	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2107      	movs	r1, #7
 80022f2:	400b      	ands	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	6939      	ldr	r1, [r7, #16]
 800230c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	401a      	ands	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	23c0      	movs	r3, #192	; 0xc0
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d100      	bne.n	8002350 <HAL_GPIO_Init+0x174>
 800234e:	e094      	b.n	800247a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002350:	4b51      	ldr	r3, [pc, #324]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002356:	2101      	movs	r1, #1
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	4b4e      	ldr	r3, [pc, #312]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_GPIO_Init+0x2c0>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	589b      	ldr	r3, [r3, r2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2203      	movs	r2, #3
 800237a:	4013      	ands	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	43da      	mvns	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	2390      	movs	r3, #144	; 0x90
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	429a      	cmp	r2, r3
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x1d6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <HAL_GPIO_Init+0x2c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x1d2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x1ce>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023aa:	2305      	movs	r3, #5
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023b2:	2300      	movs	r3, #0
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	2103      	movs	r1, #3
 80023b8:	400a      	ands	r2, r1
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c4:	4935      	ldr	r1, [pc, #212]	; (800249c <HAL_GPIO_Init+0x2c0>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43da      	mvns	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	035b      	lsls	r3, r3, #13
 80023ea:	4013      	ands	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43da      	mvns	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	039b      	lsls	r3, r3, #14
 8002414:	4013      	ands	r3, r2
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43da      	mvns	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	4013      	ands	r3, r2
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43da      	mvns	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	4013      	ands	r3, r2
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	40da      	lsrs	r2, r3
 8002488:	1e13      	subs	r3, r2, #0
 800248a:	d000      	beq.n	800248e <HAL_GPIO_Init+0x2b2>
 800248c:	e6ae      	b.n	80021ec <HAL_GPIO_Init+0x10>
  } 
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b006      	add	sp, #24
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48000800 	.word	0x48000800
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	000a      	movs	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	1cba      	adds	r2, r7, #2
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	4013      	ands	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d0:	230f      	movs	r3, #15
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
  }
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	0008      	movs	r0, r1
 80024f0:	0011      	movs	r1, r2
 80024f2:	1cbb      	adds	r3, r7, #2
 80024f4:	1c02      	adds	r2, r0, #0
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	1c7b      	adds	r3, r7, #1
 80024fa:	1c0a      	adds	r2, r1, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fe:	1c7b      	adds	r3, r7, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	1cbb      	adds	r3, r7, #2
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250e:	e003      	b.n	8002518 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002510:	1cbb      	adds	r3, r7, #2
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e08f      	b.n	8002652 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	5c9b      	ldrb	r3, [r3, r2]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff f8af 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2241      	movs	r2, #65	; 0x41
 8002552:	2124      	movs	r1, #36	; 0x24
 8002554:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	438a      	bics	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	493b      	ldr	r1, [pc, #236]	; (800265c <HAL_I2C_Init+0x13c>)
 8002570:	400a      	ands	r2, r1
 8002572:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4938      	ldr	r1, [pc, #224]	; (8002660 <HAL_I2C_Init+0x140>)
 8002580:	400a      	ands	r2, r1
 8002582:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0209      	lsls	r1, r1, #8
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e007      	b.n	80025ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2184      	movs	r1, #132	; 0x84
 80025a8:	0209      	lsls	r1, r1, #8
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d109      	bne.n	80025ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0109      	lsls	r1, r1, #4
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	e007      	b.n	80025da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4923      	ldr	r1, [pc, #140]	; (8002664 <HAL_I2C_Init+0x144>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4920      	ldr	r1, [pc, #128]	; (8002668 <HAL_I2C_Init+0x148>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	491a      	ldr	r1, [pc, #104]	; (8002660 <HAL_I2C_Init+0x140>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	431a      	orrs	r2, r3
 8002604:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2241      	movs	r2, #65	; 0x41
 800263e:	2120      	movs	r1, #32
 8002640:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2242      	movs	r2, #66	; 0x42
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	f0ffffff 	.word	0xf0ffffff
 8002660:	ffff7fff 	.word	0xffff7fff
 8002664:	fffff7ff 	.word	0xfffff7ff
 8002668:	02008000 	.word	0x02008000

0800266c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	0008      	movs	r0, r1
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	0019      	movs	r1, r3
 800267a:	230a      	movs	r3, #10
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	1c02      	adds	r2, r0, #0
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	2308      	movs	r3, #8
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	1c0a      	adds	r2, r1, #0
 8002688:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2241      	movs	r2, #65	; 0x41
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	d000      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x2c>
 8002696:	e10a      	b.n	80028ae <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2240      	movs	r2, #64	; 0x40
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Master_Transmit+0x3a>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e104      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ae:	f7ff fb05 	bl	8001cbc <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	0219      	lsls	r1, r3, #8
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2319      	movs	r3, #25
 80026c2:	2201      	movs	r2, #1
 80026c4:	f000 f91e 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0ef      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2241      	movs	r2, #65	; 0x41
 80026d4:	2121      	movs	r1, #33	; 0x21
 80026d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2242      	movs	r2, #66	; 0x42
 80026dc:	2110      	movs	r1, #16
 80026de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2208      	movs	r2, #8
 80026f0:	18ba      	adds	r2, r7, r2
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d906      	bls.n	8002714 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	045b      	lsls	r3, r3, #17
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e007      	b.n	8002724 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	049b      	lsls	r3, r3, #18
 8002722:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d027      	beq.n	800277c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	697c      	ldr	r4, [r7, #20]
 8002768:	230a      	movs	r3, #10
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	8819      	ldrh	r1, [r3, #0]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <HAL_I2C_Master_Transmit+0x24c>)
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	0023      	movs	r3, r4
 8002776:	f000 faa7 	bl	8002cc8 <I2C_TransferConfig>
 800277a:	e06f      	b.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	b2da      	uxtb	r2, r3
 8002782:	697c      	ldr	r4, [r7, #20]
 8002784:	230a      	movs	r3, #10
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	8819      	ldrh	r1, [r3, #0]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_I2C_Master_Transmit+0x24c>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	0023      	movs	r3, r4
 8002792:	f000 fa99 	bl	8002cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002796:	e061      	b.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f908 	bl	80029b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e081      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03a      	beq.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d136      	bne.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	0013      	movs	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	f000 f882 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e053      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2bff      	cmp	r3, #255	; 0xff
 8002810:	d911      	bls.n	8002836 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	b2da      	uxtb	r2, r3
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	045c      	lsls	r4, r3, #17
 8002822:	230a      	movs	r3, #10
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	8819      	ldrh	r1, [r3, #0]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	0023      	movs	r3, r4
 8002830:	f000 fa4a 	bl	8002cc8 <I2C_TransferConfig>
 8002834:	e012      	b.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	b2da      	uxtb	r2, r3
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	049c      	lsls	r4, r3, #18
 800284a:	230a      	movs	r3, #10
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	8819      	ldrh	r1, [r3, #0]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	0023      	movs	r3, r4
 8002858:	f000 fa36 	bl	8002cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d198      	bne.n	8002798 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f8e7 	bl	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e01a      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	490b      	ldr	r1, [pc, #44]	; (80028bc <HAL_I2C_Master_Transmit+0x250>)
 800288e:	400a      	ands	r2, r1
 8002890:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2241      	movs	r2, #65	; 0x41
 8002896:	2120      	movs	r1, #32
 8002898:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2242      	movs	r2, #66	; 0x42
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
  }
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b007      	add	sp, #28
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	80002000 	.word	0x80002000
 80028bc:	fe00e800 	.word	0xfe00e800

080028c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d103      	bne.n	80028de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d007      	beq.n	80028fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	619a      	str	r2, [r3, #24]
  }
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	e03a      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f8d3 	bl	8002ac8 <I2C_IsErrorOccurred>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d001      	beq.n	800292a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e040      	b.n	80029ac <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	d02d      	beq.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7ff f9c4 	bl	8001cbc <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d302      	bcc.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d122      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	425a      	negs	r2, r3
 8002956:	4153      	adcs	r3, r2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	001a      	movs	r2, r3
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d113      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	2220      	movs	r2, #32
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2241      	movs	r2, #65	; 0x41
 8002974:	2120      	movs	r1, #32
 8002976:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2242      	movs	r2, #66	; 0x42
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	2100      	movs	r1, #0
 8002986:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00f      	b.n	80029ac <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	425a      	negs	r2, r3
 800299c:	4153      	adcs	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	001a      	movs	r2, r3
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d0b5      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b004      	add	sp, #16
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c0:	e032      	b.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f87d 	bl	8002ac8 <I2C_IsErrorOccurred>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e030      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	d025      	beq.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029dc:	f7ff f96e 	bl	8001cbc <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11a      	bne.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d013      	beq.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	2220      	movs	r2, #32
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2241      	movs	r2, #65	; 0x41
 8002a10:	2120      	movs	r1, #32
 8002a12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2242      	movs	r2, #66	; 0x42
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d1c5      	bne.n	80029c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4c:	e02f      	b.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 f837 	bl	8002ac8 <I2C_IsErrorOccurred>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e02d      	b.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff f92b 	bl	8001cbc <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11a      	bne.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d013      	beq.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2241      	movs	r2, #65	; 0x41
 8002a96:	2120      	movs	r1, #32
 8002a98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2242      	movs	r2, #66	; 0x42
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d1c8      	bne.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2327      	movs	r3, #39	; 0x27
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2210      	movs	r2, #16
 8002af0:	4013      	ands	r3, r2
 8002af2:	d100      	bne.n	8002af6 <I2C_IsErrorOccurred+0x2e>
 8002af4:	e082      	b.n	8002bfc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2210      	movs	r2, #16
 8002afc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002afe:	e060      	b.n	8002bc2 <I2C_IsErrorOccurred+0xfa>
 8002b00:	2427      	movs	r4, #39	; 0x27
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	193a      	adds	r2, r7, r4
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	d058      	beq.n	8002bc2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f8d4 	bl	8001cbc <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d306      	bcc.n	8002b2e <I2C_IsErrorOccurred+0x66>
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	193a      	adds	r2, r7, r4
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d149      	bne.n	8002bc2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b3c:	2013      	movs	r0, #19
 8002b3e:	183b      	adds	r3, r7, r0
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	2142      	movs	r1, #66	; 0x42
 8002b44:	5c52      	ldrb	r2, [r2, r1]
 8002b46:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	401a      	ands	r2, r3
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d126      	bne.n	8002baa <I2C_IsErrorOccurred+0xe2>
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	01db      	lsls	r3, r3, #7
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d021      	beq.n	8002baa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b66:	183b      	adds	r3, r7, r0
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d01d      	beq.n	8002baa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	01c9      	lsls	r1, r1, #7
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b80:	f7ff f89c 	bl	8001cbc <HAL_GetTick>
 8002b84:	0003      	movs	r3, r0
 8002b86:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b88:	e00f      	b.n	8002baa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b8a:	f7ff f897 	bl	8001cbc <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b19      	cmp	r3, #25
 8002b96:	d908      	bls.n	8002baa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ba0:	2327      	movs	r3, #39	; 0x27
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]

              break;
 8002ba8:	e00b      	b.n	8002bc2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2127      	movs	r1, #39	; 0x27
 8002bb6:	187a      	adds	r2, r7, r1
 8002bb8:	1879      	adds	r1, r7, r1
 8002bba:	7809      	ldrb	r1, [r1, #0]
 8002bbc:	7011      	strb	r1, [r2, #0]
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d1e3      	bne.n	8002b8a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d004      	beq.n	8002bda <I2C_IsErrorOccurred+0x112>
 8002bd0:	2327      	movs	r3, #39	; 0x27
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d092      	beq.n	8002b00 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bda:	2327      	movs	r3, #39	; 0x27
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2220      	movs	r2, #32
 8002bea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bf4:	2327      	movs	r3, #39	; 0x27
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d00c      	beq.n	8002c28 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4313      	orrs	r3, r2
 8002c14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	0052      	lsls	r2, r2, #1
 8002c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c20:	2327      	movs	r3, #39	; 0x27
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d00c      	beq.n	8002c4c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2208      	movs	r2, #8
 8002c36:	4313      	orrs	r3, r2
 8002c38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	00d2      	lsls	r2, r2, #3
 8002c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c44:	2327      	movs	r3, #39	; 0x27
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d00c      	beq.n	8002c70 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c68:	2327      	movs	r3, #39	; 0x27
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c70:	2327      	movs	r3, #39	; 0x27
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01d      	beq.n	8002cb6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fe1f 	bl	80028c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	490d      	ldr	r1, [pc, #52]	; (8002cc4 <I2C_IsErrorOccurred+0x1fc>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2241      	movs	r2, #65	; 0x41
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2242      	movs	r2, #66	; 0x42
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002cb6:	2327      	movs	r3, #39	; 0x27
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b00b      	add	sp, #44	; 0x2c
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	fe00e800 	.word	0xfe00e800

08002cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	0008      	movs	r0, r1
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	240a      	movs	r4, #10
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	1c02      	adds	r2, r0, #0
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	2009      	movs	r0, #9
 8002ce0:	183b      	adds	r3, r7, r0
 8002ce2:	1c0a      	adds	r2, r1, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	059b      	lsls	r3, r3, #22
 8002cec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	0419      	lsls	r1, r3, #16
 8002cf4:	23ff      	movs	r3, #255	; 0xff
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cfa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	4313      	orrs	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d12:	0d51      	lsrs	r1, r2, #21
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	00d2      	lsls	r2, r2, #3
 8002d18:	400a      	ands	r2, r1
 8002d1a:	4907      	ldr	r1, [pc, #28]	; (8002d38 <I2C_TransferConfig+0x70>)
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	43d2      	mvns	r2, r2
 8002d20:	401a      	ands	r2, r3
 8002d22:	0011      	movs	r1, r2
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b007      	add	sp, #28
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	03ff63ff 	.word	0x03ff63ff

08002d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2241      	movs	r2, #65	; 0x41
 8002d4a:	5c9b      	ldrb	r3, [r3, r2]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d138      	bne.n	8002dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	5c9b      	ldrb	r3, [r3, r2]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e032      	b.n	8002dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	2101      	movs	r1, #1
 8002d66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2241      	movs	r2, #65	; 0x41
 8002d6c:	2124      	movs	r1, #36	; 0x24
 8002d6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4911      	ldr	r1, [pc, #68]	; (8002dd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2101      	movs	r1, #1
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2241      	movs	r2, #65	; 0x41
 8002db4:	2120      	movs	r1, #32
 8002db6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	ffffefff 	.word	0xffffefff

08002dd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2241      	movs	r2, #65	; 0x41
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d139      	bne.n	8002e5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	5c9b      	ldrb	r3, [r3, r2]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e033      	b.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2241      	movs	r2, #65	; 0x41
 8002e04:	2124      	movs	r1, #36	; 0x24
 8002e06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	438a      	bics	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2241      	movs	r2, #65	; 0x41
 8002e4e:	2120      	movs	r1, #32
 8002e50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2240      	movs	r2, #64	; 0x40
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	fffff0ff 	.word	0xfffff0ff

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e301      	b.n	8003482 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1e>
 8002e88:	e08d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e8a:	4bc3      	ldr	r3, [pc, #780]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	220c      	movs	r2, #12
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00e      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e96:	4bc0      	ldr	r3, [pc, #768]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x64>
 8002ea2:	4bbd      	ldr	r3, [pc, #756]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	025b      	lsls	r3, r3, #9
 8002eaa:	401a      	ands	r2, r3
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4bb8      	ldr	r3, [pc, #736]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	029b      	lsls	r3, r3, #10
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d100      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x56>
 8002ec0:	e070      	b.n	8002fa4 <HAL_RCC_OscConfig+0x138>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d000      	beq.n	8002ecc <HAL_RCC_OscConfig+0x60>
 8002eca:	e06b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2d8      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x7c>
 8002ed8:	4baf      	ldr	r3, [pc, #700]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4bae      	ldr	r3, [pc, #696]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	0249      	lsls	r1, r1, #9
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e02f      	b.n	8002f48 <HAL_RCC_OscConfig+0xdc>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x9e>
 8002ef0:	4ba9      	ldr	r3, [pc, #676]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4ba8      	ldr	r3, [pc, #672]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ef6:	49a9      	ldr	r1, [pc, #676]	; (800319c <HAL_RCC_OscConfig+0x330>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4ba6      	ldr	r3, [pc, #664]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4ba5      	ldr	r3, [pc, #660]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f02:	49a7      	ldr	r1, [pc, #668]	; (80031a0 <HAL_RCC_OscConfig+0x334>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e01e      	b.n	8002f48 <HAL_RCC_OscConfig+0xdc>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d10e      	bne.n	8002f30 <HAL_RCC_OscConfig+0xc4>
 8002f12:	4ba1      	ldr	r3, [pc, #644]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	02c9      	lsls	r1, r1, #11
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b9d      	ldr	r3, [pc, #628]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b9c      	ldr	r3, [pc, #624]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	0249      	lsls	r1, r1, #9
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xdc>
 8002f30:	4b99      	ldr	r3, [pc, #612]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b98      	ldr	r3, [pc, #608]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f36:	4999      	ldr	r1, [pc, #612]	; (800319c <HAL_RCC_OscConfig+0x330>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	4b96      	ldr	r3, [pc, #600]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b95      	ldr	r3, [pc, #596]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f42:	4997      	ldr	r1, [pc, #604]	; (80031a0 <HAL_RCC_OscConfig+0x334>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe feb4 	bl	8001cbc <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5a:	f7fe feaf 	bl	8001cbc <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e28a      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6c:	4b8a      	ldr	r3, [pc, #552]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	029b      	lsls	r3, r3, #10
 8002f74:	4013      	ands	r3, r2
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0xee>
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fe9f 	bl	8001cbc <HAL_GetTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fe9a 	bl	8001cbc <HAL_GetTick>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e275      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b80      	ldr	r3, [pc, #512]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	029b      	lsls	r3, r3, #10
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x118>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x146>
 8002fb0:	e069      	b.n	8003086 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fb2:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fbc:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	220c      	movs	r2, #12
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d11c      	bne.n	8003002 <HAL_RCC_OscConfig+0x196>
 8002fc8:	4b73      	ldr	r3, [pc, #460]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	025b      	lsls	r3, r3, #9
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d116      	bne.n	8003002 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd4:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e24b      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22f8      	movs	r2, #248	; 0xf8
 8002ff0:	4393      	bics	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00da      	lsls	r2, r3, #3
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003000:	e041      	b.n	8003086 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b62      	ldr	r3, [pc, #392]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003010:	2101      	movs	r1, #1
 8003012:	430a      	orrs	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe fe51 	bl	8001cbc <HAL_GetTick>
 800301a:	0003      	movs	r3, r0
 800301c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7fe fe4c 	bl	8001cbc <HAL_GetTick>
 8003024:	0002      	movs	r2, r0
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e227      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2202      	movs	r2, #2
 8003038:	4013      	ands	r3, r2
 800303a:	d0f1      	beq.n	8003020 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	22f8      	movs	r2, #248	; 0xf8
 8003042:	4393      	bics	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00da      	lsls	r2, r3, #3
 800304c:	4b52      	ldr	r3, [pc, #328]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e018      	b.n	8003086 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003054:	4b50      	ldr	r3, [pc, #320]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800305a:	2101      	movs	r1, #1
 800305c:	438a      	bics	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fe2c 	bl	8001cbc <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306a:	f7fe fe27 	bl	8001cbc <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e202      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307c:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2208      	movs	r2, #8
 800308c:	4013      	ands	r3, r2
 800308e:	d036      	beq.n	80030fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d019      	beq.n	80030cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800309a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800309c:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800309e:	2101      	movs	r1, #1
 80030a0:	430a      	orrs	r2, r1
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fe fe0a 	bl	8001cbc <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fe fe05 	bl	8001cbc <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1e0      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d0f1      	beq.n	80030ae <HAL_RCC_OscConfig+0x242>
 80030ca:	e018      	b.n	80030fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d0:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	438a      	bics	r2, r1
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe fdf0 	bl	8001cbc <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fdeb 	bl	8001cbc <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e1c6      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2202      	movs	r2, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	d1f1      	bne.n	80030e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2204      	movs	r2, #4
 8003104:	4013      	ands	r3, r2
 8003106:	d100      	bne.n	800310a <HAL_RCC_OscConfig+0x29e>
 8003108:	e0b4      	b.n	8003274 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	201f      	movs	r0, #31
 800310c:	183b      	adds	r3, r7, r0
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	055b      	lsls	r3, r3, #21
 800311a:	4013      	ands	r3, r2
 800311c:	d110      	bne.n	8003140 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	0549      	lsls	r1, r1, #21
 8003128:	430a      	orrs	r2, r1
 800312a:	61da      	str	r2, [r3, #28]
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	055b      	lsls	r3, r3, #21
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800313a:	183b      	adds	r3, r7, r0
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4013      	ands	r3, r2
 800314a:	d11a      	bne.n	8003182 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x338>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	0049      	lsls	r1, r1, #1
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7fe fdaf 	bl	8001cbc <HAL_GetTick>
 800315e:	0003      	movs	r3, r0
 8003160:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fe fdaa 	bl	8001cbc <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e185      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x338>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4013      	ands	r3, r2
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10e      	bne.n	80031a8 <HAL_RCC_OscConfig+0x33c>
 800318a:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	4b02      	ldr	r3, [pc, #8]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003190:	2101      	movs	r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	621a      	str	r2, [r3, #32]
 8003196:	e035      	b.n	8003204 <HAL_RCC_OscConfig+0x398>
 8003198:	40021000 	.word	0x40021000
 800319c:	fffeffff 	.word	0xfffeffff
 80031a0:	fffbffff 	.word	0xfffbffff
 80031a4:	40007000 	.word	0x40007000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10c      	bne.n	80031ca <HAL_RCC_OscConfig+0x35e>
 80031b0:	4bb6      	ldr	r3, [pc, #728]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	4bb5      	ldr	r3, [pc, #724]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031b6:	2101      	movs	r1, #1
 80031b8:	438a      	bics	r2, r1
 80031ba:	621a      	str	r2, [r3, #32]
 80031bc:	4bb3      	ldr	r3, [pc, #716]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	4bb2      	ldr	r3, [pc, #712]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031c2:	2104      	movs	r1, #4
 80031c4:	438a      	bics	r2, r1
 80031c6:	621a      	str	r2, [r3, #32]
 80031c8:	e01c      	b.n	8003204 <HAL_RCC_OscConfig+0x398>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x380>
 80031d2:	4bae      	ldr	r3, [pc, #696]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	4bad      	ldr	r3, [pc, #692]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031d8:	2104      	movs	r1, #4
 80031da:	430a      	orrs	r2, r1
 80031dc:	621a      	str	r2, [r3, #32]
 80031de:	4bab      	ldr	r3, [pc, #684]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	4baa      	ldr	r3, [pc, #680]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	430a      	orrs	r2, r1
 80031e8:	621a      	str	r2, [r3, #32]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x398>
 80031ec:	4ba7      	ldr	r3, [pc, #668]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	4ba6      	ldr	r3, [pc, #664]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	438a      	bics	r2, r1
 80031f6:	621a      	str	r2, [r3, #32]
 80031f8:	4ba4      	ldr	r3, [pc, #656]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	4ba3      	ldr	r3, [pc, #652]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80031fe:	2104      	movs	r1, #4
 8003200:	438a      	bics	r2, r1
 8003202:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d014      	beq.n	8003236 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe fd56 	bl	8001cbc <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003214:	e009      	b.n	800322a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe fd51 	bl	8001cbc <HAL_GetTick>
 800321a:	0002      	movs	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	4a9b      	ldr	r2, [pc, #620]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e12b      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	4b98      	ldr	r3, [pc, #608]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2202      	movs	r2, #2
 8003230:	4013      	ands	r3, r2
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x3aa>
 8003234:	e013      	b.n	800325e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe fd41 	bl	8001cbc <HAL_GetTick>
 800323a:	0003      	movs	r3, r0
 800323c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	e009      	b.n	8003254 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe fd3c 	bl	8001cbc <HAL_GetTick>
 8003244:	0002      	movs	r2, r0
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	4a91      	ldr	r2, [pc, #580]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e116      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	4b8d      	ldr	r3, [pc, #564]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800325e:	231f      	movs	r3, #31
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	4b87      	ldr	r3, [pc, #540]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800326e:	4989      	ldr	r1, [pc, #548]	; (8003494 <HAL_RCC_OscConfig+0x628>)
 8003270:	400a      	ands	r2, r1
 8003272:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d063      	beq.n	8003346 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d12a      	bne.n	80032dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328a:	4b80      	ldr	r3, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800328c:	2104      	movs	r1, #4
 800328e:	430a      	orrs	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003292:	4b7e      	ldr	r3, [pc, #504]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003296:	4b7d      	ldr	r3, [pc, #500]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003298:	2101      	movs	r1, #1
 800329a:	430a      	orrs	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7fe fd0d 	bl	8001cbc <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032a8:	f7fe fd08 	bl	8001cbc <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0e3      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032ba:	4b74      	ldr	r3, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	2202      	movs	r2, #2
 80032c0:	4013      	ands	r3, r2
 80032c2:	d0f1      	beq.n	80032a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032c4:	4b71      	ldr	r3, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	22f8      	movs	r2, #248	; 0xf8
 80032ca:	4393      	bics	r3, r2
 80032cc:	0019      	movs	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	00da      	lsls	r2, r3, #3
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34
 80032da:	e034      	b.n	8003346 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	3305      	adds	r3, #5
 80032e2:	d111      	bne.n	8003308 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032e4:	4b69      	ldr	r3, [pc, #420]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80032e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80032ea:	2104      	movs	r1, #4
 80032ec:	438a      	bics	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032f0:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	22f8      	movs	r2, #248	; 0xf8
 80032f6:	4393      	bics	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	00da      	lsls	r2, r3, #3
 8003300:	4b62      	ldr	r3, [pc, #392]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003302:	430a      	orrs	r2, r1
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
 8003306:	e01e      	b.n	8003346 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003308:	4b60      	ldr	r3, [pc, #384]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800330a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800330c:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800330e:	2104      	movs	r1, #4
 8003310:	430a      	orrs	r2, r1
 8003312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003314:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003318:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800331a:	2101      	movs	r1, #1
 800331c:	438a      	bics	r2, r1
 800331e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fe fccc 	bl	8001cbc <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800332a:	f7fe fcc7 	bl	8001cbc <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0a2      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d1f1      	bne.n	800332a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d100      	bne.n	8003350 <HAL_RCC_OscConfig+0x4e4>
 800334e:	e097      	b.n	8003480 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b4e      	ldr	r3, [pc, #312]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	220c      	movs	r2, #12
 8003356:	4013      	ands	r3, r2
 8003358:	2b08      	cmp	r3, #8
 800335a:	d100      	bne.n	800335e <HAL_RCC_OscConfig+0x4f2>
 800335c:	e06b      	b.n	8003436 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d14c      	bne.n	8003400 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800336c:	494a      	ldr	r1, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x62c>)
 800336e:	400a      	ands	r2, r1
 8003370:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fca3 	bl	8001cbc <HAL_GetTick>
 8003376:	0003      	movs	r3, r0
 8003378:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fc9e 	bl	8001cbc <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e079      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	049b      	lsls	r3, r3, #18
 8003396:	4013      	ands	r3, r2
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800339a:	4b3c      	ldr	r3, [pc, #240]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	220f      	movs	r2, #15
 80033a0:	4393      	bics	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80033aa:	430a      	orrs	r2, r1
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	; (800349c <HAL_RCC_OscConfig+0x630>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	431a      	orrs	r2, r3
 80033c2:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	0449      	lsls	r1, r1, #17
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fe fc71 	bl	8001cbc <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fc6c 	bl	8001cbc <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e047      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCC_OscConfig+0x620>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	049b      	lsls	r3, r3, #18
 80033fa:	4013      	ands	r3, r2
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x574>
 80033fe:	e03f      	b.n	8003480 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003406:	4924      	ldr	r1, [pc, #144]	; (8003498 <HAL_RCC_OscConfig+0x62c>)
 8003408:	400a      	ands	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fc56 	bl	8001cbc <HAL_GetTick>
 8003410:	0003      	movs	r3, r0
 8003412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe fc51 	bl	8001cbc <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e02c      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	049b      	lsls	r3, r3, #18
 8003430:	4013      	ands	r3, r2
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x5aa>
 8003434:	e024      	b.n	8003480 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e01f      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_OscConfig+0x620>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCC_OscConfig+0x620>)
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	025b      	lsls	r3, r3, #9
 8003454:	401a      	ands	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	429a      	cmp	r2, r3
 800345c:	d10e      	bne.n	800347c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	220f      	movs	r2, #15
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	23f0      	movs	r3, #240	; 0xf0
 8003470:	039b      	lsls	r3, r3, #14
 8003472:	401a      	ands	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b008      	add	sp, #32
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	40021000 	.word	0x40021000
 8003490:	00001388 	.word	0x00001388
 8003494:	efffffff 	.word	0xefffffff
 8003498:	feffffff 	.word	0xfeffffff
 800349c:	ffc2ffff 	.word	0xffc2ffff

080034a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b3      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d911      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b58      	ldr	r3, [pc, #352]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b55      	ldr	r3, [pc, #340]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e09a      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d015      	beq.n	800351c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d006      	beq.n	8003508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034fa:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003500:	21e0      	movs	r1, #224	; 0xe0
 8003502:	00c9      	lsls	r1, r1, #3
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	22f0      	movs	r2, #240	; 0xf0
 800350e:	4393      	bics	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d040      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	4013      	ands	r3, r2
 8003538:	d114      	bne.n	8003564 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06e      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	049b      	lsls	r3, r3, #18
 800354e:	4013      	ands	r3, r2
 8003550:	d108      	bne.n	8003564 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e062      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e05b      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003564:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2203      	movs	r2, #3
 800356a:	4393      	bics	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe fba0 	bl	8001cbc <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003580:	e009      	b.n	8003596 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003582:	f7fe fb9b 	bl	8001cbc <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_RCC_ClockConfig+0x18c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e042      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	220c      	movs	r2, #12
 800359c:	401a      	ands	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1ec      	bne.n	8003582 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d211      	bcs.n	80035da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCC_ClockConfig+0x184>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e020      	b.n	800361c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2204      	movs	r2, #4
 80035e0:	4013      	ands	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_RCC_ClockConfig+0x190>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035f8:	f000 f820 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035fc:	0001      	movs	r1, r0
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x188>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	220f      	movs	r2, #15
 8003606:	4013      	ands	r3, r2
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x194>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	000a      	movs	r2, r1
 800360e:	40da      	lsrs	r2, r3
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x198>)
 8003612:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003614:	2000      	movs	r0, #0
 8003616:	f7fe fb0b 	bl	8001c30 <HAL_InitTick>
  
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40022000 	.word	0x40022000
 8003628:	40021000 	.word	0x40021000
 800362c:	00001388 	.word	0x00001388
 8003630:	fffff8ff 	.word	0xfffff8ff
 8003634:	08006594 	.word	0x08006594
 8003638:	20000000 	.word	0x20000000

0800363c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	220c      	movs	r2, #12
 8003660:	4013      	ands	r3, r2
 8003662:	2b04      	cmp	r3, #4
 8003664:	d002      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x30>
 8003666:	2b08      	cmp	r3, #8
 8003668:	d003      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x36>
 800366a:	e02c      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800366e:	613b      	str	r3, [r7, #16]
      break;
 8003670:	e02c      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	0c9b      	lsrs	r3, r3, #18
 8003676:	220f      	movs	r2, #15
 8003678:	4013      	ands	r3, r2
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800367c:	5cd3      	ldrb	r3, [r2, r3]
 800367e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	220f      	movs	r2, #15
 8003686:	4013      	ands	r3, r2
 8003688:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	025b      	lsls	r3, r3, #9
 8003694:	4013      	ands	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	4810      	ldr	r0, [pc, #64]	; (80036dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800369c:	f7fc fd3c 	bl	8000118 <__udivsi3>
 80036a0:	0003      	movs	r3, r0
 80036a2:	001a      	movs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4353      	muls	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e009      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	000a      	movs	r2, r1
 80036b0:	0152      	lsls	r2, r2, #5
 80036b2:	1a52      	subs	r2, r2, r1
 80036b4:	0193      	lsls	r3, r2, #6
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	185b      	adds	r3, r3, r1
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	613b      	str	r3, [r7, #16]
      break;
 80036c4:	e002      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80036c8:	613b      	str	r3, [r7, #16]
      break;
 80036ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036cc:	693b      	ldr	r3, [r7, #16]
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b006      	add	sp, #24
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000
 80036dc:	007a1200 	.word	0x007a1200
 80036e0:	080065ac 	.word	0x080065ac
 80036e4:	080065bc 	.word	0x080065bc

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	0001      	movs	r1, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	2207      	movs	r2, #7
 800370e:	4013      	ands	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	40d9      	lsrs	r1, r3
 8003716:	000b      	movs	r3, r1
}    
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	080065a4 	.word	0x080065a4

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	025b      	lsls	r3, r3, #9
 8003740:	4013      	ands	r3, r2
 8003742:	d100      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003744:	e08e      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2017      	movs	r0, #23
 8003748:	183b      	adds	r3, r7, r0
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b57      	ldr	r3, [pc, #348]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	055b      	lsls	r3, r3, #21
 8003756:	4013      	ands	r3, r2
 8003758:	d110      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b54      	ldr	r3, [pc, #336]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0549      	lsls	r1, r1, #21
 8003764:	430a      	orrs	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
 8003768:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	055b      	lsls	r3, r3, #21
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	183b      	adds	r3, r7, r0
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d11a      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003788:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b48      	ldr	r3, [pc, #288]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0049      	lsls	r1, r1, #1
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fe fa91 	bl	8001cbc <HAL_GetTick>
 800379a:	0003      	movs	r3, r0
 800379c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fa8c 	bl	8001cbc <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e077      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037be:	4b3b      	ldr	r3, [pc, #236]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	23c0      	movs	r3, #192	; 0xc0
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d034      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d02c      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e0:	4b32      	ldr	r3, [pc, #200]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a33      	ldr	r2, [pc, #204]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	4b2f      	ldr	r3, [pc, #188]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0249      	lsls	r1, r1, #9
 80037f4:	430a      	orrs	r2, r1
 80037f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037fe:	492e      	ldr	r1, [pc, #184]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003800:	400a      	ands	r2, r1
 8003802:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fa53 	bl	8001cbc <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	e009      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fe fa4e 	bl	8001cbc <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e038      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2202      	movs	r2, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d0f0      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384a:	430a      	orrs	r2, r1
 800384c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800384e:	2317      	movs	r3, #23
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800385e:	4918      	ldr	r1, [pc, #96]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003860:	400a      	ands	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2203      	movs	r2, #3
 8003874:	4393      	bics	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800387e:	430a      	orrs	r2, r1
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2220      	movs	r2, #32
 8003888:	4013      	ands	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2210      	movs	r2, #16
 8003892:	4393      	bics	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800389c:	430a      	orrs	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b006      	add	sp, #24
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	fffffcff 	.word	0xfffffcff
 80038b8:	fffeffff 	.word	0xfffeffff
 80038bc:	00001388 	.word	0x00001388
 80038c0:	efffffff 	.word	0xefffffff

080038c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0a8      	b.n	8003a28 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	2382      	movs	r3, #130	; 0x82
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d009      	beq.n	80038fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	61da      	str	r2, [r3, #28]
 80038f0:	e005      	b.n	80038fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	225d      	movs	r2, #93	; 0x5d
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	225c      	movs	r2, #92	; 0x5c
 8003914:	2100      	movs	r1, #0
 8003916:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f7fd ff14 	bl	8001748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	225d      	movs	r2, #93	; 0x5d
 8003924:	2102      	movs	r1, #2
 8003926:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	438a      	bics	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	23e0      	movs	r3, #224	; 0xe0
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	429a      	cmp	r2, r3
 8003942:	d902      	bls.n	800394a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e002      	b.n	8003950 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	015b      	lsls	r3, r3, #5
 800394e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	23f0      	movs	r3, #240	; 0xf0
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	429a      	cmp	r2, r3
 800395a:	d008      	beq.n	800396e <HAL_SPI_Init+0xaa>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	23e0      	movs	r3, #224	; 0xe0
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	429a      	cmp	r2, r3
 8003966:	d002      	beq.n	800396e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	2382      	movs	r3, #130	; 0x82
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	2384      	movs	r3, #132	; 0x84
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	400b      	ands	r3, r1
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2102      	movs	r1, #2
 800398a:	400b      	ands	r3, r1
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2101      	movs	r1, #1
 8003994:	400b      	ands	r3, r1
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6999      	ldr	r1, [r3, #24]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	400b      	ands	r3, r1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2138      	movs	r1, #56	; 0x38
 80039aa:	400b      	ands	r3, r1
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	400b      	ands	r3, r1
 80039b6:	431a      	orrs	r2, r3
 80039b8:	0011      	movs	r1, r2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	401a      	ands	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	2204      	movs	r2, #4
 80039d4:	401a      	ands	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2110      	movs	r1, #16
 80039dc:	400b      	ands	r3, r1
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	2108      	movs	r1, #8
 80039e6:	400b      	ands	r3, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68d9      	ldr	r1, [r3, #12]
 80039ee:	23f0      	movs	r3, #240	; 0xf0
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	400b      	ands	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	0011      	movs	r1, r2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	015b      	lsls	r3, r3, #5
 80039fe:	401a      	ands	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4907      	ldr	r1, [pc, #28]	; (8003a30 <HAL_SPI_Init+0x16c>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	225d      	movs	r2, #93	; 0x5d
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fffff7ff 	.word	0xfffff7ff

08003a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	001a      	movs	r2, r3
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a46:	2301      	movs	r3, #1
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a4a:	2323      	movs	r3, #35	; 0x23
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	225c      	movs	r2, #92	; 0x5c
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x2c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e1c4      	b.n	8003dea <HAL_SPI_TransmitReceive+0x3b6>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	225c      	movs	r2, #92	; 0x5c
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a68:	f7fe f928 	bl	8001cbc <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a70:	201b      	movs	r0, #27
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	215d      	movs	r1, #93	; 0x5d
 8003a78:	5c52      	ldrb	r2, [r2, r1]
 8003a7a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a82:	2312      	movs	r3, #18
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	1cba      	adds	r2, r7, #2
 8003a88:	8812      	ldrh	r2, [r2, #0]
 8003a8a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8c:	183b      	adds	r3, r7, r0
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d011      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x84>
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	2382      	movs	r3, #130	; 0x82
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d107      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x7a>
 8003aa6:	183b      	adds	r3, r7, r0
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d004      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003aae:	2323      	movs	r3, #35	; 0x23
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ab6:	e191      	b.n	8003ddc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x98>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_SPI_TransmitReceive+0x98>
 8003ac4:	1cbb      	adds	r3, r7, #2
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003acc:	2323      	movs	r3, #35	; 0x23
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ad4:	e182      	b.n	8003ddc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	225d      	movs	r2, #93	; 0x5d
 8003ada:	5c9b      	ldrb	r3, [r3, r2]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d003      	beq.n	8003aea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	225d      	movs	r2, #93	; 0x5d
 8003ae6:	2105      	movs	r1, #5
 8003ae8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1cba      	adds	r2, r7, #2
 8003afa:	2146      	movs	r1, #70	; 0x46
 8003afc:	8812      	ldrh	r2, [r2, #0]
 8003afe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1cba      	adds	r2, r7, #2
 8003b04:	2144      	movs	r1, #68	; 0x44
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1cba      	adds	r2, r7, #2
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1cba      	adds	r2, r7, #2
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	23e0      	movs	r3, #224	; 0xe0
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d908      	bls.n	8003b4a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	49ac      	ldr	r1, [pc, #688]	; (8003df4 <HAL_SPI_TransmitReceive+0x3c0>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e008      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	0149      	lsls	r1, r1, #5
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d007      	beq.n	8003b7a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	23e0      	movs	r3, #224	; 0xe0
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d800      	bhi.n	8003b88 <HAL_SPI_TransmitReceive+0x154>
 8003b86:	e083      	b.n	8003c90 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x168>
 8003b90:	2312      	movs	r3, #18
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d000      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x168>
 8003b9a:	e06d      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc0:	e05a      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d11b      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x1d4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <HAL_SPI_TransmitReceive+0x1d4>
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d113      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	881a      	ldrh	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d11c      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x21c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2246      	movs	r2, #70	; 0x46
 8003c1a:	5a9b      	ldrh	r3, [r3, r2]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2246      	movs	r2, #70	; 0x46
 8003c3e:	5a9b      	ldrh	r3, [r3, r2]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b299      	uxth	r1, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2246      	movs	r2, #70	; 0x46
 8003c4a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c50:	f7fe f834 	bl	8001cbc <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d80b      	bhi.n	8003c78 <HAL_SPI_TransmitReceive+0x244>
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	3301      	adds	r3, #1
 8003c64:	d008      	beq.n	8003c78 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003c66:	2323      	movs	r3, #35	; 0x23
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	225d      	movs	r2, #93	; 0x5d
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
        goto error;
 8003c76:	e0b1      	b.n	8003ddc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d19f      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x18e>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2246      	movs	r2, #70	; 0x46
 8003c86:	5a9b      	ldrh	r3, [r3, r2]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d199      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x18e>
 8003c8e:	e089      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x270>
 8003c98:	2312      	movs	r3, #18
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d000      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x270>
 8003ca2:	e074      	b.n	8003d8e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cca:	e060      	b.n	8003d8e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d11c      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x2e0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x2e0>
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d114      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11e      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x32c>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2246      	movs	r2, #70	; 0x46
 8003d26:	5a9b      	ldrh	r3, [r3, r2]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d018      	beq.n	8003d60 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	001a      	movs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2246      	movs	r2, #70	; 0x46
 8003d4e:	5a9b      	ldrh	r3, [r3, r2]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b299      	uxth	r1, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2246      	movs	r2, #70	; 0x46
 8003d5a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d60:	f7fd ffac 	bl	8001cbc <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d802      	bhi.n	8003d76 <HAL_SPI_TransmitReceive+0x342>
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	3301      	adds	r3, #1
 8003d74:	d102      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x348>
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d108      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003d7c:	2323      	movs	r3, #35	; 0x23
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	2203      	movs	r2, #3
 8003d82:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	225d      	movs	r2, #93	; 0x5d
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]
        goto error;
 8003d8c:	e026      	b.n	8003ddc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d199      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x298>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2246      	movs	r2, #70	; 0x46
 8003d9c:	5a9b      	ldrh	r3, [r3, r2]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d193      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fa70 	bl	8004290 <SPI_EndRxTxTransaction>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003db4:	2323      	movs	r3, #35	; 0x23
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003dca:	2323      	movs	r3, #35	; 0x23
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e003      	b.n	8003ddc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	225d      	movs	r2, #93	; 0x5d
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	225c      	movs	r2, #92	; 0x5c
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003de4:	2323      	movs	r3, #35	; 0x23
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	781b      	ldrb	r3, [r3, #0]
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b00a      	add	sp, #40	; 0x28
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	ffffefff 	.word	0xffffefff

08003df8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	001a      	movs	r2, r3
 8003e16:	2301      	movs	r3, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d10f      	bne.n	8003e3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e22:	d00b      	beq.n	8003e3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d005      	beq.n	8003e3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	0010      	movs	r0, r2
 8003e38:	4798      	blx	r3
    return;
 8003e3a:	e0d5      	b.n	8003fe8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	001a      	movs	r2, r3
 8003e42:	2301      	movs	r3, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x68>
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	09db      	lsrs	r3, r3, #7
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4013      	ands	r3, r2
 8003e52:	d005      	beq.n	8003e60 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	0010      	movs	r0, r2
 8003e5c:	4798      	blx	r3
    return;
 8003e5e:	e0c3      	b.n	8003fe8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	001a      	movs	r2, r3
 8003e66:	2301      	movs	r3, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <HAL_SPI_IRQHandler+0x8e>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	099b      	lsrs	r3, r3, #6
 8003e70:	001a      	movs	r2, r3
 8003e72:	2301      	movs	r3, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	d106      	bne.n	8003e86 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d100      	bne.n	8003e86 <HAL_SPI_IRQHandler+0x8e>
 8003e84:	e0b0      	b.n	8003fe8 <HAL_SPI_IRQHandler+0x1f0>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d100      	bne.n	8003e94 <HAL_SPI_IRQHandler+0x9c>
 8003e92:	e0a9      	b.n	8003fe8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	001a      	movs	r2, r3
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d023      	beq.n	8003ee8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	225d      	movs	r2, #93	; 0x5d
 8003ea4:	5c9b      	ldrb	r3, [r3, r2]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d011      	beq.n	8003ed0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	e00b      	b.n	8003ee8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
        return;
 8003ee6:	e07f      	b.n	8003fe8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	001a      	movs	r2, r3
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d014      	beq.n	8003f1e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	2201      	movs	r2, #1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	438a      	bics	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	001a      	movs	r2, r3
 8003f24:	2301      	movs	r3, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	d00c      	beq.n	8003f44 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	2208      	movs	r2, #8
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d04c      	beq.n	8003fe6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	21e0      	movs	r1, #224	; 0xe0
 8003f58:	438a      	bics	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	225d      	movs	r2, #93	; 0x5d
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <HAL_SPI_IRQHandler+0x17c>
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4013      	ands	r3, r2
 8003f72:	d032      	beq.n	8003fda <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2103      	movs	r1, #3
 8003f80:	438a      	bics	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <HAL_SPI_IRQHandler+0x1f8>)
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fe f81b 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	2240      	movs	r2, #64	; 0x40
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	4a0d      	ldr	r2, [pc, #52]	; (8003ff0 <HAL_SPI_IRQHandler+0x1f8>)
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7fe f806 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003fd8:	e004      	b.n	8003fe4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f809 	bl	8003ff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003fe2:	e000      	b.n	8003fe6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003fe4:	46c0      	nop			; (mov r8, r8)
    return;
 8003fe6:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b008      	add	sp, #32
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	08004005 	.word	0x08004005

08003ff4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2246      	movs	r2, #70	; 0x46
 8004016:	2100      	movs	r1, #0
 8004018:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff ffe6 	bl	8003ff4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	1dfb      	adds	r3, r7, #7
 800403e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004040:	f7fd fe3c 	bl	8001cbc <HAL_GetTick>
 8004044:	0002      	movs	r2, r0
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004050:	f7fd fe34 	bl	8001cbc <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004058:	4b3a      	ldr	r3, [pc, #232]	; (8004144 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	015b      	lsls	r3, r3, #5
 800405e:	0d1b      	lsrs	r3, r3, #20
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	4353      	muls	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004066:	e058      	b.n	800411a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	d055      	beq.n	800411a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800406e:	f7fd fe25 	bl	8001cbc <HAL_GetTick>
 8004072:	0002      	movs	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	429a      	cmp	r2, r3
 800407c:	d902      	bls.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x54>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d142      	bne.n	800410a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	21e0      	movs	r1, #224	; 0xe0
 8004090:	438a      	bics	r2, r1
 8004092:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	2382      	movs	r3, #130	; 0x82
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	429a      	cmp	r2, r3
 800409e:	d113      	bne.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d005      	beq.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2140      	movs	r1, #64	; 0x40
 80040c4:	438a      	bics	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	019b      	lsls	r3, r3, #6
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d110      	bne.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	491a      	ldr	r1, [pc, #104]	; (8004148 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	0189      	lsls	r1, r1, #6
 80040f2:	430a      	orrs	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	225d      	movs	r2, #93	; 0x5d
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	225c      	movs	r2, #92	; 0x5c
 8004102:	2100      	movs	r1, #0
 8004104:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e017      	b.n	800413a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3b01      	subs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	425a      	negs	r2, r3
 800412a:	4153      	adcs	r3, r2
 800412c:	b2db      	uxtb	r3, r3
 800412e:	001a      	movs	r2, r3
 8004130:	1dfb      	adds	r3, r7, #7
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d197      	bne.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b008      	add	sp, #32
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	20000000 	.word	0x20000000
 8004148:	ffffdfff 	.word	0xffffdfff

0800414c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800415a:	2317      	movs	r3, #23
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004162:	f7fd fdab 	bl	8001cbc <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004172:	f7fd fda3 	bl	8001cbc <HAL_GetTick>
 8004176:	0003      	movs	r3, r0
 8004178:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	0013      	movs	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	189b      	adds	r3, r3, r2
 800418c:	00da      	lsls	r2, r3, #3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	0d1b      	lsrs	r3, r3, #20
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	4353      	muls	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004198:	e068      	b.n	800426c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	23c0      	movs	r3, #192	; 0xc0
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d10a      	bne.n	80041ba <SPI_WaitFifoStateUntilTimeout+0x6e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	2117      	movs	r1, #23
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	d055      	beq.n	800426c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c0:	f7fd fd7c 	bl	8001cbc <HAL_GetTick>
 80041c4:	0002      	movs	r2, r0
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d902      	bls.n	80041d6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d142      	bne.n	800425c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	21e0      	movs	r1, #224	; 0xe0
 80041e2:	438a      	bics	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	2382      	movs	r3, #130	; 0x82
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d113      	bne.n	800421a <SPI_WaitFifoStateUntilTimeout+0xce>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d005      	beq.n	800420a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2140      	movs	r1, #64	; 0x40
 8004216:	438a      	bics	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	019b      	lsls	r3, r3, #6
 8004222:	429a      	cmp	r2, r3
 8004224:	d110      	bne.n	8004248 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004232:	400a      	ands	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	0189      	lsls	r1, r1, #6
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	225d      	movs	r2, #93	; 0x5d
 800424c:	2101      	movs	r1, #1
 800424e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	225c      	movs	r2, #92	; 0x5c
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e010      	b.n	800427e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3b01      	subs	r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d18e      	bne.n	800419a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b00a      	add	sp, #40	; 0x28
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000000 	.word	0x20000000
 800428c:	ffffdfff 	.word	0xffffdfff

08004290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	23c0      	movs	r3, #192	; 0xc0
 80042a0:	0159      	lsls	r1, r3, #5
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	0013      	movs	r3, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	f7ff ff4e 	bl	800414c <SPI_WaitFifoStateUntilTimeout>
 80042b0:	1e03      	subs	r3, r0, #0
 80042b2:	d007      	beq.n	80042c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	2220      	movs	r2, #32
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e027      	b.n	8004314 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	0013      	movs	r3, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	f7ff fead 	bl	8004030 <SPI_WaitFlagStateUntilTimeout>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d007      	beq.n	80042ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	2220      	movs	r2, #32
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e014      	b.n	8004314 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	23c0      	movs	r3, #192	; 0xc0
 80042ee:	00d9      	lsls	r1, r3, #3
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	0013      	movs	r3, r2
 80042f8:	2200      	movs	r2, #0
 80042fa:	f7ff ff27 	bl	800414c <SPI_WaitFifoStateUntilTimeout>
 80042fe:	1e03      	subs	r3, r0, #0
 8004300:	d007      	beq.n	8004312 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	2220      	movs	r2, #32
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e000      	b.n	8004314 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b004      	add	sp, #16
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	223d      	movs	r2, #61	; 0x3d
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223c      	movs	r2, #60	; 0x3c
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f7fd fa53 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	223d      	movs	r2, #61	; 0x3d
 800434e:	2102      	movs	r1, #2
 8004350:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	0019      	movs	r1, r3
 800435c:	0010      	movs	r0, r2
 800435e:	f000 fc25 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2246      	movs	r2, #70	; 0x46
 8004366:	2101      	movs	r1, #1
 8004368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	223e      	movs	r2, #62	; 0x3e
 800436e:	2101      	movs	r1, #1
 8004370:	5499      	strb	r1, [r3, r2]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	223f      	movs	r2, #63	; 0x3f
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2240      	movs	r2, #64	; 0x40
 800437e:	2101      	movs	r1, #1
 8004380:	5499      	strb	r1, [r3, r2]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2241      	movs	r2, #65	; 0x41
 8004386:	2101      	movs	r1, #1
 8004388:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2242      	movs	r2, #66	; 0x42
 800438e:	2101      	movs	r1, #1
 8004390:	5499      	strb	r1, [r3, r2]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2243      	movs	r2, #67	; 0x43
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2244      	movs	r2, #68	; 0x44
 800439e:	2101      	movs	r1, #1
 80043a0:	5499      	strb	r1, [r3, r2]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2245      	movs	r2, #69	; 0x45
 80043a6:	2101      	movs	r1, #1
 80043a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	223d      	movs	r2, #61	; 0x3d
 80043ae:	2101      	movs	r1, #1
 80043b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	223d      	movs	r2, #61	; 0x3d
 80043c8:	5c9b      	ldrb	r3, [r3, r2]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e036      	b.n	8004442 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	223d      	movs	r2, #61	; 0x3d
 80043d8:	2102      	movs	r1, #2
 80043da:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2101      	movs	r1, #1
 80043e8:	430a      	orrs	r2, r1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_TIM_Base_Start_IT+0x90>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00a      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x50>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	05db      	lsls	r3, r3, #23
 80043fe:	429a      	cmp	r2, r3
 8004400:	d004      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x50>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <HAL_TIM_Base_Start_IT+0x94>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2207      	movs	r2, #7
 8004414:	4013      	ands	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b06      	cmp	r3, #6
 800441c:	d010      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e007      	b.n	8004440 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2101      	movs	r1, #1
 800443c:	430a      	orrs	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b004      	add	sp, #16
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400

08004454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e042      	b.n	80044ec <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	223d      	movs	r2, #61	; 0x3d
 800446a:	5c9b      	ldrb	r3, [r3, r2]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d107      	bne.n	8004482 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	223c      	movs	r2, #60	; 0x3c
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 f839 	bl	80044f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	223d      	movs	r2, #61	; 0x3d
 8004486:	2102      	movs	r1, #2
 8004488:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3304      	adds	r3, #4
 8004492:	0019      	movs	r1, r3
 8004494:	0010      	movs	r0, r2
 8004496:	f000 fb89 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2246      	movs	r2, #70	; 0x46
 800449e:	2101      	movs	r1, #1
 80044a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	223e      	movs	r2, #62	; 0x3e
 80044a6:	2101      	movs	r1, #1
 80044a8:	5499      	strb	r1, [r3, r2]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223f      	movs	r2, #63	; 0x3f
 80044ae:	2101      	movs	r1, #1
 80044b0:	5499      	strb	r1, [r3, r2]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2240      	movs	r2, #64	; 0x40
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2241      	movs	r2, #65	; 0x41
 80044be:	2101      	movs	r1, #1
 80044c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2242      	movs	r2, #66	; 0x42
 80044c6:	2101      	movs	r1, #1
 80044c8:	5499      	strb	r1, [r3, r2]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2243      	movs	r2, #67	; 0x43
 80044ce:	2101      	movs	r1, #1
 80044d0:	5499      	strb	r1, [r3, r2]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2244      	movs	r2, #68	; 0x44
 80044d6:	2101      	movs	r1, #1
 80044d8:	5499      	strb	r1, [r3, r2]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2245      	movs	r2, #69	; 0x45
 80044de:	2101      	movs	r1, #1
 80044e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	223d      	movs	r2, #61	; 0x3d
 80044e6:	2101      	movs	r1, #1
 80044e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b002      	add	sp, #8
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d108      	bne.n	8004526 <HAL_TIM_PWM_Start+0x22>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	223e      	movs	r2, #62	; 0x3e
 8004518:	5c9b      	ldrb	r3, [r3, r2]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	4193      	sbcs	r3, r2
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e01f      	b.n	8004566 <HAL_TIM_PWM_Start+0x62>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d108      	bne.n	800453e <HAL_TIM_PWM_Start+0x3a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	223f      	movs	r2, #63	; 0x3f
 8004530:	5c9b      	ldrb	r3, [r3, r2]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	4193      	sbcs	r3, r2
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e013      	b.n	8004566 <HAL_TIM_PWM_Start+0x62>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d108      	bne.n	8004556 <HAL_TIM_PWM_Start+0x52>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2240      	movs	r2, #64	; 0x40
 8004548:	5c9b      	ldrb	r3, [r3, r2]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	1e5a      	subs	r2, r3, #1
 8004550:	4193      	sbcs	r3, r2
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e007      	b.n	8004566 <HAL_TIM_PWM_Start+0x62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2241      	movs	r2, #65	; 0x41
 800455a:	5c9b      	ldrb	r3, [r3, r2]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	4193      	sbcs	r3, r2
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06a      	b.n	8004644 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0x7a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	223e      	movs	r2, #62	; 0x3e
 8004578:	2102      	movs	r1, #2
 800457a:	5499      	strb	r1, [r3, r2]
 800457c:	e013      	b.n	80045a6 <HAL_TIM_PWM_Start+0xa2>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0x8a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	223f      	movs	r2, #63	; 0x3f
 8004588:	2102      	movs	r1, #2
 800458a:	5499      	strb	r1, [r3, r2]
 800458c:	e00b      	b.n	80045a6 <HAL_TIM_PWM_Start+0xa2>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start+0x9a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2240      	movs	r2, #64	; 0x40
 8004598:	2102      	movs	r1, #2
 800459a:	5499      	strb	r1, [r3, r2]
 800459c:	e003      	b.n	80045a6 <HAL_TIM_PWM_Start+0xa2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2241      	movs	r2, #65	; 0x41
 80045a2:	2102      	movs	r1, #2
 80045a4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 fdfa 	bl	80051a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a24      	ldr	r2, [pc, #144]	; (800464c <HAL_TIM_PWM_Start+0x148>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_TIM_PWM_Start+0xce>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_TIM_PWM_Start+0x14c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIM_PWM_Start+0xce>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_TIM_PWM_Start+0x150>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_PWM_Start+0xd2>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <HAL_TIM_PWM_Start+0xd4>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2180      	movs	r1, #128	; 0x80
 80045e8:	0209      	lsls	r1, r1, #8
 80045ea:	430a      	orrs	r2, r1
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a16      	ldr	r2, [pc, #88]	; (800464c <HAL_TIM_PWM_Start+0x148>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00a      	beq.n	800460e <HAL_TIM_PWM_Start+0x10a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	05db      	lsls	r3, r3, #23
 8004600:	429a      	cmp	r2, r3
 8004602:	d004      	beq.n	800460e <HAL_TIM_PWM_Start+0x10a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a13      	ldr	r2, [pc, #76]	; (8004658 <HAL_TIM_PWM_Start+0x154>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d111      	bne.n	8004632 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2207      	movs	r2, #7
 8004616:	4013      	ands	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b06      	cmp	r3, #6
 800461e:	d010      	beq.n	8004642 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2101      	movs	r1, #1
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	e007      	b.n	8004642 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b004      	add	sp, #16
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40014400 	.word	0x40014400
 8004654:	40014800 	.word	0x40014800
 8004658:	40000400 	.word	0x40000400

0800465c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2202      	movs	r2, #2
 8004678:	4013      	ands	r3, r2
 800467a:	d021      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2202      	movs	r2, #2
 8004680:	4013      	ands	r3, r2
 8004682:	d01d      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2203      	movs	r2, #3
 800468a:	4252      	negs	r2, r2
 800468c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2203      	movs	r2, #3
 800469c:	4013      	ands	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 fa6a 	bl	8004b7c <HAL_TIM_IC_CaptureCallback>
 80046a8:	e007      	b.n	80046ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fa5d 	bl	8004b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 fa69 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2204      	movs	r2, #4
 80046c4:	4013      	ands	r3, r2
 80046c6:	d022      	beq.n	800470e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2204      	movs	r2, #4
 80046cc:	4013      	ands	r3, r2
 80046ce:	d01e      	beq.n	800470e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2205      	movs	r2, #5
 80046d6:	4252      	negs	r2, r2
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	23c0      	movs	r3, #192	; 0xc0
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4013      	ands	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 fa43 	bl	8004b7c <HAL_TIM_IC_CaptureCallback>
 80046f6:	e007      	b.n	8004708 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fa36 	bl	8004b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 fa42 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2208      	movs	r2, #8
 8004712:	4013      	ands	r3, r2
 8004714:	d021      	beq.n	800475a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2208      	movs	r2, #8
 800471a:	4013      	ands	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2209      	movs	r2, #9
 8004724:	4252      	negs	r2, r2
 8004726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2204      	movs	r2, #4
 800472c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	2203      	movs	r2, #3
 8004736:	4013      	ands	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 fa1d 	bl	8004b7c <HAL_TIM_IC_CaptureCallback>
 8004742:	e007      	b.n	8004754 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f000 fa10 	bl	8004b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	0018      	movs	r0, r3
 8004750:	f000 fa1c 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2210      	movs	r2, #16
 800475e:	4013      	ands	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2210      	movs	r2, #16
 8004766:	4013      	ands	r3, r2
 8004768:	d01e      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2211      	movs	r2, #17
 8004770:	4252      	negs	r2, r2
 8004772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2208      	movs	r2, #8
 8004778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	23c0      	movs	r3, #192	; 0xc0
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f000 f9f6 	bl	8004b7c <HAL_TIM_IC_CaptureCallback>
 8004790:	e007      	b.n	80047a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f9e9 	bl	8004b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f000 f9f5 	bl	8004b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	d00c      	beq.n	80047ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d008      	beq.n	80047ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2202      	movs	r2, #2
 80047be:	4252      	negs	r2, r2
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fd f9d3 	bl	8001b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	4013      	ands	r3, r2
 80047d0:	d00c      	beq.n	80047ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	4013      	ands	r3, r2
 80047d8:	d008      	beq.n	80047ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2281      	movs	r2, #129	; 0x81
 80047e0:	4252      	negs	r2, r2
 80047e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 fd62 	bl	80052b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	4013      	ands	r3, r2
 80047f2:	d00c      	beq.n	800480e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	4013      	ands	r3, r2
 80047fa:	d008      	beq.n	800480e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2241      	movs	r2, #65	; 0x41
 8004802:	4252      	negs	r2, r2
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f9c7 	bl	8004b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2220      	movs	r2, #32
 8004812:	4013      	ands	r3, r2
 8004814:	d00c      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	4013      	ands	r3, r2
 800481c:	d008      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2221      	movs	r2, #33	; 0x21
 8004824:	4252      	negs	r2, r2
 8004826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 fd38 	bl	80052a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004830:	46c0      	nop			; (mov r8, r8)
 8004832:	46bd      	mov	sp, r7
 8004834:	b004      	add	sp, #16
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2317      	movs	r3, #23
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	223c      	movs	r2, #60	; 0x3c
 8004850:	5c9b      	ldrb	r3, [r3, r2]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004856:	2302      	movs	r3, #2
 8004858:	e0ad      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	223c      	movs	r2, #60	; 0x3c
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b0c      	cmp	r3, #12
 8004866:	d100      	bne.n	800486a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004868:	e076      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x120>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	d900      	bls.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004870:	e095      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d04e      	beq.n	8004916 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d900      	bls.n	8004880 <HAL_TIM_PWM_ConfigChannel+0x48>
 800487e:	e08e      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d021      	beq.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800488c:	e087      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	0011      	movs	r1, r2
 8004896:	0018      	movs	r0, r3
 8004898:	f000 fa0c 	bl	8004cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2108      	movs	r1, #8
 80048a8:	430a      	orrs	r2, r1
 80048aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2104      	movs	r1, #4
 80048b8:	438a      	bics	r2, r1
 80048ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6999      	ldr	r1, [r3, #24]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	619a      	str	r2, [r3, #24]
      break;
 80048ce:	e06b      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	0011      	movs	r1, r2
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fa69 	bl	8004db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	0109      	lsls	r1, r1, #4
 80048ec:	430a      	orrs	r2, r1
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4931      	ldr	r1, [pc, #196]	; (80049c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80048fc:	400a      	ands	r2, r1
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	619a      	str	r2, [r3, #24]
      break;
 8004914:	e048      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	0011      	movs	r1, r2
 800491e:	0018      	movs	r0, r3
 8004920:	f000 fac4 	bl	8004eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2108      	movs	r1, #8
 8004930:	430a      	orrs	r2, r1
 8004932:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2104      	movs	r1, #4
 8004940:	438a      	bics	r2, r1
 8004942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69d9      	ldr	r1, [r3, #28]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	61da      	str	r2, [r3, #28]
      break;
 8004956:	e027      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	0011      	movs	r1, r2
 8004960:	0018      	movs	r0, r3
 8004962:	f000 fb23 	bl	8004fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	0109      	lsls	r1, r1, #4
 8004974:	430a      	orrs	r2, r1
 8004976:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	490f      	ldr	r1, [pc, #60]	; (80049c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004984:	400a      	ands	r2, r1
 8004986:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69d9      	ldr	r1, [r3, #28]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	61da      	str	r2, [r3, #28]
      break;
 800499c:	e004      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800499e:	2317      	movs	r3, #23
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
      break;
 80049a6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	223c      	movs	r2, #60	; 0x3c
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]

  return status;
 80049b0:	2317      	movs	r3, #23
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b006      	add	sp, #24
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	fffffbff 	.word	0xfffffbff

080049c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	230f      	movs	r3, #15
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	223c      	movs	r2, #60	; 0x3c
 80049da:	5c9b      	ldrb	r3, [r3, r2]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_ConfigClockSource+0x20>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e0bc      	b.n	8004b5e <HAL_TIM_ConfigClockSource+0x19a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	223c      	movs	r2, #60	; 0x3c
 80049e8:	2101      	movs	r1, #1
 80049ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	223d      	movs	r2, #61	; 0x3d
 80049f0:	2102      	movs	r1, #2
 80049f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2277      	movs	r2, #119	; 0x77
 8004a00:	4393      	bics	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a58      	ldr	r2, [pc, #352]	; (8004b68 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	0192      	lsls	r2, r2, #6
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d040      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xde>
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	0192      	lsls	r2, r2, #6
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d900      	bls.n	8004a2a <HAL_TIM_ConfigClockSource+0x66>
 8004a28:	e088      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	0152      	lsls	r2, r2, #5
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d100      	bne.n	8004a34 <HAL_TIM_ConfigClockSource+0x70>
 8004a32:	e088      	b.n	8004b46 <HAL_TIM_ConfigClockSource+0x182>
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	0152      	lsls	r2, r2, #5
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d900      	bls.n	8004a3e <HAL_TIM_ConfigClockSource+0x7a>
 8004a3c:	e07e      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a3e:	2b70      	cmp	r3, #112	; 0x70
 8004a40:	d018      	beq.n	8004a74 <HAL_TIM_ConfigClockSource+0xb0>
 8004a42:	d900      	bls.n	8004a46 <HAL_TIM_ConfigClockSource+0x82>
 8004a44:	e07a      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a46:	2b60      	cmp	r3, #96	; 0x60
 8004a48:	d04f      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x126>
 8004a4a:	d900      	bls.n	8004a4e <HAL_TIM_ConfigClockSource+0x8a>
 8004a4c:	e076      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a4e:	2b50      	cmp	r3, #80	; 0x50
 8004a50:	d03b      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x106>
 8004a52:	d900      	bls.n	8004a56 <HAL_TIM_ConfigClockSource+0x92>
 8004a54:	e072      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d057      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x146>
 8004a5a:	d900      	bls.n	8004a5e <HAL_TIM_ConfigClockSource+0x9a>
 8004a5c:	e06e      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a5e:	2b30      	cmp	r3, #48	; 0x30
 8004a60:	d063      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x166>
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x166>
 8004a68:	d868      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d05d      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x166>
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d05b      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x166>
 8004a72:	e063      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6899      	ldr	r1, [r3, #8]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f000 fb70 	bl	8005168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2277      	movs	r2, #119	; 0x77
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e052      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f000 fb59 	bl	8005168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	01c9      	lsls	r1, r1, #7
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03e      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	f000 facc 	bl	8005074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	; 0x50
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f000 fb26 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02e      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	001a      	movs	r2, r3
 8004af8:	f000 faea 	bl	80050d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	; 0x60
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 fb16 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01e      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	001a      	movs	r2, r3
 8004b18:	f000 faac 	bl	8005074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 fb06 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00e      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	0019      	movs	r1, r3
 8004b34:	0010      	movs	r0, r2
 8004b36:	f000 fafd 	bl	8005134 <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e005      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
      break;
 8004b44:	e000      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004b46:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	223d      	movs	r2, #61	; 0x3d
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	223c      	movs	r2, #60	; 0x3c
 8004b54:	2100      	movs	r1, #0
 8004b56:	5499      	strb	r1, [r3, r2]

  return status;
 8004b58:	230f      	movs	r3, #15
 8004b5a:	18fb      	adds	r3, r7, r3
 8004b5c:	781b      	ldrb	r3, [r3, #0]
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b004      	add	sp, #16
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	ffff00ff 	.word	0xffff00ff

08004b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <TIM_Base_SetConfig+0xf0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d008      	beq.n	8004bd6 <TIM_Base_SetConfig+0x2a>
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	05db      	lsls	r3, r3, #23
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d003      	beq.n	8004bd6 <TIM_Base_SetConfig+0x2a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <TIM_Base_SetConfig+0xf4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d108      	bne.n	8004be8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2270      	movs	r2, #112	; 0x70
 8004bda:	4393      	bics	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <TIM_Base_SetConfig+0xf0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d014      	beq.n	8004c1a <TIM_Base_SetConfig+0x6e>
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	05db      	lsls	r3, r3, #23
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d00f      	beq.n	8004c1a <TIM_Base_SetConfig+0x6e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <TIM_Base_SetConfig+0xf4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0x6e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <TIM_Base_SetConfig+0xf8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0x6e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <TIM_Base_SetConfig+0xfc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0x6e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a25      	ldr	r2, [pc, #148]	; (8004cac <TIM_Base_SetConfig+0x100>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <TIM_Base_SetConfig+0x104>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2280      	movs	r2, #128	; 0x80
 8004c30:	4393      	bics	r3, r2
 8004c32:	001a      	movs	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <TIM_Base_SetConfig+0xf0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_Base_SetConfig+0xbe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <TIM_Base_SetConfig+0xfc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_Base_SetConfig+0xbe>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <TIM_Base_SetConfig+0x100>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d103      	bne.n	8004c72 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	611a      	str	r2, [r3, #16]
  }
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b004      	add	sp, #16
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40002000 	.word	0x40002000
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800
 8004cb0:	fffffcff 	.word	0xfffffcff

08004cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4393      	bics	r3, r2
 8004ccc:	001a      	movs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2270      	movs	r2, #112	; 0x70
 8004ce2:	4393      	bics	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2203      	movs	r2, #3
 8004cea:	4393      	bics	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	4393      	bics	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_OC1_SetConfig+0xe8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <TIM_OC1_SetConfig+0x6e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a22      	ldr	r2, [pc, #136]	; (8004da0 <TIM_OC1_SetConfig+0xec>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_OC1_SetConfig+0x6e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	; (8004da4 <TIM_OC1_SetConfig+0xf0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10c      	bne.n	8004d3c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2208      	movs	r2, #8
 8004d26:	4393      	bics	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2204      	movs	r2, #4
 8004d38:	4393      	bics	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <TIM_OC1_SetConfig+0xe8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_OC1_SetConfig+0xa0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <TIM_OC1_SetConfig+0xec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC1_SetConfig+0xa0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <TIM_OC1_SetConfig+0xf0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <TIM_OC1_SetConfig+0xf4>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <TIM_OC1_SetConfig+0xf8>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b006      	add	sp, #24
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800
 8004da8:	fffffeff 	.word	0xfffffeff
 8004dac:	fffffdff 	.word	0xfffffdff

08004db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	4393      	bics	r3, r2
 8004dc8:	001a      	movs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <TIM_OC2_SetConfig+0xe0>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <TIM_OC2_SetConfig+0xe4>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	4393      	bics	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a22      	ldr	r2, [pc, #136]	; (8004e98 <TIM_OC2_SetConfig+0xe8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10d      	bne.n	8004e2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2280      	movs	r2, #128	; 0x80
 8004e16:	4393      	bics	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <TIM_OC2_SetConfig+0xe8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_OC2_SetConfig+0x96>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <TIM_OC2_SetConfig+0xec>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC2_SetConfig+0x96>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <TIM_OC2_SetConfig+0xf0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d113      	bne.n	8004e6e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <TIM_OC2_SetConfig+0xf4>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <TIM_OC2_SetConfig+0xf8>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b006      	add	sp, #24
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	ffff8fff 	.word	0xffff8fff
 8004e94:	fffffcff 	.word	0xfffffcff
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800
 8004ea4:	fffffbff 	.word	0xfffffbff
 8004ea8:	fffff7ff 	.word	0xfffff7ff

08004eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	4a31      	ldr	r2, [pc, #196]	; (8004f88 <TIM_OC3_SetConfig+0xdc>)
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2270      	movs	r2, #112	; 0x70
 8004ed8:	4393      	bics	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	4393      	bics	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <TIM_OC3_SetConfig+0xe0>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <TIM_OC3_SetConfig+0xe4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d10d      	bne.n	8004f26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <TIM_OC3_SetConfig+0xe8>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <TIM_OC3_SetConfig+0xec>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <TIM_OC3_SetConfig+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d007      	beq.n	8004f3e <TIM_OC3_SetConfig+0x92>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <TIM_OC3_SetConfig+0xf0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_OC3_SetConfig+0x92>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC3_SetConfig+0xf4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d113      	bne.n	8004f66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC3_SetConfig+0xf8>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC3_SetConfig+0xfc>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b006      	add	sp, #24
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fffffeff 	.word	0xfffffeff
 8004f8c:	fffffdff 	.word	0xfffffdff
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	fffff7ff 	.word	0xfffff7ff
 8004f98:	fffffbff 	.word	0xfffffbff
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800
 8004fa4:	ffffefff 	.word	0xffffefff
 8004fa8:	ffffdfff 	.word	0xffffdfff

08004fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a24      	ldr	r2, [pc, #144]	; (8005054 <TIM_OC4_SetConfig+0xa8>)
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4a20      	ldr	r2, [pc, #128]	; (8005058 <TIM_OC4_SetConfig+0xac>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a1f      	ldr	r2, [pc, #124]	; (800505c <TIM_OC4_SetConfig+0xb0>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <TIM_OC4_SetConfig+0xb4>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	031b      	lsls	r3, r3, #12
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a17      	ldr	r2, [pc, #92]	; (8005064 <TIM_OC4_SetConfig+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_OC4_SetConfig+0x70>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a16      	ldr	r2, [pc, #88]	; (8005068 <TIM_OC4_SetConfig+0xbc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_OC4_SetConfig+0x70>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a15      	ldr	r2, [pc, #84]	; (800506c <TIM_OC4_SetConfig+0xc0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d109      	bne.n	8005030 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4a14      	ldr	r2, [pc, #80]	; (8005070 <TIM_OC4_SetConfig+0xc4>)
 8005020:	4013      	ands	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b006      	add	sp, #24
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	ffffefff 	.word	0xffffefff
 8005058:	ffff8fff 	.word	0xffff8fff
 800505c:	fffffcff 	.word	0xfffffcff
 8005060:	ffffdfff 	.word	0xffffdfff
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800
 8005070:	ffffbfff 	.word	0xffffbfff

08005074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	2201      	movs	r2, #1
 800508c:	4393      	bics	r3, r2
 800508e:	001a      	movs	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	22f0      	movs	r2, #240	; 0xf0
 800509e:	4393      	bics	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	220a      	movs	r2, #10
 80050b0:	4393      	bics	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b006      	add	sp, #24
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	2210      	movs	r2, #16
 80050e8:	4393      	bics	r3, r2
 80050ea:	001a      	movs	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <TIM_TI2_ConfigInputStage+0x60>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	22a0      	movs	r2, #160	; 0xa0
 800510c:	4393      	bics	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b006      	add	sp, #24
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	ffff0fff 	.word	0xffff0fff

08005134 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2270      	movs	r2, #112	; 0x70
 8005148:	4393      	bics	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	2207      	movs	r2, #7
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	609a      	str	r2, [r3, #8]
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b004      	add	sp, #16
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <TIM_ETR_SetConfig+0x3c>)
 8005180:	4013      	ands	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	431a      	orrs	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	b006      	add	sp, #24
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	ffff00ff 	.word	0xffff00ff

080051a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	221f      	movs	r2, #31
 80051b8:	4013      	ands	r3, r2
 80051ba:	2201      	movs	r2, #1
 80051bc:	409a      	lsls	r2, r3
 80051be:	0013      	movs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	43d2      	mvns	r2, r2
 80051ca:	401a      	ands	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	211f      	movs	r1, #31
 80051d8:	400b      	ands	r3, r1
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4099      	lsls	r1, r3
 80051de:	000b      	movs	r3, r1
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b006      	add	sp, #24
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	223c      	movs	r2, #60	; 0x3c
 80051fe:	5c9b      	ldrb	r3, [r3, r2]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005204:	2302      	movs	r3, #2
 8005206:	e042      	b.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	223c      	movs	r2, #60	; 0x3c
 800520c:	2101      	movs	r1, #1
 800520e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	223d      	movs	r2, #61	; 0x3d
 8005214:	2102      	movs	r1, #2
 8005216:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2270      	movs	r2, #112	; 0x70
 800522c:	4393      	bics	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00a      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	05db      	lsls	r3, r3, #23
 8005254:	429a      	cmp	r2, r3
 8005256:	d004      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0f      	ldr	r2, [pc, #60]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10c      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2280      	movs	r2, #128	; 0x80
 8005266:	4393      	bics	r3, r2
 8005268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	223d      	movs	r2, #61	; 0x3d
 8005280:	2101      	movs	r1, #1
 8005282:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	223c      	movs	r2, #60	; 0x3c
 8005288:	2100      	movs	r1, #0
 800528a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b004      	add	sp, #16
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40000400 	.word	0x40000400

080052a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b002      	add	sp, #8
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e044      	b.n	800535c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2278      	movs	r2, #120	; 0x78
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7fc fb1b 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2224      	movs	r2, #36	; 0x24
 80052ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2101      	movs	r1, #1
 80052fc:	438a      	bics	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	0018      	movs	r0, r3
 800530c:	f000 fcf0 	bl	8005cf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	0018      	movs	r0, r3
 8005314:	f000 fbc4 	bl	8005aa0 <UART_SetConfig>
 8005318:	0003      	movs	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e01c      	b.n	800535c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	490d      	ldr	r1, [pc, #52]	; (8005364 <HAL_UART_Init+0xa4>)
 800532e:	400a      	ands	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	212a      	movs	r1, #42	; 0x2a
 800533e:	438a      	bics	r2, r1
 8005340:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2101      	movs	r1, #1
 800534e:	430a      	orrs	r2, r1
 8005350:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 fd7f 	bl	8005e58 <UART_CheckIdleState>
 800535a:	0003      	movs	r3, r0
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b002      	add	sp, #8
 8005362:	bd80      	pop	{r7, pc}
 8005364:	ffffb7ff 	.word	0xffffb7ff

08005368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	1dbb      	adds	r3, r7, #6
 8005376:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537c:	2b20      	cmp	r3, #32
 800537e:	d000      	beq.n	8005382 <HAL_UART_Transmit+0x1a>
 8005380:	e08d      	b.n	800549e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_UART_Transmit+0x28>
 8005388:	1dbb      	adds	r3, r7, #6
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e085      	b.n	80054a0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	015b      	lsls	r3, r3, #5
 800539c:	429a      	cmp	r2, r3
 800539e:	d109      	bne.n	80053b4 <HAL_UART_Transmit+0x4c>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2201      	movs	r2, #1
 80053ac:	4013      	ands	r3, r2
 80053ae:	d001      	beq.n	80053b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e075      	b.n	80054a0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2284      	movs	r2, #132	; 0x84
 80053b8:	2100      	movs	r1, #0
 80053ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2221      	movs	r2, #33	; 0x21
 80053c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c2:	f7fc fc7b 	bl	8001cbc <HAL_GetTick>
 80053c6:	0003      	movs	r3, r0
 80053c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1dba      	adds	r2, r7, #6
 80053ce:	2150      	movs	r1, #80	; 0x50
 80053d0:	8812      	ldrh	r2, [r2, #0]
 80053d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1dba      	adds	r2, r7, #6
 80053d8:	2152      	movs	r1, #82	; 0x52
 80053da:	8812      	ldrh	r2, [r2, #0]
 80053dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	015b      	lsls	r3, r3, #5
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d108      	bne.n	80053fc <HAL_UART_Transmit+0x94>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e003      	b.n	8005404 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005404:	e030      	b.n	8005468 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	0013      	movs	r3, r2
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	f000 fdc8 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	d004      	beq.n	8005426 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e03c      	b.n	80054a0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	881a      	ldrh	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	05d2      	lsls	r2, r2, #23
 8005436:	0dd2      	lsrs	r2, r2, #23
 8005438:	b292      	uxth	r2, r2
 800543a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3302      	adds	r3, #2
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e008      	b.n	8005456 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	781a      	ldrb	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	b292      	uxth	r2, r2
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2252      	movs	r2, #82	; 0x52
 800545a:	5a9b      	ldrh	r3, [r3, r2]
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b299      	uxth	r1, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2252      	movs	r2, #82	; 0x52
 8005466:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2252      	movs	r2, #82	; 0x52
 800546c:	5a9b      	ldrh	r3, [r3, r2]
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1c8      	bne.n	8005406 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	0013      	movs	r3, r2
 800547e:	2200      	movs	r2, #0
 8005480:	2140      	movs	r1, #64	; 0x40
 8005482:	f000 fd91 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005486:	1e03      	subs	r3, r0, #0
 8005488:	d004      	beq.n	8005494 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e005      	b.n	80054a0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
  }
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b008      	add	sp, #32
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b0ab      	sub	sp, #172	; 0xac
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	22a4      	movs	r2, #164	; 0xa4
 80054b8:	18b9      	adds	r1, r7, r2
 80054ba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	20a0      	movs	r0, #160	; 0xa0
 80054c4:	1839      	adds	r1, r7, r0
 80054c6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	219c      	movs	r1, #156	; 0x9c
 80054d0:	1879      	adds	r1, r7, r1
 80054d2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054d4:	0011      	movs	r1, r2
 80054d6:	18bb      	adds	r3, r7, r2
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a99      	ldr	r2, [pc, #612]	; (8005740 <HAL_UART_IRQHandler+0x298>)
 80054dc:	4013      	ands	r3, r2
 80054de:	2298      	movs	r2, #152	; 0x98
 80054e0:	18bc      	adds	r4, r7, r2
 80054e2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80054e4:	18bb      	adds	r3, r7, r2
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d114      	bne.n	8005516 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2220      	movs	r2, #32
 80054f2:	4013      	ands	r3, r2
 80054f4:	d00f      	beq.n	8005516 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054f6:	183b      	adds	r3, r7, r0
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2220      	movs	r2, #32
 80054fc:	4013      	ands	r3, r2
 80054fe:	d00a      	beq.n	8005516 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005504:	2b00      	cmp	r3, #0
 8005506:	d100      	bne.n	800550a <HAL_UART_IRQHandler+0x62>
 8005508:	e29e      	b.n	8005a48 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	0010      	movs	r0, r2
 8005512:	4798      	blx	r3
      }
      return;
 8005514:	e298      	b.n	8005a48 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005516:	2398      	movs	r3, #152	; 0x98
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d100      	bne.n	8005522 <HAL_UART_IRQHandler+0x7a>
 8005520:	e114      	b.n	800574c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005522:	239c      	movs	r3, #156	; 0x9c
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	4013      	ands	r3, r2
 800552c:	d106      	bne.n	800553c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800552e:	23a0      	movs	r3, #160	; 0xa0
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a83      	ldr	r2, [pc, #524]	; (8005744 <HAL_UART_IRQHandler+0x29c>)
 8005536:	4013      	ands	r3, r2
 8005538:	d100      	bne.n	800553c <HAL_UART_IRQHandler+0x94>
 800553a:	e107      	b.n	800574c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800553c:	23a4      	movs	r3, #164	; 0xa4
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2201      	movs	r2, #1
 8005544:	4013      	ands	r3, r2
 8005546:	d012      	beq.n	800556e <HAL_UART_IRQHandler+0xc6>
 8005548:	23a0      	movs	r3, #160	; 0xa0
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	4013      	ands	r3, r2
 8005554:	d00b      	beq.n	800556e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2201      	movs	r2, #1
 800555c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2284      	movs	r2, #132	; 0x84
 8005562:	589b      	ldr	r3, [r3, r2]
 8005564:	2201      	movs	r2, #1
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2184      	movs	r1, #132	; 0x84
 800556c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800556e:	23a4      	movs	r3, #164	; 0xa4
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2202      	movs	r2, #2
 8005576:	4013      	ands	r3, r2
 8005578:	d011      	beq.n	800559e <HAL_UART_IRQHandler+0xf6>
 800557a:	239c      	movs	r3, #156	; 0x9c
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2201      	movs	r2, #1
 8005582:	4013      	ands	r3, r2
 8005584:	d00b      	beq.n	800559e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2202      	movs	r2, #2
 800558c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2284      	movs	r2, #132	; 0x84
 8005592:	589b      	ldr	r3, [r3, r2]
 8005594:	2204      	movs	r2, #4
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2184      	movs	r1, #132	; 0x84
 800559c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800559e:	23a4      	movs	r3, #164	; 0xa4
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2204      	movs	r2, #4
 80055a6:	4013      	ands	r3, r2
 80055a8:	d011      	beq.n	80055ce <HAL_UART_IRQHandler+0x126>
 80055aa:	239c      	movs	r3, #156	; 0x9c
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2201      	movs	r2, #1
 80055b2:	4013      	ands	r3, r2
 80055b4:	d00b      	beq.n	80055ce <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2204      	movs	r2, #4
 80055bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2284      	movs	r2, #132	; 0x84
 80055c2:	589b      	ldr	r3, [r3, r2]
 80055c4:	2202      	movs	r2, #2
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2184      	movs	r1, #132	; 0x84
 80055cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055ce:	23a4      	movs	r3, #164	; 0xa4
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	4013      	ands	r3, r2
 80055d8:	d017      	beq.n	800560a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055da:	23a0      	movs	r3, #160	; 0xa0
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	4013      	ands	r3, r2
 80055e4:	d105      	bne.n	80055f2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055e6:	239c      	movs	r3, #156	; 0x9c
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2201      	movs	r2, #1
 80055ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055f0:	d00b      	beq.n	800560a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2208      	movs	r2, #8
 80055f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2284      	movs	r2, #132	; 0x84
 80055fe:	589b      	ldr	r3, [r3, r2]
 8005600:	2208      	movs	r2, #8
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2184      	movs	r1, #132	; 0x84
 8005608:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800560a:	23a4      	movs	r3, #164	; 0xa4
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	4013      	ands	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_UART_IRQHandler+0x198>
 8005618:	23a0      	movs	r3, #160	; 0xa0
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	04db      	lsls	r3, r3, #19
 8005622:	4013      	ands	r3, r2
 8005624:	d00c      	beq.n	8005640 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	0112      	lsls	r2, r2, #4
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2284      	movs	r2, #132	; 0x84
 8005634:	589b      	ldr	r3, [r3, r2]
 8005636:	2220      	movs	r2, #32
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2184      	movs	r1, #132	; 0x84
 800563e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2284      	movs	r2, #132	; 0x84
 8005644:	589b      	ldr	r3, [r3, r2]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d100      	bne.n	800564c <HAL_UART_IRQHandler+0x1a4>
 800564a:	e1ff      	b.n	8005a4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800564c:	23a4      	movs	r3, #164	; 0xa4
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2220      	movs	r2, #32
 8005654:	4013      	ands	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005658:	23a0      	movs	r3, #160	; 0xa0
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2220      	movs	r2, #32
 8005660:	4013      	ands	r3, r2
 8005662:	d008      	beq.n	8005676 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	0010      	movs	r0, r2
 8005674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2284      	movs	r2, #132	; 0x84
 800567a:	589b      	ldr	r3, [r3, r2]
 800567c:	2194      	movs	r1, #148	; 0x94
 800567e:	187a      	adds	r2, r7, r1
 8005680:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2240      	movs	r2, #64	; 0x40
 800568a:	4013      	ands	r3, r2
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d004      	beq.n	800569a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005690:	187b      	adds	r3, r7, r1
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2228      	movs	r2, #40	; 0x28
 8005696:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005698:	d047      	beq.n	800572a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0018      	movs	r0, r3
 800569e:	f000 fcf3 	bl	8006088 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d137      	bne.n	8005720 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b0:	f3ef 8310 	mrs	r3, PRIMASK
 80056b4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80056b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b8:	2090      	movs	r0, #144	; 0x90
 80056ba:	183a      	adds	r2, r7, r0
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	2301      	movs	r3, #1
 80056c0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			; (mov r8, r8)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2140      	movs	r1, #64	; 0x40
 80056d6:	438a      	bics	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
 80056da:	183b      	adds	r3, r7, r0
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056e2:	f383 8810 	msr	PRIMASK, r3
}
 80056e6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d012      	beq.n	8005716 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_UART_IRQHandler+0x2a0>)
 80056f6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fc fc69 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d01a      	beq.n	800573c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005710:	0018      	movs	r0, r3
 8005712:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e012      	b.n	800573c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f000 f9ad 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571e:	e00d      	b.n	800573c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0018      	movs	r0, r3
 8005724:	f000 f9a8 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e008      	b.n	800573c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f000 f9a3 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2284      	movs	r2, #132	; 0x84
 8005736:	2100      	movs	r1, #0
 8005738:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800573a:	e187      	b.n	8005a4c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	46c0      	nop			; (mov r8, r8)
    return;
 800573e:	e185      	b.n	8005a4c <HAL_UART_IRQHandler+0x5a4>
 8005740:	0000080f 	.word	0x0000080f
 8005744:	04000120 	.word	0x04000120
 8005748:	08006151 	.word	0x08006151

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	2b01      	cmp	r3, #1
 8005752:	d000      	beq.n	8005756 <HAL_UART_IRQHandler+0x2ae>
 8005754:	e139      	b.n	80059ca <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005756:	23a4      	movs	r3, #164	; 0xa4
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2210      	movs	r2, #16
 800575e:	4013      	ands	r3, r2
 8005760:	d100      	bne.n	8005764 <HAL_UART_IRQHandler+0x2bc>
 8005762:	e132      	b.n	80059ca <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005764:	23a0      	movs	r3, #160	; 0xa0
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	4013      	ands	r3, r2
 800576e:	d100      	bne.n	8005772 <HAL_UART_IRQHandler+0x2ca>
 8005770:	e12b      	b.n	80059ca <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2210      	movs	r2, #16
 8005778:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	4013      	ands	r3, r2
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d000      	beq.n	800578a <HAL_UART_IRQHandler+0x2e2>
 8005788:	e09f      	b.n	80058ca <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	217e      	movs	r1, #126	; 0x7e
 8005794:	187b      	adds	r3, r7, r1
 8005796:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005798:	187b      	adds	r3, r7, r1
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d100      	bne.n	80057a2 <HAL_UART_IRQHandler+0x2fa>
 80057a0:	e156      	b.n	8005a50 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2258      	movs	r2, #88	; 0x58
 80057a6:	5a9b      	ldrh	r3, [r3, r2]
 80057a8:	187a      	adds	r2, r7, r1
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d300      	bcc.n	80057b2 <HAL_UART_IRQHandler+0x30a>
 80057b0:	e14e      	b.n	8005a50 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	187a      	adds	r2, r7, r1
 80057b6:	215a      	movs	r1, #90	; 0x5a
 80057b8:	8812      	ldrh	r2, [r2, #0]
 80057ba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d06f      	beq.n	80058a6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80057d0:	2301      	movs	r3, #1
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	499e      	ldr	r1, [pc, #632]	; (8005a60 <HAL_UART_IRQHandler+0x5b8>)
 80057e8:	400a      	ands	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f8:	f3ef 8310 	mrs	r3, PRIMASK
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005800:	677b      	str	r3, [r7, #116]	; 0x74
 8005802:	2301      	movs	r3, #1
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2101      	movs	r1, #1
 800581a:	438a      	bics	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582a:	f3ef 8310 	mrs	r3, PRIMASK
 800582e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005830:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005832:	673b      	str	r3, [r7, #112]	; 0x70
 8005834:	2301      	movs	r3, #1
 8005836:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	f383 8810 	msr	PRIMASK, r3
}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2140      	movs	r1, #64	; 0x40
 800584c:	438a      	bics	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	2120      	movs	r1, #32
 8005862:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005870:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005874:	2301      	movs	r3, #1
 8005876:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800587a:	f383 8810 	msr	PRIMASK, r3
}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2110      	movs	r1, #16
 800588c:	438a      	bics	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7fc fb5f 	bl	8001f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2258      	movs	r2, #88	; 0x58
 80058b0:	5a9a      	ldrh	r2, [r3, r2]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	215a      	movs	r1, #90	; 0x5a
 80058b6:	5a5b      	ldrh	r3, [r3, r1]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 f8e0 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c8:	e0c2      	b.n	8005a50 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2258      	movs	r2, #88	; 0x58
 80058ce:	5a99      	ldrh	r1, [r3, r2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	225a      	movs	r2, #90	; 0x5a
 80058d4:	5a9b      	ldrh	r3, [r3, r2]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	208e      	movs	r0, #142	; 0x8e
 80058da:	183b      	adds	r3, r7, r0
 80058dc:	1a8a      	subs	r2, r1, r2
 80058de:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	225a      	movs	r2, #90	; 0x5a
 80058e4:	5a9b      	ldrh	r3, [r3, r2]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d100      	bne.n	80058ee <HAL_UART_IRQHandler+0x446>
 80058ec:	e0b2      	b.n	8005a54 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80058ee:	183b      	adds	r3, r7, r0
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d100      	bne.n	80058f8 <HAL_UART_IRQHandler+0x450>
 80058f6:	e0ad      	b.n	8005a54 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f8:	f3ef 8310 	mrs	r3, PRIMASK
 80058fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058fe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005900:	2488      	movs	r4, #136	; 0x88
 8005902:	193a      	adds	r2, r7, r4
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	2301      	movs	r3, #1
 8005908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f383 8810 	msr	PRIMASK, r3
}
 8005910:	46c0      	nop			; (mov r8, r8)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4951      	ldr	r1, [pc, #324]	; (8005a64 <HAL_UART_IRQHandler+0x5bc>)
 800591e:	400a      	ands	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	193b      	adds	r3, r7, r4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005930:	f3ef 8310 	mrs	r3, PRIMASK
 8005934:	61bb      	str	r3, [r7, #24]
  return(result);
 8005936:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	2484      	movs	r4, #132	; 0x84
 800593a:	193a      	adds	r2, r7, r4
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f383 8810 	msr	PRIMASK, r3
}
 8005948:	46c0      	nop			; (mov r8, r8)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2101      	movs	r1, #1
 8005956:	438a      	bics	r2, r1
 8005958:	609a      	str	r2, [r3, #8]
 800595a:	193b      	adds	r3, r7, r4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	f383 8810 	msr	PRIMASK, r3
}
 8005966:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	2120      	movs	r1, #32
 800596e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597c:	f3ef 8310 	mrs	r3, PRIMASK
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	2480      	movs	r4, #128	; 0x80
 8005986:	193a      	adds	r2, r7, r4
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	2301      	movs	r3, #1
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f383 8810 	msr	PRIMASK, r3
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2110      	movs	r1, #16
 80059a2:	438a      	bics	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	193b      	adds	r3, r7, r4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	f383 8810 	msr	PRIMASK, r3
}
 80059b2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ba:	183b      	adds	r3, r7, r0
 80059bc:	881a      	ldrh	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	0011      	movs	r1, r2
 80059c2:	0018      	movs	r0, r3
 80059c4:	f000 f860 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059c8:	e044      	b.n	8005a54 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059ca:	23a4      	movs	r3, #164	; 0xa4
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	035b      	lsls	r3, r3, #13
 80059d4:	4013      	ands	r3, r2
 80059d6:	d010      	beq.n	80059fa <HAL_UART_IRQHandler+0x552>
 80059d8:	239c      	movs	r3, #156	; 0x9c
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	03db      	lsls	r3, r3, #15
 80059e2:	4013      	ands	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	0352      	lsls	r2, r2, #13
 80059ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 fbee 	bl	80061d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059f8:	e02f      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059fa:	23a4      	movs	r3, #164	; 0xa4
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2280      	movs	r2, #128	; 0x80
 8005a02:	4013      	ands	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a06:	23a0      	movs	r3, #160	; 0xa0
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d009      	beq.n	8005a26 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01e      	beq.n	8005a58 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	0010      	movs	r0, r2
 8005a22:	4798      	blx	r3
    }
    return;
 8005a24:	e018      	b.n	8005a58 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a26:	23a4      	movs	r3, #164	; 0xa4
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2240      	movs	r2, #64	; 0x40
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
 8005a32:	23a0      	movs	r3, #160	; 0xa0
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2240      	movs	r2, #64	; 0x40
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00d      	beq.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 fb9c 	bl	800617e <UART_EndTransmit_IT>
    return;
 8005a46:	e008      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	e006      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	e004      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	e002      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	e000      	b.n	8005a5a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005a58:	46c0      	nop			; (mov r8, r8)
  }

}
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b02b      	add	sp, #172	; 0xac
 8005a5e:	bd90      	pop	{r4, r7, pc}
 8005a60:	fffffeff 	.word	0xfffffeff
 8005a64:	fffffedf 	.word	0xfffffedf

08005a68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b002      	add	sp, #8
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b002      	add	sp, #8
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	000a      	movs	r2, r1
 8005a92:	1cbb      	adds	r3, r7, #2
 8005a94:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b002      	add	sp, #8
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa8:	231e      	movs	r3, #30
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a83      	ldr	r2, [pc, #524]	; (8005cdc <UART_SetConfig+0x23c>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	4a7e      	ldr	r2, [pc, #504]	; (8005ce0 <UART_SetConfig+0x240>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	0019      	movs	r1, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <UART_SetConfig+0x244>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	0019      	movs	r1, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1c:	4b72      	ldr	r3, [pc, #456]	; (8005ce8 <UART_SetConfig+0x248>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	2203      	movs	r2, #3
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d00d      	beq.n	8005b44 <UART_SetConfig+0xa4>
 8005b28:	d81b      	bhi.n	8005b62 <UART_SetConfig+0xc2>
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d014      	beq.n	8005b58 <UART_SetConfig+0xb8>
 8005b2e:	d818      	bhi.n	8005b62 <UART_SetConfig+0xc2>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <UART_SetConfig+0x9a>
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d00a      	beq.n	8005b4e <UART_SetConfig+0xae>
 8005b38:	e013      	b.n	8005b62 <UART_SetConfig+0xc2>
 8005b3a:	231f      	movs	r3, #31
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	e012      	b.n	8005b6a <UART_SetConfig+0xca>
 8005b44:	231f      	movs	r3, #31
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	2202      	movs	r2, #2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e00d      	b.n	8005b6a <UART_SetConfig+0xca>
 8005b4e:	231f      	movs	r3, #31
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	2204      	movs	r2, #4
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e008      	b.n	8005b6a <UART_SetConfig+0xca>
 8005b58:	231f      	movs	r3, #31
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	e003      	b.n	8005b6a <UART_SetConfig+0xca>
 8005b62:	231f      	movs	r3, #31
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	2210      	movs	r2, #16
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d15c      	bne.n	8005c32 <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8005b78:	231f      	movs	r3, #31
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d015      	beq.n	8005bae <UART_SetConfig+0x10e>
 8005b82:	dc18      	bgt.n	8005bb6 <UART_SetConfig+0x116>
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d00d      	beq.n	8005ba4 <UART_SetConfig+0x104>
 8005b88:	dc15      	bgt.n	8005bb6 <UART_SetConfig+0x116>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <UART_SetConfig+0xf4>
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d005      	beq.n	8005b9e <UART_SetConfig+0xfe>
 8005b92:	e010      	b.n	8005bb6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fd fdb2 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	61bb      	str	r3, [r7, #24]
        break;
 8005b9c:	e012      	b.n	8005bc4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b9e:	4b53      	ldr	r3, [pc, #332]	; (8005cec <UART_SetConfig+0x24c>)
 8005ba0:	61bb      	str	r3, [r7, #24]
        break;
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba4:	f7fd fd4a 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	61bb      	str	r3, [r7, #24]
        break;
 8005bac:	e00a      	b.n	8005bc4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	61bb      	str	r3, [r7, #24]
        break;
 8005bb4:	e006      	b.n	8005bc4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bba:	231e      	movs	r3, #30
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
        break;
 8005bc2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d100      	bne.n	8005bcc <UART_SetConfig+0x12c>
 8005bca:	e07a      	b.n	8005cc2 <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	005a      	lsls	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	18d2      	adds	r2, r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0019      	movs	r1, r3
 8005bde:	0010      	movs	r0, r2
 8005be0:	f7fa fa9a 	bl	8000118 <__udivsi3>
 8005be4:	0003      	movs	r3, r0
 8005be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d91c      	bls.n	8005c28 <UART_SetConfig+0x188>
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	025b      	lsls	r3, r3, #9
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d217      	bcs.n	8005c28 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	200e      	movs	r0, #14
 8005bfe:	183b      	adds	r3, r7, r0
 8005c00:	210f      	movs	r1, #15
 8005c02:	438a      	bics	r2, r1
 8005c04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2207      	movs	r2, #7
 8005c0e:	4013      	ands	r3, r2
 8005c10:	b299      	uxth	r1, r3
 8005c12:	183b      	adds	r3, r7, r0
 8005c14:	183a      	adds	r2, r7, r0
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	183a      	adds	r2, r7, r0
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e04c      	b.n	8005cc2 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8005c28:	231e      	movs	r3, #30
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e047      	b.n	8005cc2 <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c32:	231f      	movs	r3, #31
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d015      	beq.n	8005c68 <UART_SetConfig+0x1c8>
 8005c3c:	dc18      	bgt.n	8005c70 <UART_SetConfig+0x1d0>
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d00d      	beq.n	8005c5e <UART_SetConfig+0x1be>
 8005c42:	dc15      	bgt.n	8005c70 <UART_SetConfig+0x1d0>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <UART_SetConfig+0x1ae>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d005      	beq.n	8005c58 <UART_SetConfig+0x1b8>
 8005c4c:	e010      	b.n	8005c70 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4e:	f7fd fd55 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8005c52:	0003      	movs	r3, r0
 8005c54:	61bb      	str	r3, [r7, #24]
        break;
 8005c56:	e012      	b.n	8005c7e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b24      	ldr	r3, [pc, #144]	; (8005cec <UART_SetConfig+0x24c>)
 8005c5a:	61bb      	str	r3, [r7, #24]
        break;
 8005c5c:	e00f      	b.n	8005c7e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fd fced 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8005c62:	0003      	movs	r3, r0
 8005c64:	61bb      	str	r3, [r7, #24]
        break;
 8005c66:	e00a      	b.n	8005c7e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	61bb      	str	r3, [r7, #24]
        break;
 8005c6e:	e006      	b.n	8005c7e <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c74:	231e      	movs	r3, #30
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	2201      	movs	r2, #1
 8005c7a:	701a      	strb	r2, [r3, #0]
        break;
 8005c7c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01e      	beq.n	8005cc2 <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	085a      	lsrs	r2, r3, #1
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	18d2      	adds	r2, r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	0019      	movs	r1, r3
 8005c94:	0010      	movs	r0, r2
 8005c96:	f7fa fa3f 	bl	8000118 <__udivsi3>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b0f      	cmp	r3, #15
 8005ca2:	d90a      	bls.n	8005cba <UART_SetConfig+0x21a>
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	025b      	lsls	r3, r3, #9
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d205      	bcs.n	8005cba <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	e003      	b.n	8005cc2 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8005cba:	231e      	movs	r3, #30
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cce:	231e      	movs	r3, #30
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	781b      	ldrb	r3, [r3, #0]
}
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b008      	add	sp, #32
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	ffff69f3 	.word	0xffff69f3
 8005ce0:	ffffcfff 	.word	0xffffcfff
 8005ce4:	fffff4ff 	.word	0xfffff4ff
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	007a1200 	.word	0x007a1200

08005cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4a4a      	ldr	r2, [pc, #296]	; (8005e34 <UART_AdvFeatureConfig+0x144>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4013      	ands	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4a43      	ldr	r2, [pc, #268]	; (8005e38 <UART_AdvFeatureConfig+0x148>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	0019      	movs	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2202      	movs	r2, #2
 8005d42:	4013      	ands	r3, r2
 8005d44:	d00b      	beq.n	8005d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4a3b      	ldr	r2, [pc, #236]	; (8005e3c <UART_AdvFeatureConfig+0x14c>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	0019      	movs	r1, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2204      	movs	r2, #4
 8005d64:	4013      	ands	r3, r2
 8005d66:	d00b      	beq.n	8005d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4a34      	ldr	r2, [pc, #208]	; (8005e40 <UART_AdvFeatureConfig+0x150>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	0019      	movs	r1, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2210      	movs	r2, #16
 8005d86:	4013      	ands	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	; (8005e44 <UART_AdvFeatureConfig+0x154>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	0019      	movs	r1, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	2220      	movs	r2, #32
 8005da8:	4013      	ands	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <UART_AdvFeatureConfig+0x158>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	0019      	movs	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d01d      	beq.n	8005e0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <UART_AdvFeatureConfig+0x15c>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	0019      	movs	r1, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	035b      	lsls	r3, r3, #13
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d10b      	bne.n	8005e0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <UART_AdvFeatureConfig+0x160>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	4013      	ands	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4a0e      	ldr	r2, [pc, #56]	; (8005e54 <UART_AdvFeatureConfig+0x164>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }
}
 8005e2c:	46c0      	nop			; (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	ffff7fff 	.word	0xffff7fff
 8005e38:	fffdffff 	.word	0xfffdffff
 8005e3c:	fffeffff 	.word	0xfffeffff
 8005e40:	fffbffff 	.word	0xfffbffff
 8005e44:	ffffefff 	.word	0xffffefff
 8005e48:	ffffdfff 	.word	0xffffdfff
 8005e4c:	ffefffff 	.word	0xffefffff
 8005e50:	ff9fffff 	.word	0xff9fffff
 8005e54:	fff7ffff 	.word	0xfff7ffff

08005e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b092      	sub	sp, #72	; 0x48
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2284      	movs	r2, #132	; 0x84
 8005e64:	2100      	movs	r1, #0
 8005e66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e68:	f7fb ff28 	bl	8001cbc <HAL_GetTick>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2208      	movs	r2, #8
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d12c      	bne.n	8005ed8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	0391      	lsls	r1, r2, #14
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4a46      	ldr	r2, [pc, #280]	; (8005fa0 <UART_CheckIdleState+0x148>)
 8005e88:	9200      	str	r2, [sp, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f000 f88c 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005e90:	1e03      	subs	r3, r0, #0
 8005e92:	d021      	beq.n	8005ed8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e94:	f3ef 8310 	mrs	r3, PRIMASK
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	f383 8810 	msr	PRIMASK, r3
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	438a      	bics	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	f383 8810 	msr	PRIMASK, r3
}
 8005ec4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2278      	movs	r2, #120	; 0x78
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e05f      	b.n	8005f98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2204      	movs	r2, #4
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d146      	bne.n	8005f74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee8:	2280      	movs	r2, #128	; 0x80
 8005eea:	03d1      	lsls	r1, r2, #15
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <UART_CheckIdleState+0x148>)
 8005ef0:	9200      	str	r2, [sp, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f000 f858 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d03b      	beq.n	8005f74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005efc:	f3ef 8310 	mrs	r3, PRIMASK
 8005f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
 8005f06:	2301      	movs	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f383 8810 	msr	PRIMASK, r3
}
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4921      	ldr	r1, [pc, #132]	; (8005fa4 <UART_CheckIdleState+0x14c>)
 8005f1e:	400a      	ands	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f383 8810 	msr	PRIMASK, r3
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f32:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	633b      	str	r3, [r7, #48]	; 0x30
 8005f38:	2301      	movs	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f383 8810 	msr	PRIMASK, r3
}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2101      	movs	r1, #1
 8005f50:	438a      	bics	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f383 8810 	msr	PRIMASK, r3
}
 8005f5e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	2120      	movs	r1, #32
 8005f66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2278      	movs	r2, #120	; 0x78
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e011      	b.n	8005f98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	2120      	movs	r1, #32
 8005f80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2278      	movs	r2, #120	; 0x78
 8005f92:	2100      	movs	r1, #0
 8005f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b010      	add	sp, #64	; 0x40
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	01ffffff 	.word	0x01ffffff
 8005fa4:	fffffedf 	.word	0xfffffedf

08005fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	1dfb      	adds	r3, r7, #7
 8005fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb8:	e051      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	d04e      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc0:	f7fb fe7c 	bl	8001cbc <HAL_GetTick>
 8005fc4:	0002      	movs	r2, r0
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e051      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d03b      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b80      	cmp	r3, #128	; 0x80
 8005fea:	d038      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d035      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d111      	bne.n	8006024 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f83c 	bl	8006088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2284      	movs	r2, #132	; 0x84
 8006014:	2108      	movs	r1, #8
 8006016:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2278      	movs	r2, #120	; 0x78
 800601c:	2100      	movs	r1, #0
 800601e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e02c      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69da      	ldr	r2, [r3, #28]
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	401a      	ands	r2, r3
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	429a      	cmp	r2, r3
 8006036:	d112      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 f81f 	bl	8006088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2284      	movs	r2, #132	; 0x84
 800604e:	2120      	movs	r1, #32
 8006050:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2278      	movs	r2, #120	; 0x78
 8006056:	2100      	movs	r1, #0
 8006058:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00f      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	425a      	negs	r2, r3
 800606e:	4153      	adcs	r3, r2
 8006070:	b2db      	uxtb	r3, r3
 8006072:	001a      	movs	r2, r3
 8006074:	1dfb      	adds	r3, r7, #7
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d09e      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b004      	add	sp, #16
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08e      	sub	sp, #56	; 0x38
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006090:	f3ef 8310 	mrs	r3, PRIMASK
 8006094:	617b      	str	r3, [r7, #20]
  return(result);
 8006096:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	2301      	movs	r3, #1
 800609c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f383 8810 	msr	PRIMASK, r3
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4926      	ldr	r1, [pc, #152]	; (800614c <UART_EndRxTransfer+0xc4>)
 80060b2:	400a      	ands	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f383 8810 	msr	PRIMASK, r3
}
 80060c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	623b      	str	r3, [r7, #32]
  return(result);
 80060c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
 80060cc:	2301      	movs	r3, #1
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2101      	movs	r1, #1
 80060e4:	438a      	bics	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d118      	bne.n	800612e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006100:	60bb      	str	r3, [r7, #8]
  return(result);
 8006102:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006106:	2301      	movs	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f383 8810 	msr	PRIMASK, r3
}
 8006110:	46c0      	nop			; (mov r8, r8)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2110      	movs	r1, #16
 800611e:	438a      	bics	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f383 8810 	msr	PRIMASK, r3
}
 800612c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2280      	movs	r2, #128	; 0x80
 8006132:	2120      	movs	r1, #32
 8006134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	b00e      	add	sp, #56	; 0x38
 8006148:	bd80      	pop	{r7, pc}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	fffffedf 	.word	0xfffffedf

08006150 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	225a      	movs	r2, #90	; 0x5a
 8006162:	2100      	movs	r1, #0
 8006164:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2252      	movs	r2, #82	; 0x52
 800616a:	2100      	movs	r1, #0
 800616c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	0018      	movs	r0, r3
 8006172:	f7ff fc81 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	46bd      	mov	sp, r7
 800617a:	b004      	add	sp, #16
 800617c:	bd80      	pop	{r7, pc}

0800617e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006186:	f3ef 8310 	mrs	r3, PRIMASK
 800618a:	60bb      	str	r3, [r7, #8]
  return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f383 8810 	msr	PRIMASK, r3
}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2140      	movs	r1, #64	; 0x40
 80061a8:	438a      	bics	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f383 8810 	msr	PRIMASK, r3
}
 80061b6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7ff fc4e 	bl	8005a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061cc:	46c0      	nop			; (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b006      	add	sp, #24
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b002      	add	sp, #8
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	20000018 	.word	0x20000018

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4d0c      	ldr	r5, [pc, #48]	; (8006228 <__libc_init_array+0x38>)
 80061f6:	4c0d      	ldr	r4, [pc, #52]	; (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	2600      	movs	r6, #0
 8006202:	f000 f943 	bl	800648c <_init>
 8006206:	4d0a      	ldr	r5, [pc, #40]	; (8006230 <__libc_init_array+0x40>)
 8006208:	4c0a      	ldr	r4, [pc, #40]	; (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	00b3      	lsls	r3, r6, #2
 8006216:	58eb      	ldr	r3, [r5, r3]
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	00b3      	lsls	r3, r6, #2
 8006220:	58eb      	ldr	r3, [r5, r3]
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	080065cc 	.word	0x080065cc
 800622c:	080065cc 	.word	0x080065cc
 8006230:	080065cc 	.word	0x080065cc
 8006234:	080065d0 	.word	0x080065d0

08006238 <malloc>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <malloc+0x10>)
 800623c:	0001      	movs	r1, r0
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	f000 f86a 	bl	8006318 <_malloc_r>
 8006244:	bd10      	pop	{r4, pc}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	20000018 	.word	0x20000018

0800624c <free>:
 800624c:	b510      	push	{r4, lr}
 800624e:	4b03      	ldr	r3, [pc, #12]	; (800625c <free+0x10>)
 8006250:	0001      	movs	r1, r0
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	f000 f816 	bl	8006284 <_free_r>
 8006258:	bd10      	pop	{r4, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	20000018 	.word	0x20000018

08006260 <memcpy>:
 8006260:	2300      	movs	r3, #0
 8006262:	b510      	push	{r4, lr}
 8006264:	429a      	cmp	r2, r3
 8006266:	d100      	bne.n	800626a <memcpy+0xa>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	5ccc      	ldrb	r4, [r1, r3]
 800626c:	54c4      	strb	r4, [r0, r3]
 800626e:	3301      	adds	r3, #1
 8006270:	e7f8      	b.n	8006264 <memcpy+0x4>

08006272 <memset>:
 8006272:	0003      	movs	r3, r0
 8006274:	1882      	adds	r2, r0, r2
 8006276:	4293      	cmp	r3, r2
 8006278:	d100      	bne.n	800627c <memset+0xa>
 800627a:	4770      	bx	lr
 800627c:	7019      	strb	r1, [r3, #0]
 800627e:	3301      	adds	r3, #1
 8006280:	e7f9      	b.n	8006276 <memset+0x4>
	...

08006284 <_free_r>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	0005      	movs	r5, r0
 8006288:	2900      	cmp	r1, #0
 800628a:	d010      	beq.n	80062ae <_free_r+0x2a>
 800628c:	1f0c      	subs	r4, r1, #4
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	da00      	bge.n	8006296 <_free_r+0x12>
 8006294:	18e4      	adds	r4, r4, r3
 8006296:	0028      	movs	r0, r5
 8006298:	f000 f8b8 	bl	800640c <__malloc_lock>
 800629c:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <_free_r+0x90>)
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <_free_r+0x2c>
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	6014      	str	r4, [r2, #0]
 80062a8:	0028      	movs	r0, r5
 80062aa:	f000 f8b7 	bl	800641c <__malloc_unlock>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d908      	bls.n	80062c6 <_free_r+0x42>
 80062b4:	6821      	ldr	r1, [r4, #0]
 80062b6:	1860      	adds	r0, r4, r1
 80062b8:	4283      	cmp	r3, r0
 80062ba:	d1f3      	bne.n	80062a4 <_free_r+0x20>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	1841      	adds	r1, r0, r1
 80062c2:	6021      	str	r1, [r4, #0]
 80062c4:	e7ee      	b.n	80062a4 <_free_r+0x20>
 80062c6:	001a      	movs	r2, r3
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <_free_r+0x4e>
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	d9f9      	bls.n	80062c6 <_free_r+0x42>
 80062d2:	6811      	ldr	r1, [r2, #0]
 80062d4:	1850      	adds	r0, r2, r1
 80062d6:	42a0      	cmp	r0, r4
 80062d8:	d10b      	bne.n	80062f2 <_free_r+0x6e>
 80062da:	6820      	ldr	r0, [r4, #0]
 80062dc:	1809      	adds	r1, r1, r0
 80062de:	1850      	adds	r0, r2, r1
 80062e0:	6011      	str	r1, [r2, #0]
 80062e2:	4283      	cmp	r3, r0
 80062e4:	d1e0      	bne.n	80062a8 <_free_r+0x24>
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	1841      	adds	r1, r0, r1
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e7da      	b.n	80062a8 <_free_r+0x24>
 80062f2:	42a0      	cmp	r0, r4
 80062f4:	d902      	bls.n	80062fc <_free_r+0x78>
 80062f6:	230c      	movs	r3, #12
 80062f8:	602b      	str	r3, [r5, #0]
 80062fa:	e7d5      	b.n	80062a8 <_free_r+0x24>
 80062fc:	6821      	ldr	r1, [r4, #0]
 80062fe:	1860      	adds	r0, r4, r1
 8006300:	4283      	cmp	r3, r0
 8006302:	d103      	bne.n	800630c <_free_r+0x88>
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	1841      	adds	r1, r0, r1
 800630a:	6021      	str	r1, [r4, #0]
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	6054      	str	r4, [r2, #4]
 8006310:	e7ca      	b.n	80062a8 <_free_r+0x24>
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	200000bc 	.word	0x200000bc

08006318 <_malloc_r>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	2303      	movs	r3, #3
 800631c:	1ccd      	adds	r5, r1, #3
 800631e:	439d      	bics	r5, r3
 8006320:	3508      	adds	r5, #8
 8006322:	0006      	movs	r6, r0
 8006324:	2d0c      	cmp	r5, #12
 8006326:	d21f      	bcs.n	8006368 <_malloc_r+0x50>
 8006328:	250c      	movs	r5, #12
 800632a:	42a9      	cmp	r1, r5
 800632c:	d81e      	bhi.n	800636c <_malloc_r+0x54>
 800632e:	0030      	movs	r0, r6
 8006330:	f000 f86c 	bl	800640c <__malloc_lock>
 8006334:	4925      	ldr	r1, [pc, #148]	; (80063cc <_malloc_r+0xb4>)
 8006336:	680a      	ldr	r2, [r1, #0]
 8006338:	0014      	movs	r4, r2
 800633a:	2c00      	cmp	r4, #0
 800633c:	d11a      	bne.n	8006374 <_malloc_r+0x5c>
 800633e:	4f24      	ldr	r7, [pc, #144]	; (80063d0 <_malloc_r+0xb8>)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <_malloc_r+0x38>
 8006346:	0021      	movs	r1, r4
 8006348:	0030      	movs	r0, r6
 800634a:	f000 f84d 	bl	80063e8 <_sbrk_r>
 800634e:	6038      	str	r0, [r7, #0]
 8006350:	0029      	movs	r1, r5
 8006352:	0030      	movs	r0, r6
 8006354:	f000 f848 	bl	80063e8 <_sbrk_r>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d12b      	bne.n	80063b4 <_malloc_r+0x9c>
 800635c:	230c      	movs	r3, #12
 800635e:	0030      	movs	r0, r6
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	f000 f85b 	bl	800641c <__malloc_unlock>
 8006366:	e003      	b.n	8006370 <_malloc_r+0x58>
 8006368:	2d00      	cmp	r5, #0
 800636a:	dade      	bge.n	800632a <_malloc_r+0x12>
 800636c:	230c      	movs	r3, #12
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	2000      	movs	r0, #0
 8006372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	1b5b      	subs	r3, r3, r5
 8006378:	d419      	bmi.n	80063ae <_malloc_r+0x96>
 800637a:	2b0b      	cmp	r3, #11
 800637c:	d903      	bls.n	8006386 <_malloc_r+0x6e>
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	18e4      	adds	r4, r4, r3
 8006382:	6025      	str	r5, [r4, #0]
 8006384:	e003      	b.n	800638e <_malloc_r+0x76>
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	42a2      	cmp	r2, r4
 800638a:	d10e      	bne.n	80063aa <_malloc_r+0x92>
 800638c:	600b      	str	r3, [r1, #0]
 800638e:	0030      	movs	r0, r6
 8006390:	f000 f844 	bl	800641c <__malloc_unlock>
 8006394:	0020      	movs	r0, r4
 8006396:	2207      	movs	r2, #7
 8006398:	300b      	adds	r0, #11
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	4390      	bics	r0, r2
 800639e:	1ac2      	subs	r2, r0, r3
 80063a0:	4298      	cmp	r0, r3
 80063a2:	d0e6      	beq.n	8006372 <_malloc_r+0x5a>
 80063a4:	1a1b      	subs	r3, r3, r0
 80063a6:	50a3      	str	r3, [r4, r2]
 80063a8:	e7e3      	b.n	8006372 <_malloc_r+0x5a>
 80063aa:	6053      	str	r3, [r2, #4]
 80063ac:	e7ef      	b.n	800638e <_malloc_r+0x76>
 80063ae:	0022      	movs	r2, r4
 80063b0:	6864      	ldr	r4, [r4, #4]
 80063b2:	e7c2      	b.n	800633a <_malloc_r+0x22>
 80063b4:	2303      	movs	r3, #3
 80063b6:	1cc4      	adds	r4, r0, #3
 80063b8:	439c      	bics	r4, r3
 80063ba:	42a0      	cmp	r0, r4
 80063bc:	d0e1      	beq.n	8006382 <_malloc_r+0x6a>
 80063be:	1a21      	subs	r1, r4, r0
 80063c0:	0030      	movs	r0, r6
 80063c2:	f000 f811 	bl	80063e8 <_sbrk_r>
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	d1db      	bne.n	8006382 <_malloc_r+0x6a>
 80063ca:	e7c7      	b.n	800635c <_malloc_r+0x44>
 80063cc:	200000bc 	.word	0x200000bc
 80063d0:	200000c0 	.word	0x200000c0

080063d4 <realloc>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <realloc+0x10>)
 80063d8:	000a      	movs	r2, r1
 80063da:	0001      	movs	r1, r0
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f000 f825 	bl	800642c <_realloc_r>
 80063e2:	bd10      	pop	{r4, pc}
 80063e4:	20000018 	.word	0x20000018

080063e8 <_sbrk_r>:
 80063e8:	2300      	movs	r3, #0
 80063ea:	b570      	push	{r4, r5, r6, lr}
 80063ec:	4d06      	ldr	r5, [pc, #24]	; (8006408 <_sbrk_r+0x20>)
 80063ee:	0004      	movs	r4, r0
 80063f0:	0008      	movs	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fb fb32 	bl	8001a5c <_sbrk>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d103      	bne.n	8006404 <_sbrk_r+0x1c>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d000      	beq.n	8006404 <_sbrk_r+0x1c>
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	bd70      	pop	{r4, r5, r6, pc}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	200002ac 	.word	0x200002ac

0800640c <__malloc_lock>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4802      	ldr	r0, [pc, #8]	; (8006418 <__malloc_lock+0xc>)
 8006410:	f000 f832 	bl	8006478 <__retarget_lock_acquire_recursive>
 8006414:	bd10      	pop	{r4, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	200002b4 	.word	0x200002b4

0800641c <__malloc_unlock>:
 800641c:	b510      	push	{r4, lr}
 800641e:	4802      	ldr	r0, [pc, #8]	; (8006428 <__malloc_unlock+0xc>)
 8006420:	f000 f82b 	bl	800647a <__retarget_lock_release_recursive>
 8006424:	bd10      	pop	{r4, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	200002b4 	.word	0x200002b4

0800642c <_realloc_r>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	0007      	movs	r7, r0
 8006430:	000d      	movs	r5, r1
 8006432:	0016      	movs	r6, r2
 8006434:	2900      	cmp	r1, #0
 8006436:	d105      	bne.n	8006444 <_realloc_r+0x18>
 8006438:	0011      	movs	r1, r2
 800643a:	f7ff ff6d 	bl	8006318 <_malloc_r>
 800643e:	0004      	movs	r4, r0
 8006440:	0020      	movs	r0, r4
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006444:	2a00      	cmp	r2, #0
 8006446:	d103      	bne.n	8006450 <_realloc_r+0x24>
 8006448:	f7ff ff1c 	bl	8006284 <_free_r>
 800644c:	0034      	movs	r4, r6
 800644e:	e7f7      	b.n	8006440 <_realloc_r+0x14>
 8006450:	f000 f814 	bl	800647c <_malloc_usable_size_r>
 8006454:	002c      	movs	r4, r5
 8006456:	42b0      	cmp	r0, r6
 8006458:	d2f2      	bcs.n	8006440 <_realloc_r+0x14>
 800645a:	0031      	movs	r1, r6
 800645c:	0038      	movs	r0, r7
 800645e:	f7ff ff5b 	bl	8006318 <_malloc_r>
 8006462:	1e04      	subs	r4, r0, #0
 8006464:	d0ec      	beq.n	8006440 <_realloc_r+0x14>
 8006466:	0029      	movs	r1, r5
 8006468:	0032      	movs	r2, r6
 800646a:	f7ff fef9 	bl	8006260 <memcpy>
 800646e:	0029      	movs	r1, r5
 8006470:	0038      	movs	r0, r7
 8006472:	f7ff ff07 	bl	8006284 <_free_r>
 8006476:	e7e3      	b.n	8006440 <_realloc_r+0x14>

08006478 <__retarget_lock_acquire_recursive>:
 8006478:	4770      	bx	lr

0800647a <__retarget_lock_release_recursive>:
 800647a:	4770      	bx	lr

0800647c <_malloc_usable_size_r>:
 800647c:	1f0b      	subs	r3, r1, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	1f18      	subs	r0, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	da01      	bge.n	800648a <_malloc_usable_size_r+0xe>
 8006486:	580b      	ldr	r3, [r1, r0]
 8006488:	18c0      	adds	r0, r0, r3
 800648a:	4770      	bx	lr

0800648c <_init>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr

08006498 <_fini>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr
