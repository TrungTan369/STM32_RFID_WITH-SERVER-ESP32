
TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006f20  08006f20  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f20  08006f20  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f24  08006f24  00007f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006f28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000068  08006f90  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006f90  000083ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015af6  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d8  00000000  00000000  0001db86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00021260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f70  00000000  00000000  00022620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014137  00000000  00000000  00023590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bef9  00000000  00000000  000376c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b671  00000000  00000000  000535c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bec31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  000bec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000c37e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d58 	.word	0x08006d58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006d58 	.word	0x08006d58

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000250:	240f      	movs	r4, #15
 8000252:	193a      	adds	r2, r7, r4
 8000254:	1df9      	adds	r1, r7, #7
 8000256:	4806      	ldr	r0, [pc, #24]	@ (8000270 <RC522_SPI_Transfer+0x2c>)
 8000258:	2364      	movs	r3, #100	@ 0x64
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2301      	movs	r3, #1
 800025e:	f003 fced 	bl	8003c3c <HAL_SPI_TransmitReceive>

	return rx_data;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	781b      	ldrb	r3, [r3, #0]
}
 8000266:	0018      	movs	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	b005      	add	sp, #20
 800026c:	bd90      	pop	{r4, r7, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	200000f0 	.word	0x200000f0

08000274 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	1dbb      	adds	r3, r7, #6
 8000282:	1c0a      	adds	r2, r1, #0
 8000284:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000286:	2390      	movs	r3, #144	@ 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2200      	movs	r2, #0
 800028c:	2110      	movs	r1, #16
 800028e:	0018      	movs	r0, r3
 8000290:	f002 fa19 	bl	80026c6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	227e      	movs	r2, #126	@ 0x7e
 800029e:	4013      	ands	r3, r2
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffce 	bl	8000244 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80002a8:	1dbb      	adds	r3, r7, #6
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	0018      	movs	r0, r3
 80002ae:	f7ff ffc9 	bl	8000244 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80002b2:	2390      	movs	r3, #144	@ 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f002 fa03 	bl	80026c6 <HAL_GPIO_WritePin>
}
 80002c0:	46c0      	nop			@ (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b002      	add	sp, #8
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	0002      	movs	r2, r0
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80002d4:	2390      	movs	r3, #144	@ 0x90
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	2200      	movs	r2, #0
 80002da:	2110      	movs	r1, #16
 80002dc:	0018      	movs	r0, r3
 80002de:	f002 f9f2 	bl	80026c6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	227e      	movs	r2, #126	@ 0x7e
 80002ec:	4013      	ands	r3, r2
 80002ee:	b25b      	sxtb	r3, r3
 80002f0:	2280      	movs	r2, #128	@ 0x80
 80002f2:	4252      	negs	r2, r2
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ffa2 	bl	8000244 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000300:	250f      	movs	r5, #15
 8000302:	197c      	adds	r4, r7, r5
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff9d 	bl	8000244 <RC522_SPI_Transfer>
 800030a:	0003      	movs	r3, r0
 800030c:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800030e:	2390      	movs	r3, #144	@ 0x90
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	0018      	movs	r0, r3
 8000318:	f002 f9d5 	bl	80026c6 <HAL_GPIO_WritePin>

	return val;
 800031c:	197b      	adds	r3, r7, r5
 800031e:	781b      	ldrb	r3, [r3, #0]

}
 8000320:	0018      	movs	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	b004      	add	sp, #16
 8000326:	bdb0      	pop	{r4, r5, r7, pc}

08000328 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000328:	b5b0      	push	{r4, r5, r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	0002      	movs	r2, r0
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	1dbb      	adds	r3, r7, #6
 8000336:	1c0a      	adds	r2, r1, #0
 8000338:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800033a:	250f      	movs	r5, #15
 800033c:	197c      	adds	r4, r7, r5
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	0018      	movs	r0, r3
 8000344:	f7ff ffc0 	bl	80002c8 <Read_MFRC522>
 8000348:	0003      	movs	r3, r0
 800034a:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800034c:	197a      	adds	r2, r7, r5
 800034e:	1dbb      	adds	r3, r7, #6
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	4313      	orrs	r3, r2
 8000356:	b2da      	uxtb	r2, r3
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f7ff ff88 	bl	8000274 <Write_MFRC522>
}
 8000364:	46c0      	nop			@ (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b004      	add	sp, #16
 800036a:	bdb0      	pop	{r4, r5, r7, pc}

0800036c <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800036c:	b5b0      	push	{r4, r5, r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	0002      	movs	r2, r0
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	1dbb      	adds	r3, r7, #6
 800037a:	1c0a      	adds	r2, r1, #0
 800037c:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800037e:	250f      	movs	r5, #15
 8000380:	197c      	adds	r4, r7, r5
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	0018      	movs	r0, r3
 8000388:	f7ff ff9e 	bl	80002c8 <Read_MFRC522>
 800038c:	0003      	movs	r3, r0
 800038e:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000390:	1dbb      	adds	r3, r7, #6
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b25b      	sxtb	r3, r3
 8000396:	43db      	mvns	r3, r3
 8000398:	b25b      	sxtb	r3, r3
 800039a:	197a      	adds	r2, r7, r5
 800039c:	7812      	ldrb	r2, [r2, #0]
 800039e:	b252      	sxtb	r2, r2
 80003a0:	4013      	ands	r3, r2
 80003a2:	b25b      	sxtb	r3, r3
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	0011      	movs	r1, r2
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff61 	bl	8000274 <Write_MFRC522>
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b004      	add	sp, #16
 80003b8:	bdb0      	pop	{r4, r5, r7, pc}

080003ba <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80003be:	2014      	movs	r0, #20
 80003c0:	f7ff ff82 	bl	80002c8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80003c4:	2103      	movs	r1, #3
 80003c6:	2014      	movs	r0, #20
 80003c8:	f7ff ffae 	bl	8000328 <SetBitMask>
}
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80003d6:	210f      	movs	r1, #15
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff ff4b 	bl	8000274 <Write_MFRC522>
}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80003e8:	2390      	movs	r3, #144	@ 0x90
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 f968 	bl	80026c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80003f6:	2390      	movs	r3, #144	@ 0x90
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	2201      	movs	r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 f961 	bl	80026c6 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000404:	f7ff ffe5 	bl	80003d2 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000408:	218d      	movs	r1, #141	@ 0x8d
 800040a:	202a      	movs	r0, #42	@ 0x2a
 800040c:	f7ff ff32 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000410:	213e      	movs	r1, #62	@ 0x3e
 8000412:	202b      	movs	r0, #43	@ 0x2b
 8000414:	f7ff ff2e 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000418:	211e      	movs	r1, #30
 800041a:	202d      	movs	r0, #45	@ 0x2d
 800041c:	f7ff ff2a 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000420:	2100      	movs	r1, #0
 8000422:	202c      	movs	r0, #44	@ 0x2c
 8000424:	f7ff ff26 	bl	8000274 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000428:	2140      	movs	r1, #64	@ 0x40
 800042a:	2015      	movs	r0, #21
 800042c:	f7ff ff22 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000430:	213d      	movs	r1, #61	@ 0x3d
 8000432:	2011      	movs	r0, #17
 8000434:	f7ff ff1e 	bl	8000274 <Write_MFRC522>

	AntennaOn();
 8000438:	f7ff ffbf 	bl	80003ba <AntennaOn>
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000442:	b5b0      	push	{r4, r5, r7, lr}
 8000444:	b088      	sub	sp, #32
 8000446:	af00      	add	r7, sp, #0
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	0011      	movs	r1, r2
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	240f      	movs	r4, #15
 8000450:	193b      	adds	r3, r7, r4
 8000452:	1c02      	adds	r2, r0, #0
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	230e      	movs	r3, #14
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	1c0a      	adds	r2, r1, #0
 800045c:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 800045e:	231f      	movs	r3, #31
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	2202      	movs	r2, #2
 8000464:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 8000466:	211e      	movs	r1, #30
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 800046e:	201d      	movs	r0, #29
 8000470:	183b      	adds	r3, r7, r0
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000476:	193b      	adds	r3, r7, r4
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b0c      	cmp	r3, #12
 800047c:	d008      	beq.n	8000490 <MFRC522_ToCard+0x4e>
 800047e:	2b0e      	cmp	r3, #14
 8000480:	d10f      	bne.n	80004a2 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2212      	movs	r2, #18
 8000486:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8000488:	183b      	adds	r3, r7, r0
 800048a:	2210      	movs	r2, #16
 800048c:	701a      	strb	r2, [r3, #0]
			break;
 800048e:	e009      	b.n	80004a4 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000490:	231e      	movs	r3, #30
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	2277      	movs	r2, #119	@ 0x77
 8000496:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8000498:	231d      	movs	r3, #29
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	2230      	movs	r2, #48	@ 0x30
 800049e:	701a      	strb	r2, [r3, #0]
			break;
 80004a0:	e000      	b.n	80004a4 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 80004a2:	46c0      	nop			@ (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80004a4:	231e      	movs	r3, #30
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	4252      	negs	r2, r2
 80004ae:	4313      	orrs	r3, r2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	0019      	movs	r1, r3
 80004b4:	2002      	movs	r0, #2
 80004b6:	f7ff fedd 	bl	8000274 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80004ba:	2180      	movs	r1, #128	@ 0x80
 80004bc:	2004      	movs	r0, #4
 80004be:	f7ff ff55 	bl	800036c <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	200a      	movs	r0, #10
 80004c6:	f7ff ff2f 	bl	8000328 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80004ca:	2100      	movs	r1, #0
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff fed1 	bl	8000274 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
 80004d6:	e00a      	b.n	80004ee <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	18d3      	adds	r3, r2, r3
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	0019      	movs	r1, r3
 80004e2:	2009      	movs	r0, #9
 80004e4:	f7ff fec6 	bl	8000274 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	3301      	adds	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	230e      	movs	r3, #14
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d3ee      	bcc.n	80004d8 <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80004fa:	240f      	movs	r4, #15
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	0019      	movs	r1, r3
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff feb6 	bl	8000274 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000508:	193b      	adds	r3, r7, r4
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b0c      	cmp	r3, #12
 800050e:	d103      	bne.n	8000518 <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	200d      	movs	r0, #13
 8000514:	f7ff ff08 	bl	8000328 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000518:	23fa      	movs	r3, #250	@ 0xfa
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800051e:	251c      	movs	r5, #28
 8000520:	197c      	adds	r4, r7, r5
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff fed0 	bl	80002c8 <Read_MFRC522>
 8000528:	0003      	movs	r3, r0
 800052a:	7023      	strb	r3, [r4, #0]
        i--;
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	3b01      	subs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00d      	beq.n	8000554 <MFRC522_ToCard+0x112>
 8000538:	197b      	adds	r3, r7, r5
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4013      	ands	r3, r2
 8000540:	d108      	bne.n	8000554 <MFRC522_ToCard+0x112>
 8000542:	197b      	adds	r3, r7, r5
 8000544:	221d      	movs	r2, #29
 8000546:	18ba      	adds	r2, r7, r2
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	4013      	ands	r3, r2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0e4      	beq.n	800051e <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000554:	2180      	movs	r1, #128	@ 0x80
 8000556:	200d      	movs	r0, #13
 8000558:	f7ff ff08 	bl	800036c <ClearBitMask>

    if (i != 0)
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d100      	bne.n	8000564 <MFRC522_ToCard+0x122>
 8000562:	e070      	b.n	8000646 <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000564:	2006      	movs	r0, #6
 8000566:	f7ff feaf 	bl	80002c8 <Read_MFRC522>
 800056a:	0003      	movs	r3, r0
 800056c:	001a      	movs	r2, r3
 800056e:	231b      	movs	r3, #27
 8000570:	4013      	ands	r3, r2
 8000572:	d164      	bne.n	800063e <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8000574:	211f      	movs	r1, #31
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 800057c:	231c      	movs	r3, #28
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	221e      	movs	r2, #30
 8000582:	18ba      	adds	r2, r7, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	4013      	ands	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	001a      	movs	r2, r3
 800058e:	2301      	movs	r3, #1
 8000590:	4013      	ands	r3, r2
 8000592:	d002      	beq.n	800059a <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 800059a:	230f      	movs	r3, #15
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0c      	cmp	r3, #12
 80005a2:	d150      	bne.n	8000646 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80005a4:	251c      	movs	r5, #28
 80005a6:	197c      	adds	r4, r7, r5
 80005a8:	200a      	movs	r0, #10
 80005aa:	f7ff fe8d 	bl	80002c8 <Read_MFRC522>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80005b2:	200c      	movs	r0, #12
 80005b4:	f7ff fe88 	bl	80002c8 <Read_MFRC522>
 80005b8:	0003      	movs	r3, r0
 80005ba:	0019      	movs	r1, r3
 80005bc:	2017      	movs	r0, #23
 80005be:	183b      	adds	r3, r7, r0
 80005c0:	2207      	movs	r2, #7
 80005c2:	400a      	ands	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 80005c6:	0001      	movs	r1, r0
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00a      	beq.n	80005e6 <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 80005d0:	197b      	adds	r3, r7, r5
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	00da      	lsls	r2, r3, #3
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	001a      	movs	r2, r3
 80005e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	e006      	b.n	80005f4 <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 80005e6:	231c      	movs	r3, #28
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	001a      	movs	r2, r3
 80005f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f2:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80005f4:	221c      	movs	r2, #28
 80005f6:	18bb      	adds	r3, r7, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 80005fe:	18bb      	adds	r3, r7, r2
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 8000604:	221c      	movs	r2, #28
 8000606:	18bb      	adds	r3, r7, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b10      	cmp	r3, #16
 800060c:	d902      	bls.n	8000614 <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 800060e:	18bb      	adds	r3, r7, r2
 8000610:	2210      	movs	r2, #16
 8000612:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	e00a      	b.n	8000630 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	18d4      	adds	r4, r2, r3
 8000620:	2009      	movs	r0, #9
 8000622:	f7ff fe51 	bl	80002c8 <Read_MFRC522>
 8000626:	0003      	movs	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	3301      	adds	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
 8000630:	231c      	movs	r3, #28
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	69ba      	ldr	r2, [r7, #24]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3ee      	bcc.n	800061a <MFRC522_ToCard+0x1d8>
 800063c:	e003      	b.n	8000646 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800063e:	231f      	movs	r3, #31
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000646:	231f      	movs	r3, #31
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b008      	add	sp, #32
 8000652:	bdb0      	pop	{r4, r5, r7, pc}

08000654 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	0002      	movs	r2, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000662:	2107      	movs	r1, #7
 8000664:	200d      	movs	r0, #13
 8000666:	f7ff fe05 	bl	8000274 <Write_MFRC522>

	TagType[0] = reqMode;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	1dfa      	adds	r2, r7, #7
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000672:	250f      	movs	r5, #15
 8000674:	197c      	adds	r4, r7, r5
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	2308      	movs	r3, #8
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	0013      	movs	r3, r2
 8000682:	2201      	movs	r2, #1
 8000684:	200c      	movs	r0, #12
 8000686:	f7ff fedc 	bl	8000442 <MFRC522_ToCard>
 800068a:	0003      	movs	r3, r0
 800068c:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <MFRC522_Request+0x48>
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2b10      	cmp	r3, #16
 800069a:	d003      	beq.n	80006a4 <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 800069c:	230f      	movs	r3, #15
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	781b      	ldrb	r3, [r3, #0]
}
 80006aa:	0018      	movs	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}

080006b2 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80006b2:	b5b0      	push	{r4, r5, r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af02      	add	r7, sp, #8
 80006b8:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80006ba:	230d      	movs	r3, #13
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80006c2:	2100      	movs	r1, #0
 80006c4:	200d      	movs	r0, #13
 80006c6:	f7ff fdd5 	bl	8000274 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2293      	movs	r2, #147	@ 0x93
 80006ce:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	2220      	movs	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80006d8:	250f      	movs	r5, #15
 80006da:	197c      	adds	r4, r7, r5
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	2308      	movs	r3, #8
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	0013      	movs	r3, r2
 80006e8:	2202      	movs	r2, #2
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff fea9 	bl	8000442 <MFRC522_ToCard>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d128      	bne.n	800074e <MFRC522_Anticoll+0x9c>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80006fc:	230e      	movs	r3, #14
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e010      	b.n	8000728 <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 8000706:	200e      	movs	r0, #14
 8000708:	183b      	adds	r3, r7, r0
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	7819      	ldrb	r1, [r3, #0]
 8000712:	220d      	movs	r2, #13
 8000714:	18bb      	adds	r3, r7, r2
 8000716:	18ba      	adds	r2, r7, r2
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	404a      	eors	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 800071e:	183b      	adds	r3, r7, r0
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	183b      	adds	r3, r7, r0
 8000724:	3201      	adds	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	220e      	movs	r2, #14
 800072a:	18bb      	adds	r3, r7, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9e9      	bls.n	8000706 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 8000732:	18bb      	adds	r3, r7, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	220d      	movs	r2, #13
 800073e:	18ba      	adds	r2, r7, r2
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d003      	beq.n	800074e <MFRC522_Anticoll+0x9c>
		{
			status = MI_ERR;
 8000746:	230f      	movs	r3, #15
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
		}
    }

    return status;
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b004      	add	sp, #16
 800075a:	bdb0      	pop	{r4, r5, r7, pc}

0800075c <rgb>:
int red = 0;
int status_led =1;
int increasing = 1;
int decreasing = 0;

void rgb(int red, int green, int blue){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100 - blue);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2264      	movs	r2, #100	@ 0x64
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <rgb+0x38>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 110 - green);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	226e      	movs	r2, #110	@ 0x6e
 8000778:	1ad2      	subs	r2, r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <rgb+0x38>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 120 - red);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2278      	movs	r2, #120	@ 0x78
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <rgb+0x38>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000154 	.word	0x20000154

08000798 <getKeyinput>:
 */
#include "button.h"

int count  = 0;
int buttonFlag[2] = {0,0};
void getKeyinput(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	if (count > 0) count--;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <getKeyinput+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dd04      	ble.n	80007ae <getKeyinput+0x16>
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <getKeyinput+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <getKeyinput+0x64>)
 80007ac:	601a      	str	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <getKeyinput+0x64>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10d      	bne.n	80007d2 <getKeyinput+0x3a>
 80007b6:	2390      	movs	r3, #144	@ 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2102      	movs	r1, #2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 ff65 	bl	800268c <HAL_GPIO_ReadPin>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d105      	bne.n	80007d2 <getKeyinput+0x3a>
		buttonFlag[0] = 1;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <getKeyinput+0x68>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
		count = 20;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <getKeyinput+0x64>)
 80007ce:	2214      	movs	r2, #20
 80007d0:	601a      	str	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 80007d2:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <getKeyinput+0x64>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10d      	bne.n	80007f6 <getKeyinput+0x5e>
 80007da:	2390      	movs	r3, #144	@ 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2108      	movs	r1, #8
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 ff53 	bl	800268c <HAL_GPIO_ReadPin>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d105      	bne.n	80007f6 <getKeyinput+0x5e>
		buttonFlag[1] = 1;
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <getKeyinput+0x68>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
		count = 20;
 80007f0:	4b02      	ldr	r3, [pc, #8]	@ (80007fc <getKeyinput+0x64>)
 80007f2:	2214      	movs	r2, #20
 80007f4:	601a      	str	r2, [r3, #0]
	}
}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000084 	.word	0x20000084
 8000800:	20000088 	.word	0x20000088

08000804 <isButtonPress>:
int isButtonPress(int i){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <isButtonPress+0x2c>)
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	58d3      	ldr	r3, [r2, r3]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d106      	bne.n	8000826 <isButtonPress+0x22>
		buttonFlag[i] = 0;
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <isButtonPress+0x2c>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	2100      	movs	r1, #0
 8000820:	50d1      	str	r1, [r2, r3]
		return 1;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <isButtonPress+0x24>
	}
	return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000088 	.word	0x20000088

08000834 <fsm>:

int status = INIT;
uint8_t * data_uart ;


void fsm(uint8_t * readCard, uint8_t status_read){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	000a      	movs	r2, r1
 800083e:	1cfb      	adds	r3, r7, #3
 8000840:	701a      	strb	r2, [r3, #0]
	switch (status) {
 8000842:	4bc5      	ldr	r3, [pc, #788]	@ (8000b58 <fsm+0x324>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d900      	bls.n	800084c <fsm+0x18>
 800084a:	e172      	b.n	8000b32 <fsm+0x2fe>
 800084c:	009a      	lsls	r2, r3, #2
 800084e:	4bc3      	ldr	r3, [pc, #780]	@ (8000b5c <fsm+0x328>)
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	469f      	mov	pc, r3
		case INIT:
			lcd_clear_display();
 8000856:	f000 fbbb 	bl	8000fd0 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 800085a:	2100      	movs	r1, #0
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fbc2 	bl	8000fe6 <lcd_goto_XY>
			lcd_send_string("PUT ON YOUR CARD");
 8000862:	4bbf      	ldr	r3, [pc, #764]	@ (8000b60 <fsm+0x32c>)
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fb9e 	bl	8000fa6 <lcd_send_string>
			lcd_goto_XY(0, 0);
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fbba 	bl	8000fe6 <lcd_goto_XY>
			lcd_send_string("TO CONTROL LED");
 8000872:	4bbc      	ldr	r3, [pc, #752]	@ (8000b64 <fsm+0x330>)
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fb96 	bl	8000fa6 <lcd_send_string>
			status = WAITCARD;
 800087a:	4bb7      	ldr	r3, [pc, #732]	@ (8000b58 <fsm+0x324>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
		case WAITCARD:
			if( status_read == MI_OK){
 8000880:	1cfb      	adds	r3, r7, #3
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d000      	beq.n	800088a <fsm+0x56>
 8000888:	e157      	b.n	8000b3a <fsm+0x306>
				if(check_Card(readCard) == 2){ // MASTER CARD
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0018      	movs	r0, r3
 800088e:	f000 f9b9 	bl	8000c04 <check_Card>
 8000892:	0003      	movs	r3, r0
 8000894:	2b02      	cmp	r3, #2
 8000896:	d124      	bne.n	80008e2 <fsm+0xae>
					sendDataToESP32("MASTER LOGGIN\r\n");
 8000898:	4bb3      	ldr	r3, [pc, #716]	@ (8000b68 <fsm+0x334>)
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fa64 	bl	8001d68 <sendDataToESP32>
					rgb(60, 60, 60); // PINK
 80008a0:	223c      	movs	r2, #60	@ 0x3c
 80008a2:	213c      	movs	r1, #60	@ 0x3c
 80008a4:	203c      	movs	r0, #60	@ 0x3c
 80008a6:	f7ff ff59 	bl	800075c <rgb>
					SCH_Add_Task(RESET_RFID, 3000, 0);
 80008aa:	49b0      	ldr	r1, [pc, #704]	@ (8000b6c <fsm+0x338>)
 80008ac:	4bb0      	ldr	r3, [pc, #704]	@ (8000b70 <fsm+0x33c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fec3 	bl	800163c <SCH_Add_Task>
					lcd_clear_display();
 80008b6:	f000 fb8b 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fb92 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("1. ADD - DELETE");
 80008c2:	4bac      	ldr	r3, [pc, #688]	@ (8000b74 <fsm+0x340>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fb6e 	bl	8000fa6 <lcd_send_string>
					lcd_goto_XY(0, 0);
 80008ca:	2100      	movs	r1, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fb8a 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("2. OTHER");
 80008d2:	4ba9      	ldr	r3, [pc, #676]	@ (8000b78 <fsm+0x344>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fb66 	bl	8000fa6 <lcd_send_string>
					status = MASTER_MENU_1;
 80008da:	4b9f      	ldr	r3, [pc, #636]	@ (8000b58 <fsm+0x324>)
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
					break;
 80008e0:	e136      	b.n	8000b50 <fsm+0x31c>
				}
				if( check_Card(readCard) == 1){ // NORMAL CARD
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 f98d 	bl	8000c04 <check_Card>
 80008ea:	0003      	movs	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10f      	bne.n	8000910 <fsm+0xdc>
					sendDataToESP32("TURN LED\r\n");
 80008f0:	4ba2      	ldr	r3, [pc, #648]	@ (8000b7c <fsm+0x348>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fa38 	bl	8001d68 <sendDataToESP32>
					rgb(0, 100, 0); //GREEN
 80008f8:	2200      	movs	r2, #0
 80008fa:	2164      	movs	r1, #100	@ 0x64
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ff2d 	bl	800075c <rgb>
					SCH_Add_Task(RESET_RFID, 3000, 0);
 8000902:	499a      	ldr	r1, [pc, #616]	@ (8000b6c <fsm+0x338>)
 8000904:	4b9a      	ldr	r3, [pc, #616]	@ (8000b70 <fsm+0x33c>)
 8000906:	2200      	movs	r2, #0
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fe97 	bl	800163c <SCH_Add_Task>
					break;
 800090e:	e11f      	b.n	8000b50 <fsm+0x31c>
				}
				if (check_Card(readCard) == 0) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f976 	bl	8000c04 <check_Card>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d000      	beq.n	800091e <fsm+0xea>
 800091c:	e10d      	b.n	8000b3a <fsm+0x306>
					lcd_clear_display();
 800091e:	f000 fb57 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fb5e 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("CARD NOT EXIST");
 800092a:	4b95      	ldr	r3, [pc, #596]	@ (8000b80 <fsm+0x34c>)
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fb3a 	bl	8000fa6 <lcd_send_string>
					SCH_Add_Task(STATUS_INIT, 2000, 0);
 8000932:	23fa      	movs	r3, #250	@ 0xfa
 8000934:	00d9      	lsls	r1, r3, #3
 8000936:	4b93      	ldr	r3, [pc, #588]	@ (8000b84 <fsm+0x350>)
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fe7e 	bl	800163c <SCH_Add_Task>
				}
			}
			break;
 8000940:	e0fb      	b.n	8000b3a <fsm+0x306>
		case MASTER_MENU_1:
				if(isButtonPress(0) == 1){
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff ff5e 	bl	8000804 <isButtonPress>
 8000948:	0003      	movs	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d114      	bne.n	8000978 <fsm+0x144>
					lcd_clear_display();
 800094e:	f000 fb3f 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2001      	movs	r0, #1
 8000956:	f000 fb46 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("1. ADD CARD");
 800095a:	4b8b      	ldr	r3, [pc, #556]	@ (8000b88 <fsm+0x354>)
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fb22 	bl	8000fa6 <lcd_send_string>
					lcd_goto_XY(0, 0);
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fb3e 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("2. DELETE CARD");
 800096a:	4b88      	ldr	r3, [pc, #544]	@ (8000b8c <fsm+0x358>)
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fb1a 	bl	8000fa6 <lcd_send_string>
					status = MASTER_MENU_2;
 8000972:	4b79      	ldr	r3, [pc, #484]	@ (8000b58 <fsm+0x324>)
 8000974:	2203      	movs	r2, #3
 8000976:	601a      	str	r2, [r3, #0]
				}
				if(isButtonPress(1) == 1){
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff ff43 	bl	8000804 <isButtonPress>
 800097e:	0003      	movs	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d000      	beq.n	8000986 <fsm+0x152>
 8000984:	e0db      	b.n	8000b3e <fsm+0x30a>
					lcd_clear_display();
 8000986:	f000 fb23 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 800098a:	2100      	movs	r1, #0
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fb2a 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("1. CARD COUNT");
 8000992:	4b7f      	ldr	r3, [pc, #508]	@ (8000b90 <fsm+0x35c>)
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fb06 	bl	8000fa6 <lcd_send_string>
					lcd_goto_XY(0, 0);
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fb22 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("2. EXIT");
 80009a2:	4b7c      	ldr	r3, [pc, #496]	@ (8000b94 <fsm+0x360>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fafe 	bl	8000fa6 <lcd_send_string>
					status = MASTER_MENU_3;
 80009aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000b58 <fsm+0x324>)
 80009ac:	2204      	movs	r2, #4
 80009ae:	601a      	str	r2, [r3, #0]
				}
				break;
 80009b0:	e0c5      	b.n	8000b3e <fsm+0x30a>
		case MASTER_MENU_2:
				if(isButtonPress(0) == 1){
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff26 	bl	8000804 <isButtonPress>
 80009b8:	0003      	movs	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10c      	bne.n	80009d8 <fsm+0x1a4>
					lcd_clear_display();
 80009be:	f000 fb07 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 80009c2:	2100      	movs	r1, #0
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fb0e 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("SET CLOSER CARD");
 80009ca:	4b73      	ldr	r3, [pc, #460]	@ (8000b98 <fsm+0x364>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 faea 	bl	8000fa6 <lcd_send_string>
					status = MASTER_ADDCARD;
 80009d2:	4b61      	ldr	r3, [pc, #388]	@ (8000b58 <fsm+0x324>)
 80009d4:	2205      	movs	r2, #5
 80009d6:	601a      	str	r2, [r3, #0]
				}
				if(isButtonPress(1) == 1){
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff ff13 	bl	8000804 <isButtonPress>
 80009de:	0003      	movs	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d000      	beq.n	80009e6 <fsm+0x1b2>
 80009e4:	e0ad      	b.n	8000b42 <fsm+0x30e>
					lcd_clear_display();
 80009e6:	f000 faf3 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 fafa 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("SET CLOSER CARD");
 80009f2:	4b69      	ldr	r3, [pc, #420]	@ (8000b98 <fsm+0x364>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fad6 	bl	8000fa6 <lcd_send_string>
					status = MASTER_DELCARD;
 80009fa:	4b57      	ldr	r3, [pc, #348]	@ (8000b58 <fsm+0x324>)
 80009fc:	2206      	movs	r2, #6
 80009fe:	601a      	str	r2, [r3, #0]
				}
				break;
 8000a00:	e09f      	b.n	8000b42 <fsm+0x30e>
			case MASTER_MENU_3:
				if(isButtonPress(0) == 1){
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fefe 	bl	8000804 <isButtonPress>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d119      	bne.n	8000a42 <fsm+0x20e>
					lcd_clear_display();
 8000a0e:	f000 fadf 	bl	8000fd0 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 8000a12:	2100      	movs	r1, #0
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fae6 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("NUMBER OF CARDS");
 8000a1a:	4b60      	ldr	r3, [pc, #384]	@ (8000b9c <fsm+0x368>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fac2 	bl	8000fa6 <lcd_send_string>
					lcd_goto_XY(0, 0);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fade 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_int(numCard);
 8000a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ba0 <fsm+0x36c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 faf8 	bl	8001024 <lcd_send_int>
					SCH_Add_Task(STATUS_INIT, 2000, 0);
 8000a34:	23fa      	movs	r3, #250	@ 0xfa
 8000a36:	00d9      	lsls	r1, r3, #3
 8000a38:	4b52      	ldr	r3, [pc, #328]	@ (8000b84 <fsm+0x350>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fdfd 	bl	800163c <SCH_Add_Task>
				}
				if(isButtonPress(1) == 1){
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fede 	bl	8000804 <isButtonPress>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d000      	beq.n	8000a50 <fsm+0x21c>
 8000a4e:	e07a      	b.n	8000b46 <fsm+0x312>
					STATUS_INIT();
 8000a50:	f000 f8b4 	bl	8000bbc <STATUS_INIT>
				}
				break;
 8000a54:	e077      	b.n	8000b46 <fsm+0x312>
		case MASTER_ADDCARD:
			if(status_read == MI_OK){
 8000a56:	1cfb      	adds	r3, r7, #3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d000      	beq.n	8000a60 <fsm+0x22c>
 8000a5e:	e074      	b.n	8000b4a <fsm+0x316>
				if(check_Card(readCard) == 1){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f8ce 	bl	8000c04 <check_Card>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d108      	bne.n	8000a80 <fsm+0x24c>
					lcd_goto_XY(0, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fab8 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("CARD EXISTED");
 8000a76:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba4 <fsm+0x370>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fa94 	bl	8000fa6 <lcd_send_string>
 8000a7e:	e012      	b.n	8000aa6 <fsm+0x272>
				}
				else {
					add_Card(readCard);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f8e8 	bl	8000c58 <add_Card>
					lcd_goto_XY(0, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 faab 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("ADDED CARD");
 8000a90:	4b45      	ldr	r3, [pc, #276]	@ (8000ba8 <fsm+0x374>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fa87 	bl	8000fa6 <lcd_send_string>
					sendDataToESP32("ADDED CARD\r\n");
 8000a98:	4b44      	ldr	r3, [pc, #272]	@ (8000bac <fsm+0x378>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 f964 	bl	8001d68 <sendDataToESP32>
					status = STATUS_DELAY;
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <fsm+0x324>)
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	601a      	str	r2, [r3, #0]
				}
				SCH_Add_Task(STATUS_INIT, 2000, 0);
 8000aa6:	23fa      	movs	r3, #250	@ 0xfa
 8000aa8:	00d9      	lsls	r1, r3, #3
 8000aaa:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <fsm+0x350>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fdc4 	bl	800163c <SCH_Add_Task>
			}
			break;
 8000ab4:	e049      	b.n	8000b4a <fsm+0x316>
		case MASTER_DELCARD:
			if(num_Card() == 0){
 8000ab6:	f000 f975 	bl	8000da4 <num_Card>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d10f      	bne.n	8000ade <fsm+0x2aa>
				lcd_goto_XY(0, 0);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 fa90 	bl	8000fe6 <lcd_goto_XY>
				lcd_send_string(" LIST CARD EMPTY");
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb0 <fsm+0x37c>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fa6c 	bl	8000fa6 <lcd_send_string>
				SCH_Add_Task(STATUS_INIT, 2000, 0);
 8000ace:	23fa      	movs	r3, #250	@ 0xfa
 8000ad0:	00d9      	lsls	r1, r3, #3
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <fsm+0x350>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fdb0 	bl	800163c <SCH_Add_Task>
				break;
 8000adc:	e038      	b.n	8000b50 <fsm+0x31c>
			}
			if(status_read == MI_OK){
 8000ade:	1cfb      	adds	r3, r7, #3
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d133      	bne.n	8000b4e <fsm+0x31a>
				if( delete_Card(readCard) == 0){
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 f965 	bl	8000db8 <delete_Card>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d108      	bne.n	8000b04 <fsm+0x2d0>
					lcd_goto_XY(0, 0);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 fa76 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("CARD NOT EXIST");
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <fsm+0x34c>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fa52 	bl	8000fa6 <lcd_send_string>
 8000b02:	e00e      	b.n	8000b22 <fsm+0x2ee>
				}
				else {
					lcd_goto_XY(0, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 fa6d 	bl	8000fe6 <lcd_goto_XY>
					lcd_send_string("DELETED CARD");
 8000b0c:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <fsm+0x380>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fa49 	bl	8000fa6 <lcd_send_string>
					sendDataToESP32("DELETED CARD\r\n");
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <fsm+0x384>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 f926 	bl	8001d68 <sendDataToESP32>
					status = STATUS_DELAY;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <fsm+0x324>)
 8000b1e:	2207      	movs	r2, #7
 8000b20:	601a      	str	r2, [r3, #0]
				}
				SCH_Add_Task(STATUS_INIT, 2000, 0);
 8000b22:	23fa      	movs	r3, #250	@ 0xfa
 8000b24:	00d9      	lsls	r1, r3, #3
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <fsm+0x350>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 fd86 	bl	800163c <SCH_Add_Task>
				break;
 8000b30:	e00e      	b.n	8000b50 <fsm+0x31c>
			}
			break;
		case STATUS_DELAY:
			break;
		default:
			break;
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	e00c      	b.n	8000b50 <fsm+0x31c>
			break;
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	e00a      	b.n	8000b50 <fsm+0x31c>
			break;
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	e008      	b.n	8000b50 <fsm+0x31c>
				break;
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	e006      	b.n	8000b50 <fsm+0x31c>
				break;
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	e004      	b.n	8000b50 <fsm+0x31c>
				break;
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	e002      	b.n	8000b50 <fsm+0x31c>
			break;
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	e000      	b.n	8000b50 <fsm+0x31c>
			break;
 8000b4e:	46c0      	nop			@ (mov r8, r8)

//	if(timer_flag[0] == 1){ // sang trong 3 s
//		rgb(100, 0, 0); // RED
//		memset(previousCard, 0, sizeof(previousCard));
//	}
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000090 	.word	0x20000090
 8000b5c:	08006e94 	.word	0x08006e94
 8000b60:	08006d70 	.word	0x08006d70
 8000b64:	08006d84 	.word	0x08006d84
 8000b68:	08006d94 	.word	0x08006d94
 8000b6c:	00000bb8 	.word	0x00000bb8
 8000b70:	08000be1 	.word	0x08000be1
 8000b74:	08006da4 	.word	0x08006da4
 8000b78:	08006db4 	.word	0x08006db4
 8000b7c:	08006dc0 	.word	0x08006dc0
 8000b80:	08006dcc 	.word	0x08006dcc
 8000b84:	08000bbd 	.word	0x08000bbd
 8000b88:	08006ddc 	.word	0x08006ddc
 8000b8c:	08006de8 	.word	0x08006de8
 8000b90:	08006df8 	.word	0x08006df8
 8000b94:	08006e08 	.word	0x08006e08
 8000b98:	08006e10 	.word	0x08006e10
 8000b9c:	08006e20 	.word	0x08006e20
 8000ba0:	20000098 	.word	0x20000098
 8000ba4:	08006e30 	.word	0x08006e30
 8000ba8:	08006e40 	.word	0x08006e40
 8000bac:	08006e4c 	.word	0x08006e4c
 8000bb0:	08006e5c 	.word	0x08006e5c
 8000bb4:	08006e70 	.word	0x08006e70
 8000bb8:	08006e80 	.word	0x08006e80

08000bbc <STATUS_INIT>:
void STATUS_INIT(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	status = INIT;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <STATUS_INIT+0x1c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
	memset(previousCard, 0, sizeof(previousCard));
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <STATUS_INIT+0x20>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	2100      	movs	r1, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f005 fd27 	bl	8006620 <memset>
}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000090 	.word	0x20000090
 8000bdc:	20000280 	.word	0x20000280

08000be0 <RESET_RFID>:
void RESET_RFID(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	rgb(100, 0, 0); // RED
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f7ff fdb7 	bl	800075c <rgb>
	memset(previousCard, 0, sizeof(previousCard));
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <RESET_RFID+0x20>)
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f005 fd13 	bl	8006620 <memset>
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000280 	.word	0x20000280

08000c04 <check_Card>:

const uint8_t master[4] = {243, 25, 142, 19};
uint8_t ** data = NULL;
uint8_t numCard = 0;

uint8_t check_Card(uint8_t * readCard){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if(readCard[0] == master[0] && readCard[1] == master[1] && readCard[2] == master[2] && readCard[3] == master[3]){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	22f3      	movs	r2, #243	@ 0xf3
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d113      	bne.n	8000c3e <check_Card+0x3a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2219      	movs	r2, #25
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10d      	bne.n	8000c3e <check_Card+0x3a>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3302      	adds	r3, #2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	228e      	movs	r2, #142	@ 0x8e
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d107      	bne.n	8000c3e <check_Card+0x3a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3303      	adds	r3, #3
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2213      	movs	r2, #19
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <check_Card+0x3a>
		return 2; // MASTERCARD
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e008      	b.n	8000c50 <check_Card+0x4c>
	}
	if (search_Card(readCard) >= 0){
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f85f 	bl	8000d04 <search_Card>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	db01      	blt.n	8000c4e <check_Card+0x4a>
		return 1; // NORMAL CARD
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <check_Card+0x4c>
	}
	return 0; // CARD not exist
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <add_Card>:

void add_Card(uint8_t * readCard){
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	data = (uint8_t **)realloc(data, (numCard + 1) * sizeof(uint8_t *));
 8000c60:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <add_Card+0xa4>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <add_Card+0xa8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0010      	movs	r0, r2
 8000c70:	f005 fc6e 	bl	8006550 <realloc>
 8000c74:	0002      	movs	r2, r0
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <add_Card+0xa4>)
 8000c78:	601a      	str	r2, [r3, #0]
	data[numCard] = (uint8_t *)malloc(4 * sizeof(int));
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <add_Card+0xa4>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <add_Card+0xa8>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	18d4      	adds	r4, r2, r3
 8000c86:	2010      	movs	r0, #16
 8000c88:	f005 fb9c 	bl	80063c4 <malloc>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	6023      	str	r3, [r4, #0]
	data[numCard][0] = readCard[0];
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <add_Card+0xa4>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <add_Card+0xa8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
	data[numCard][1] = readCard[1];
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <add_Card+0xa4>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <add_Card+0xa8>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	7852      	ldrb	r2, [r2, #1]
 8000cb8:	701a      	strb	r2, [r3, #0]
	data[numCard][2] = readCard[2];
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <add_Card+0xa4>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <add_Card+0xa8>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	7892      	ldrb	r2, [r2, #2]
 8000cce:	701a      	strb	r2, [r3, #0]
	data[numCard][3] = readCard[3];
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <add_Card+0xa4>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <add_Card+0xa8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	18d3      	adds	r3, r2, r3
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3303      	adds	r3, #3
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	78d2      	ldrb	r2, [r2, #3]
 8000ce4:	701a      	strb	r2, [r3, #0]
	numCard++;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <add_Card+0xa8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <add_Card+0xa8>)
 8000cf0:	701a      	strb	r2, [r3, #0]
}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b003      	add	sp, #12
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	20000094 	.word	0x20000094
 8000d00:	20000098 	.word	0x20000098

08000d04 <search_Card>:

int8_t search_Card(uint8_t *readCard){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < numCard; i++){
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e037      	b.n	8000d82 <search_Card+0x7e>
		if(data[i][0] == readCard[0] && data[i][1] == readCard[1] && data[i][2] == readCard[2] && data[i][3] == readCard[3] ){
 8000d12:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <search_Card+0x98>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d129      	bne.n	8000d7c <search_Card+0x78>
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <search_Card+0x98>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d11c      	bne.n	8000d7c <search_Card+0x78>
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <search_Card+0x98>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	18d3      	adds	r3, r2, r3
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3302      	adds	r3, #2
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d10f      	bne.n	8000d7c <search_Card+0x78>
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <search_Card+0x98>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3303      	adds	r3, #3
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3303      	adds	r3, #3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d102      	bne.n	8000d7c <search_Card+0x78>
			return i;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	e00a      	b.n	8000d92 <search_Card+0x8e>
	for(int i = 0; i < numCard; i++){
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <search_Card+0x9c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	001a      	movs	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	dbc1      	blt.n	8000d12 <search_Card+0xe>
		}
	}
	return -1; // can't searched
 8000d8e:	2301      	movs	r3, #1
 8000d90:	425b      	negs	r3, r3
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000094 	.word	0x20000094
 8000da0:	20000098 	.word	0x20000098

08000da4 <num_Card>:
uint8_t num_Card(){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	return numCard;
 8000da8:	4b02      	ldr	r3, [pc, #8]	@ (8000db4 <num_Card+0x10>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	20000098 	.word	0x20000098

08000db8 <delete_Card>:
uint8_t delete_Card(uint8_t * readCard){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	int index = search_Card(readCard);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff ff9e 	bl	8000d04 <search_Card>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	60bb      	str	r3, [r7, #8]
	if(index == -1){
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	d101      	bne.n	8000dd6 <delete_Card+0x1e>
		return 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e034      	b.n	8000e40 <delete_Card+0x88>
	}
	free(data[index]);
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <delete_Card+0x90>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0018      	movs	r0, r3
 8000de4:	f005 faf8 	bl	80063d8 <free>
	for (int i = index; i < numCard - 1; i++) {
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e00f      	b.n	8000e0e <delete_Card+0x56>
	    data[i] = data[i + 1];
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <delete_Card+0x90>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	18d2      	adds	r2, r2, r3
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <delete_Card+0x90>)
 8000dfc:	6819      	ldr	r1, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	18cb      	adds	r3, r1, r3
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	601a      	str	r2, [r3, #0]
	for (int i = index; i < numCard - 1; i++) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <delete_Card+0x94>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbe9      	blt.n	8000dee <delete_Card+0x36>
	}
	data = (uint8_t **)realloc(data, numCard * sizeof(uint8_t *));
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <delete_Card+0x90>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <delete_Card+0x94>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	0019      	movs	r1, r3
 8000e26:	0010      	movs	r0, r2
 8000e28:	f005 fb92 	bl	8006550 <realloc>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <delete_Card+0x90>)
 8000e30:	601a      	str	r2, [r3, #0]
	numCard--;
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <delete_Card+0x94>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <delete_Card+0x94>)
 8000e3c:	701a      	strb	r2, [r3, #0]
	return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b004      	add	sp, #16
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000094 	.word	0x20000094
 8000e4c:	20000098 	.word	0x20000098

08000e50 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

extern I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	0002      	movs	r2, r0
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	183b      	adds	r3, r7, r0
 8000e60:	1dfa      	adds	r2, r7, #7
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	210f      	movs	r1, #15
 8000e66:	438a      	bics	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	011a      	lsls	r2, r3, #4
 8000e70:	240e      	movs	r4, #14
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e76:	183b      	adds	r3, r7, r0
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	2108      	movs	r1, #8
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e86:	183b      	adds	r3, r7, r0
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000eb0:	187a      	adds	r2, r7, r1
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <lcd_send_cmd+0x78>)
 8000eb4:	2364      	movs	r3, #100	@ 0x64
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2304      	movs	r3, #4
 8000eba:	214e      	movs	r1, #78	@ 0x4e
 8000ebc:	f001 fce2 	bl	8002884 <HAL_I2C_Master_Transmit>
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b005      	add	sp, #20
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	2000009c 	.word	0x2000009c

08000ecc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ed8:	200f      	movs	r0, #15
 8000eda:	183b      	adds	r3, r7, r0
 8000edc:	1dfa      	adds	r2, r7, #7
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	011a      	lsls	r2, r3, #4
 8000eec:	240e      	movs	r4, #14
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	220d      	movs	r2, #13
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	2108      	movs	r1, #8
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2209      	movs	r2, #9
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	220d      	movs	r2, #13
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2209      	movs	r2, #9
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f2c:	187a      	adds	r2, r7, r1
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <lcd_send_data+0x78>)
 8000f30:	2364      	movs	r3, #100	@ 0x64
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2304      	movs	r3, #4
 8000f36:	214e      	movs	r1, #78	@ 0x4e
 8000f38:	f001 fca4 	bl	8002884 <HAL_I2C_Master_Transmit>
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b005      	add	sp, #20
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <lcd_init>:

void lcd_init (void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000f4c:	2033      	movs	r0, #51	@ 0x33
 8000f4e:	f7ff ff7f 	bl	8000e50 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000f52:	2032      	movs	r0, #50	@ 0x32
 8000f54:	f7ff ff7c 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(50);
 8000f58:	2032      	movs	r0, #50	@ 0x32
 8000f5a:	f000 ffa9 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000f5e:	2028      	movs	r0, #40	@ 0x28
 8000f60:	f7ff ff76 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(50);
 8000f64:	2032      	movs	r0, #50	@ 0x32
 8000f66:	f000 ffa3 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f7ff ff70 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(50);
 8000f70:	2032      	movs	r0, #50	@ 0x32
 8000f72:	f000 ff9d 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000f76:	2006      	movs	r0, #6
 8000f78:	f7ff ff6a 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	@ 0x32
 8000f7e:	f000 ff97 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000f82:	200c      	movs	r0, #12
 8000f84:	f7ff ff64 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(50);
 8000f88:	2032      	movs	r0, #50	@ 0x32
 8000f8a:	f000 ff91 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f7ff ff5e 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(50);
 8000f94:	2032      	movs	r0, #50	@ 0x32
 8000f96:	f000 ff8b 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000f9a:	2080      	movs	r0, #128	@ 0x80
 8000f9c:	f7ff ff58 	bl	8000e50 <lcd_send_cmd>
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000fae:	e006      	b.n	8000fbe <lcd_send_string+0x18>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ff87 	bl	8000ecc <lcd_send_data>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f4      	bne.n	8000fb0 <lcd_send_string+0xa>
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b002      	add	sp, #8
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff ff3b 	bl	8000e50 <lcd_send_cmd>
	HAL_Delay(20);
 8000fda:	2014      	movs	r0, #20
 8000fdc:	f000 ff68 	bl	8001eb0 <HAL_Delay>
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col) {
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 1) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d106      	bne.n	8001004 <lcd_goto_XY+0x1e>
        pos_Addr = 0x80 + col; // Địa chỉ cho dòng đầu tiên
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	3a80      	subs	r2, #128	@ 0x80
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e005      	b.n	8001010 <lcd_goto_XY+0x2a>
    } else {
        pos_Addr = 0xC0 + col; // Địa chỉ cho dòng thứ hai
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	3a40      	subs	r2, #64	@ 0x40
 800100e:	701a      	strb	r2, [r3, #0]
    }
    lcd_send_cmd(pos_Addr);
 8001010:	230f      	movs	r3, #15
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0018      	movs	r0, r3
 8001018:	f7ff ff1a 	bl	8000e50 <lcd_send_cmd>
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}

08001024 <lcd_send_int>:

void lcd_send_int(int number) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    char str[16];
    sprintf(str, "%d", number);
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4907      	ldr	r1, [pc, #28]	@ (800104c <lcd_send_int+0x28>)
 8001030:	2408      	movs	r4, #8
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	f005 fac5 	bl	80065c4 <siprintf>
    lcd_send_string(str);
 800103a:	193b      	adds	r3, r7, r4
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ffb2 	bl	8000fa6 <lcd_send_string>
}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b007      	add	sp, #28
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	08006e90 	.word	0x08006e90

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f000 fec8 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f87c 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 fa34 	bl	80014c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001060:	f000 f950 	bl	8001304 <MX_TIM3_Init>
  MX_DMA_Init();
 8001064:	f000 fa12 	bl	800148c <MX_DMA_Init>
  MX_SPI1_Init();
 8001068:	f000 f90e 	bl	8001288 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800106c:	f000 f9de 	bl	800142c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001070:	f000 f8ca 	bl	8001208 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 8001074:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <main+0xe4>)
 8001076:	0018      	movs	r0, r3
 8001078:	f003 fa90 	bl	800459c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <main+0xe4>)
 800107e:	2100      	movs	r1, #0
 8001080:	0018      	movs	r0, r3
 8001082:	f003 fb2f 	bl	80046e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <main+0xe4>)
 8001088:	2104      	movs	r1, #4
 800108a:	0018      	movs	r0, r3
 800108c:	f003 fb2a 	bl	80046e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <main+0xe4>)
 8001092:	210c      	movs	r1, #12
 8001094:	0018      	movs	r0, r3
 8001096:	f003 fb25 	bl	80046e4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 800109a:	f7ff ff55 	bl	8000f48 <lcd_init>
  MFRC522_Init();
 800109e:	f7ff f9a1 	bl	80003e4 <MFRC522_Init>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <main+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	0018      	movs	r0, r3
 80010aa:	f001 fb0c 	bl	80026c6 <HAL_GPIO_WritePin>
  SCH_Add_Task(led_debug, 100, 1000);
 80010ae:	23fa      	movs	r3, #250	@ 0xfa
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <main+0xec>)
 80010b4:	2164      	movs	r1, #100	@ 0x64
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fac0 	bl	800163c <SCH_Add_Task>
   while (1)
   {
		status_read = MFRC522_Request(PICC_REQIDL, str);
 80010bc:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <main+0xf0>)
 80010be:	0019      	movs	r1, r3
 80010c0:	2026      	movs	r0, #38	@ 0x26
 80010c2:	f7ff fac7 	bl	8000654 <MFRC522_Request>
 80010c6:	0003      	movs	r3, r0
 80010c8:	001a      	movs	r2, r3
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <main+0xf4>)
 80010cc:	701a      	strb	r2, [r3, #0]
		status_read = MFRC522_Anticoll(str);
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <main+0xf0>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff faee 	bl	80006b2 <MFRC522_Anticoll>
 80010d6:	0003      	movs	r3, r0
 80010d8:	001a      	movs	r2, r3
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <main+0xf4>)
 80010dc:	701a      	strb	r2, [r3, #0]
		memcpy(readCard, str, 4);
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <main+0xf0>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <main+0xf8>)
 80010e4:	601a      	str	r2, [r3, #0]

		if(status_read == MI_OK){
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <main+0xf4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d117      	bne.n	800111e <main+0xce>
			if(memcmp(readCard, previousCard, 4) != 0){
 80010ee:	4917      	ldr	r1, [pc, #92]	@ (800114c <main+0xfc>)
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <main+0xf8>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	0018      	movs	r0, r3
 80010f6:	f005 fa85 	bl	8006604 <memcmp>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d00f      	beq.n	800111e <main+0xce>
				  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 1);
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <main+0xe8>)
 8001100:	2201      	movs	r2, #1
 8001102:	2101      	movs	r1, #1
 8001104:	0018      	movs	r0, r3
 8001106:	f001 fade 	bl	80026c6 <HAL_GPIO_WritePin>
				SCH_Add_Task(buzz_off, 50, 0);
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <main+0x100>)
 800110c:	2200      	movs	r2, #0
 800110e:	2132      	movs	r1, #50	@ 0x32
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fa93 	bl	800163c <SCH_Add_Task>
				 memcpy(previousCard, readCard, 4);
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <main+0xf8>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <main+0xfc>)
 800111c:	601a      	str	r2, [r3, #0]
			}
		}
		fsm(readCard, status_read);
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <main+0xf4>)
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <main+0xf8>)
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff fb84 	bl	8000834 <fsm>
		SCH_Dispatch_Task();
 800112c:	f000 fb06 	bl	800173c <SCH_Dispatch_Task>
		status_read = MFRC522_Request(PICC_REQIDL, str);
 8001130:	e7c4      	b.n	80010bc <main+0x6c>
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	20000154 	.word	0x20000154
 8001138:	48001400 	.word	0x48001400
 800113c:	080015fd 	.word	0x080015fd
 8001140:	2000026c 	.word	0x2000026c
 8001144:	20000268 	.word	0x20000268
 8001148:	2000027c 	.word	0x2000027c
 800114c:	20000280 	.word	0x20000280
 8001150:	08001615 	.word	0x08001615

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b095      	sub	sp, #84	@ 0x54
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	2420      	movs	r4, #32
 800115c:	193b      	adds	r3, r7, r4
 800115e:	0018      	movs	r0, r3
 8001160:	2330      	movs	r3, #48	@ 0x30
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f005 fa5b 	bl	8006620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116a:	2310      	movs	r3, #16
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	0018      	movs	r0, r3
 8001170:	2310      	movs	r3, #16
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f005 fa53 	bl	8006620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117a:	003b      	movs	r3, r7
 800117c:	0018      	movs	r0, r3
 800117e:	2310      	movs	r3, #16
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f005 fa4c 	bl	8006620 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	0021      	movs	r1, r4
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2202      	movs	r2, #2
 800118e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2201      	movs	r2, #1
 8001194:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2210      	movs	r2, #16
 800119a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 ff65 	bl	8003074 <HAL_RCC_OscConfig>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80011ae:	f000 fa3f 	bl	8001630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	2110      	movs	r1, #16
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2207      	movs	r2, #7
 80011b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2100      	movs	r1, #0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f002 fa69 	bl	80036a8 <HAL_RCC_ClockConfig>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011da:	f000 fa29 	bl	8001630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80011de:	003b      	movs	r3, r7
 80011e0:	2221      	movs	r2, #33	@ 0x21
 80011e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011e4:	003b      	movs	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011ea:	003b      	movs	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	003b      	movs	r3, r7
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 fb9c 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011fc:	f000 fa18 	bl	8001630 <Error_Handler>
  }
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b015      	add	sp, #84	@ 0x54
 8001206:	bd90      	pop	{r4, r7, pc}

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_I2C1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <MX_I2C1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_I2C1_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <MX_I2C1_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_I2C1_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C1_Init+0x74>)
 8001244:	0018      	movs	r0, r3
 8001246:	f001 fa77 	bl	8002738 <HAL_I2C_Init>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124e:	f000 f9ef 	bl	8001630 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001252:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C1_Init+0x74>)
 8001254:	2100      	movs	r1, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f001 fe74 	bl	8002f44 <HAL_I2CEx_ConfigAnalogFilter>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001260:	f000 f9e6 	bl	8001630 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <MX_I2C1_Init+0x74>)
 8001266:	2100      	movs	r1, #0
 8001268:	0018      	movs	r0, r3
 800126a:	f001 feb7 	bl	8002fdc <HAL_I2CEx_ConfigDigitalFilter>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 f9dd 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000009c 	.word	0x2000009c
 8001280:	40005400 	.word	0x40005400
 8001284:	2000090e 	.word	0x2000090e

08001288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_SPI1_Init+0x74>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <MX_SPI1_Init+0x78>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_SPI1_Init+0x74>)
 8001294:	2282      	movs	r2, #130	@ 0x82
 8001296:	0052      	lsls	r2, r2, #1
 8001298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_SPI1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012a2:	22e0      	movs	r2, #224	@ 0xe0
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012e2:	2208      	movs	r2, #8
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <MX_SPI1_Init+0x74>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f002 fbef 	bl	8003acc <HAL_SPI_Init>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012f2:	f000 f99d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200000f0 	.word	0x200000f0
 8001300:	40013000 	.word	0x40013000

08001304 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	@ 0x38
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	2328      	movs	r3, #40	@ 0x28
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	0018      	movs	r0, r3
 8001310:	2310      	movs	r3, #16
 8001312:	001a      	movs	r2, r3
 8001314:	2100      	movs	r1, #0
 8001316:	f005 f983 	bl	8006620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131a:	2320      	movs	r3, #32
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	0018      	movs	r0, r3
 8001320:	2308      	movs	r3, #8
 8001322:	001a      	movs	r2, r3
 8001324:	2100      	movs	r1, #0
 8001326:	f005 f97b 	bl	8006620 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	0018      	movs	r0, r3
 800132e:	231c      	movs	r3, #28
 8001330:	001a      	movs	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f005 f974 	bl	8006620 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001338:	4b39      	ldr	r3, [pc, #228]	@ (8001420 <MX_TIM3_Init+0x11c>)
 800133a:	4a3a      	ldr	r2, [pc, #232]	@ (8001424 <MX_TIM3_Init+0x120>)
 800133c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800133e:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <MX_TIM3_Init+0x11c>)
 8001340:	4a39      	ldr	r2, [pc, #228]	@ (8001428 <MX_TIM3_Init+0x124>)
 8001342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <MX_TIM3_Init+0x11c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800134a:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <MX_TIM3_Init+0x11c>)
 800134c:	2263      	movs	r2, #99	@ 0x63
 800134e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <MX_TIM3_Init+0x11c>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <MX_TIM3_Init+0x11c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135c:	4b30      	ldr	r3, [pc, #192]	@ (8001420 <MX_TIM3_Init+0x11c>)
 800135e:	0018      	movs	r0, r3
 8001360:	f003 f8cc 	bl	80044fc <HAL_TIM_Base_Init>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001368:	f000 f962 	bl	8001630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	2128      	movs	r1, #40	@ 0x28
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	0152      	lsls	r2, r2, #5
 8001374:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001376:	187a      	adds	r2, r7, r1
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <MX_TIM3_Init+0x11c>)
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f003 fc11 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001386:	f000 f953 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <MX_TIM3_Init+0x11c>)
 800138c:	0018      	movs	r0, r3
 800138e:	f003 f951 	bl	8004634 <HAL_TIM_PWM_Init>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001396:	f000 f94b 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139a:	2120      	movs	r1, #32
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a8:	187a      	adds	r2, r7, r1
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_TIM3_Init+0x11c>)
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f004 f80e 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80013b8:	f000 f93a 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2260      	movs	r2, #96	@ 0x60
 80013c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	1d39      	adds	r1, r7, #4
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_TIM3_Init+0x11c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	0018      	movs	r0, r3
 80013dc:	f003 fb1c 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80013e4:	f000 f924 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e8:	1d39      	adds	r1, r7, #4
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_TIM3_Init+0x11c>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	0018      	movs	r0, r3
 80013f0:	f003 fb12 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80013f8:	f000 f91a 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <MX_TIM3_Init+0x11c>)
 8001400:	220c      	movs	r2, #12
 8001402:	0018      	movs	r0, r3
 8001404:	f003 fb08 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800140c:	f000 f910 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001410:	4b03      	ldr	r3, [pc, #12]	@ (8001420 <MX_TIM3_Init+0x11c>)
 8001412:	0018      	movs	r0, r3
 8001414:	f000 fb4e 	bl	8001ab4 <HAL_TIM_MspPostInit>

}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b00e      	add	sp, #56	@ 0x38
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000154 	.word	0x20000154
 8001424:	40000400 	.word	0x40000400
 8001428:	0000031f 	.word	0x0000031f

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <MX_USART1_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001438:	22e1      	movs	r2, #225	@ 0xe1
 800143a:	0252      	lsls	r2, r2, #9
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001470:	0018      	movs	r0, r3
 8001472:	f004 f815 	bl	80054a0 <HAL_UART_Init>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 f8d9 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200001e0 	.word	0x200001e0
 8001488:	40013800 	.word	0x40013800

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_DMA_Init+0x38>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_DMA_Init+0x38>)
 8001498:	2101      	movs	r1, #1
 800149a:	430a      	orrs	r2, r1
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_DMA_Init+0x38>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	200a      	movs	r0, #10
 80014b0:	f000 fdce 	bl	8002050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 fde0 	bl	800207a <HAL_NVIC_EnableIRQ>

}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	40021000 	.word	0x40021000

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	240c      	movs	r4, #12
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	0018      	movs	r0, r3
 80014d4:	2314      	movs	r3, #20
 80014d6:	001a      	movs	r2, r3
 80014d8:	2100      	movs	r1, #0
 80014da:	f005 f8a1 	bl	8006620 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <MX_GPIO_Init+0x128>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	4b43      	ldr	r3, [pc, #268]	@ (80015f0 <MX_GPIO_Init+0x128>)
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	03c9      	lsls	r1, r1, #15
 80014e8:	430a      	orrs	r2, r1
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	4b40      	ldr	r3, [pc, #256]	@ (80015f0 <MX_GPIO_Init+0x128>)
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	03db      	lsls	r3, r3, #15
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <MX_GPIO_Init+0x128>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_GPIO_Init+0x128>)
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	0289      	lsls	r1, r1, #10
 8001504:	430a      	orrs	r2, r1
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <MX_GPIO_Init+0x128>)
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	4013      	ands	r3, r2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <MX_GPIO_Init+0x128>)
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <MX_GPIO_Init+0x128>)
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	02c9      	lsls	r1, r1, #11
 8001520:	430a      	orrs	r2, r1
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <MX_GPIO_Init+0x128>)
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	02db      	lsls	r3, r3, #11
 800152c:	4013      	ands	r3, r2
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <MX_GPIO_Init+0x12c>)
 8001534:	2200      	movs	r2, #0
 8001536:	2101      	movs	r1, #1
 8001538:	0018      	movs	r0, r3
 800153a:	f001 f8c4 	bl	80026c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_RESET_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 800153e:	2390      	movs	r3, #144	@ 0x90
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	2200      	movs	r2, #0
 8001544:	2111      	movs	r1, #17
 8001546:	0018      	movs	r0, r3
 8001548:	f001 f8bd 	bl	80026c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <MX_GPIO_Init+0x130>)
 800154e:	2200      	movs	r2, #0
 8001550:	2108      	movs	r1, #8
 8001552:	0018      	movs	r0, r3
 8001554:	f001 f8b7 	bl	80026c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 8001558:	193b      	adds	r3, r7, r4
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	193b      	adds	r3, r7, r4
 8001560:	2201      	movs	r2, #1
 8001562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	193b      	adds	r3, r7, r4
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	193b      	adds	r3, r7, r4
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001570:	193b      	adds	r3, r7, r4
 8001572:	4a20      	ldr	r2, [pc, #128]	@ (80015f4 <MX_GPIO_Init+0x12c>)
 8001574:	0019      	movs	r1, r3
 8001576:	0010      	movs	r0, r2
 8001578:	f000 ff20 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_RESET_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin|RC522_CS_Pin;
 800157c:	193b      	adds	r3, r7, r4
 800157e:	2211      	movs	r2, #17
 8001580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	193b      	adds	r3, r7, r4
 8001584:	2201      	movs	r2, #1
 8001586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	193b      	adds	r3, r7, r4
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	193a      	adds	r2, r7, r4
 8001596:	2390      	movs	r3, #144	@ 0x90
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	0011      	movs	r1, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f000 ff0d 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	220a      	movs	r2, #10
 80015a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2201      	movs	r2, #1
 80015b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	193a      	adds	r2, r7, r4
 80015b6:	2390      	movs	r3, #144	@ 0x90
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f000 fefd 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 80015c2:	0021      	movs	r1, r4
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2208      	movs	r2, #8
 80015c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2201      	movs	r2, #1
 80015ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <MX_GPIO_Init+0x130>)
 80015e0:	0019      	movs	r1, r3
 80015e2:	0010      	movs	r0, r2
 80015e4:	f000 feea 	bl	80023bc <HAL_GPIO_Init>

}
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b009      	add	sp, #36	@ 0x24
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48001400 	.word	0x48001400
 80015f8:	48000400 	.word	0x48000400

080015fc <led_debug>:

/* USER CODE BEGIN 4 */
void led_debug(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <led_debug+0x14>)
 8001602:	2108      	movs	r1, #8
 8001604:	0018      	movs	r0, r3
 8001606:	f001 f87b 	bl	8002700 <HAL_GPIO_TogglePin>
}
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	48000400 	.word	0x48000400

08001614 <buzz_off>:
void buzz_off(){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <buzz_off+0x18>)
 800161a:	2200      	movs	r2, #0
 800161c:	2101      	movs	r1, #1
 800161e:	0018      	movs	r0, r3
 8001620:	f001 f851 	bl	80026c6 <HAL_GPIO_WritePin>
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	48001400 	.word	0x48001400

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	46c0      	nop			@ (mov r8, r8)
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <SCH_Add_Task>:
	list.head = NULL;
	list.tail = NULL;
    list.numTask = 0;
}

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	if(SCH_Is_Task_Exist(function) == 1)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	0018      	movs	r0, r3
 800164c:	f000 f8f2 	bl	8001834 <SCH_Is_Task_Exist>
 8001650:	0003      	movs	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d042      	beq.n	80016dc <SCH_Add_Task+0xa0>
		return;
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8001656:	2018      	movs	r0, #24
 8001658:	f004 feb4 	bl	80063c4 <malloc>
 800165c:	0003      	movs	r3, r0
 800165e:	617b      	str	r3, [r7, #20]
	if (newTask == NULL)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03c      	beq.n	80016e0 <SCH_Add_Task+0xa4>
		return;

	newTask->pTask = function;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	210a      	movs	r1, #10
 8001670:	0018      	movs	r0, r3
 8001672:	f7fe fd5b 	bl	800012c <__udivsi3>
 8001676:	0003      	movs	r3, r0
 8001678:	001a      	movs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	210a      	movs	r1, #10
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd52 	bl	800012c <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	001a      	movs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	609a      	str	r2, [r3, #8]
	newTask->runMe = 0;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2200      	movs	r2, #0
 8001694:	731a      	strb	r2, [r3, #12]
	newTask->next = NULL;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
	newTask->prev = NULL;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]

	if(list.head == NULL){
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <SCH_Add_Task+0x7c>
		list.head = newTask;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	601a      	str	r2, [r3, #0]
		list.tail = newTask;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e00a      	b.n	80016ce <SCH_Add_Task+0x92>
	}
	else{
		newTask->prev = list.tail;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	615a      	str	r2, [r3, #20]
		list.tail->next = newTask;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	611a      	str	r2, [r3, #16]
		list.tail = newTask;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	605a      	str	r2, [r3, #4]
	}
	list.numTask++;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016d0:	7a1b      	ldrb	r3, [r3, #8]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SCH_Add_Task+0xac>)
 80016d8:	721a      	strb	r2, [r3, #8]
 80016da:	e002      	b.n	80016e2 <SCH_Add_Task+0xa6>
		return;
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	e000      	b.n	80016e2 <SCH_Add_Task+0xa6>
		return;
 80016e0:	46c0      	nop			@ (mov r8, r8)
}
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b006      	add	sp, #24
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000284 	.word	0x20000284

080016ec <SCH_Update>:

void SCH_Update(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	sTask * temp = list.head;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <SCH_Update+0x4c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 80016f8:	e016      	b.n	8001728 <SCH_Update+0x3c>
		if(temp->Delay > 0){
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <SCH_Update+0x22>
			temp->Delay --;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	e009      	b.n	8001722 <SCH_Update+0x36>
		}
		else{
			temp->runMe++;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b1b      	ldrb	r3, [r3, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	731a      	strb	r2, [r3, #12]
			temp->Delay = temp->Period;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	605a      	str	r2, [r3, #4]
		}
		temp = temp->next;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e5      	bne.n	80016fa <SCH_Update+0xe>
	}
}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000284 	.word	0x20000284

0800173c <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	sTask * temp = list.head;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <SCH_Dispatch_Task+0x50>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8001748:	e018      	b.n	800177c <SCH_Dispatch_Task+0x40>
		if(temp->runMe > 0){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7b1b      	ldrb	r3, [r3, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <SCH_Dispatch_Task+0x3a>
			temp->runMe --;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7b1b      	ldrb	r3, [r3, #12]
 8001756:	3b01      	subs	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	731a      	strb	r2, [r3, #12]
			temp->pTask();
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4798      	blx	r3
			if(temp->Period == 0){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <SCH_Dispatch_Task+0x3a>
				SCH_Delete_Task(temp->pTask);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0018      	movs	r0, r3
 8001772:	f000 f80d 	bl	8001790 <SCH_Delete_Task>
			}
		}
		temp = temp ->next;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e3      	bne.n	800174a <SCH_Dispatch_Task+0xe>
	}
}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000284 	.word	0x20000284

08001790 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(void (*function)()){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0)
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <SCH_Delete_Task+0xa0>)
 800179a:	7a1b      	ldrb	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <SCH_Delete_Task+0x14>
		return 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e041      	b.n	8001828 <SCH_Delete_Task+0x98>
	sTask * temp = list.head;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <SCH_Delete_Task+0xa0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 80017aa:	e039      	b.n	8001820 <SCH_Delete_Task+0x90>
		if(temp->pTask == function){
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d131      	bne.n	800181a <SCH_Delete_Task+0x8a>
			if(temp == list.head){ // delete head
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <SCH_Delete_Task+0xa0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d108      	bne.n	80017d2 <SCH_Delete_Task+0x42>
				temp->next->prev = NULL;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
				list.head = temp->next;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <SCH_Delete_Task+0xa0>)
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e017      	b.n	8001802 <SCH_Delete_Task+0x72>
			}
			else if (temp == list.tail){ //delete tail
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <SCH_Delete_Task+0xa0>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d108      	bne.n	80017ee <SCH_Delete_Task+0x5e>
				temp->prev->next = NULL;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
				list.tail = temp->prev;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <SCH_Delete_Task+0xa0>)
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	e009      	b.n	8001802 <SCH_Delete_Task+0x72>
			}
			else{
				temp->prev->next = temp->next;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	6912      	ldr	r2, [r2, #16]
 80017f6:	611a      	str	r2, [r3, #16]
				temp->next->prev = temp->prev;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	6952      	ldr	r2, [r2, #20]
 8001800:	615a      	str	r2, [r3, #20]
			}
			list.numTask--;
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <SCH_Delete_Task+0xa0>)
 8001804:	7a1b      	ldrb	r3, [r3, #8]
 8001806:	3b01      	subs	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <SCH_Delete_Task+0xa0>)
 800180c:	721a      	strb	r2, [r3, #8]
			free(temp);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	0018      	movs	r0, r3
 8001812:	f004 fde1 	bl	80063d8 <free>
			return 1;
 8001816:	2301      	movs	r3, #1
 8001818:	e006      	b.n	8001828 <SCH_Delete_Task+0x98>
		}
		temp = temp->next;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1c2      	bne.n	80017ac <SCH_Delete_Task+0x1c>
	}
	return 0;
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000284 	.word	0x20000284

08001834 <SCH_Is_Task_Exist>:
uint8_t SCH_Is_Task_Exist(void (*function)()){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0) return 0;
 800183c:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <SCH_Is_Task_Exist+0x40>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <SCH_Is_Task_Exist+0x14>
 8001844:	2300      	movs	r3, #0
 8001846:	e011      	b.n	800186c <SCH_Is_Task_Exist+0x38>
	sTask * temp = list.head;
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <SCH_Is_Task_Exist+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 800184e:	e009      	b.n	8001864 <SCH_Is_Task_Exist+0x30>
		if(temp->pTask == function)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	d101      	bne.n	800185e <SCH_Is_Task_Exist+0x2a>
			return 1;
 800185a:	2301      	movs	r3, #1
 800185c:	e006      	b.n	800186c <SCH_Is_Task_Exist+0x38>
		temp = temp->next;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f2      	bne.n	8001850 <SCH_Is_Task_Exist+0x1c>
	}
	return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b004      	add	sp, #16
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000284 	.word	0x20000284

08001878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_MspInit+0x44>)
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_MspInit+0x44>)
 8001884:	2101      	movs	r1, #1
 8001886:	430a      	orrs	r2, r1
 8001888:	619a      	str	r2, [r3, #24]
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_MspInit+0x44>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2201      	movs	r2, #1
 8001890:	4013      	ands	r3, r2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_MspInit+0x44>)
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_MspInit+0x44>)
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0549      	lsls	r1, r1, #21
 80018a0:	430a      	orrs	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_MspInit+0x44>)
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	055b      	lsls	r3, r3, #21
 80018ac:	4013      	ands	r3, r2
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08b      	sub	sp, #44	@ 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	2414      	movs	r4, #20
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2314      	movs	r3, #20
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f004 fea4 	bl	8006620 <memset>
  if(hi2c->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <HAL_I2C_MspInit+0x94>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d133      	bne.n	800194a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_I2C_MspInit+0x98>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <HAL_I2C_MspInit+0x98>)
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	0289      	lsls	r1, r1, #10
 80018ec:	430a      	orrs	r2, r1
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_I2C_MspInit+0x98>)
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	029b      	lsls	r3, r3, #10
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	22c0      	movs	r2, #192	@ 0xc0
 8001902:	00d2      	lsls	r2, r2, #3
 8001904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001906:	0021      	movs	r1, r4
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2212      	movs	r2, #18
 800190c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2203      	movs	r2, #3
 8001918:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2204      	movs	r2, #4
 800191e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	187a      	adds	r2, r7, r1
 8001922:	2390      	movs	r3, #144	@ 0x90
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f000 fd47 	bl	80023bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_I2C_MspInit+0x98>)
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_I2C_MspInit+0x98>)
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	0389      	lsls	r1, r1, #14
 8001938:	430a      	orrs	r2, r1
 800193a:	61da      	str	r2, [r3, #28]
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_I2C_MspInit+0x98>)
 800193e:	69da      	ldr	r2, [r3, #28]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	039b      	lsls	r3, r3, #14
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b00b      	add	sp, #44	@ 0x2c
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	40005400 	.word	0x40005400
 8001958:	40021000 	.word	0x40021000

0800195c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b08b      	sub	sp, #44	@ 0x2c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	2414      	movs	r4, #20
 8001966:	193b      	adds	r3, r7, r4
 8001968:	0018      	movs	r0, r3
 800196a:	2314      	movs	r3, #20
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f004 fe56 	bl	8006620 <memset>
  if(hspi->Instance==SPI1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a20      	ldr	r2, [pc, #128]	@ (80019fc <HAL_SPI_MspInit+0xa0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d13a      	bne.n	80019f4 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_SPI_MspInit+0xa4>)
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_SPI_MspInit+0xa4>)
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	0149      	lsls	r1, r1, #5
 8001988:	430a      	orrs	r2, r1
 800198a:	619a      	str	r2, [r3, #24]
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_SPI_MspInit+0xa4>)
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	015b      	lsls	r3, r3, #5
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_SPI_MspInit+0xa4>)
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_SPI_MspInit+0xa4>)
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	0289      	lsls	r1, r1, #10
 80019a4:	430a      	orrs	r2, r1
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_SPI_MspInit+0xa4>)
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019b6:	0021      	movs	r1, r4
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	22e0      	movs	r2, #224	@ 0xe0
 80019bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2202      	movs	r2, #2
 80019c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2203      	movs	r2, #3
 80019ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	187a      	adds	r2, r7, r1
 80019d8:	2390      	movs	r3, #144	@ 0x90
 80019da:	05db      	lsls	r3, r3, #23
 80019dc:	0011      	movs	r1, r2
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 fcec 	bl	80023bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2019      	movs	r0, #25
 80019ea:	f000 fb31 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019ee:	2019      	movs	r0, #25
 80019f0:	f000 fb43 	bl	800207a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019f4:	46c0      	nop			@ (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b00b      	add	sp, #44	@ 0x2c
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	40013000 	.word	0x40013000
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xa0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d141      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	61da      	str	r2, [r3, #28]
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_TIM_Base_MspInit+0xa4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a30:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xac>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a36:	2210      	movs	r2, #16
 8001a38:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a42:	2280      	movs	r2, #128	@ 0x80
 8001a44:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	00d2      	lsls	r2, r2, #3
 8001a54:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fb25 	bl	80020b4 <HAL_DMA_Init>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001a6e:	f7ff fddf 	bl	8001630 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a82:	621a      	str	r2, [r3, #32]
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_TIM_Base_MspInit+0xa8>)
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2010      	movs	r0, #16
 8001a90:	f000 fade 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a94:	2010      	movs	r0, #16
 8001a96:	f000 faf0 	bl	800207a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	2000019c 	.word	0x2000019c
 8001ab0:	40020030 	.word	0x40020030

08001ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	240c      	movs	r4, #12
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f004 fdaa 	bl	8006620 <memset>
  if(htim->Instance==TIM3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <HAL_TIM_MspPostInit+0x74>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d123      	bne.n	8001b1e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_TIM_MspPostInit+0x78>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <HAL_TIM_MspPostInit+0x78>)
 8001adc:	2180      	movs	r1, #128	@ 0x80
 8001ade:	02c9      	lsls	r1, r1, #11
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_TIM_MspPostInit+0x78>)
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	02db      	lsls	r3, r3, #11
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 8001af2:	0021      	movs	r1, r4
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	2232      	movs	r2, #50	@ 0x32
 8001af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	2202      	movs	r2, #2
 8001afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2201      	movs	r2, #1
 8001b10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	4a06      	ldr	r2, [pc, #24]	@ (8001b30 <HAL_TIM_MspPostInit+0x7c>)
 8001b16:	0019      	movs	r1, r3
 8001b18:	0010      	movs	r0, r2
 8001b1a:	f000 fc4f 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b009      	add	sp, #36	@ 0x24
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000400 	.word	0x48000400

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b08b      	sub	sp, #44	@ 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	2414      	movs	r4, #20
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	0018      	movs	r0, r3
 8001b42:	2314      	movs	r3, #20
 8001b44:	001a      	movs	r2, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	f004 fd6a 	bl	8006620 <memset>
  if(huart->Instance==USART1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <HAL_UART_MspInit+0xa0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d139      	bne.n	8001bca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_UART_MspInit+0xa4>)
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <HAL_UART_MspInit+0xa4>)
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	01c9      	lsls	r1, r1, #7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	619a      	str	r2, [r3, #24]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_UART_MspInit+0xa4>)
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	01db      	lsls	r3, r3, #7
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_UART_MspInit+0xa4>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_UART_MspInit+0xa4>)
 8001b78:	2180      	movs	r1, #128	@ 0x80
 8001b7a:	02c9      	lsls	r1, r1, #11
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_UART_MspInit+0xa4>)
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	02db      	lsls	r3, r3, #11
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	0021      	movs	r1, r4
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	22c0      	movs	r2, #192	@ 0xc0
 8001b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2202      	movs	r2, #2
 8001b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_UART_MspInit+0xa8>)
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	f000 fc01 	bl	80023bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	201b      	movs	r0, #27
 8001bc0:	f000 fa46 	bl	8002050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc4:	201b      	movs	r0, #27
 8001bc6:	f000 fa58 	bl	800207a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b00b      	add	sp, #44	@ 0x2c
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	48000400 	.word	0x48000400

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	e7fd      	b.n	8001be4 <NMI_Handler+0x4>

08001be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	e7fd      	b.n	8001bec <HardFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 f936 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 fb0f 	bl	800223e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	2000019c 	.word	0x2000019c

08001c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <TIM3_IRQHandler+0x14>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f002 fe02 	bl	800483c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c38:	46c0      	nop			@ (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	20000154 	.word	0x20000154

08001c44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <SPI1_IRQHandler+0x14>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f002 f9d8 	bl	8004000 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	200000f0 	.word	0x200000f0

08001c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <USART1_IRQHandler+0x14>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f003 fd10 	bl	8005688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	200001e0 	.word	0x200001e0

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f004 fcd6 	bl	8006654 <__errno>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	18d2      	adds	r2, r2, r3
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <_sbrk+0x64>)
 8001cc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b006      	add	sp, #24
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20001000 	.word	0x20001000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	20000290 	.word	0x20000290
 8001cdc:	200003f0 	.word	0x200003f0

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <timer_run>:
									// FLAG[4] = 1 TO READY READ CARD
void setTimer(int timer, int duration){
	counter[timer] = duration / 10;
	timer_flag[timer] = 0;
}
void timer_run(){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e01c      	b.n	8001d32 <timer_run+0x46>
		if(counter[i] > 0){
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <timer_run+0x58>)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	58d3      	ldr	r3, [r2, r3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dd13      	ble.n	8001d2c <timer_run+0x40>
			counter[i]--;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <timer_run+0x58>)
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	58d3      	ldr	r3, [r2, r3]
 8001d0c:	1e59      	subs	r1, r3, #1
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <timer_run+0x58>)
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <timer_run+0x58>)
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	58d3      	ldr	r3, [r2, r3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	dc04      	bgt.n	8001d2c <timer_run+0x40>
				timer_flag[i] = 1;
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <timer_run+0x5c>)
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	2101      	movs	r1, #1
 8001d2a:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 3; i++){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	dddf      	ble.n	8001cf8 <timer_run+0xc>
		}
	}
}
 8001d38:	46c0      	nop			@ (mov r8, r8)
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	20000294 	.word	0x20000294
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8001d54:	f7fe fd20 	bl	8000798 <getKeyinput>
	timer_run();
 8001d58:	f7ff ffc8 	bl	8001cec <timer_run>
	SCH_Update();
 8001d5c:	f7ff fcc6 	bl	80016ec <SCH_Update>
}
 8001d60:	46c0      	nop			@ (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <sendDataToESP32>:
 *  Created on: Nov 17, 2024
 *      Author: HOME
 */
#include "uart_ESP.h"

void sendDataToESP32(char *data) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)data, strlen(data), HAL_MAX_DELAY); // Gửi dữ liệu qua UART
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe f9c8 	bl	8000108 <strlen>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	425b      	negs	r3, r3
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <sendDataToESP32+0x28>)
 8001d84:	f003 fbe0 	bl	8005548 <HAL_UART_Transmit>
}
 8001d88:	46c0      	nop			@ (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200001e0 	.word	0x200001e0

08001d94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d94:	480d      	ldr	r0, [pc, #52]	@ (8001dcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d98:	f7ff ffa2 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopForever+0xe>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopForever+0x16>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dc2:	f004 fc4d 	bl	8006660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc6:	f7ff f943 	bl	8001050 <main>

08001dca <LoopForever>:

LoopForever:
    b LoopForever
 8001dca:	e7fe      	b.n	8001dca <LoopForever>
  ldr   r0, =_estack
 8001dcc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001dd8:	08006f28 	.word	0x08006f28
  ldr r2, =_sbss
 8001ddc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001de0:	200003ec 	.word	0x200003ec

08001de4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_IRQHandler>
	...

08001de8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <HAL_Init+0x24>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_Init+0x24>)
 8001df2:	2110      	movs	r1, #16
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 f809 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfe:	f7ff fd3b 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_InitTick+0x5c>)
 8001e1a:	681c      	ldr	r4, [r3, #0]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_InitTick+0x60>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	0019      	movs	r1, r3
 8001e22:	23fa      	movs	r3, #250	@ 0xfa
 8001e24:	0098      	lsls	r0, r3, #2
 8001e26:	f7fe f981 	bl	800012c <__udivsi3>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	0020      	movs	r0, r4
 8001e30:	f7fe f97c 	bl	800012c <__udivsi3>
 8001e34:	0003      	movs	r3, r0
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 f92f 	bl	800209a <HAL_SYSTICK_Config>
 8001e3c:	1e03      	subs	r3, r0, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00f      	b.n	8001e64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d80b      	bhi.n	8001e62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	425b      	negs	r3, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 f8fc 	bl	8002050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_InitTick+0x64>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b003      	add	sp, #12
 8001e6a:	bd90      	pop	{r4, r7, pc}
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000014 	.word	0x20000014
 8001e74:	20000010 	.word	0x20000010

08001e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_IncTick+0x1c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	001a      	movs	r2, r3
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	18d2      	adds	r2, r2, r3
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	20000014 	.word	0x20000014
 8001e98:	200002a0 	.word	0x200002a0

08001e9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b02      	ldr	r3, [pc, #8]	@ (8001eac <HAL_GetTick+0x10>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	200002a0 	.word	0x200002a0

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	001a      	movs	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	f7ff ffe0 	bl	8001e9c <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b004      	add	sp, #16
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	20000014 	.word	0x20000014

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	0002      	movs	r2, r0
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f0a:	d809      	bhi.n	8001f20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	231f      	movs	r3, #31
 8001f14:	401a      	ands	r2, r3
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <__NVIC_EnableIRQ+0x30>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4091      	lsls	r1, r2
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
  }
}
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	0002      	movs	r2, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f40:	d828      	bhi.n	8001f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f42:	4a2f      	ldr	r2, [pc, #188]	@ (8002000 <__NVIC_SetPriority+0xd4>)
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	33c0      	adds	r3, #192	@ 0xc0
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	589b      	ldr	r3, [r3, r2]
 8001f52:	1dfa      	adds	r2, r7, #7
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	0011      	movs	r1, r2
 8001f58:	2203      	movs	r2, #3
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	00d2      	lsls	r2, r2, #3
 8001f5e:	21ff      	movs	r1, #255	@ 0xff
 8001f60:	4091      	lsls	r1, r2
 8001f62:	000a      	movs	r2, r1
 8001f64:	43d2      	mvns	r2, r2
 8001f66:	401a      	ands	r2, r3
 8001f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	019b      	lsls	r3, r3, #6
 8001f6e:	22ff      	movs	r2, #255	@ 0xff
 8001f70:	401a      	ands	r2, r3
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	0018      	movs	r0, r3
 8001f78:	2303      	movs	r3, #3
 8001f7a:	4003      	ands	r3, r0
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f80:	481f      	ldr	r0, [pc, #124]	@ (8002000 <__NVIC_SetPriority+0xd4>)
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	33c0      	adds	r3, #192	@ 0xc0
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f92:	e031      	b.n	8001ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f94:	4a1b      	ldr	r2, [pc, #108]	@ (8002004 <__NVIC_SetPriority+0xd8>)
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	400b      	ands	r3, r1
 8001fa0:	3b08      	subs	r3, #8
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	18d3      	adds	r3, r2, r3
 8001faa:	3304      	adds	r3, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1dfa      	adds	r2, r7, #7
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	00d2      	lsls	r2, r2, #3
 8001fba:	21ff      	movs	r1, #255	@ 0xff
 8001fbc:	4091      	lsls	r1, r2
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	43d2      	mvns	r2, r2
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	22ff      	movs	r2, #255	@ 0xff
 8001fcc:	401a      	ands	r2, r3
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	4003      	ands	r3, r0
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fdc:	4809      	ldr	r0, [pc, #36]	@ (8002004 <__NVIC_SetPriority+0xd8>)
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	001c      	movs	r4, r3
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	4023      	ands	r3, r4
 8001fe8:	3b08      	subs	r3, #8
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	430a      	orrs	r2, r1
 8001fee:	3306      	adds	r3, #6
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	18c3      	adds	r3, r0, r3
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b003      	add	sp, #12
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1e5a      	subs	r2, r3, #1
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	045b      	lsls	r3, r3, #17
 8002018:	429a      	cmp	r2, r3
 800201a:	d301      	bcc.n	8002020 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201c:	2301      	movs	r3, #1
 800201e:	e010      	b.n	8002042 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002020:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <SysTick_Config+0x44>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	3a01      	subs	r2, #1
 8002026:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002028:	2301      	movs	r3, #1
 800202a:	425b      	negs	r3, r3
 800202c:	2103      	movs	r1, #3
 800202e:	0018      	movs	r0, r3
 8002030:	f7ff ff7c 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x44>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x44>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	210f      	movs	r1, #15
 800205c:	187b      	adds	r3, r7, r1
 800205e:	1c02      	adds	r2, r0, #0
 8002060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	187b      	adds	r3, r7, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b25b      	sxtb	r3, r3
 800206a:	0011      	movs	r1, r2
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b004      	add	sp, #16
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	0002      	movs	r2, r0
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff33 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ffaf 	bl	8002008 <SysTick_Config>
 80020aa:	0003      	movs	r3, r0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e036      	b.n	8002138 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2221      	movs	r2, #33	@ 0x21
 80020ce:	2102      	movs	r1, #2
 80020d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <HAL_DMA_Init+0x8c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 f932 	bl	8002384 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2221      	movs	r2, #33	@ 0x21
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}
 8002140:	ffffc00f 	.word	0xffffc00f

08002144 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2221      	movs	r2, #33	@ 0x21
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d008      	beq.n	800216a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e020      	b.n	80021ac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	210e      	movs	r1, #14
 8002176:	438a      	bics	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	438a      	bics	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002192:	2101      	movs	r1, #1
 8002194:	4091      	lsls	r1, r2
 8002196:	000a      	movs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2221      	movs	r2, #33	@ 0x21
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	2100      	movs	r1, #0
 80021a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	210f      	movs	r1, #15
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2221      	movs	r2, #33	@ 0x21
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d006      	beq.n	80021de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e028      	b.n	8002230 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	210e      	movs	r1, #14
 80021ea:	438a      	bics	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	438a      	bics	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002206:	2101      	movs	r1, #1
 8002208:	4091      	lsls	r1, r2
 800220a:	000a      	movs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2221      	movs	r2, #33	@ 0x21
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	2100      	movs	r1, #0
 800221c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	0010      	movs	r0, r2
 800222e:	4798      	blx	r3
    }
  }
  return status;
 8002230:	230f      	movs	r3, #15
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	781b      	ldrb	r3, [r3, #0]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	2204      	movs	r2, #4
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	d024      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x72>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2204      	movs	r2, #4
 800226a:	4013      	ands	r3, r2
 800226c:	d020      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	4013      	ands	r3, r2
 8002278:	d107      	bne.n	800228a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2104      	movs	r1, #4
 8002286:	438a      	bics	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	2104      	movs	r1, #4
 8002294:	4091      	lsls	r1, r2
 8002296:	000a      	movs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d100      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x66>
 80022a2:	e06a      	b.n	800237a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	0010      	movs	r0, r2
 80022ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022ae:	e064      	b.n	800237a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	2202      	movs	r2, #2
 80022b6:	409a      	lsls	r2, r3
 80022b8:	0013      	movs	r3, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4013      	ands	r3, r2
 80022be:	d02b      	beq.n	8002318 <HAL_DMA_IRQHandler+0xda>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d027      	beq.n	8002318 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2220      	movs	r2, #32
 80022d0:	4013      	ands	r3, r2
 80022d2:	d10b      	bne.n	80022ec <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	210a      	movs	r1, #10
 80022e0:	438a      	bics	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2221      	movs	r2, #33	@ 0x21
 80022e8:	2101      	movs	r1, #1
 80022ea:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	2102      	movs	r1, #2
 80022f6:	4091      	lsls	r1, r2
 80022f8:	000a      	movs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d036      	beq.n	800237a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	0010      	movs	r0, r2
 8002314:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002316:	e030      	b.n	800237a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2208      	movs	r2, #8
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	d028      	beq.n	800237a <HAL_DMA_IRQHandler+0x13c>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2208      	movs	r2, #8
 800232c:	4013      	ands	r3, r2
 800232e:	d024      	beq.n	800237a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	210e      	movs	r1, #14
 800233c:	438a      	bics	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002348:	2101      	movs	r1, #1
 800234a:	4091      	lsls	r1, r2
 800234c:	000a      	movs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2221      	movs	r2, #33	@ 0x21
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	0010      	movs	r0, r2
 8002376:	4798      	blx	r3
    }
  }
}
 8002378:	e7ff      	b.n	800237a <HAL_DMA_IRQHandler+0x13c>
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b004      	add	sp, #16
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <DMA_CalcBaseAndBitshift+0x30>)
 8002392:	4694      	mov	ip, r2
 8002394:	4463      	add	r3, ip
 8002396:	2114      	movs	r1, #20
 8002398:	0018      	movs	r0, r3
 800239a:	f7fd fec7 	bl	800012c <__udivsi3>
 800239e:	0003      	movs	r3, r0
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a03      	ldr	r2, [pc, #12]	@ (80023b8 <DMA_CalcBaseAndBitshift+0x34>)
 80023aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	bffdfff8 	.word	0xbffdfff8
 80023b8:	40020000 	.word	0x40020000

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	e149      	b.n	8002660 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4091      	lsls	r1, r2
 80023d6:	000a      	movs	r2, r1
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d100      	bne.n	80023e4 <HAL_GPIO_Init+0x28>
 80023e2:	e13a      	b.n	800265a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d005      	beq.n	80023fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d130      	bne.n	800245e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	409a      	lsls	r2, r3
 800240a:	0013      	movs	r3, r2
 800240c:	43da      	mvns	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002432:	2201      	movs	r2, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
 8002438:	0013      	movs	r3, r2
 800243a:	43da      	mvns	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	2201      	movs	r2, #1
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	2b03      	cmp	r3, #3
 8002468:	d017      	beq.n	800249a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	409a      	lsls	r2, r3
 8002478:	0013      	movs	r3, r2
 800247a:	43da      	mvns	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	409a      	lsls	r2, r3
 800248c:	0013      	movs	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d123      	bne.n	80024ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	58d3      	ldr	r3, [r2, r3]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2207      	movs	r2, #7
 80024b8:	4013      	ands	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	409a      	lsls	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	43da      	mvns	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2107      	movs	r1, #7
 80024d2:	400b      	ands	r3, r1
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	6939      	ldr	r1, [r7, #16]
 80024ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	409a      	lsls	r2, r3
 80024fc:	0013      	movs	r3, r2
 80024fe:	43da      	mvns	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2203      	movs	r2, #3
 800250c:	401a      	ands	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	23c0      	movs	r3, #192	@ 0xc0
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	4013      	ands	r3, r2
 800252c:	d100      	bne.n	8002530 <HAL_GPIO_Init+0x174>
 800252e:	e094      	b.n	800265a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002530:	4b51      	ldr	r3, [pc, #324]	@ (8002678 <HAL_GPIO_Init+0x2bc>)
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	4b50      	ldr	r3, [pc, #320]	@ (8002678 <HAL_GPIO_Init+0x2bc>)
 8002536:	2101      	movs	r1, #1
 8002538:	430a      	orrs	r2, r1
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_GPIO_Init+0x2bc>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002548:	4a4c      	ldr	r2, [pc, #304]	@ (800267c <HAL_GPIO_Init+0x2c0>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	589b      	ldr	r3, [r3, r2]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2203      	movs	r2, #3
 800255a:	4013      	ands	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	409a      	lsls	r2, r3
 8002562:	0013      	movs	r3, r2
 8002564:	43da      	mvns	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	2390      	movs	r3, #144	@ 0x90
 8002570:	05db      	lsls	r3, r3, #23
 8002572:	429a      	cmp	r2, r3
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x1d6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a41      	ldr	r2, [pc, #260]	@ (8002680 <HAL_GPIO_Init+0x2c4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x1d2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a40      	ldr	r2, [pc, #256]	@ (8002684 <HAL_GPIO_Init+0x2c8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x1ce>
 8002586:	2302      	movs	r3, #2
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x1d8>
 800258a:	2305      	movs	r3, #5
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x1d8>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x1d8>
 8002592:	2300      	movs	r3, #0
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	2103      	movs	r1, #3
 8002598:	400a      	ands	r2, r1
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	@ (800267c <HAL_GPIO_Init+0x2c0>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b2:	4b35      	ldr	r3, [pc, #212]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43da      	mvns	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	035b      	lsls	r3, r3, #13
 80025ca:	4013      	ands	r3, r2
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43da      	mvns	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	039b      	lsls	r3, r3, #14
 80025f4:	4013      	ands	r3, r2
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43da      	mvns	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	4013      	ands	r3, r2
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43da      	mvns	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	4013      	ands	r3, r2
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <HAL_GPIO_Init+0x2cc>)
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	40da      	lsrs	r2, r3
 8002668:	1e13      	subs	r3, r2, #0
 800266a:	d000      	beq.n	800266e <HAL_GPIO_Init+0x2b2>
 800266c:	e6ae      	b.n	80023cc <HAL_GPIO_Init+0x10>
  } 
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	46c0      	nop			@ (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b006      	add	sp, #24
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40010000 	.word	0x40010000
 8002680:	48000400 	.word	0x48000400
 8002684:	48000800 	.word	0x48000800
 8002688:	40010400 	.word	0x40010400

0800268c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	000a      	movs	r2, r1
 8002696:	1cbb      	adds	r3, r7, #2
 8002698:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	1cba      	adds	r2, r7, #2
 80026a0:	8812      	ldrh	r2, [r2, #0]
 80026a2:	4013      	ands	r3, r2
 80026a4:	d004      	beq.n	80026b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e003      	b.n	80026b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026b0:	230f      	movs	r3, #15
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026b8:	230f      	movs	r3, #15
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
  }
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b004      	add	sp, #16
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	0008      	movs	r0, r1
 80026d0:	0011      	movs	r1, r2
 80026d2:	1cbb      	adds	r3, r7, #2
 80026d4:	1c02      	adds	r2, r0, #0
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	1c7b      	adds	r3, r7, #1
 80026da:	1c0a      	adds	r2, r1, #0
 80026dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026de:	1c7b      	adds	r3, r7, #1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026e6:	1cbb      	adds	r3, r7, #2
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026ee:	e003      	b.n	80026f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f0:	1cbb      	adds	r3, r7, #2
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	000a      	movs	r2, r1
 800270a:	1cbb      	adds	r3, r7, #2
 800270c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002714:	1cbb      	adds	r3, r7, #2
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43db      	mvns	r3, r3
 8002722:	1cb9      	adds	r1, r7, #2
 8002724:	8809      	ldrh	r1, [r1, #0]
 8002726:	400b      	ands	r3, r1
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619a      	str	r2, [r3, #24]
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e08f      	b.n	800286a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2241      	movs	r2, #65	@ 0x41
 800274e:	5c9b      	ldrb	r3, [r3, r2]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2240      	movs	r2, #64	@ 0x40
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff f8ad 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2241      	movs	r2, #65	@ 0x41
 800276a:	2124      	movs	r1, #36	@ 0x24
 800276c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	438a      	bics	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	493b      	ldr	r1, [pc, #236]	@ (8002874 <HAL_I2C_Init+0x13c>)
 8002788:	400a      	ands	r2, r1
 800278a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4938      	ldr	r1, [pc, #224]	@ (8002878 <HAL_I2C_Init+0x140>)
 8002798:	400a      	ands	r2, r1
 800279a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d108      	bne.n	80027b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2180      	movs	r1, #128	@ 0x80
 80027ae:	0209      	lsls	r1, r1, #8
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e007      	b.n	80027c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2184      	movs	r1, #132	@ 0x84
 80027c0:	0209      	lsls	r1, r1, #8
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d109      	bne.n	80027e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	0109      	lsls	r1, r1, #4
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	e007      	b.n	80027f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4923      	ldr	r1, [pc, #140]	@ (800287c <HAL_I2C_Init+0x144>)
 80027ee:	400a      	ands	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4920      	ldr	r1, [pc, #128]	@ (8002880 <HAL_I2C_Init+0x148>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	491a      	ldr	r1, [pc, #104]	@ (8002878 <HAL_I2C_Init+0x140>)
 800280e:	400a      	ands	r2, r1
 8002810:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	431a      	orrs	r2, r3
 800281c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69d9      	ldr	r1, [r3, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	@ 0x41
 8002856:	2120      	movs	r1, #32
 8002858:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2242      	movs	r2, #66	@ 0x42
 8002864:	2100      	movs	r1, #0
 8002866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	f0ffffff 	.word	0xf0ffffff
 8002878:	ffff7fff 	.word	0xffff7fff
 800287c:	fffff7ff 	.word	0xfffff7ff
 8002880:	02008000 	.word	0x02008000

08002884 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b089      	sub	sp, #36	@ 0x24
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	0008      	movs	r0, r1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	0019      	movs	r1, r3
 8002892:	230a      	movs	r3, #10
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	1c02      	adds	r2, r0, #0
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	2308      	movs	r3, #8
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	1c0a      	adds	r2, r1, #0
 80028a0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2241      	movs	r2, #65	@ 0x41
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d000      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x2c>
 80028ae:	e10a      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2240      	movs	r2, #64	@ 0x40
 80028b4:	5c9b      	ldrb	r3, [r3, r2]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Master_Transmit+0x3a>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e104      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x244>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2240      	movs	r2, #64	@ 0x40
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028c6:	f7ff fae9 	bl	8001e9c <HAL_GetTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	0219      	lsls	r1, r3, #8
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2319      	movs	r3, #25
 80028da:	2201      	movs	r2, #1
 80028dc:	f000 f91e 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0ef      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2241      	movs	r2, #65	@ 0x41
 80028ec:	2121      	movs	r1, #33	@ 0x21
 80028ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2242      	movs	r2, #66	@ 0x42
 80028f4:	2110      	movs	r1, #16
 80028f6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2208      	movs	r2, #8
 8002908:	18ba      	adds	r2, r7, r2
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	@ 0xff
 800291c:	d906      	bls.n	800292c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22ff      	movs	r2, #255	@ 0xff
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	045b      	lsls	r3, r3, #17
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e007      	b.n	800293c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	049b      	lsls	r3, r3, #18
 800293a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d027      	beq.n	8002994 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3301      	adds	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	697c      	ldr	r4, [r7, #20]
 8002980:	230a      	movs	r3, #10
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	8819      	ldrh	r1, [r3, #0]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	4b51      	ldr	r3, [pc, #324]	@ (8002ad0 <HAL_I2C_Master_Transmit+0x24c>)
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	0023      	movs	r3, r4
 800298e:	f000 fa9f 	bl	8002ed0 <I2C_TransferConfig>
 8002992:	e06f      	b.n	8002a74 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	b2da      	uxtb	r2, r3
 800299a:	697c      	ldr	r4, [r7, #20]
 800299c:	230a      	movs	r3, #10
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	8819      	ldrh	r1, [r3, #0]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad0 <HAL_I2C_Master_Transmit+0x24c>)
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	0023      	movs	r3, r4
 80029aa:	f000 fa91 	bl	8002ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029ae:	e061      	b.n	8002a74 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 f908 	bl	8002bcc <I2C_WaitOnTXISFlagUntilTimeout>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e081      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03a      	beq.n	8002a74 <HAL_I2C_Master_Transmit+0x1f0>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d136      	bne.n	8002a74 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	0013      	movs	r3, r2
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	f000 f882 	bl	8002b1c <I2C_WaitOnFlagUntilTimeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e053      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2bff      	cmp	r3, #255	@ 0xff
 8002a28:	d911      	bls.n	8002a4e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	22ff      	movs	r2, #255	@ 0xff
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	045c      	lsls	r4, r3, #17
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	8819      	ldrh	r1, [r3, #0]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	0023      	movs	r3, r4
 8002a48:	f000 fa42 	bl	8002ed0 <I2C_TransferConfig>
 8002a4c:	e012      	b.n	8002a74 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	049c      	lsls	r4, r3, #18
 8002a62:	230a      	movs	r3, #10
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	8819      	ldrh	r1, [r3, #0]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	0023      	movs	r3, r4
 8002a70:	f000 fa2e 	bl	8002ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d198      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 f8e7 	bl	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e01a      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2220      	movs	r2, #32
 8002a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	490b      	ldr	r1, [pc, #44]	@ (8002ad4 <HAL_I2C_Master_Transmit+0x250>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2241      	movs	r2, #65	@ 0x41
 8002aae:	2120      	movs	r1, #32
 8002ab0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2242      	movs	r2, #66	@ 0x42
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2240      	movs	r2, #64	@ 0x40
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b007      	add	sp, #28
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	80002000 	.word	0x80002000
 8002ad4:	fe00e800 	.word	0xfe00e800

08002ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d103      	bne.n	8002af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2101      	movs	r1, #1
 8002b10:	430a      	orrs	r2, r1
 8002b12:	619a      	str	r2, [r3, #24]
  }
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2c:	e03a      	b.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 f8d3 	bl	8002ce0 <I2C_IsErrorOccurred>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e040      	b.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	d02d      	beq.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7ff f9a8 	bl	8001e9c <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d122      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	425a      	negs	r2, r3
 8002b6e:	4153      	adcs	r3, r2
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	001a      	movs	r2, r3
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d113      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b80:	2220      	movs	r2, #32
 8002b82:	431a      	orrs	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2241      	movs	r2, #65	@ 0x41
 8002b8c:	2120      	movs	r1, #32
 8002b8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2242      	movs	r2, #66	@ 0x42
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e00f      	b.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	425a      	negs	r2, r3
 8002bb4:	4153      	adcs	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	001a      	movs	r2, r3
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d0b5      	beq.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bd8:	e032      	b.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f87d 	bl	8002ce0 <I2C_IsErrorOccurred>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e030      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	d025      	beq.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7ff f952 	bl	8001e9c <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11a      	bne.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d013      	beq.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2241      	movs	r2, #65	@ 0x41
 8002c28:	2120      	movs	r1, #32
 8002c2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2242      	movs	r2, #66	@ 0x42
 8002c30:	2100      	movs	r1, #0
 8002c32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e007      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2202      	movs	r2, #2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d1c5      	bne.n	8002bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b004      	add	sp, #16
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c64:	e02f      	b.n	8002cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f837 	bl	8002ce0 <I2C_IsErrorOccurred>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e02d      	b.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f90f 	bl	8001e9c <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11a      	bne.n	8002cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2220      	movs	r2, #32
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d013      	beq.n	8002cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2241      	movs	r2, #65	@ 0x41
 8002cae:	2120      	movs	r1, #32
 8002cb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2242      	movs	r2, #66	@ 0x42
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2240      	movs	r2, #64	@ 0x40
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e007      	b.n	8002cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d1c8      	bne.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2327      	movs	r3, #39	@ 0x27
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2210      	movs	r2, #16
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <I2C_IsErrorOccurred+0x2e>
 8002d0c:	e079      	b.n	8002e02 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2210      	movs	r2, #16
 8002d14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d16:	e057      	b.n	8002dc8 <I2C_IsErrorOccurred+0xe8>
 8002d18:	2227      	movs	r2, #39	@ 0x27
 8002d1a:	18bb      	adds	r3, r7, r2
 8002d1c:	18ba      	adds	r2, r7, r2
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3301      	adds	r3, #1
 8002d26:	d04f      	beq.n	8002dc8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d28:	f7ff f8b8 	bl	8001e9c <HAL_GetTick>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d302      	bcc.n	8002d3e <I2C_IsErrorOccurred+0x5e>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d144      	bne.n	8002dc8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	01db      	lsls	r3, r3, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d4c:	2013      	movs	r0, #19
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	2142      	movs	r1, #66	@ 0x42
 8002d54:	5c52      	ldrb	r2, [r2, r1]
 8002d56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	401a      	ands	r2, r3
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d126      	bne.n	8002dba <I2C_IsErrorOccurred+0xda>
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	2380      	movs	r3, #128	@ 0x80
 8002d70:	01db      	lsls	r3, r3, #7
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d021      	beq.n	8002dba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d01d      	beq.n	8002dba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	01c9      	lsls	r1, r1, #7
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d90:	f7ff f884 	bl	8001e9c <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d98:	e00f      	b.n	8002dba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d9a:	f7ff f87f 	bl	8001e9c <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b19      	cmp	r3, #25
 8002da6:	d908      	bls.n	8002dba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2220      	movs	r2, #32
 8002dac:	4313      	orrs	r3, r2
 8002dae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002db0:	2327      	movs	r3, #39	@ 0x27
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]

              break;
 8002db8:	e006      	b.n	8002dc8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d1e8      	bne.n	8002d9a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d004      	beq.n	8002de0 <I2C_IsErrorOccurred+0x100>
 8002dd6:	2327      	movs	r3, #39	@ 0x27
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d09b      	beq.n	8002d18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002de0:	2327      	movs	r3, #39	@ 0x27
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d103      	bne.n	8002df2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2220      	movs	r2, #32
 8002df0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2204      	movs	r2, #4
 8002df6:	4313      	orrs	r3, r2
 8002df8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dfa:	2327      	movs	r3, #39	@ 0x27
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d00c      	beq.n	8002e2e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2280      	movs	r2, #128	@ 0x80
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e26:	2327      	movs	r3, #39	@ 0x27
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4013      	ands	r3, r2
 8002e36:	d00c      	beq.n	8002e52 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	00d2      	lsls	r2, r2, #3
 8002e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4a:	2327      	movs	r3, #39	@ 0x27
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d00c      	beq.n	8002e76 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4313      	orrs	r3, r2
 8002e62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2280      	movs	r2, #128	@ 0x80
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e6e:	2327      	movs	r3, #39	@ 0x27
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e76:	2327      	movs	r3, #39	@ 0x27
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01d      	beq.n	8002ebc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff fe28 	bl	8002ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	490e      	ldr	r1, [pc, #56]	@ (8002ecc <I2C_IsErrorOccurred+0x1ec>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2241      	movs	r2, #65	@ 0x41
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2242      	movs	r2, #66	@ 0x42
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2240      	movs	r2, #64	@ 0x40
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002ebc:	2327      	movs	r3, #39	@ 0x27
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b00a      	add	sp, #40	@ 0x28
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	0008      	movs	r0, r1
 8002eda:	0011      	movs	r1, r2
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	240a      	movs	r4, #10
 8002ee0:	193b      	adds	r3, r7, r4
 8002ee2:	1c02      	adds	r2, r0, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	2009      	movs	r0, #9
 8002ee8:	183b      	adds	r3, r7, r0
 8002eea:	1c0a      	adds	r2, r1, #0
 8002eec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	059b      	lsls	r3, r3, #22
 8002ef4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ef6:	183b      	adds	r3, r7, r0
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0419      	lsls	r1, r3, #16
 8002efc:	23ff      	movs	r3, #255	@ 0xff
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f1a:	0d51      	lsrs	r1, r2, #21
 8002f1c:	2280      	movs	r2, #128	@ 0x80
 8002f1e:	00d2      	lsls	r2, r2, #3
 8002f20:	400a      	ands	r2, r1
 8002f22:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <I2C_TransferConfig+0x70>)
 8002f24:	430a      	orrs	r2, r1
 8002f26:	43d2      	mvns	r2, r2
 8002f28:	401a      	ands	r2, r3
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b007      	add	sp, #28
 8002f3c:	bd90      	pop	{r4, r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	03ff63ff 	.word	0x03ff63ff

08002f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2241      	movs	r2, #65	@ 0x41
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d138      	bne.n	8002fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2240      	movs	r2, #64	@ 0x40
 8002f5e:	5c9b      	ldrb	r3, [r3, r2]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e032      	b.n	8002fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2240      	movs	r2, #64	@ 0x40
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2241      	movs	r2, #65	@ 0x41
 8002f74:	2124      	movs	r1, #36	@ 0x24
 8002f76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4911      	ldr	r1, [pc, #68]	@ (8002fd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f94:	400a      	ands	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2241      	movs	r2, #65	@ 0x41
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	ffffefff 	.word	0xffffefff

08002fdc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2241      	movs	r2, #65	@ 0x41
 8002fea:	5c9b      	ldrb	r3, [r3, r2]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d139      	bne.n	8003066 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2240      	movs	r2, #64	@ 0x40
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e033      	b.n	8003068 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	@ 0x40
 8003004:	2101      	movs	r1, #1
 8003006:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2241      	movs	r2, #65	@ 0x41
 800300c:	2124      	movs	r1, #36	@ 0x24
 800300e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	438a      	bics	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2241      	movs	r2, #65	@ 0x41
 8003056:	2120      	movs	r1, #32
 8003058:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2240      	movs	r2, #64	@ 0x40
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}
 8003070:	fffff0ff 	.word	0xfffff0ff

08003074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e301      	b.n	800368a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d100      	bne.n	8003092 <HAL_RCC_OscConfig+0x1e>
 8003090:	e08d      	b.n	80031ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003092:	4bc3      	ldr	r3, [pc, #780]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	220c      	movs	r2, #12
 8003098:	4013      	ands	r3, r2
 800309a:	2b04      	cmp	r3, #4
 800309c:	d00e      	beq.n	80030bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800309e:	4bc0      	ldr	r3, [pc, #768]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	220c      	movs	r2, #12
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d116      	bne.n	80030d8 <HAL_RCC_OscConfig+0x64>
 80030aa:	4bbd      	ldr	r3, [pc, #756]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	401a      	ands	r2, r3
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	025b      	lsls	r3, r3, #9
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d10d      	bne.n	80030d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	4bb8      	ldr	r3, [pc, #736]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	d100      	bne.n	80030ca <HAL_RCC_OscConfig+0x56>
 80030c8:	e070      	b.n	80031ac <HAL_RCC_OscConfig+0x138>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <HAL_RCC_OscConfig+0x60>
 80030d2:	e06b      	b.n	80031ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e2d8      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x7c>
 80030e0:	4baf      	ldr	r3, [pc, #700]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4bae      	ldr	r3, [pc, #696]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	0249      	lsls	r1, r1, #9
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e02f      	b.n	8003150 <HAL_RCC_OscConfig+0xdc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_OscConfig+0x9e>
 80030f8:	4ba9      	ldr	r3, [pc, #676]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4ba8      	ldr	r3, [pc, #672]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	49a9      	ldr	r1, [pc, #676]	@ (80033a4 <HAL_RCC_OscConfig+0x330>)
 8003100:	400a      	ands	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	4ba6      	ldr	r3, [pc, #664]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4ba5      	ldr	r3, [pc, #660]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800310a:	49a7      	ldr	r1, [pc, #668]	@ (80033a8 <HAL_RCC_OscConfig+0x334>)
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e01e      	b.n	8003150 <HAL_RCC_OscConfig+0xdc>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b05      	cmp	r3, #5
 8003118:	d10e      	bne.n	8003138 <HAL_RCC_OscConfig+0xc4>
 800311a:	4ba1      	ldr	r3, [pc, #644]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4ba0      	ldr	r3, [pc, #640]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003120:	2180      	movs	r1, #128	@ 0x80
 8003122:	02c9      	lsls	r1, r1, #11
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	4b9d      	ldr	r3, [pc, #628]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b9c      	ldr	r3, [pc, #624]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800312e:	2180      	movs	r1, #128	@ 0x80
 8003130:	0249      	lsls	r1, r1, #9
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xdc>
 8003138:	4b99      	ldr	r3, [pc, #612]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b98      	ldr	r3, [pc, #608]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800313e:	4999      	ldr	r1, [pc, #612]	@ (80033a4 <HAL_RCC_OscConfig+0x330>)
 8003140:	400a      	ands	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	4b96      	ldr	r3, [pc, #600]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b95      	ldr	r3, [pc, #596]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800314a:	4997      	ldr	r1, [pc, #604]	@ (80033a8 <HAL_RCC_OscConfig+0x334>)
 800314c:	400a      	ands	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d014      	beq.n	8003182 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fea0 	bl	8001e9c <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003162:	f7fe fe9b 	bl	8001e9c <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b64      	cmp	r3, #100	@ 0x64
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e28a      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003174:	4b8a      	ldr	r3, [pc, #552]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	029b      	lsls	r3, r3, #10
 800317c:	4013      	ands	r3, r2
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0xee>
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fe8b 	bl	8001e9c <HAL_GetTick>
 8003186:	0003      	movs	r3, r0
 8003188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fe86 	bl	8001e9c <HAL_GetTick>
 8003190:	0002      	movs	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e275      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b80      	ldr	r3, [pc, #512]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	4013      	ands	r3, r2
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x118>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2202      	movs	r2, #2
 80031b4:	4013      	ands	r3, r2
 80031b6:	d100      	bne.n	80031ba <HAL_RCC_OscConfig+0x146>
 80031b8:	e069      	b.n	800328e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031ba:	4b79      	ldr	r3, [pc, #484]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	220c      	movs	r2, #12
 80031c0:	4013      	ands	r3, r2
 80031c2:	d00b      	beq.n	80031dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031c4:	4b76      	ldr	r3, [pc, #472]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	220c      	movs	r2, #12
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d11c      	bne.n	800320a <HAL_RCC_OscConfig+0x196>
 80031d0:	4b73      	ldr	r3, [pc, #460]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	025b      	lsls	r3, r3, #9
 80031d8:	4013      	ands	r3, r2
 80031da:	d116      	bne.n	800320a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031dc:	4b70      	ldr	r3, [pc, #448]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2202      	movs	r2, #2
 80031e2:	4013      	ands	r3, r2
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x17e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e24b      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b6b      	ldr	r3, [pc, #428]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	22f8      	movs	r2, #248	@ 0xf8
 80031f8:	4393      	bics	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	00da      	lsls	r2, r3, #3
 8003202:	4b67      	ldr	r3, [pc, #412]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003208:	e041      	b.n	800328e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d024      	beq.n	800325c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003212:	4b63      	ldr	r3, [pc, #396]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b62      	ldr	r3, [pc, #392]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003218:	2101      	movs	r1, #1
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fe fe3d 	bl	8001e9c <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe fe38 	bl	8001e9c <HAL_GetTick>
 800322c:	0002      	movs	r2, r0
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e227      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323a:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2202      	movs	r2, #2
 8003240:	4013      	ands	r3, r2
 8003242:	d0f1      	beq.n	8003228 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b56      	ldr	r3, [pc, #344]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	22f8      	movs	r2, #248	@ 0xf8
 800324a:	4393      	bics	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	4b52      	ldr	r3, [pc, #328]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e018      	b.n	800328e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325c:	4b50      	ldr	r3, [pc, #320]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b4f      	ldr	r3, [pc, #316]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fe18 	bl	8001e9c <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fe13 	bl	8001e9c <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e202      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003284:	4b46      	ldr	r3, [pc, #280]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d1f1      	bne.n	8003272 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	4013      	ands	r3, r2
 8003296:	d036      	beq.n	8003306 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a0:	4b3f      	ldr	r3, [pc, #252]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80032a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a4:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	430a      	orrs	r2, r1
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fdf6 	bl	8001e9c <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fdf1 	bl	8001e9c <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1e0      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c8:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d0f1      	beq.n	80032b6 <HAL_RCC_OscConfig+0x242>
 80032d2:	e018      	b.n	8003306 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b32      	ldr	r3, [pc, #200]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80032d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032d8:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fddc 	bl	8001e9c <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ea:	f7fe fdd7 	bl	8001e9c <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e1c6      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	2202      	movs	r2, #2
 8003302:	4013      	ands	r3, r2
 8003304:	d1f1      	bne.n	80032ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2204      	movs	r2, #4
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCC_OscConfig+0x29e>
 8003310:	e0b4      	b.n	800347c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	201f      	movs	r0, #31
 8003314:	183b      	adds	r3, r7, r0
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	055b      	lsls	r3, r3, #21
 8003322:	4013      	ands	r3, r2
 8003324:	d110      	bne.n	8003348 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b1e      	ldr	r3, [pc, #120]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	0549      	lsls	r1, r1, #21
 8003330:	430a      	orrs	r2, r1
 8003332:	61da      	str	r2, [r3, #28]
 8003334:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	055b      	lsls	r3, r3, #21
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003342:	183b      	adds	r3, r7, r0
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <HAL_RCC_OscConfig+0x338>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d11a      	bne.n	800338a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003354:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_RCC_OscConfig+0x338>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b14      	ldr	r3, [pc, #80]	@ (80033ac <HAL_RCC_OscConfig+0x338>)
 800335a:	2180      	movs	r1, #128	@ 0x80
 800335c:	0049      	lsls	r1, r1, #1
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe fd9b 	bl	8001e9c <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe fd96 	bl	8001e9c <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e185      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_RCC_OscConfig+0x338>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10e      	bne.n	80033b0 <HAL_RCC_OscConfig+0x33c>
 8003392:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	4b02      	ldr	r3, [pc, #8]	@ (80033a0 <HAL_RCC_OscConfig+0x32c>)
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	621a      	str	r2, [r3, #32]
 800339e:	e035      	b.n	800340c <HAL_RCC_OscConfig+0x398>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	fffeffff 	.word	0xfffeffff
 80033a8:	fffbffff 	.word	0xfffbffff
 80033ac:	40007000 	.word	0x40007000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10c      	bne.n	80033d2 <HAL_RCC_OscConfig+0x35e>
 80033b8:	4bb6      	ldr	r3, [pc, #728]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	4bb5      	ldr	r3, [pc, #724]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	621a      	str	r2, [r3, #32]
 80033c4:	4bb3      	ldr	r3, [pc, #716]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	4bb2      	ldr	r3, [pc, #712]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033ca:	2104      	movs	r1, #4
 80033cc:	438a      	bics	r2, r1
 80033ce:	621a      	str	r2, [r3, #32]
 80033d0:	e01c      	b.n	800340c <HAL_RCC_OscConfig+0x398>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x380>
 80033da:	4bae      	ldr	r3, [pc, #696]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	4bad      	ldr	r3, [pc, #692]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033e0:	2104      	movs	r1, #4
 80033e2:	430a      	orrs	r2, r1
 80033e4:	621a      	str	r2, [r3, #32]
 80033e6:	4bab      	ldr	r3, [pc, #684]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	4baa      	ldr	r3, [pc, #680]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033ec:	2101      	movs	r1, #1
 80033ee:	430a      	orrs	r2, r1
 80033f0:	621a      	str	r2, [r3, #32]
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0x398>
 80033f4:	4ba7      	ldr	r3, [pc, #668]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033f6:	6a1a      	ldr	r2, [r3, #32]
 80033f8:	4ba6      	ldr	r3, [pc, #664]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	438a      	bics	r2, r1
 80033fe:	621a      	str	r2, [r3, #32]
 8003400:	4ba4      	ldr	r3, [pc, #656]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	4ba3      	ldr	r3, [pc, #652]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003406:	2104      	movs	r1, #4
 8003408:	438a      	bics	r2, r1
 800340a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d014      	beq.n	800343e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fe fd42 	bl	8001e9c <HAL_GetTick>
 8003418:	0003      	movs	r3, r0
 800341a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	e009      	b.n	8003432 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fe fd3d 	bl	8001e9c <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	4a9b      	ldr	r2, [pc, #620]	@ (8003698 <HAL_RCC_OscConfig+0x624>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e12b      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003432:	4b98      	ldr	r3, [pc, #608]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	2202      	movs	r2, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x3aa>
 800343c:	e013      	b.n	8003466 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fe fd2d 	bl	8001e9c <HAL_GetTick>
 8003442:	0003      	movs	r3, r0
 8003444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003446:	e009      	b.n	800345c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe fd28 	bl	8001e9c <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	4a91      	ldr	r2, [pc, #580]	@ (8003698 <HAL_RCC_OscConfig+0x624>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e116      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b8d      	ldr	r3, [pc, #564]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003466:	231f      	movs	r3, #31
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003470:	4b88      	ldr	r3, [pc, #544]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	4b87      	ldr	r3, [pc, #540]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003476:	4989      	ldr	r1, [pc, #548]	@ (800369c <HAL_RCC_OscConfig+0x628>)
 8003478:	400a      	ands	r2, r1
 800347a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2210      	movs	r2, #16
 8003482:	4013      	ands	r3, r2
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d12a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800348e:	4b81      	ldr	r3, [pc, #516]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003492:	4b80      	ldr	r3, [pc, #512]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003494:	2104      	movs	r1, #4
 8003496:	430a      	orrs	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800349a:	4b7e      	ldr	r3, [pc, #504]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800349c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349e:	4b7d      	ldr	r3, [pc, #500]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fcf9 	bl	8001e9c <HAL_GetTick>
 80034aa:	0003      	movs	r3, r0
 80034ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80034b0:	f7fe fcf4 	bl	8001e9c <HAL_GetTick>
 80034b4:	0002      	movs	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0e3      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80034c2:	4b74      	ldr	r3, [pc, #464]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	d0f1      	beq.n	80034b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034cc:	4b71      	ldr	r3, [pc, #452]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	22f8      	movs	r2, #248	@ 0xf8
 80034d2:	4393      	bics	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	00da      	lsls	r2, r3, #3
 80034dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034de:	430a      	orrs	r2, r1
 80034e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80034e2:	e034      	b.n	800354e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	3305      	adds	r3, #5
 80034ea:	d111      	bne.n	8003510 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80034ec:	4b69      	ldr	r3, [pc, #420]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f0:	4b68      	ldr	r3, [pc, #416]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80034f8:	4b66      	ldr	r3, [pc, #408]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80034fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fc:	22f8      	movs	r2, #248	@ 0xf8
 80034fe:	4393      	bics	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	00da      	lsls	r2, r3, #3
 8003508:	4b62      	ldr	r3, [pc, #392]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800350a:	430a      	orrs	r2, r1
 800350c:	635a      	str	r2, [r3, #52]	@ 0x34
 800350e:	e01e      	b.n	800354e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003510:	4b60      	ldr	r3, [pc, #384]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003514:	4b5f      	ldr	r3, [pc, #380]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003516:	2104      	movs	r1, #4
 8003518:	430a      	orrs	r2, r1
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800351c:	4b5d      	ldr	r3, [pc, #372]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800351e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003520:	4b5c      	ldr	r3, [pc, #368]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003522:	2101      	movs	r1, #1
 8003524:	438a      	bics	r2, r1
 8003526:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fe fcb8 	bl	8001e9c <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003532:	f7fe fcb3 	bl	8001e9c <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0a2      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003544:	4b53      	ldr	r3, [pc, #332]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	2202      	movs	r2, #2
 800354a:	4013      	ands	r3, r2
 800354c:	d1f1      	bne.n	8003532 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d100      	bne.n	8003558 <HAL_RCC_OscConfig+0x4e4>
 8003556:	e097      	b.n	8003688 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003558:	4b4e      	ldr	r3, [pc, #312]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	220c      	movs	r2, #12
 800355e:	4013      	ands	r3, r2
 8003560:	2b08      	cmp	r3, #8
 8003562:	d100      	bne.n	8003566 <HAL_RCC_OscConfig+0x4f2>
 8003564:	e06b      	b.n	800363e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d14c      	bne.n	8003608 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b49      	ldr	r3, [pc, #292]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b48      	ldr	r3, [pc, #288]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003574:	494a      	ldr	r1, [pc, #296]	@ (80036a0 <HAL_RCC_OscConfig+0x62c>)
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fc8f 	bl	8001e9c <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fc8a 	bl	8001e9c <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e079      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	@ 0x80
 800359c:	049b      	lsls	r3, r3, #18
 800359e:	4013      	ands	r3, r2
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	220f      	movs	r2, #15
 80035a8:	4393      	bics	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035b6:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a3a      	ldr	r2, [pc, #232]	@ (80036a4 <HAL_RCC_OscConfig+0x630>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	431a      	orrs	r2, r3
 80035ca:	4b32      	ldr	r3, [pc, #200]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035d6:	2180      	movs	r1, #128	@ 0x80
 80035d8:	0449      	lsls	r1, r1, #17
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fc5d 	bl	8001e9c <HAL_GetTick>
 80035e2:	0003      	movs	r3, r0
 80035e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fc58 	bl	8001e9c <HAL_GetTick>
 80035ec:	0002      	movs	r2, r0
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e047      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	2380      	movs	r3, #128	@ 0x80
 8003600:	049b      	lsls	r3, r3, #18
 8003602:	4013      	ands	r3, r2
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x574>
 8003606:	e03f      	b.n	8003688 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003608:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800360e:	4924      	ldr	r1, [pc, #144]	@ (80036a0 <HAL_RCC_OscConfig+0x62c>)
 8003610:	400a      	ands	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe fc42 	bl	8001e9c <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe fc3d 	bl	8001e9c <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e02c      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003630:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	049b      	lsls	r3, r3, #18
 8003638:	4013      	ands	r3, r2
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x5aa>
 800363c:	e024      	b.n	8003688 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e01f      	b.n	800368a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003650:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <HAL_RCC_OscConfig+0x620>)
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	025b      	lsls	r3, r3, #9
 800365c:	401a      	ands	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	429a      	cmp	r2, r3
 8003664:	d10e      	bne.n	8003684 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	220f      	movs	r2, #15
 800366a:	401a      	ands	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	23f0      	movs	r3, #240	@ 0xf0
 8003678:	039b      	lsls	r3, r3, #14
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	b008      	add	sp, #32
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	40021000 	.word	0x40021000
 8003698:	00001388 	.word	0x00001388
 800369c:	efffffff 	.word	0xefffffff
 80036a0:	feffffff 	.word	0xfeffffff
 80036a4:	ffc2ffff 	.word	0xffc2ffff

080036a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b3      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b5b      	ldr	r3, [pc, #364]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d911      	bls.n	80036ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b58      	ldr	r3, [pc, #352]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2201      	movs	r2, #1
 80036d0:	4393      	bics	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	4b55      	ldr	r3, [pc, #340]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036dc:	4b53      	ldr	r3, [pc, #332]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e09a      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	d015      	beq.n	8003724 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2204      	movs	r2, #4
 80036fe:	4013      	ands	r3, r2
 8003700:	d006      	beq.n	8003710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003702:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4b4a      	ldr	r3, [pc, #296]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003708:	21e0      	movs	r1, #224	@ 0xe0
 800370a:	00c9      	lsls	r1, r1, #3
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	22f0      	movs	r2, #240	@ 0xf0
 8003716:	4393      	bics	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2201      	movs	r2, #1
 800372a:	4013      	ands	r3, r2
 800372c:	d040      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b3e      	ldr	r3, [pc, #248]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	2380      	movs	r3, #128	@ 0x80
 800373c:	029b      	lsls	r3, r3, #10
 800373e:	4013      	ands	r3, r2
 8003740:	d114      	bne.n	800376c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06e      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b38      	ldr	r3, [pc, #224]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	049b      	lsls	r3, r3, #18
 8003756:	4013      	ands	r3, r2
 8003758:	d108      	bne.n	800376c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e062      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b34      	ldr	r3, [pc, #208]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2202      	movs	r2, #2
 8003764:	4013      	ands	r3, r2
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e05b      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376c:	4b30      	ldr	r3, [pc, #192]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2203      	movs	r2, #3
 8003772:	4393      	bics	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe fb8c 	bl	8001e9c <HAL_GetTick>
 8003784:	0003      	movs	r3, r0
 8003786:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003788:	e009      	b.n	800379e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378a:	f7fe fb87 	bl	8001e9c <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	4a27      	ldr	r2, [pc, #156]	@ (8003834 <HAL_RCC_ClockConfig+0x18c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e042      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	220c      	movs	r2, #12
 80037a4:	401a      	ands	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1ec      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d211      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4393      	bics	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d0:	4b16      	ldr	r3, [pc, #88]	@ (800382c <HAL_RCC_ClockConfig+0x184>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e020      	b.n	8003824 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2204      	movs	r2, #4
 80037e8:	4013      	ands	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <HAL_RCC_ClockConfig+0x190>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003800:	f000 f820 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8003804:	0001      	movs	r1, r0
 8003806:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <HAL_RCC_ClockConfig+0x188>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	220f      	movs	r2, #15
 800380e:	4013      	ands	r3, r2
 8003810:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <HAL_RCC_ClockConfig+0x194>)
 8003812:	5cd3      	ldrb	r3, [r2, r3]
 8003814:	000a      	movs	r2, r1
 8003816:	40da      	lsrs	r2, r3
 8003818:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_RCC_ClockConfig+0x198>)
 800381a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fe faf7 	bl	8001e10 <HAL_InitTick>
  
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b004      	add	sp, #16
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	00001388 	.word	0x00001388
 8003838:	fffff8ff 	.word	0xfffff8ff
 800383c:	08006eb4 	.word	0x08006eb4
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800385e:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	220c      	movs	r2, #12
 8003868:	4013      	ands	r3, r2
 800386a:	2b04      	cmp	r3, #4
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x30>
 800386e:	2b08      	cmp	r3, #8
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x36>
 8003872:	e02c      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003874:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003876:	613b      	str	r3, [r7, #16]
      break;
 8003878:	e02c      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	220f      	movs	r2, #15
 8003880:	4013      	ands	r3, r2
 8003882:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003884:	5cd3      	ldrb	r3, [r2, r3]
 8003886:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003888:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	220f      	movs	r2, #15
 800388e:	4013      	ands	r3, r2
 8003890:	4a16      	ldr	r2, [pc, #88]	@ (80038ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	4013      	ands	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4810      	ldr	r0, [pc, #64]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038a4:	f7fc fc42 	bl	800012c <__udivsi3>
 80038a8:	0003      	movs	r3, r0
 80038aa:	001a      	movs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4353      	muls	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e009      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	000a      	movs	r2, r1
 80038b8:	0152      	lsls	r2, r2, #5
 80038ba:	1a52      	subs	r2, r2, r1
 80038bc:	0193      	lsls	r3, r2, #6
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	185b      	adds	r3, r3, r1
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	e002      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ce:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038d0:	613b      	str	r3, [r7, #16]
      break;
 80038d2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80038d4:	693b      	ldr	r3, [r7, #16]
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b006      	add	sp, #24
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	40021000 	.word	0x40021000
 80038e4:	007a1200 	.word	0x007a1200
 80038e8:	08006ecc 	.word	0x08006ecc
 80038ec:	08006edc 	.word	0x08006edc

080038f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b02      	ldr	r3, [pc, #8]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x10>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003908:	f7ff fff2 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 800390c:	0001      	movs	r1, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	2207      	movs	r2, #7
 8003916:	4013      	ands	r3, r2
 8003918:	4a04      	ldr	r2, [pc, #16]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x28>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	40d9      	lsrs	r1, r3
 800391e:	000b      	movs	r3, r1
}    
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	40021000 	.word	0x40021000
 800392c:	08006ec4 	.word	0x08006ec4

08003930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	4013      	ands	r3, r2
 800394a:	d100      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800394c:	e08e      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2017      	movs	r0, #23
 8003950:	183b      	adds	r3, r7, r0
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003956:	4b57      	ldr	r3, [pc, #348]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	055b      	lsls	r3, r3, #21
 800395e:	4013      	ands	r3, r2
 8003960:	d110      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003962:	4b54      	ldr	r3, [pc, #336]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	4b53      	ldr	r3, [pc, #332]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003968:	2180      	movs	r1, #128	@ 0x80
 800396a:	0549      	lsls	r1, r1, #21
 800396c:	430a      	orrs	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
 8003970:	4b50      	ldr	r3, [pc, #320]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	055b      	lsls	r3, r3, #21
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397e:	183b      	adds	r3, r7, r0
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2380      	movs	r3, #128	@ 0x80
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d11a      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003990:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b48      	ldr	r3, [pc, #288]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003996:	2180      	movs	r1, #128	@ 0x80
 8003998:	0049      	lsls	r1, r1, #1
 800399a:	430a      	orrs	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe fa7d 	bl	8001e9c <HAL_GetTick>
 80039a2:	0003      	movs	r3, r0
 80039a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fa78 	bl	8001e9c <HAL_GetTick>
 80039ac:	0002      	movs	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e077      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ba:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	23c0      	movs	r3, #192	@ 0xc0
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d034      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	23c0      	movs	r3, #192	@ 0xc0
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4013      	ands	r3, r2
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d02c      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e8:	4b32      	ldr	r3, [pc, #200]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a33      	ldr	r2, [pc, #204]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f2:	4b30      	ldr	r3, [pc, #192]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80039f8:	2180      	movs	r1, #128	@ 0x80
 80039fa:	0249      	lsls	r1, r1, #9
 80039fc:	430a      	orrs	r2, r1
 80039fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a00:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a06:	492e      	ldr	r1, [pc, #184]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a0c:	4b29      	ldr	r3, [pc, #164]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	4013      	ands	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7fe fa3f 	bl	8001e9c <HAL_GetTick>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a22:	e009      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fe fa3a 	bl	8001e9c <HAL_GetTick>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	4a25      	ldr	r2, [pc, #148]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e038      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a1d      	ldr	r2, [pc, #116]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	4b18      	ldr	r3, [pc, #96]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a52:	430a      	orrs	r2, r1
 8003a54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a56:	2317      	movs	r3, #23
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a66:	4918      	ldr	r1, [pc, #96]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003a68:	400a      	ands	r2, r1
 8003a6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a76:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4393      	bics	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	4013      	ands	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	2210      	movs	r2, #16
 8003a9a:	4393      	bics	r3, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	0018      	movs	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b006      	add	sp, #24
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	fffffcff 	.word	0xfffffcff
 8003ac0:	fffeffff 	.word	0xfffeffff
 8003ac4:	00001388 	.word	0x00001388
 8003ac8:	efffffff 	.word	0xefffffff

08003acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0a8      	b.n	8003c30 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	2382      	movs	r3, #130	@ 0x82
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d009      	beq.n	8003b06 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	61da      	str	r2, [r3, #28]
 8003af8:	e005      	b.n	8003b06 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	225d      	movs	r2, #93	@ 0x5d
 8003b10:	5c9b      	ldrb	r3, [r3, r2]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	225c      	movs	r2, #92	@ 0x5c
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f7fd ff1a 	bl	800195c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	225d      	movs	r2, #93	@ 0x5d
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2140      	movs	r1, #64	@ 0x40
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	23e0      	movs	r3, #224	@ 0xe0
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d902      	bls.n	8003b52 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e002      	b.n	8003b58 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	015b      	lsls	r3, r3, #5
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	23f0      	movs	r3, #240	@ 0xf0
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d008      	beq.n	8003b76 <HAL_SPI_Init+0xaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	23e0      	movs	r3, #224	@ 0xe0
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	2382      	movs	r3, #130	@ 0x82
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	401a      	ands	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6899      	ldr	r1, [r3, #8]
 8003b84:	2384      	movs	r3, #132	@ 0x84
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	400b      	ands	r3, r1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2102      	movs	r1, #2
 8003b92:	400b      	ands	r3, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6999      	ldr	r1, [r3, #24]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	400b      	ands	r3, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2138      	movs	r1, #56	@ 0x38
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	2180      	movs	r1, #128	@ 0x80
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	0011      	movs	r1, r2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc6:	2380      	movs	r3, #128	@ 0x80
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	2204      	movs	r2, #4
 8003bdc:	401a      	ands	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	2110      	movs	r1, #16
 8003be4:	400b      	ands	r3, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bec:	2108      	movs	r1, #8
 8003bee:	400b      	ands	r3, r1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	23f0      	movs	r3, #240	@ 0xf0
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	400b      	ands	r3, r1
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	0011      	movs	r1, r2
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	015b      	lsls	r3, r3, #5
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4907      	ldr	r1, [pc, #28]	@ (8003c38 <HAL_SPI_Init+0x16c>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	225d      	movs	r2, #93	@ 0x5d
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	fffff7ff 	.word	0xfffff7ff

08003c3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	001a      	movs	r2, r3
 8003c4a:	1cbb      	adds	r3, r7, #2
 8003c4c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c52:	2323      	movs	r3, #35	@ 0x23
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	225c      	movs	r2, #92	@ 0x5c
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x2c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e1c4      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x3b6>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	225c      	movs	r2, #92	@ 0x5c
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c70:	f7fe f914 	bl	8001e9c <HAL_GetTick>
 8003c74:	0003      	movs	r3, r0
 8003c76:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c78:	201b      	movs	r0, #27
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	215d      	movs	r1, #93	@ 0x5d
 8003c80:	5c52      	ldrb	r2, [r2, r1]
 8003c82:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c8a:	2312      	movs	r3, #18
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	1cba      	adds	r2, r7, #2
 8003c90:	8812      	ldrh	r2, [r2, #0]
 8003c92:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c94:	183b      	adds	r3, r7, r0
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d011      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x84>
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	2382      	movs	r3, #130	@ 0x82
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d107      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x7a>
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d004      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003cb6:	2323      	movs	r3, #35	@ 0x23
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cbe:	e191      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x98>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x98>
 8003ccc:	1cbb      	adds	r3, r7, #2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003cd4:	2323      	movs	r3, #35	@ 0x23
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cdc:	e182      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	225d      	movs	r2, #93	@ 0x5d
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d003      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225d      	movs	r2, #93	@ 0x5d
 8003cee:	2105      	movs	r1, #5
 8003cf0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1cba      	adds	r2, r7, #2
 8003d02:	2146      	movs	r1, #70	@ 0x46
 8003d04:	8812      	ldrh	r2, [r2, #0]
 8003d06:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1cba      	adds	r2, r7, #2
 8003d0c:	2144      	movs	r1, #68	@ 0x44
 8003d0e:	8812      	ldrh	r2, [r2, #0]
 8003d10:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1cba      	adds	r2, r7, #2
 8003d1c:	8812      	ldrh	r2, [r2, #0]
 8003d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1cba      	adds	r2, r7, #2
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	23e0      	movs	r3, #224	@ 0xe0
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d908      	bls.n	8003d52 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	49ac      	ldr	r1, [pc, #688]	@ (8003ffc <HAL_SPI_TransmitReceive+0x3c0>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	e008      	b.n	8003d64 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2180      	movs	r1, #128	@ 0x80
 8003d5e:	0149      	lsls	r1, r1, #5
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2240      	movs	r2, #64	@ 0x40
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d007      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2140      	movs	r1, #64	@ 0x40
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	23e0      	movs	r3, #224	@ 0xe0
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d800      	bhi.n	8003d90 <HAL_SPI_TransmitReceive+0x154>
 8003d8e:	e083      	b.n	8003e98 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x168>
 8003d98:	2312      	movs	r3, #18
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d000      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x168>
 8003da2:	e06d      	b.n	8003e80 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc8:	e05a      	b.n	8003e80 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d11b      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x1d4>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d016      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x1d4>
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d113      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	881a      	ldrh	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d11c      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x21c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2246      	movs	r2, #70	@ 0x46
 8003e22:	5a9b      	ldrh	r3, [r3, r2]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	b292      	uxth	r2, r2
 8003e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2246      	movs	r2, #70	@ 0x46
 8003e46:	5a9b      	ldrh	r3, [r3, r2]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b299      	uxth	r1, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2246      	movs	r2, #70	@ 0x46
 8003e52:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e54:	2301      	movs	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e58:	f7fe f820 	bl	8001e9c <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d80b      	bhi.n	8003e80 <HAL_SPI_TransmitReceive+0x244>
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	d008      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003e6e:	2323      	movs	r3, #35	@ 0x23
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	2203      	movs	r2, #3
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	225d      	movs	r2, #93	@ 0x5d
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
        goto error;
 8003e7e:	e0b1      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d19f      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x18e>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2246      	movs	r2, #70	@ 0x46
 8003e8e:	5a9b      	ldrh	r3, [r3, r2]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d199      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x18e>
 8003e96:	e089      	b.n	8003fac <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x270>
 8003ea0:	2312      	movs	r3, #18
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d000      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x270>
 8003eaa:	e074      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed2:	e060      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d11c      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x2e0>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x2e0>
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d114      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2201      	movs	r2, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d11e      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x32c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2246      	movs	r2, #70	@ 0x46
 8003f2e:	5a9b      	ldrh	r3, [r3, r2]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d018      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	7812      	ldrb	r2, [r2, #0]
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2246      	movs	r2, #70	@ 0x46
 8003f56:	5a9b      	ldrh	r3, [r3, r2]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b299      	uxth	r1, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2246      	movs	r2, #70	@ 0x46
 8003f62:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f64:	2301      	movs	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f68:	f7fd ff98 	bl	8001e9c <HAL_GetTick>
 8003f6c:	0002      	movs	r2, r0
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d802      	bhi.n	8003f7e <HAL_SPI_TransmitReceive+0x342>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x348>
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d108      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003f84:	2323      	movs	r3, #35	@ 0x23
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2203      	movs	r2, #3
 8003f8a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	225d      	movs	r2, #93	@ 0x5d
 8003f90:	2101      	movs	r1, #1
 8003f92:	5499      	strb	r1, [r3, r2]
        goto error;
 8003f94:	e026      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d199      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x298>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2246      	movs	r2, #70	@ 0x46
 8003fa4:	5a9b      	ldrh	r3, [r3, r2]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d193      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 fa5c 	bl	8004470 <SPI_EndRxTxTransaction>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d006      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003fbc:	2323      	movs	r3, #35	@ 0x23
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003fd2:	2323      	movs	r3, #35	@ 0x23
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e003      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	225d      	movs	r2, #93	@ 0x5d
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	225c      	movs	r2, #92	@ 0x5c
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003fec:	2323      	movs	r3, #35	@ 0x23
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b00a      	add	sp, #40	@ 0x28
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	ffffefff 	.word	0xffffefff

08004000 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2240      	movs	r2, #64	@ 0x40
 800401c:	4013      	ands	r3, r2
 800401e:	d10d      	bne.n	800403c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2201      	movs	r2, #1
 8004024:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004026:	d009      	beq.n	800403c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	4013      	ands	r3, r2
 800402e:	d005      	beq.n	800403c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	0010      	movs	r0, r2
 8004038:	4798      	blx	r3
    return;
 800403a:	e0c5      	b.n	80041c8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2202      	movs	r2, #2
 8004040:	4013      	ands	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_SPI_IRQHandler+0x58>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	4013      	ands	r3, r2
 800404a:	d005      	beq.n	8004058 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	0010      	movs	r0, r2
 8004054:	4798      	blx	r3
    return;
 8004056:	e0b7      	b.n	80041c8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2220      	movs	r2, #32
 800405c:	4013      	ands	r3, r2
 800405e:	d109      	bne.n	8004074 <HAL_SPI_IRQHandler+0x74>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2240      	movs	r2, #64	@ 0x40
 8004064:	4013      	ands	r3, r2
 8004066:	d105      	bne.n	8004074 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4013      	ands	r3, r2
 8004070:	d100      	bne.n	8004074 <HAL_SPI_IRQHandler+0x74>
 8004072:	e0a9      	b.n	80041c8 <HAL_SPI_IRQHandler+0x1c8>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2220      	movs	r2, #32
 8004078:	4013      	ands	r3, r2
 800407a:	d100      	bne.n	800407e <HAL_SPI_IRQHandler+0x7e>
 800407c:	e0a4      	b.n	80041c8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2240      	movs	r2, #64	@ 0x40
 8004082:	4013      	ands	r3, r2
 8004084:	d023      	beq.n	80040ce <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	225d      	movs	r2, #93	@ 0x5d
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b03      	cmp	r3, #3
 8004090:	d011      	beq.n	80040b6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004096:	2204      	movs	r2, #4
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	e00b      	b.n	80040ce <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
        return;
 80040cc:	e07c      	b.n	80041c8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2220      	movs	r2, #32
 80040d2:	4013      	ands	r3, r2
 80040d4:	d014      	beq.n	8004100 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	2201      	movs	r2, #1
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2140      	movs	r1, #64	@ 0x40
 80040fa:	438a      	bics	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4013      	ands	r3, r2
 8004108:	d00c      	beq.n	8004124 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	2208      	movs	r2, #8
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004128:	2b00      	cmp	r3, #0
 800412a:	d04c      	beq.n	80041c6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	21e0      	movs	r1, #224	@ 0xe0
 8004138:	438a      	bics	r2, r1
 800413a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	225d      	movs	r2, #93	@ 0x5d
 8004140:	2101      	movs	r1, #1
 8004142:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2202      	movs	r2, #2
 8004148:	4013      	ands	r3, r2
 800414a:	d103      	bne.n	8004154 <HAL_SPI_IRQHandler+0x154>
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2201      	movs	r2, #1
 8004150:	4013      	ands	r3, r2
 8004152:	d032      	beq.n	80041ba <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2103      	movs	r1, #3
 8004160:	438a      	bics	r2, r1
 8004162:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	2b00      	cmp	r3, #0
 800416a:	d010      	beq.n	800418e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <HAL_SPI_IRQHandler+0x1d0>)
 8004172:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	0018      	movs	r0, r3
 800417a:	f7fe f81b 	bl	80021b4 <HAL_DMA_Abort_IT>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d005      	beq.n	800418e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004186:	2240      	movs	r2, #64	@ 0x40
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419a:	4a0d      	ldr	r2, [pc, #52]	@ (80041d0 <HAL_SPI_IRQHandler+0x1d0>)
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fe f806 	bl	80021b4 <HAL_DMA_Abort_IT>
 80041a8:	1e03      	subs	r3, r0, #0
 80041aa:	d00b      	beq.n	80041c4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	2240      	movs	r2, #64	@ 0x40
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80041b8:	e004      	b.n	80041c4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 f809 	bl	80041d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041c2:	e000      	b.n	80041c6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80041c4:	46c0      	nop			@ (mov r8, r8)
    return;
 80041c6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b008      	add	sp, #32
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	080041e5 	.word	0x080041e5

080041d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2246      	movs	r2, #70	@ 0x46
 80041f6:	2100      	movs	r1, #0
 80041f8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff ffe6 	bl	80041d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b004      	add	sp, #16
 800420e:	bd80      	pop	{r7, pc}

08004210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	1dfb      	adds	r3, r7, #7
 800421e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004220:	f7fd fe3c 	bl	8001e9c <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	18d3      	adds	r3, r2, r3
 800422e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004230:	f7fd fe34 	bl	8001e9c <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004238:	4b3a      	ldr	r3, [pc, #232]	@ (8004324 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	015b      	lsls	r3, r3, #5
 800423e:	0d1b      	lsrs	r3, r3, #20
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	4353      	muls	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	e058      	b.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	d055      	beq.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800424e:	f7fd fe25 	bl	8001e9c <HAL_GetTick>
 8004252:	0002      	movs	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	429a      	cmp	r2, r3
 800425c:	d902      	bls.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x54>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d142      	bne.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	21e0      	movs	r1, #224	@ 0xe0
 8004270:	438a      	bics	r2, r1
 8004272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	2382      	movs	r3, #130	@ 0x82
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	429a      	cmp	r2, r3
 800427e:	d113      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	2380      	movs	r3, #128	@ 0x80
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	429a      	cmp	r2, r3
 800428a:	d005      	beq.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	429a      	cmp	r2, r3
 8004296:	d107      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2140      	movs	r1, #64	@ 0x40
 80042a4:	438a      	bics	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	019b      	lsls	r3, r3, #6
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d110      	bne.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	491a      	ldr	r1, [pc, #104]	@ (8004328 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2180      	movs	r1, #128	@ 0x80
 80042d0:	0189      	lsls	r1, r1, #6
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	225d      	movs	r2, #93	@ 0x5d
 80042da:	2101      	movs	r1, #1
 80042dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	225c      	movs	r2, #92	@ 0x5c
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e017      	b.n	800431a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	425a      	negs	r2, r3
 800430a:	4153      	adcs	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	001a      	movs	r2, r3
 8004310:	1dfb      	adds	r3, r7, #7
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d197      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b008      	add	sp, #32
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	20000000 	.word	0x20000000
 8004328:	ffffdfff 	.word	0xffffdfff

0800432c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800433a:	2317      	movs	r3, #23
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004342:	f7fd fdab 	bl	8001e9c <HAL_GetTick>
 8004346:	0002      	movs	r2, r0
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004352:	f7fd fda3 	bl	8001e9c <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004362:	4b41      	ldr	r3, [pc, #260]	@ (8004468 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	0013      	movs	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	189b      	adds	r3, r3, r2
 800436c:	00da      	lsls	r2, r3, #3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	0d1b      	lsrs	r3, r3, #20
 8004372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004374:	4353      	muls	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004378:	e068      	b.n	800444c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	23c0      	movs	r3, #192	@ 0xc0
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	429a      	cmp	r2, r3
 8004382:	d10a      	bne.n	800439a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	2117      	movs	r1, #23
 8004392:	187b      	adds	r3, r7, r1
 8004394:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004396:	187b      	adds	r3, r7, r1
 8004398:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	d055      	beq.n	800444c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043a0:	f7fd fd7c 	bl	8001e9c <HAL_GetTick>
 80043a4:	0002      	movs	r2, r0
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d902      	bls.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d142      	bne.n	800443c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	21e0      	movs	r1, #224	@ 0xe0
 80043c2:	438a      	bics	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	2382      	movs	r3, #130	@ 0x82
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d113      	bne.n	80043fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	2380      	movs	r3, #128	@ 0x80
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	429a      	cmp	r2, r3
 80043dc:	d005      	beq.n	80043ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d107      	bne.n	80043fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2140      	movs	r1, #64	@ 0x40
 80043f6:	438a      	bics	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	429a      	cmp	r2, r3
 8004404:	d110      	bne.n	8004428 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4916      	ldr	r1, [pc, #88]	@ (800446c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004412:	400a      	ands	r2, r1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2180      	movs	r1, #128	@ 0x80
 8004422:	0189      	lsls	r1, r1, #6
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	225d      	movs	r2, #93	@ 0x5d
 800442c:	2101      	movs	r1, #1
 800442e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	225c      	movs	r2, #92	@ 0x5c
 8004434:	2100      	movs	r1, #0
 8004436:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e010      	b.n	800445e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3b01      	subs	r3, #1
 800444a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d18e      	bne.n	800437a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b00a      	add	sp, #40	@ 0x28
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	20000000 	.word	0x20000000
 800446c:	ffffdfff 	.word	0xffffdfff

08004470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	23c0      	movs	r3, #192	@ 0xc0
 8004480:	0159      	lsls	r1, r3, #5
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	0013      	movs	r3, r2
 800448a:	2200      	movs	r2, #0
 800448c:	f7ff ff4e 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d007      	beq.n	80044a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	2220      	movs	r2, #32
 800449a:	431a      	orrs	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e027      	b.n	80044f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	0013      	movs	r3, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	2180      	movs	r1, #128	@ 0x80
 80044b2:	f7ff fead 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 80044b6:	1e03      	subs	r3, r0, #0
 80044b8:	d007      	beq.n	80044ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044be:	2220      	movs	r2, #32
 80044c0:	431a      	orrs	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e014      	b.n	80044f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	23c0      	movs	r3, #192	@ 0xc0
 80044ce:	00d9      	lsls	r1, r3, #3
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	0013      	movs	r3, r2
 80044d8:	2200      	movs	r2, #0
 80044da:	f7ff ff27 	bl	800432c <SPI_WaitFifoStateUntilTimeout>
 80044de:	1e03      	subs	r3, r0, #0
 80044e0:	d007      	beq.n	80044f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e6:	2220      	movs	r2, #32
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e000      	b.n	80044f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b004      	add	sp, #16
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e042      	b.n	8004594 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	223d      	movs	r2, #61	@ 0x3d
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	223c      	movs	r2, #60	@ 0x3c
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fd fa6d 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223d      	movs	r2, #61	@ 0x3d
 800452e:	2102      	movs	r1, #2
 8004530:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	0019      	movs	r1, r3
 800453c:	0010      	movs	r0, r2
 800453e:	f000 fc25 	bl	8004d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2246      	movs	r2, #70	@ 0x46
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	223e      	movs	r2, #62	@ 0x3e
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	223f      	movs	r2, #63	@ 0x3f
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2240      	movs	r2, #64	@ 0x40
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2241      	movs	r2, #65	@ 0x41
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2242      	movs	r2, #66	@ 0x42
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2243      	movs	r2, #67	@ 0x43
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2244      	movs	r2, #68	@ 0x44
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2245      	movs	r2, #69	@ 0x45
 8004586:	2101      	movs	r1, #1
 8004588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	223d      	movs	r2, #61	@ 0x3d
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b002      	add	sp, #8
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	223d      	movs	r2, #61	@ 0x3d
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e036      	b.n	8004622 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	223d      	movs	r2, #61	@ 0x3d
 80045b8:	2102      	movs	r1, #2
 80045ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2101      	movs	r1, #1
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a16      	ldr	r2, [pc, #88]	@ (800462c <HAL_TIM_Base_Start_IT+0x90>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00a      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x50>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	2380      	movs	r3, #128	@ 0x80
 80045dc:	05db      	lsls	r3, r3, #23
 80045de:	429a      	cmp	r2, r3
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x50>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a12      	ldr	r2, [pc, #72]	@ (8004630 <HAL_TIM_Base_Start_IT+0x94>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d111      	bne.n	8004610 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2207      	movs	r2, #7
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d010      	beq.n	8004620 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2101      	movs	r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	e007      	b.n	8004620 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2101      	movs	r1, #1
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400

08004634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e042      	b.n	80046cc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	223d      	movs	r2, #61	@ 0x3d
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	223c      	movs	r2, #60	@ 0x3c
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 f839 	bl	80046d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	223d      	movs	r2, #61	@ 0x3d
 8004666:	2102      	movs	r1, #2
 8004668:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3304      	adds	r3, #4
 8004672:	0019      	movs	r1, r3
 8004674:	0010      	movs	r0, r2
 8004676:	f000 fb89 	bl	8004d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2246      	movs	r2, #70	@ 0x46
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223e      	movs	r2, #62	@ 0x3e
 8004686:	2101      	movs	r1, #1
 8004688:	5499      	strb	r1, [r3, r2]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	223f      	movs	r2, #63	@ 0x3f
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2240      	movs	r2, #64	@ 0x40
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2241      	movs	r2, #65	@ 0x41
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2242      	movs	r2, #66	@ 0x42
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2243      	movs	r2, #67	@ 0x43
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2244      	movs	r2, #68	@ 0x44
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2245      	movs	r2, #69	@ 0x45
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	223d      	movs	r2, #61	@ 0x3d
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <HAL_TIM_PWM_Start+0x22>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	223e      	movs	r2, #62	@ 0x3e
 80046f8:	5c9b      	ldrb	r3, [r3, r2]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	1e5a      	subs	r2, r3, #1
 8004700:	4193      	sbcs	r3, r2
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e01f      	b.n	8004746 <HAL_TIM_PWM_Start+0x62>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d108      	bne.n	800471e <HAL_TIM_PWM_Start+0x3a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223f      	movs	r2, #63	@ 0x3f
 8004710:	5c9b      	ldrb	r3, [r3, r2]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	4193      	sbcs	r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e013      	b.n	8004746 <HAL_TIM_PWM_Start+0x62>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d108      	bne.n	8004736 <HAL_TIM_PWM_Start+0x52>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2240      	movs	r2, #64	@ 0x40
 8004728:	5c9b      	ldrb	r3, [r3, r2]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	4193      	sbcs	r3, r2
 8004732:	b2db      	uxtb	r3, r3
 8004734:	e007      	b.n	8004746 <HAL_TIM_PWM_Start+0x62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2241      	movs	r2, #65	@ 0x41
 800473a:	5c9b      	ldrb	r3, [r3, r2]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	1e5a      	subs	r2, r3, #1
 8004742:	4193      	sbcs	r3, r2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e06a      	b.n	8004824 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x7a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	223e      	movs	r2, #62	@ 0x3e
 8004758:	2102      	movs	r1, #2
 800475a:	5499      	strb	r1, [r3, r2]
 800475c:	e013      	b.n	8004786 <HAL_TIM_PWM_Start+0xa2>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0x8a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	223f      	movs	r2, #63	@ 0x3f
 8004768:	2102      	movs	r1, #2
 800476a:	5499      	strb	r1, [r3, r2]
 800476c:	e00b      	b.n	8004786 <HAL_TIM_PWM_Start+0xa2>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start+0x9a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2240      	movs	r2, #64	@ 0x40
 8004778:	2102      	movs	r1, #2
 800477a:	5499      	strb	r1, [r3, r2]
 800477c:	e003      	b.n	8004786 <HAL_TIM_PWM_Start+0xa2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2241      	movs	r2, #65	@ 0x41
 8004782:	2102      	movs	r1, #2
 8004784:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	0018      	movs	r0, r3
 8004790:	f000 fdfa 	bl	8005388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a24      	ldr	r2, [pc, #144]	@ (800482c <HAL_TIM_PWM_Start+0x148>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_TIM_PWM_Start+0xce>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <HAL_TIM_PWM_Start+0x14c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIM_PWM_Start+0xce>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a21      	ldr	r2, [pc, #132]	@ (8004834 <HAL_TIM_PWM_Start+0x150>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_PWM_Start+0xd2>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_PWM_Start+0xd4>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2180      	movs	r1, #128	@ 0x80
 80047c8:	0209      	lsls	r1, r1, #8
 80047ca:	430a      	orrs	r2, r1
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a16      	ldr	r2, [pc, #88]	@ (800482c <HAL_TIM_PWM_Start+0x148>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00a      	beq.n	80047ee <HAL_TIM_PWM_Start+0x10a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	05db      	lsls	r3, r3, #23
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d004      	beq.n	80047ee <HAL_TIM_PWM_Start+0x10a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <HAL_TIM_PWM_Start+0x154>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d111      	bne.n	8004812 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2207      	movs	r2, #7
 80047f6:	4013      	ands	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d010      	beq.n	8004822 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2101      	movs	r1, #1
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	e007      	b.n	8004822 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	0018      	movs	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	b004      	add	sp, #16
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	40000400 	.word	0x40000400

0800483c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2202      	movs	r2, #2
 8004858:	4013      	ands	r3, r2
 800485a:	d021      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2202      	movs	r2, #2
 8004860:	4013      	ands	r3, r2
 8004862:	d01d      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2203      	movs	r2, #3
 800486a:	4252      	negs	r2, r2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2203      	movs	r2, #3
 800487c:	4013      	ands	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fa6a 	bl	8004d5c <HAL_TIM_IC_CaptureCallback>
 8004888:	e007      	b.n	800489a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 fa5d 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 fa69 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2204      	movs	r2, #4
 80048a4:	4013      	ands	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2204      	movs	r2, #4
 80048ac:	4013      	ands	r3, r2
 80048ae:	d01e      	beq.n	80048ee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2205      	movs	r2, #5
 80048b6:	4252      	negs	r2, r2
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	23c0      	movs	r3, #192	@ 0xc0
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4013      	ands	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 fa43 	bl	8004d5c <HAL_TIM_IC_CaptureCallback>
 80048d6:	e007      	b.n	80048e8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 fa36 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 fa42 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2208      	movs	r2, #8
 80048f2:	4013      	ands	r3, r2
 80048f4:	d021      	beq.n	800493a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2208      	movs	r2, #8
 80048fa:	4013      	ands	r3, r2
 80048fc:	d01d      	beq.n	800493a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2209      	movs	r2, #9
 8004904:	4252      	negs	r2, r2
 8004906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2204      	movs	r2, #4
 800490c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2203      	movs	r2, #3
 8004916:	4013      	ands	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f000 fa1d 	bl	8004d5c <HAL_TIM_IC_CaptureCallback>
 8004922:	e007      	b.n	8004934 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 fa10 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 fa1c 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2210      	movs	r2, #16
 800493e:	4013      	ands	r3, r2
 8004940:	d022      	beq.n	8004988 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2210      	movs	r2, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d01e      	beq.n	8004988 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2211      	movs	r2, #17
 8004950:	4252      	negs	r2, r2
 8004952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2208      	movs	r2, #8
 8004958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	23c0      	movs	r3, #192	@ 0xc0
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f000 f9f6 	bl	8004d5c <HAL_TIM_IC_CaptureCallback>
 8004970:	e007      	b.n	8004982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f9e9 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f000 f9f5 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2201      	movs	r2, #1
 800498c:	4013      	ands	r3, r2
 800498e:	d00c      	beq.n	80049aa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	4013      	ands	r3, r2
 8004996:	d008      	beq.n	80049aa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2202      	movs	r2, #2
 800499e:	4252      	negs	r2, r2
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7fd f9d1 	bl	8001d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2280      	movs	r2, #128	@ 0x80
 80049ae:	4013      	ands	r3, r2
 80049b0:	d00c      	beq.n	80049cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2280      	movs	r2, #128	@ 0x80
 80049b6:	4013      	ands	r3, r2
 80049b8:	d008      	beq.n	80049cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2281      	movs	r2, #129	@ 0x81
 80049c0:	4252      	negs	r2, r2
 80049c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 fd62 	bl	8005490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2240      	movs	r2, #64	@ 0x40
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00c      	beq.n	80049ee <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2240      	movs	r2, #64	@ 0x40
 80049d8:	4013      	ands	r3, r2
 80049da:	d008      	beq.n	80049ee <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2241      	movs	r2, #65	@ 0x41
 80049e2:	4252      	negs	r2, r2
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 f9c7 	bl	8004d7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2220      	movs	r2, #32
 80049f2:	4013      	ands	r3, r2
 80049f4:	d00c      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	4013      	ands	r3, r2
 80049fc:	d008      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2221      	movs	r2, #33	@ 0x21
 8004a04:	4252      	negs	r2, r2
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f000 fd38 	bl	8005480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a10:	46c0      	nop			@ (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b004      	add	sp, #16
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2317      	movs	r3, #23
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	223c      	movs	r2, #60	@ 0x3c
 8004a30:	5c9b      	ldrb	r3, [r3, r2]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e0ad      	b.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	223c      	movs	r2, #60	@ 0x3c
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d100      	bne.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004a48:	e076      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d900      	bls.n	8004a52 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004a50:	e095      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d04e      	beq.n	8004af6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d900      	bls.n	8004a60 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004a5e:	e08e      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d021      	beq.n	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004a6c:	e087      	b.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 fa0c 	bl	8004e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2108      	movs	r1, #8
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2104      	movs	r1, #4
 8004a98:	438a      	bics	r2, r1
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]
      break;
 8004aae:	e06b      	b.n	8004b88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	0011      	movs	r1, r2
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 fa69 	bl	8004f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2180      	movs	r1, #128	@ 0x80
 8004aca:	0109      	lsls	r1, r1, #4
 8004acc:	430a      	orrs	r2, r1
 8004ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4931      	ldr	r1, [pc, #196]	@ (8004ba0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	021a      	lsls	r2, r3, #8
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	619a      	str	r2, [r3, #24]
      break;
 8004af4:	e048      	b.n	8004b88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	0011      	movs	r1, r2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 fac4 	bl	800508c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2108      	movs	r1, #8
 8004b10:	430a      	orrs	r2, r1
 8004b12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2104      	movs	r1, #4
 8004b20:	438a      	bics	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69d9      	ldr	r1, [r3, #28]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	61da      	str	r2, [r3, #28]
      break;
 8004b36:	e027      	b.n	8004b88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	0011      	movs	r1, r2
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 fb23 	bl	800518c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2180      	movs	r1, #128	@ 0x80
 8004b52:	0109      	lsls	r1, r1, #4
 8004b54:	430a      	orrs	r2, r1
 8004b56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	490f      	ldr	r1, [pc, #60]	@ (8004ba0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69d9      	ldr	r1, [r3, #28]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	61da      	str	r2, [r3, #28]
      break;
 8004b7c:	e004      	b.n	8004b88 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004b7e:	2317      	movs	r3, #23
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	223c      	movs	r2, #60	@ 0x3c
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	5499      	strb	r1, [r3, r2]

  return status;
 8004b90:	2317      	movs	r3, #23
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	781b      	ldrb	r3, [r3, #0]
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b006      	add	sp, #24
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	fffffbff 	.word	0xfffffbff

08004ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	230f      	movs	r3, #15
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	223c      	movs	r2, #60	@ 0x3c
 8004bba:	5c9b      	ldrb	r3, [r3, r2]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_ConfigClockSource+0x20>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0bc      	b.n	8004d3e <HAL_TIM_ConfigClockSource+0x19a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	223c      	movs	r2, #60	@ 0x3c
 8004bc8:	2101      	movs	r1, #1
 8004bca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	223d      	movs	r2, #61	@ 0x3d
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2277      	movs	r2, #119	@ 0x77
 8004be0:	4393      	bics	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a58      	ldr	r2, [pc, #352]	@ (8004d48 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2280      	movs	r2, #128	@ 0x80
 8004bfa:	0192      	lsls	r2, r2, #6
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xde>
 8004c00:	2280      	movs	r2, #128	@ 0x80
 8004c02:	0192      	lsls	r2, r2, #6
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d900      	bls.n	8004c0a <HAL_TIM_ConfigClockSource+0x66>
 8004c08:	e088      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c0a:	2280      	movs	r2, #128	@ 0x80
 8004c0c:	0152      	lsls	r2, r2, #5
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d100      	bne.n	8004c14 <HAL_TIM_ConfigClockSource+0x70>
 8004c12:	e088      	b.n	8004d26 <HAL_TIM_ConfigClockSource+0x182>
 8004c14:	2280      	movs	r2, #128	@ 0x80
 8004c16:	0152      	lsls	r2, r2, #5
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d900      	bls.n	8004c1e <HAL_TIM_ConfigClockSource+0x7a>
 8004c1c:	e07e      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c1e:	2b70      	cmp	r3, #112	@ 0x70
 8004c20:	d018      	beq.n	8004c54 <HAL_TIM_ConfigClockSource+0xb0>
 8004c22:	d900      	bls.n	8004c26 <HAL_TIM_ConfigClockSource+0x82>
 8004c24:	e07a      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c26:	2b60      	cmp	r3, #96	@ 0x60
 8004c28:	d04f      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x126>
 8004c2a:	d900      	bls.n	8004c2e <HAL_TIM_ConfigClockSource+0x8a>
 8004c2c:	e076      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c2e:	2b50      	cmp	r3, #80	@ 0x50
 8004c30:	d03b      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x106>
 8004c32:	d900      	bls.n	8004c36 <HAL_TIM_ConfigClockSource+0x92>
 8004c34:	e072      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d057      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x146>
 8004c3a:	d900      	bls.n	8004c3e <HAL_TIM_ConfigClockSource+0x9a>
 8004c3c:	e06e      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c3e:	2b30      	cmp	r3, #48	@ 0x30
 8004c40:	d063      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x166>
 8004c42:	d86b      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d060      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x166>
 8004c48:	d868      	bhi.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d05d      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x166>
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d05b      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x166>
 8004c52:	e063      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c64:	f000 fb70 	bl	8005348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2277      	movs	r2, #119	@ 0x77
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]
      break;
 8004c80:	e052      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c92:	f000 fb59 	bl	8005348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2180      	movs	r1, #128	@ 0x80
 8004ca2:	01c9      	lsls	r1, r1, #7
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	609a      	str	r2, [r3, #8]
      break;
 8004ca8:	e03e      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	f000 facc 	bl	8005254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2150      	movs	r1, #80	@ 0x50
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f000 fb26 	bl	8005314 <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e02e      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	f000 faea 	bl	80052b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2160      	movs	r1, #96	@ 0x60
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fb16 	bl	8005314 <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e01e      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	f000 faac 	bl	8005254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2140      	movs	r1, #64	@ 0x40
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 fb06 	bl	8005314 <TIM_ITRx_SetConfig>
      break;
 8004d08:	e00e      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0019      	movs	r1, r3
 8004d14:	0010      	movs	r0, r2
 8004d16:	f000 fafd 	bl	8005314 <TIM_ITRx_SetConfig>
      break;
 8004d1a:	e005      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2201      	movs	r2, #1
 8004d22:	701a      	strb	r2, [r3, #0]
      break;
 8004d24:	e000      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004d26:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	223d      	movs	r2, #61	@ 0x3d
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	223c      	movs	r2, #60	@ 0x3c
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]

  return status;
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	ffff00ff 	.word	0xffff00ff

08004d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d54:	46c0      	nop			@ (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d84:	46c0      	nop			@ (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a37      	ldr	r2, [pc, #220]	@ (8004e7c <TIM_Base_SetConfig+0xf0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d008      	beq.n	8004db6 <TIM_Base_SetConfig+0x2a>
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	05db      	lsls	r3, r3, #23
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d003      	beq.n	8004db6 <TIM_Base_SetConfig+0x2a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a33      	ldr	r2, [pc, #204]	@ (8004e80 <TIM_Base_SetConfig+0xf4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d108      	bne.n	8004dc8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2270      	movs	r2, #112	@ 0x70
 8004dba:	4393      	bics	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	@ (8004e7c <TIM_Base_SetConfig+0xf0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d014      	beq.n	8004dfa <TIM_Base_SetConfig+0x6e>
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	2380      	movs	r3, #128	@ 0x80
 8004dd4:	05db      	lsls	r3, r3, #23
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d00f      	beq.n	8004dfa <TIM_Base_SetConfig+0x6e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a28      	ldr	r2, [pc, #160]	@ (8004e80 <TIM_Base_SetConfig+0xf4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_Base_SetConfig+0x6e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <TIM_Base_SetConfig+0xf8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_Base_SetConfig+0x6e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <TIM_Base_SetConfig+0xfc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_Base_SetConfig+0x6e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a25      	ldr	r2, [pc, #148]	@ (8004e8c <TIM_Base_SetConfig+0x100>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d108      	bne.n	8004e0c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <TIM_Base_SetConfig+0x104>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2280      	movs	r2, #128	@ 0x80
 8004e10:	4393      	bics	r3, r2
 8004e12:	001a      	movs	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a11      	ldr	r2, [pc, #68]	@ (8004e7c <TIM_Base_SetConfig+0xf0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0xbe>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a12      	ldr	r2, [pc, #72]	@ (8004e88 <TIM_Base_SetConfig+0xfc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0xbe>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a11      	ldr	r2, [pc, #68]	@ (8004e8c <TIM_Base_SetConfig+0x100>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d103      	bne.n	8004e52 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4393      	bics	r3, r2
 8004e6c:	001a      	movs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]
  }
}
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40002000 	.word	0x40002000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800
 8004e90:	fffffcff 	.word	0xfffffcff

08004e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4393      	bics	r3, r2
 8004eac:	001a      	movs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2270      	movs	r2, #112	@ 0x70
 8004ec2:	4393      	bics	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4393      	bics	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2202      	movs	r2, #2
 8004edc:	4393      	bics	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a23      	ldr	r2, [pc, #140]	@ (8004f7c <TIM_OC1_SetConfig+0xe8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_OC1_SetConfig+0x6e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	@ (8004f80 <TIM_OC1_SetConfig+0xec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_OC1_SetConfig+0x6e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <TIM_OC1_SetConfig+0xf0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10c      	bne.n	8004f1c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2208      	movs	r2, #8
 8004f06:	4393      	bics	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2204      	movs	r2, #4
 8004f18:	4393      	bics	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <TIM_OC1_SetConfig+0xe8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_OC1_SetConfig+0xa0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	@ (8004f80 <TIM_OC1_SetConfig+0xec>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC1_SetConfig+0xa0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <TIM_OC1_SetConfig+0xf0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d111      	bne.n	8004f58 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4a14      	ldr	r2, [pc, #80]	@ (8004f88 <TIM_OC1_SetConfig+0xf4>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	@ (8004f8c <TIM_OC1_SetConfig+0xf8>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b006      	add	sp, #24
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800
 8004f88:	fffffeff 	.word	0xfffffeff
 8004f8c:	fffffdff 	.word	0xfffffdff

08004f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	4393      	bics	r3, r2
 8004fa8:	001a      	movs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005070 <TIM_OC2_SetConfig+0xe0>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005074 <TIM_OC2_SetConfig+0xe4>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	4393      	bics	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a22      	ldr	r2, [pc, #136]	@ (8005078 <TIM_OC2_SetConfig+0xe8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10d      	bne.n	800500e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2280      	movs	r2, #128	@ 0x80
 8004ff6:	4393      	bics	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2240      	movs	r2, #64	@ 0x40
 800500a:	4393      	bics	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <TIM_OC2_SetConfig+0xe8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_OC2_SetConfig+0x96>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a18      	ldr	r2, [pc, #96]	@ (800507c <TIM_OC2_SetConfig+0xec>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC2_SetConfig+0x96>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a17      	ldr	r2, [pc, #92]	@ (8005080 <TIM_OC2_SetConfig+0xf0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d113      	bne.n	800504e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4a16      	ldr	r2, [pc, #88]	@ (8005084 <TIM_OC2_SetConfig+0xf4>)
 800502a:	4013      	ands	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <TIM_OC2_SetConfig+0xf8>)
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	46c0      	nop			@ (mov r8, r8)
 800506a:	46bd      	mov	sp, r7
 800506c:	b006      	add	sp, #24
 800506e:	bd80      	pop	{r7, pc}
 8005070:	ffff8fff 	.word	0xffff8fff
 8005074:	fffffcff 	.word	0xfffffcff
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800
 8005084:	fffffbff 	.word	0xfffffbff
 8005088:	fffff7ff 	.word	0xfffff7ff

0800508c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4a31      	ldr	r2, [pc, #196]	@ (8005168 <TIM_OC3_SetConfig+0xdc>)
 80050a2:	401a      	ands	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2270      	movs	r2, #112	@ 0x70
 80050b8:	4393      	bics	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2203      	movs	r2, #3
 80050c0:	4393      	bics	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4a26      	ldr	r2, [pc, #152]	@ (800516c <TIM_OC3_SetConfig+0xe0>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a22      	ldr	r2, [pc, #136]	@ (8005170 <TIM_OC3_SetConfig+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10d      	bne.n	8005106 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4a21      	ldr	r2, [pc, #132]	@ (8005174 <TIM_OC3_SetConfig+0xe8>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4a1d      	ldr	r2, [pc, #116]	@ (8005178 <TIM_OC3_SetConfig+0xec>)
 8005102:	4013      	ands	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <TIM_OC3_SetConfig+0xe4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_OC3_SetConfig+0x92>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1a      	ldr	r2, [pc, #104]	@ (800517c <TIM_OC3_SetConfig+0xf0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_OC3_SetConfig+0x92>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <TIM_OC3_SetConfig+0xf4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d113      	bne.n	8005146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4a18      	ldr	r2, [pc, #96]	@ (8005184 <TIM_OC3_SetConfig+0xf8>)
 8005122:	4013      	ands	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4a17      	ldr	r2, [pc, #92]	@ (8005188 <TIM_OC3_SetConfig+0xfc>)
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	621a      	str	r2, [r3, #32]
}
 8005160:	46c0      	nop			@ (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b006      	add	sp, #24
 8005166:	bd80      	pop	{r7, pc}
 8005168:	fffffeff 	.word	0xfffffeff
 800516c:	fffffdff 	.word	0xfffffdff
 8005170:	40012c00 	.word	0x40012c00
 8005174:	fffff7ff 	.word	0xfffff7ff
 8005178:	fffffbff 	.word	0xfffffbff
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800
 8005184:	ffffefff 	.word	0xffffefff
 8005188:	ffffdfff 	.word	0xffffdfff

0800518c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4a24      	ldr	r2, [pc, #144]	@ (8005234 <TIM_OC4_SetConfig+0xa8>)
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a20      	ldr	r2, [pc, #128]	@ (8005238 <TIM_OC4_SetConfig+0xac>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <TIM_OC4_SetConfig+0xb0>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005240 <TIM_OC4_SetConfig+0xb4>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <TIM_OC4_SetConfig+0xb8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_OC4_SetConfig+0x70>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <TIM_OC4_SetConfig+0xbc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_OC4_SetConfig+0x70>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a15      	ldr	r2, [pc, #84]	@ (800524c <TIM_OC4_SetConfig+0xc0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d109      	bne.n	8005210 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4a14      	ldr	r2, [pc, #80]	@ (8005250 <TIM_OC4_SetConfig+0xc4>)
 8005200:	4013      	ands	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b006      	add	sp, #24
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	ffffefff 	.word	0xffffefff
 8005238:	ffff8fff 	.word	0xffff8fff
 800523c:	fffffcff 	.word	0xfffffcff
 8005240:	ffffdfff 	.word	0xffffdfff
 8005244:	40012c00 	.word	0x40012c00
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800
 8005250:	ffffbfff 	.word	0xffffbfff

08005254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	2201      	movs	r2, #1
 800526c:	4393      	bics	r3, r2
 800526e:	001a      	movs	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	22f0      	movs	r2, #240	@ 0xf0
 800527e:	4393      	bics	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	220a      	movs	r2, #10
 8005290:	4393      	bics	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	621a      	str	r2, [r3, #32]
}
 80052a8:	46c0      	nop			@ (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b006      	add	sp, #24
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	2210      	movs	r2, #16
 80052c8:	4393      	bics	r3, r2
 80052ca:	001a      	movs	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005310 <TIM_TI2_ConfigInputStage+0x60>)
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	031b      	lsls	r3, r3, #12
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	22a0      	movs	r2, #160	@ 0xa0
 80052ec:	4393      	bics	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b006      	add	sp, #24
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	ffff0fff 	.word	0xffff0fff

08005314 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2270      	movs	r2, #112	@ 0x70
 8005328:	4393      	bics	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	2207      	movs	r2, #7
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	609a      	str	r2, [r3, #8]
}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	b004      	add	sp, #16
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4a09      	ldr	r2, [pc, #36]	@ (8005384 <TIM_ETR_SetConfig+0x3c>)
 8005360:	4013      	ands	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	021a      	lsls	r2, r3, #8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	431a      	orrs	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	46c0      	nop			@ (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b006      	add	sp, #24
 8005382:	bd80      	pop	{r7, pc}
 8005384:	ffff00ff 	.word	0xffff00ff

08005388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	221f      	movs	r2, #31
 8005398:	4013      	ands	r3, r2
 800539a:	2201      	movs	r2, #1
 800539c:	409a      	lsls	r2, r3
 800539e:	0013      	movs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	43d2      	mvns	r2, r2
 80053aa:	401a      	ands	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	211f      	movs	r1, #31
 80053b8:	400b      	ands	r3, r1
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4099      	lsls	r1, r3
 80053be:	000b      	movs	r3, r1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b006      	add	sp, #24
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	223c      	movs	r2, #60	@ 0x3c
 80053de:	5c9b      	ldrb	r3, [r3, r2]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e042      	b.n	800546e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	223c      	movs	r2, #60	@ 0x3c
 80053ec:	2101      	movs	r1, #1
 80053ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	223d      	movs	r2, #61	@ 0x3d
 80053f4:	2102      	movs	r1, #2
 80053f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2270      	movs	r2, #112	@ 0x70
 800540c:	4393      	bics	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a14      	ldr	r2, [pc, #80]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00a      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	429a      	cmp	r2, r3
 8005436:	d004      	beq.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a0f      	ldr	r2, [pc, #60]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d10c      	bne.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2280      	movs	r2, #128	@ 0x80
 8005446:	4393      	bics	r3, r2
 8005448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4313      	orrs	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	223d      	movs	r2, #61	@ 0x3d
 8005460:	2101      	movs	r1, #1
 8005462:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	223c      	movs	r2, #60	@ 0x3c
 8005468:	2100      	movs	r1, #0
 800546a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			@ (mov r8, r8)
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40000400 	.word	0x40000400

08005480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b002      	add	sp, #8
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005498:	46c0      	nop			@ (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e044      	b.n	800553c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2278      	movs	r2, #120	@ 0x78
 80054be:	2100      	movs	r1, #0
 80054c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7fc fb35 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2224      	movs	r2, #36	@ 0x24
 80054ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2101      	movs	r1, #1
 80054dc:	438a      	bics	r2, r1
 80054de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fcf0 	bl	8005ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f000 fbc4 	bl	8005c80 <UART_SetConfig>
 80054f8:	0003      	movs	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e01c      	b.n	800553c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	490d      	ldr	r1, [pc, #52]	@ (8005544 <HAL_UART_Init+0xa4>)
 800550e:	400a      	ands	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	212a      	movs	r1, #42	@ 0x2a
 800551e:	438a      	bics	r2, r1
 8005520:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2101      	movs	r1, #1
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f000 fd7f 	bl	8006038 <UART_CheckIdleState>
 800553a:	0003      	movs	r3, r0
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}
 8005544:	ffffb7ff 	.word	0xffffb7ff

08005548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	@ 0x28
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	1dbb      	adds	r3, r7, #6
 8005556:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800555c:	2b20      	cmp	r3, #32
 800555e:	d000      	beq.n	8005562 <HAL_UART_Transmit+0x1a>
 8005560:	e08c      	b.n	800567c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_UART_Transmit+0x28>
 8005568:	1dbb      	adds	r3, r7, #6
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e084      	b.n	800567e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	429a      	cmp	r2, r3
 800557e:	d109      	bne.n	8005594 <HAL_UART_Transmit+0x4c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2201      	movs	r2, #1
 800558c:	4013      	ands	r3, r2
 800558e:	d001      	beq.n	8005594 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e074      	b.n	800567e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2284      	movs	r2, #132	@ 0x84
 8005598:	2100      	movs	r1, #0
 800559a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2221      	movs	r2, #33	@ 0x21
 80055a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055a2:	f7fc fc7b 	bl	8001e9c <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1dba      	adds	r2, r7, #6
 80055ae:	2150      	movs	r1, #80	@ 0x50
 80055b0:	8812      	ldrh	r2, [r2, #0]
 80055b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1dba      	adds	r2, r7, #6
 80055b8:	2152      	movs	r1, #82	@ 0x52
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	2380      	movs	r3, #128	@ 0x80
 80055c4:	015b      	lsls	r3, r3, #5
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d108      	bne.n	80055dc <HAL_UART_Transmit+0x94>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e003      	b.n	80055e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055e4:	e02f      	b.n	8005646 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	0013      	movs	r3, r2
 80055f0:	2200      	movs	r2, #0
 80055f2:	2180      	movs	r1, #128	@ 0x80
 80055f4:	f000 fdc8 	bl	8006188 <UART_WaitOnFlagUntilTimeout>
 80055f8:	1e03      	subs	r3, r0, #0
 80055fa:	d004      	beq.n	8005606 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e03b      	b.n	800567e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	881a      	ldrh	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	05d2      	lsls	r2, r2, #23
 8005616:	0dd2      	lsrs	r2, r2, #23
 8005618:	b292      	uxth	r2, r2
 800561a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	3302      	adds	r3, #2
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e007      	b.n	8005634 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3301      	adds	r3, #1
 8005632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2252      	movs	r2, #82	@ 0x52
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b299      	uxth	r1, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2252      	movs	r2, #82	@ 0x52
 8005644:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2252      	movs	r2, #82	@ 0x52
 800564a:	5a9b      	ldrh	r3, [r3, r2]
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1c9      	bne.n	80055e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	0013      	movs	r3, r2
 800565c:	2200      	movs	r2, #0
 800565e:	2140      	movs	r1, #64	@ 0x40
 8005660:	f000 fd92 	bl	8006188 <UART_WaitOnFlagUntilTimeout>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d004      	beq.n	8005672 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e005      	b.n	800567e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b008      	add	sp, #32
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b0ab      	sub	sp, #172	@ 0xac
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	22a4      	movs	r2, #164	@ 0xa4
 8005698:	18b9      	adds	r1, r7, r2
 800569a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	20a0      	movs	r0, #160	@ 0xa0
 80056a4:	1839      	adds	r1, r7, r0
 80056a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	219c      	movs	r1, #156	@ 0x9c
 80056b0:	1879      	adds	r1, r7, r1
 80056b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056b4:	0011      	movs	r1, r2
 80056b6:	18bb      	adds	r3, r7, r2
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a99      	ldr	r2, [pc, #612]	@ (8005920 <HAL_UART_IRQHandler+0x298>)
 80056bc:	4013      	ands	r3, r2
 80056be:	2298      	movs	r2, #152	@ 0x98
 80056c0:	18bc      	adds	r4, r7, r2
 80056c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80056c4:	18bb      	adds	r3, r7, r2
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d114      	bne.n	80056f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056cc:	187b      	adds	r3, r7, r1
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2220      	movs	r2, #32
 80056d2:	4013      	ands	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056d6:	183b      	adds	r3, r7, r0
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2220      	movs	r2, #32
 80056dc:	4013      	ands	r3, r2
 80056de:	d00a      	beq.n	80056f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d100      	bne.n	80056ea <HAL_UART_IRQHandler+0x62>
 80056e8:	e29e      	b.n	8005c28 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	0010      	movs	r0, r2
 80056f2:	4798      	blx	r3
      }
      return;
 80056f4:	e298      	b.n	8005c28 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056f6:	2398      	movs	r3, #152	@ 0x98
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d100      	bne.n	8005702 <HAL_UART_IRQHandler+0x7a>
 8005700:	e114      	b.n	800592c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005702:	239c      	movs	r3, #156	@ 0x9c
 8005704:	18fb      	adds	r3, r7, r3
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	4013      	ands	r3, r2
 800570c:	d106      	bne.n	800571c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800570e:	23a0      	movs	r3, #160	@ 0xa0
 8005710:	18fb      	adds	r3, r7, r3
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a83      	ldr	r2, [pc, #524]	@ (8005924 <HAL_UART_IRQHandler+0x29c>)
 8005716:	4013      	ands	r3, r2
 8005718:	d100      	bne.n	800571c <HAL_UART_IRQHandler+0x94>
 800571a:	e107      	b.n	800592c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800571c:	23a4      	movs	r3, #164	@ 0xa4
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	4013      	ands	r3, r2
 8005726:	d012      	beq.n	800574e <HAL_UART_IRQHandler+0xc6>
 8005728:	23a0      	movs	r3, #160	@ 0xa0
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	2380      	movs	r3, #128	@ 0x80
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4013      	ands	r3, r2
 8005734:	d00b      	beq.n	800574e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2284      	movs	r2, #132	@ 0x84
 8005742:	589b      	ldr	r3, [r3, r2]
 8005744:	2201      	movs	r2, #1
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2184      	movs	r1, #132	@ 0x84
 800574c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800574e:	23a4      	movs	r3, #164	@ 0xa4
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2202      	movs	r2, #2
 8005756:	4013      	ands	r3, r2
 8005758:	d011      	beq.n	800577e <HAL_UART_IRQHandler+0xf6>
 800575a:	239c      	movs	r3, #156	@ 0x9c
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	4013      	ands	r3, r2
 8005764:	d00b      	beq.n	800577e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2202      	movs	r2, #2
 800576c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2284      	movs	r2, #132	@ 0x84
 8005772:	589b      	ldr	r3, [r3, r2]
 8005774:	2204      	movs	r2, #4
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2184      	movs	r1, #132	@ 0x84
 800577c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800577e:	23a4      	movs	r3, #164	@ 0xa4
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2204      	movs	r2, #4
 8005786:	4013      	ands	r3, r2
 8005788:	d011      	beq.n	80057ae <HAL_UART_IRQHandler+0x126>
 800578a:	239c      	movs	r3, #156	@ 0x9c
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2201      	movs	r2, #1
 8005792:	4013      	ands	r3, r2
 8005794:	d00b      	beq.n	80057ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2204      	movs	r2, #4
 800579c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2284      	movs	r2, #132	@ 0x84
 80057a2:	589b      	ldr	r3, [r3, r2]
 80057a4:	2202      	movs	r2, #2
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2184      	movs	r1, #132	@ 0x84
 80057ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057ae:	23a4      	movs	r3, #164	@ 0xa4
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2208      	movs	r2, #8
 80057b6:	4013      	ands	r3, r2
 80057b8:	d017      	beq.n	80057ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057ba:	23a0      	movs	r3, #160	@ 0xa0
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2220      	movs	r2, #32
 80057c2:	4013      	ands	r3, r2
 80057c4:	d105      	bne.n	80057d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057c6:	239c      	movs	r3, #156	@ 0x9c
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2201      	movs	r2, #1
 80057ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057d0:	d00b      	beq.n	80057ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2208      	movs	r2, #8
 80057d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2284      	movs	r2, #132	@ 0x84
 80057de:	589b      	ldr	r3, [r3, r2]
 80057e0:	2208      	movs	r2, #8
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2184      	movs	r1, #132	@ 0x84
 80057e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057ea:	23a4      	movs	r3, #164	@ 0xa4
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	4013      	ands	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_UART_IRQHandler+0x198>
 80057f8:	23a0      	movs	r3, #160	@ 0xa0
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	2380      	movs	r3, #128	@ 0x80
 8005800:	04db      	lsls	r3, r3, #19
 8005802:	4013      	ands	r3, r2
 8005804:	d00c      	beq.n	8005820 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2284      	movs	r2, #132	@ 0x84
 8005814:	589b      	ldr	r3, [r3, r2]
 8005816:	2220      	movs	r2, #32
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2184      	movs	r1, #132	@ 0x84
 800581e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2284      	movs	r2, #132	@ 0x84
 8005824:	589b      	ldr	r3, [r3, r2]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d100      	bne.n	800582c <HAL_UART_IRQHandler+0x1a4>
 800582a:	e1ff      	b.n	8005c2c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800582c:	23a4      	movs	r3, #164	@ 0xa4
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2220      	movs	r2, #32
 8005834:	4013      	ands	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005838:	23a0      	movs	r3, #160	@ 0xa0
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2220      	movs	r2, #32
 8005840:	4013      	ands	r3, r2
 8005842:	d008      	beq.n	8005856 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	0010      	movs	r0, r2
 8005854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2284      	movs	r2, #132	@ 0x84
 800585a:	589b      	ldr	r3, [r3, r2]
 800585c:	2194      	movs	r1, #148	@ 0x94
 800585e:	187a      	adds	r2, r7, r1
 8005860:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2240      	movs	r2, #64	@ 0x40
 800586a:	4013      	ands	r3, r2
 800586c:	2b40      	cmp	r3, #64	@ 0x40
 800586e:	d004      	beq.n	800587a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005870:	187b      	adds	r3, r7, r1
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2228      	movs	r2, #40	@ 0x28
 8005876:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005878:	d047      	beq.n	800590a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	0018      	movs	r0, r3
 800587e:	f000 fcf3 	bl	8006268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2240      	movs	r2, #64	@ 0x40
 800588a:	4013      	ands	r3, r2
 800588c:	2b40      	cmp	r3, #64	@ 0x40
 800588e:	d137      	bne.n	8005900 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005890:	f3ef 8310 	mrs	r3, PRIMASK
 8005894:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005898:	2090      	movs	r0, #144	@ 0x90
 800589a:	183a      	adds	r2, r7, r0
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	2301      	movs	r3, #1
 80058a0:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	46c0      	nop			@ (mov r8, r8)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2140      	movs	r1, #64	@ 0x40
 80058b6:	438a      	bics	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	183b      	adds	r3, r7, r0
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058c2:	f383 8810 	msr	PRIMASK, r3
}
 80058c6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d012      	beq.n	80058f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d4:	4a14      	ldr	r2, [pc, #80]	@ (8005928 <HAL_UART_IRQHandler+0x2a0>)
 80058d6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058dc:	0018      	movs	r0, r3
 80058de:	f7fc fc69 	bl	80021b4 <HAL_DMA_Abort_IT>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d01a      	beq.n	800591c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f0:	0018      	movs	r0, r3
 80058f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	e012      	b.n	800591c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f000 f9ad 	bl	8005c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fe:	e00d      	b.n	800591c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	0018      	movs	r0, r3
 8005904:	f000 f9a8 	bl	8005c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	e008      	b.n	800591c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0018      	movs	r0, r3
 800590e:	f000 f9a3 	bl	8005c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2284      	movs	r2, #132	@ 0x84
 8005916:	2100      	movs	r1, #0
 8005918:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800591a:	e187      	b.n	8005c2c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	46c0      	nop			@ (mov r8, r8)
    return;
 800591e:	e185      	b.n	8005c2c <HAL_UART_IRQHandler+0x5a4>
 8005920:	0000080f 	.word	0x0000080f
 8005924:	04000120 	.word	0x04000120
 8005928:	08006331 	.word	0x08006331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005930:	2b01      	cmp	r3, #1
 8005932:	d000      	beq.n	8005936 <HAL_UART_IRQHandler+0x2ae>
 8005934:	e139      	b.n	8005baa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005936:	23a4      	movs	r3, #164	@ 0xa4
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2210      	movs	r2, #16
 800593e:	4013      	ands	r3, r2
 8005940:	d100      	bne.n	8005944 <HAL_UART_IRQHandler+0x2bc>
 8005942:	e132      	b.n	8005baa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005944:	23a0      	movs	r3, #160	@ 0xa0
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2210      	movs	r2, #16
 800594c:	4013      	ands	r3, r2
 800594e:	d100      	bne.n	8005952 <HAL_UART_IRQHandler+0x2ca>
 8005950:	e12b      	b.n	8005baa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2210      	movs	r2, #16
 8005958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2240      	movs	r2, #64	@ 0x40
 8005962:	4013      	ands	r3, r2
 8005964:	2b40      	cmp	r3, #64	@ 0x40
 8005966:	d000      	beq.n	800596a <HAL_UART_IRQHandler+0x2e2>
 8005968:	e09f      	b.n	8005aaa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	217e      	movs	r1, #126	@ 0x7e
 8005974:	187b      	adds	r3, r7, r1
 8005976:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005978:	187b      	adds	r3, r7, r1
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d100      	bne.n	8005982 <HAL_UART_IRQHandler+0x2fa>
 8005980:	e156      	b.n	8005c30 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2258      	movs	r2, #88	@ 0x58
 8005986:	5a9b      	ldrh	r3, [r3, r2]
 8005988:	187a      	adds	r2, r7, r1
 800598a:	8812      	ldrh	r2, [r2, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d300      	bcc.n	8005992 <HAL_UART_IRQHandler+0x30a>
 8005990:	e14e      	b.n	8005c30 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	187a      	adds	r2, r7, r1
 8005996:	215a      	movs	r1, #90	@ 0x5a
 8005998:	8812      	ldrh	r2, [r2, #0]
 800599a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d06f      	beq.n	8005a86 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a6:	f3ef 8310 	mrs	r3, PRIMASK
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b0:	2301      	movs	r3, #1
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	f383 8810 	msr	PRIMASK, r3
}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	499e      	ldr	r1, [pc, #632]	@ (8005c40 <HAL_UART_IRQHandler+0x5b8>)
 80059c8:	400a      	ands	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	f383 8810 	msr	PRIMASK, r3
}
 80059d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d8:	f3ef 8310 	mrs	r3, PRIMASK
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80059de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80059e2:	2301      	movs	r3, #1
 80059e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e8:	f383 8810 	msr	PRIMASK, r3
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2101      	movs	r1, #1
 80059fa:	438a      	bics	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a00:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a04:	f383 8810 	msr	PRIMASK, r3
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a14:	2301      	movs	r3, #1
 8005a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2140      	movs	r1, #64	@ 0x40
 8005a2c:	438a      	bics	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a32:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a36:	f383 8810 	msr	PRIMASK, r3
}
 8005a3a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2280      	movs	r2, #128	@ 0x80
 8005a40:	2120      	movs	r1, #32
 8005a42:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a54:	2301      	movs	r3, #1
 8005a56:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2110      	movs	r1, #16
 8005a6c:	438a      	bics	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fc fb5f 	bl	8002144 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2258      	movs	r2, #88	@ 0x58
 8005a90:	5a9a      	ldrh	r2, [r3, r2]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	215a      	movs	r1, #90	@ 0x5a
 8005a96:	5a5b      	ldrh	r3, [r3, r1]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0011      	movs	r1, r2
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 f8e0 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aa8:	e0c2      	b.n	8005c30 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2258      	movs	r2, #88	@ 0x58
 8005aae:	5a99      	ldrh	r1, [r3, r2]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	225a      	movs	r2, #90	@ 0x5a
 8005ab4:	5a9b      	ldrh	r3, [r3, r2]
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	208e      	movs	r0, #142	@ 0x8e
 8005aba:	183b      	adds	r3, r7, r0
 8005abc:	1a8a      	subs	r2, r1, r2
 8005abe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	225a      	movs	r2, #90	@ 0x5a
 8005ac4:	5a9b      	ldrh	r3, [r3, r2]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d100      	bne.n	8005ace <HAL_UART_IRQHandler+0x446>
 8005acc:	e0b2      	b.n	8005c34 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005ace:	183b      	adds	r3, r7, r0
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d100      	bne.n	8005ad8 <HAL_UART_IRQHandler+0x450>
 8005ad6:	e0ad      	b.n	8005c34 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8005adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ade:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae0:	2488      	movs	r4, #136	@ 0x88
 8005ae2:	193a      	adds	r2, r7, r4
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f383 8810 	msr	PRIMASK, r3
}
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4951      	ldr	r1, [pc, #324]	@ (8005c44 <HAL_UART_IRQHandler+0x5bc>)
 8005afe:	400a      	ands	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	193b      	adds	r3, r7, r4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b10:	f3ef 8310 	mrs	r3, PRIMASK
 8005b14:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b16:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b18:	2484      	movs	r4, #132	@ 0x84
 8005b1a:	193a      	adds	r2, r7, r4
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	2301      	movs	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	46c0      	nop			@ (mov r8, r8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	438a      	bics	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]
 8005b3a:	193b      	adds	r3, r7, r4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	f383 8810 	msr	PRIMASK, r3
}
 8005b46:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2280      	movs	r2, #128	@ 0x80
 8005b4c:	2120      	movs	r1, #32
 8005b4e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b64:	2480      	movs	r4, #128	@ 0x80
 8005b66:	193a      	adds	r2, r7, r4
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	46c0      	nop			@ (mov r8, r8)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2110      	movs	r1, #16
 8005b82:	438a      	bics	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	193b      	adds	r3, r7, r4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	f383 8810 	msr	PRIMASK, r3
}
 8005b92:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b9a:	183b      	adds	r3, r7, r0
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0011      	movs	r1, r2
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 f860 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ba8:	e044      	b.n	8005c34 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005baa:	23a4      	movs	r3, #164	@ 0xa4
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	035b      	lsls	r3, r3, #13
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d010      	beq.n	8005bda <HAL_UART_IRQHandler+0x552>
 8005bb8:	239c      	movs	r3, #156	@ 0x9c
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	03db      	lsls	r3, r3, #15
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2280      	movs	r2, #128	@ 0x80
 8005bcc:	0352      	lsls	r2, r2, #13
 8005bce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 fbee 	bl	80063b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bd8:	e02f      	b.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bda:	23a4      	movs	r3, #164	@ 0xa4
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2280      	movs	r2, #128	@ 0x80
 8005be2:	4013      	ands	r3, r2
 8005be4:	d00f      	beq.n	8005c06 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005be6:	23a0      	movs	r3, #160	@ 0xa0
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2280      	movs	r2, #128	@ 0x80
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01e      	beq.n	8005c38 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	0010      	movs	r0, r2
 8005c02:	4798      	blx	r3
    }
    return;
 8005c04:	e018      	b.n	8005c38 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c06:	23a4      	movs	r3, #164	@ 0xa4
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2240      	movs	r2, #64	@ 0x40
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
 8005c12:	23a0      	movs	r3, #160	@ 0xa0
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2240      	movs	r2, #64	@ 0x40
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00d      	beq.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 fb9c 	bl	800635e <UART_EndTransmit_IT>
    return;
 8005c26:	e008      	b.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005c28:	46c0      	nop			@ (mov r8, r8)
 8005c2a:	e006      	b.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	e004      	b.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005c30:	46c0      	nop			@ (mov r8, r8)
 8005c32:	e002      	b.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005c34:	46c0      	nop			@ (mov r8, r8)
 8005c36:	e000      	b.n	8005c3a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005c38:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b02b      	add	sp, #172	@ 0xac
 8005c3e:	bd90      	pop	{r4, r7, pc}
 8005c40:	fffffeff 	.word	0xfffffeff
 8005c44:	fffffedf 	.word	0xfffffedf

08005c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c50:	46c0      	nop			@ (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c60:	46c0      	nop			@ (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	000a      	movs	r2, r1
 8005c72:	1cbb      	adds	r3, r7, #2
 8005c74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b002      	add	sp, #8
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c88:	231e      	movs	r3, #30
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a83      	ldr	r2, [pc, #524]	@ (8005ebc <UART_SetConfig+0x23c>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4a7e      	ldr	r2, [pc, #504]	@ (8005ec0 <UART_SetConfig+0x240>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	0019      	movs	r1, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4a75      	ldr	r2, [pc, #468]	@ (8005ec4 <UART_SetConfig+0x244>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cfc:	4b72      	ldr	r3, [pc, #456]	@ (8005ec8 <UART_SetConfig+0x248>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	2203      	movs	r2, #3
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d00d      	beq.n	8005d24 <UART_SetConfig+0xa4>
 8005d08:	d81b      	bhi.n	8005d42 <UART_SetConfig+0xc2>
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d014      	beq.n	8005d38 <UART_SetConfig+0xb8>
 8005d0e:	d818      	bhi.n	8005d42 <UART_SetConfig+0xc2>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <UART_SetConfig+0x9a>
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d00a      	beq.n	8005d2e <UART_SetConfig+0xae>
 8005d18:	e013      	b.n	8005d42 <UART_SetConfig+0xc2>
 8005d1a:	231f      	movs	r3, #31
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e012      	b.n	8005d4a <UART_SetConfig+0xca>
 8005d24:	231f      	movs	r3, #31
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	2202      	movs	r2, #2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e00d      	b.n	8005d4a <UART_SetConfig+0xca>
 8005d2e:	231f      	movs	r3, #31
 8005d30:	18fb      	adds	r3, r7, r3
 8005d32:	2204      	movs	r2, #4
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e008      	b.n	8005d4a <UART_SetConfig+0xca>
 8005d38:	231f      	movs	r3, #31
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e003      	b.n	8005d4a <UART_SetConfig+0xca>
 8005d42:	231f      	movs	r3, #31
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2210      	movs	r2, #16
 8005d48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69da      	ldr	r2, [r3, #28]
 8005d4e:	2380      	movs	r3, #128	@ 0x80
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d15c      	bne.n	8005e10 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8005d56:	231f      	movs	r3, #31
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d015      	beq.n	8005d8c <UART_SetConfig+0x10c>
 8005d60:	dc18      	bgt.n	8005d94 <UART_SetConfig+0x114>
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d00d      	beq.n	8005d82 <UART_SetConfig+0x102>
 8005d66:	dc15      	bgt.n	8005d94 <UART_SetConfig+0x114>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <UART_SetConfig+0xf2>
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d005      	beq.n	8005d7c <UART_SetConfig+0xfc>
 8005d70:	e010      	b.n	8005d94 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d72:	f7fd fdc7 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005d76:	0003      	movs	r3, r0
 8005d78:	61bb      	str	r3, [r7, #24]
        break;
 8005d7a:	e012      	b.n	8005da2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d7c:	4b53      	ldr	r3, [pc, #332]	@ (8005ecc <UART_SetConfig+0x24c>)
 8005d7e:	61bb      	str	r3, [r7, #24]
        break;
 8005d80:	e00f      	b.n	8005da2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d82:	f7fd fd5f 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8005d86:	0003      	movs	r3, r0
 8005d88:	61bb      	str	r3, [r7, #24]
        break;
 8005d8a:	e00a      	b.n	8005da2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8c:	2380      	movs	r3, #128	@ 0x80
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	61bb      	str	r3, [r7, #24]
        break;
 8005d92:	e006      	b.n	8005da2 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d98:	231e      	movs	r3, #30
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
        break;
 8005da0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d100      	bne.n	8005daa <UART_SetConfig+0x12a>
 8005da8:	e07a      	b.n	8005ea0 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	005a      	lsls	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	18d2      	adds	r2, r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0019      	movs	r1, r3
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	f7fa f9b5 	bl	800012c <__udivsi3>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d91c      	bls.n	8005e06 <UART_SetConfig+0x186>
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	2380      	movs	r3, #128	@ 0x80
 8005dd0:	025b      	lsls	r3, r3, #9
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d217      	bcs.n	8005e06 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	200e      	movs	r0, #14
 8005ddc:	183b      	adds	r3, r7, r0
 8005dde:	210f      	movs	r1, #15
 8005de0:	438a      	bics	r2, r1
 8005de2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2207      	movs	r2, #7
 8005dec:	4013      	ands	r3, r2
 8005dee:	b299      	uxth	r1, r3
 8005df0:	183b      	adds	r3, r7, r0
 8005df2:	183a      	adds	r2, r7, r0
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	183a      	adds	r2, r7, r0
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	60da      	str	r2, [r3, #12]
 8005e04:	e04c      	b.n	8005ea0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005e06:	231e      	movs	r3, #30
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e047      	b.n	8005ea0 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e10:	231f      	movs	r3, #31
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d015      	beq.n	8005e46 <UART_SetConfig+0x1c6>
 8005e1a:	dc18      	bgt.n	8005e4e <UART_SetConfig+0x1ce>
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d00d      	beq.n	8005e3c <UART_SetConfig+0x1bc>
 8005e20:	dc15      	bgt.n	8005e4e <UART_SetConfig+0x1ce>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <UART_SetConfig+0x1ac>
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d005      	beq.n	8005e36 <UART_SetConfig+0x1b6>
 8005e2a:	e010      	b.n	8005e4e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fd fd6a 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005e30:	0003      	movs	r3, r0
 8005e32:	61bb      	str	r3, [r7, #24]
        break;
 8005e34:	e012      	b.n	8005e5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e36:	4b25      	ldr	r3, [pc, #148]	@ (8005ecc <UART_SetConfig+0x24c>)
 8005e38:	61bb      	str	r3, [r7, #24]
        break;
 8005e3a:	e00f      	b.n	8005e5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3c:	f7fd fd02 	bl	8003844 <HAL_RCC_GetSysClockFreq>
 8005e40:	0003      	movs	r3, r0
 8005e42:	61bb      	str	r3, [r7, #24]
        break;
 8005e44:	e00a      	b.n	8005e5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	2380      	movs	r3, #128	@ 0x80
 8005e48:	021b      	lsls	r3, r3, #8
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e006      	b.n	8005e5c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e52:	231e      	movs	r3, #30
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
        break;
 8005e5a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01e      	beq.n	8005ea0 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	085a      	lsrs	r2, r3, #1
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	18d2      	adds	r2, r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	0019      	movs	r1, r3
 8005e72:	0010      	movs	r0, r2
 8005e74:	f7fa f95a 	bl	800012c <__udivsi3>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b0f      	cmp	r3, #15
 8005e80:	d90a      	bls.n	8005e98 <UART_SetConfig+0x218>
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	025b      	lsls	r3, r3, #9
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d205      	bcs.n	8005e98 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60da      	str	r2, [r3, #12]
 8005e96:	e003      	b.n	8005ea0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005e98:	231e      	movs	r3, #30
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005eac:	231e      	movs	r3, #30
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	781b      	ldrb	r3, [r3, #0]
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b008      	add	sp, #32
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	ffff69f3 	.word	0xffff69f3
 8005ec0:	ffffcfff 	.word	0xffffcfff
 8005ec4:	fffff4ff 	.word	0xfffff4ff
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	007a1200 	.word	0x007a1200

08005ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	2208      	movs	r2, #8
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8006014 <UART_AdvFeatureConfig+0x144>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	2201      	movs	r2, #1
 8005f00:	4013      	ands	r3, r2
 8005f02:	d00b      	beq.n	8005f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4a43      	ldr	r2, [pc, #268]	@ (8006018 <UART_AdvFeatureConfig+0x148>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800601c <UART_AdvFeatureConfig+0x14c>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	0019      	movs	r1, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	2204      	movs	r2, #4
 8005f44:	4013      	ands	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4a34      	ldr	r2, [pc, #208]	@ (8006020 <UART_AdvFeatureConfig+0x150>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	0019      	movs	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	2210      	movs	r2, #16
 8005f66:	4013      	ands	r3, r2
 8005f68:	d00b      	beq.n	8005f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a2c      	ldr	r2, [pc, #176]	@ (8006024 <UART_AdvFeatureConfig+0x154>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	0019      	movs	r1, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2220      	movs	r2, #32
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d00b      	beq.n	8005fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4a25      	ldr	r2, [pc, #148]	@ (8006028 <UART_AdvFeatureConfig+0x158>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	0019      	movs	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	2240      	movs	r2, #64	@ 0x40
 8005faa:	4013      	ands	r3, r2
 8005fac:	d01d      	beq.n	8005fea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800602c <UART_AdvFeatureConfig+0x15c>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	0019      	movs	r1, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fca:	2380      	movs	r3, #128	@ 0x80
 8005fcc:	035b      	lsls	r3, r3, #13
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d10b      	bne.n	8005fea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <UART_AdvFeatureConfig+0x160>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	0019      	movs	r1, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	2280      	movs	r2, #128	@ 0x80
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d00b      	beq.n	800600c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8006034 <UART_AdvFeatureConfig+0x164>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	0019      	movs	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }
}
 800600c:	46c0      	nop			@ (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}
 8006014:	ffff7fff 	.word	0xffff7fff
 8006018:	fffdffff 	.word	0xfffdffff
 800601c:	fffeffff 	.word	0xfffeffff
 8006020:	fffbffff 	.word	0xfffbffff
 8006024:	ffffefff 	.word	0xffffefff
 8006028:	ffffdfff 	.word	0xffffdfff
 800602c:	ffefffff 	.word	0xffefffff
 8006030:	ff9fffff 	.word	0xff9fffff
 8006034:	fff7ffff 	.word	0xfff7ffff

08006038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b092      	sub	sp, #72	@ 0x48
 800603c:	af02      	add	r7, sp, #8
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2284      	movs	r2, #132	@ 0x84
 8006044:	2100      	movs	r1, #0
 8006046:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006048:	f7fb ff28 	bl	8001e9c <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2208      	movs	r2, #8
 8006058:	4013      	ands	r3, r2
 800605a:	2b08      	cmp	r3, #8
 800605c:	d12c      	bne.n	80060b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800605e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006060:	2280      	movs	r2, #128	@ 0x80
 8006062:	0391      	lsls	r1, r2, #14
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4a46      	ldr	r2, [pc, #280]	@ (8006180 <UART_CheckIdleState+0x148>)
 8006068:	9200      	str	r2, [sp, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	f000 f88c 	bl	8006188 <UART_WaitOnFlagUntilTimeout>
 8006070:	1e03      	subs	r3, r0, #0
 8006072:	d021      	beq.n	80060b8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006074:	f3ef 8310 	mrs	r3, PRIMASK
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800607c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800607e:	2301      	movs	r3, #1
 8006080:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	f383 8810 	msr	PRIMASK, r3
}
 8006088:	46c0      	nop			@ (mov r8, r8)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2180      	movs	r1, #128	@ 0x80
 8006096:	438a      	bics	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a0:	f383 8810 	msr	PRIMASK, r3
}
 80060a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2278      	movs	r2, #120	@ 0x78
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e05f      	b.n	8006178 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2204      	movs	r2, #4
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d146      	bne.n	8006154 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c8:	2280      	movs	r2, #128	@ 0x80
 80060ca:	03d1      	lsls	r1, r2, #15
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006180 <UART_CheckIdleState+0x148>)
 80060d0:	9200      	str	r2, [sp, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f000 f858 	bl	8006188 <UART_WaitOnFlagUntilTimeout>
 80060d8:	1e03      	subs	r3, r0, #0
 80060da:	d03b      	beq.n	8006154 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060dc:	f3ef 8310 	mrs	r3, PRIMASK
 80060e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80060e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e6:	2301      	movs	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f383 8810 	msr	PRIMASK, r3
}
 80060f0:	46c0      	nop			@ (mov r8, r8)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4921      	ldr	r1, [pc, #132]	@ (8006184 <UART_CheckIdleState+0x14c>)
 80060fe:	400a      	ands	r2, r1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f383 8810 	msr	PRIMASK, r3
}
 800610c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610e:	f3ef 8310 	mrs	r3, PRIMASK
 8006112:	61bb      	str	r3, [r7, #24]
  return(result);
 8006114:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	633b      	str	r3, [r7, #48]	@ 0x30
 8006118:	2301      	movs	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f383 8810 	msr	PRIMASK, r3
}
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	438a      	bics	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	f383 8810 	msr	PRIMASK, r3
}
 800613e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2280      	movs	r2, #128	@ 0x80
 8006144:	2120      	movs	r1, #32
 8006146:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2278      	movs	r2, #120	@ 0x78
 800614c:	2100      	movs	r1, #0
 800614e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e011      	b.n	8006178 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	@ 0x80
 800615e:	2120      	movs	r1, #32
 8006160:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2278      	movs	r2, #120	@ 0x78
 8006172:	2100      	movs	r1, #0
 8006174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b010      	add	sp, #64	@ 0x40
 800617e:	bd80      	pop	{r7, pc}
 8006180:	01ffffff 	.word	0x01ffffff
 8006184:	fffffedf 	.word	0xfffffedf

08006188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	1dfb      	adds	r3, r7, #7
 8006196:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006198:	e051      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	3301      	adds	r3, #1
 800619e:	d04e      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a0:	f7fb fe7c 	bl	8001e9c <HAL_GetTick>
 80061a4:	0002      	movs	r2, r0
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e051      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2204      	movs	r2, #4
 80061c2:	4013      	ands	r3, r2
 80061c4:	d03b      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb6>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b80      	cmp	r3, #128	@ 0x80
 80061ca:	d038      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb6>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d035      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2208      	movs	r2, #8
 80061da:	4013      	ands	r3, r2
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d111      	bne.n	8006204 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2208      	movs	r2, #8
 80061e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 f83c 	bl	8006268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2284      	movs	r2, #132	@ 0x84
 80061f4:	2108      	movs	r1, #8
 80061f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2278      	movs	r2, #120	@ 0x78
 80061fc:	2100      	movs	r1, #0
 80061fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e02c      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	2380      	movs	r3, #128	@ 0x80
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	401a      	ands	r2, r3
 8006210:	2380      	movs	r3, #128	@ 0x80
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	429a      	cmp	r2, r3
 8006216:	d112      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2280      	movs	r2, #128	@ 0x80
 800621e:	0112      	lsls	r2, r2, #4
 8006220:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	0018      	movs	r0, r3
 8006226:	f000 f81f 	bl	8006268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2284      	movs	r2, #132	@ 0x84
 800622e:	2120      	movs	r1, #32
 8006230:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2278      	movs	r2, #120	@ 0x78
 8006236:	2100      	movs	r1, #0
 8006238:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	425a      	negs	r2, r3
 800624e:	4153      	adcs	r3, r2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	001a      	movs	r2, r3
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d09e      	beq.n	800619a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08e      	sub	sp, #56	@ 0x38
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	617b      	str	r3, [r7, #20]
  return(result);
 8006276:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006278:	637b      	str	r3, [r7, #52]	@ 0x34
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f383 8810 	msr	PRIMASK, r3
}
 8006284:	46c0      	nop			@ (mov r8, r8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4926      	ldr	r1, [pc, #152]	@ (800632c <UART_EndRxTransfer+0xc4>)
 8006292:	400a      	ands	r2, r1
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f383 8810 	msr	PRIMASK, r3
}
 80062a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	623b      	str	r3, [r7, #32]
  return(result);
 80062a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ac:	2301      	movs	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	f383 8810 	msr	PRIMASK, r3
}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2101      	movs	r1, #1
 80062c4:	438a      	bics	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	f383 8810 	msr	PRIMASK, r3
}
 80062d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d118      	bne.n	800630e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062dc:	f3ef 8310 	mrs	r3, PRIMASK
 80062e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80062e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062e6:	2301      	movs	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			@ (mov r8, r8)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2110      	movs	r1, #16
 80062fe:	438a      	bics	r2, r1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f383 8810 	msr	PRIMASK, r3
}
 800630c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2280      	movs	r2, #128	@ 0x80
 8006312:	2120      	movs	r1, #32
 8006314:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	46bd      	mov	sp, r7
 8006326:	b00e      	add	sp, #56	@ 0x38
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	fffffedf 	.word	0xfffffedf

08006330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	225a      	movs	r2, #90	@ 0x5a
 8006342:	2100      	movs	r1, #0
 8006344:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2252      	movs	r2, #82	@ 0x52
 800634a:	2100      	movs	r1, #0
 800634c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	0018      	movs	r0, r3
 8006352:	f7ff fc81 	bl	8005c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b004      	add	sp, #16
 800635c:	bd80      	pop	{r7, pc}

0800635e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006366:	f3ef 8310 	mrs	r3, PRIMASK
 800636a:	60bb      	str	r3, [r7, #8]
  return(result);
 800636c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	2301      	movs	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f383 8810 	msr	PRIMASK, r3
}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2140      	movs	r1, #64	@ 0x40
 8006388:	438a      	bics	r2, r1
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f383 8810 	msr	PRIMASK, r3
}
 8006396:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7ff fc4e 	bl	8005c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ac:	46c0      	nop			@ (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b006      	add	sp, #24
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063bc:	46c0      	nop			@ (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	b002      	add	sp, #8
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <malloc>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	4b03      	ldr	r3, [pc, #12]	@ (80063d4 <malloc+0x10>)
 80063c8:	0001      	movs	r1, r0
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	f000 f830 	bl	8006430 <_malloc_r>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	46c0      	nop			@ (mov r8, r8)
 80063d4:	20000018 	.word	0x20000018

080063d8 <free>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4b03      	ldr	r3, [pc, #12]	@ (80063e8 <free+0x10>)
 80063dc:	0001      	movs	r1, r0
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	f000 f96e 	bl	80066c0 <_free_r>
 80063e4:	bd10      	pop	{r4, pc}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	20000018 	.word	0x20000018

080063ec <sbrk_aligned>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4e0f      	ldr	r6, [pc, #60]	@ (800642c <sbrk_aligned+0x40>)
 80063f0:	000d      	movs	r5, r1
 80063f2:	6831      	ldr	r1, [r6, #0]
 80063f4:	0004      	movs	r4, r0
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d102      	bne.n	8006400 <sbrk_aligned+0x14>
 80063fa:	f000 f919 	bl	8006630 <_sbrk_r>
 80063fe:	6030      	str	r0, [r6, #0]
 8006400:	0029      	movs	r1, r5
 8006402:	0020      	movs	r0, r4
 8006404:	f000 f914 	bl	8006630 <_sbrk_r>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d103      	bne.n	8006414 <sbrk_aligned+0x28>
 800640c:	2501      	movs	r5, #1
 800640e:	426d      	negs	r5, r5
 8006410:	0028      	movs	r0, r5
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	2303      	movs	r3, #3
 8006416:	1cc5      	adds	r5, r0, #3
 8006418:	439d      	bics	r5, r3
 800641a:	42a8      	cmp	r0, r5
 800641c:	d0f8      	beq.n	8006410 <sbrk_aligned+0x24>
 800641e:	1a29      	subs	r1, r5, r0
 8006420:	0020      	movs	r0, r4
 8006422:	f000 f905 	bl	8006630 <_sbrk_r>
 8006426:	3001      	adds	r0, #1
 8006428:	d1f2      	bne.n	8006410 <sbrk_aligned+0x24>
 800642a:	e7ef      	b.n	800640c <sbrk_aligned+0x20>
 800642c:	200002a4 	.word	0x200002a4

08006430 <_malloc_r>:
 8006430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006432:	2203      	movs	r2, #3
 8006434:	1ccb      	adds	r3, r1, #3
 8006436:	4393      	bics	r3, r2
 8006438:	3308      	adds	r3, #8
 800643a:	0005      	movs	r5, r0
 800643c:	001f      	movs	r7, r3
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d234      	bcs.n	80064ac <_malloc_r+0x7c>
 8006442:	270c      	movs	r7, #12
 8006444:	42b9      	cmp	r1, r7
 8006446:	d833      	bhi.n	80064b0 <_malloc_r+0x80>
 8006448:	0028      	movs	r0, r5
 800644a:	f000 f871 	bl	8006530 <__malloc_lock>
 800644e:	4e37      	ldr	r6, [pc, #220]	@ (800652c <_malloc_r+0xfc>)
 8006450:	6833      	ldr	r3, [r6, #0]
 8006452:	001c      	movs	r4, r3
 8006454:	2c00      	cmp	r4, #0
 8006456:	d12f      	bne.n	80064b8 <_malloc_r+0x88>
 8006458:	0039      	movs	r1, r7
 800645a:	0028      	movs	r0, r5
 800645c:	f7ff ffc6 	bl	80063ec <sbrk_aligned>
 8006460:	0004      	movs	r4, r0
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d15f      	bne.n	8006526 <_malloc_r+0xf6>
 8006466:	6834      	ldr	r4, [r6, #0]
 8006468:	9400      	str	r4, [sp, #0]
 800646a:	9b00      	ldr	r3, [sp, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d14a      	bne.n	8006506 <_malloc_r+0xd6>
 8006470:	2c00      	cmp	r4, #0
 8006472:	d052      	beq.n	800651a <_malloc_r+0xea>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	0028      	movs	r0, r5
 8006478:	18e3      	adds	r3, r4, r3
 800647a:	9900      	ldr	r1, [sp, #0]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	f000 f8d7 	bl	8006630 <_sbrk_r>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	4283      	cmp	r3, r0
 8006486:	d148      	bne.n	800651a <_malloc_r+0xea>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	0028      	movs	r0, r5
 800648c:	1aff      	subs	r7, r7, r3
 800648e:	0039      	movs	r1, r7
 8006490:	f7ff ffac 	bl	80063ec <sbrk_aligned>
 8006494:	3001      	adds	r0, #1
 8006496:	d040      	beq.n	800651a <_malloc_r+0xea>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	19db      	adds	r3, r3, r7
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	6833      	ldr	r3, [r6, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d133      	bne.n	800650e <_malloc_r+0xde>
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	6033      	str	r3, [r6, #0]
 80064aa:	e019      	b.n	80064e0 <_malloc_r+0xb0>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dac9      	bge.n	8006444 <_malloc_r+0x14>
 80064b0:	230c      	movs	r3, #12
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	2000      	movs	r0, #0
 80064b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064b8:	6821      	ldr	r1, [r4, #0]
 80064ba:	1bc9      	subs	r1, r1, r7
 80064bc:	d420      	bmi.n	8006500 <_malloc_r+0xd0>
 80064be:	290b      	cmp	r1, #11
 80064c0:	d90a      	bls.n	80064d8 <_malloc_r+0xa8>
 80064c2:	19e2      	adds	r2, r4, r7
 80064c4:	6027      	str	r7, [r4, #0]
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	d104      	bne.n	80064d4 <_malloc_r+0xa4>
 80064ca:	6032      	str	r2, [r6, #0]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	6011      	str	r1, [r2, #0]
 80064d0:	6053      	str	r3, [r2, #4]
 80064d2:	e005      	b.n	80064e0 <_malloc_r+0xb0>
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	e7f9      	b.n	80064cc <_malloc_r+0x9c>
 80064d8:	6862      	ldr	r2, [r4, #4]
 80064da:	42a3      	cmp	r3, r4
 80064dc:	d10e      	bne.n	80064fc <_malloc_r+0xcc>
 80064de:	6032      	str	r2, [r6, #0]
 80064e0:	0028      	movs	r0, r5
 80064e2:	f000 f82d 	bl	8006540 <__malloc_unlock>
 80064e6:	0020      	movs	r0, r4
 80064e8:	2207      	movs	r2, #7
 80064ea:	300b      	adds	r0, #11
 80064ec:	1d23      	adds	r3, r4, #4
 80064ee:	4390      	bics	r0, r2
 80064f0:	1ac2      	subs	r2, r0, r3
 80064f2:	4298      	cmp	r0, r3
 80064f4:	d0df      	beq.n	80064b6 <_malloc_r+0x86>
 80064f6:	1a1b      	subs	r3, r3, r0
 80064f8:	50a3      	str	r3, [r4, r2]
 80064fa:	e7dc      	b.n	80064b6 <_malloc_r+0x86>
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	e7ef      	b.n	80064e0 <_malloc_r+0xb0>
 8006500:	0023      	movs	r3, r4
 8006502:	6864      	ldr	r4, [r4, #4]
 8006504:	e7a6      	b.n	8006454 <_malloc_r+0x24>
 8006506:	9c00      	ldr	r4, [sp, #0]
 8006508:	6863      	ldr	r3, [r4, #4]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	e7ad      	b.n	800646a <_malloc_r+0x3a>
 800650e:	001a      	movs	r2, r3
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	42a3      	cmp	r3, r4
 8006514:	d1fb      	bne.n	800650e <_malloc_r+0xde>
 8006516:	2300      	movs	r3, #0
 8006518:	e7da      	b.n	80064d0 <_malloc_r+0xa0>
 800651a:	230c      	movs	r3, #12
 800651c:	0028      	movs	r0, r5
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f000 f80e 	bl	8006540 <__malloc_unlock>
 8006524:	e7c6      	b.n	80064b4 <_malloc_r+0x84>
 8006526:	6007      	str	r7, [r0, #0]
 8006528:	e7da      	b.n	80064e0 <_malloc_r+0xb0>
 800652a:	46c0      	nop			@ (mov r8, r8)
 800652c:	200002a8 	.word	0x200002a8

08006530 <__malloc_lock>:
 8006530:	b510      	push	{r4, lr}
 8006532:	4802      	ldr	r0, [pc, #8]	@ (800653c <__malloc_lock+0xc>)
 8006534:	f000 f8b8 	bl	80066a8 <__retarget_lock_acquire_recursive>
 8006538:	bd10      	pop	{r4, pc}
 800653a:	46c0      	nop			@ (mov r8, r8)
 800653c:	200003e8 	.word	0x200003e8

08006540 <__malloc_unlock>:
 8006540:	b510      	push	{r4, lr}
 8006542:	4802      	ldr	r0, [pc, #8]	@ (800654c <__malloc_unlock+0xc>)
 8006544:	f000 f8b1 	bl	80066aa <__retarget_lock_release_recursive>
 8006548:	bd10      	pop	{r4, pc}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	200003e8 	.word	0x200003e8

08006550 <realloc>:
 8006550:	b510      	push	{r4, lr}
 8006552:	4b03      	ldr	r3, [pc, #12]	@ (8006560 <realloc+0x10>)
 8006554:	000a      	movs	r2, r1
 8006556:	0001      	movs	r1, r0
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	f000 f803 	bl	8006564 <_realloc_r>
 800655e:	bd10      	pop	{r4, pc}
 8006560:	20000018 	.word	0x20000018

08006564 <_realloc_r>:
 8006564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006566:	0006      	movs	r6, r0
 8006568:	000c      	movs	r4, r1
 800656a:	0015      	movs	r5, r2
 800656c:	2900      	cmp	r1, #0
 800656e:	d105      	bne.n	800657c <_realloc_r+0x18>
 8006570:	0011      	movs	r1, r2
 8006572:	f7ff ff5d 	bl	8006430 <_malloc_r>
 8006576:	0004      	movs	r4, r0
 8006578:	0020      	movs	r0, r4
 800657a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800657c:	2a00      	cmp	r2, #0
 800657e:	d103      	bne.n	8006588 <_realloc_r+0x24>
 8006580:	f000 f89e 	bl	80066c0 <_free_r>
 8006584:	2400      	movs	r4, #0
 8006586:	e7f7      	b.n	8006578 <_realloc_r+0x14>
 8006588:	f000 f8e4 	bl	8006754 <_malloc_usable_size_r>
 800658c:	0007      	movs	r7, r0
 800658e:	4285      	cmp	r5, r0
 8006590:	d802      	bhi.n	8006598 <_realloc_r+0x34>
 8006592:	0843      	lsrs	r3, r0, #1
 8006594:	42ab      	cmp	r3, r5
 8006596:	d3ef      	bcc.n	8006578 <_realloc_r+0x14>
 8006598:	0029      	movs	r1, r5
 800659a:	0030      	movs	r0, r6
 800659c:	f7ff ff48 	bl	8006430 <_malloc_r>
 80065a0:	9001      	str	r0, [sp, #4]
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0ee      	beq.n	8006584 <_realloc_r+0x20>
 80065a6:	002a      	movs	r2, r5
 80065a8:	42bd      	cmp	r5, r7
 80065aa:	d900      	bls.n	80065ae <_realloc_r+0x4a>
 80065ac:	003a      	movs	r2, r7
 80065ae:	0021      	movs	r1, r4
 80065b0:	9801      	ldr	r0, [sp, #4]
 80065b2:	f000 f87b 	bl	80066ac <memcpy>
 80065b6:	0021      	movs	r1, r4
 80065b8:	0030      	movs	r0, r6
 80065ba:	f000 f881 	bl	80066c0 <_free_r>
 80065be:	9c01      	ldr	r4, [sp, #4]
 80065c0:	e7da      	b.n	8006578 <_realloc_r+0x14>
	...

080065c4 <siprintf>:
 80065c4:	b40e      	push	{r1, r2, r3}
 80065c6:	b500      	push	{lr}
 80065c8:	490b      	ldr	r1, [pc, #44]	@ (80065f8 <siprintf+0x34>)
 80065ca:	b09c      	sub	sp, #112	@ 0x70
 80065cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80065ce:	9002      	str	r0, [sp, #8]
 80065d0:	9006      	str	r0, [sp, #24]
 80065d2:	9107      	str	r1, [sp, #28]
 80065d4:	9104      	str	r1, [sp, #16]
 80065d6:	4809      	ldr	r0, [pc, #36]	@ (80065fc <siprintf+0x38>)
 80065d8:	4909      	ldr	r1, [pc, #36]	@ (8006600 <siprintf+0x3c>)
 80065da:	cb04      	ldmia	r3!, {r2}
 80065dc:	9105      	str	r1, [sp, #20]
 80065de:	6800      	ldr	r0, [r0, #0]
 80065e0:	a902      	add	r1, sp, #8
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	f000 f91e 	bl	8006824 <_svfiprintf_r>
 80065e8:	2200      	movs	r2, #0
 80065ea:	9b02      	ldr	r3, [sp, #8]
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	b01c      	add	sp, #112	@ 0x70
 80065f0:	bc08      	pop	{r3}
 80065f2:	b003      	add	sp, #12
 80065f4:	4718      	bx	r3
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	7fffffff 	.word	0x7fffffff
 80065fc:	20000018 	.word	0x20000018
 8006600:	ffff0208 	.word	0xffff0208

08006604 <memcmp>:
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	2400      	movs	r4, #0
 8006608:	3901      	subs	r1, #1
 800660a:	42a2      	cmp	r2, r4
 800660c:	d101      	bne.n	8006612 <memcmp+0xe>
 800660e:	2000      	movs	r0, #0
 8006610:	e005      	b.n	800661e <memcmp+0x1a>
 8006612:	5d03      	ldrb	r3, [r0, r4]
 8006614:	3401      	adds	r4, #1
 8006616:	5d0d      	ldrb	r5, [r1, r4]
 8006618:	42ab      	cmp	r3, r5
 800661a:	d0f6      	beq.n	800660a <memcmp+0x6>
 800661c:	1b58      	subs	r0, r3, r5
 800661e:	bd30      	pop	{r4, r5, pc}

08006620 <memset>:
 8006620:	0003      	movs	r3, r0
 8006622:	1882      	adds	r2, r0, r2
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	7019      	strb	r1, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <_sbrk_r>:
 8006630:	2300      	movs	r3, #0
 8006632:	b570      	push	{r4, r5, r6, lr}
 8006634:	4d06      	ldr	r5, [pc, #24]	@ (8006650 <_sbrk_r+0x20>)
 8006636:	0004      	movs	r4, r0
 8006638:	0008      	movs	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fb fb1a 	bl	8001c74 <_sbrk>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d103      	bne.n	800664c <_sbrk_r+0x1c>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d000      	beq.n	800664c <_sbrk_r+0x1c>
 800664a:	6023      	str	r3, [r4, #0]
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	200003e4 	.word	0x200003e4

08006654 <__errno>:
 8006654:	4b01      	ldr	r3, [pc, #4]	@ (800665c <__errno+0x8>)
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	4770      	bx	lr
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	20000018 	.word	0x20000018

08006660 <__libc_init_array>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	2600      	movs	r6, #0
 8006664:	4c0c      	ldr	r4, [pc, #48]	@ (8006698 <__libc_init_array+0x38>)
 8006666:	4d0d      	ldr	r5, [pc, #52]	@ (800669c <__libc_init_array+0x3c>)
 8006668:	1b64      	subs	r4, r4, r5
 800666a:	10a4      	asrs	r4, r4, #2
 800666c:	42a6      	cmp	r6, r4
 800666e:	d109      	bne.n	8006684 <__libc_init_array+0x24>
 8006670:	2600      	movs	r6, #0
 8006672:	f000 fb71 	bl	8006d58 <_init>
 8006676:	4c0a      	ldr	r4, [pc, #40]	@ (80066a0 <__libc_init_array+0x40>)
 8006678:	4d0a      	ldr	r5, [pc, #40]	@ (80066a4 <__libc_init_array+0x44>)
 800667a:	1b64      	subs	r4, r4, r5
 800667c:	10a4      	asrs	r4, r4, #2
 800667e:	42a6      	cmp	r6, r4
 8006680:	d105      	bne.n	800668e <__libc_init_array+0x2e>
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	00b3      	lsls	r3, r6, #2
 8006686:	58eb      	ldr	r3, [r5, r3]
 8006688:	4798      	blx	r3
 800668a:	3601      	adds	r6, #1
 800668c:	e7ee      	b.n	800666c <__libc_init_array+0xc>
 800668e:	00b3      	lsls	r3, r6, #2
 8006690:	58eb      	ldr	r3, [r5, r3]
 8006692:	4798      	blx	r3
 8006694:	3601      	adds	r6, #1
 8006696:	e7f2      	b.n	800667e <__libc_init_array+0x1e>
 8006698:	08006f20 	.word	0x08006f20
 800669c:	08006f20 	.word	0x08006f20
 80066a0:	08006f24 	.word	0x08006f24
 80066a4:	08006f20 	.word	0x08006f20

080066a8 <__retarget_lock_acquire_recursive>:
 80066a8:	4770      	bx	lr

080066aa <__retarget_lock_release_recursive>:
 80066aa:	4770      	bx	lr

080066ac <memcpy>:
 80066ac:	2300      	movs	r3, #0
 80066ae:	b510      	push	{r4, lr}
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d100      	bne.n	80066b6 <memcpy+0xa>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	5ccc      	ldrb	r4, [r1, r3]
 80066b8:	54c4      	strb	r4, [r0, r3]
 80066ba:	3301      	adds	r3, #1
 80066bc:	e7f8      	b.n	80066b0 <memcpy+0x4>
	...

080066c0 <_free_r>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	0005      	movs	r5, r0
 80066c4:	1e0c      	subs	r4, r1, #0
 80066c6:	d010      	beq.n	80066ea <_free_r+0x2a>
 80066c8:	3c04      	subs	r4, #4
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da00      	bge.n	80066d2 <_free_r+0x12>
 80066d0:	18e4      	adds	r4, r4, r3
 80066d2:	0028      	movs	r0, r5
 80066d4:	f7ff ff2c 	bl	8006530 <__malloc_lock>
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <_free_r+0x90>)
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <_free_r+0x2c>
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	6014      	str	r4, [r2, #0]
 80066e4:	0028      	movs	r0, r5
 80066e6:	f7ff ff2b 	bl	8006540 <__malloc_unlock>
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d908      	bls.n	8006702 <_free_r+0x42>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	1821      	adds	r1, r4, r0
 80066f4:	428b      	cmp	r3, r1
 80066f6:	d1f3      	bne.n	80066e0 <_free_r+0x20>
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	1809      	adds	r1, r1, r0
 80066fe:	6021      	str	r1, [r4, #0]
 8006700:	e7ee      	b.n	80066e0 <_free_r+0x20>
 8006702:	001a      	movs	r2, r3
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <_free_r+0x4e>
 800670a:	42a3      	cmp	r3, r4
 800670c:	d9f9      	bls.n	8006702 <_free_r+0x42>
 800670e:	6811      	ldr	r1, [r2, #0]
 8006710:	1850      	adds	r0, r2, r1
 8006712:	42a0      	cmp	r0, r4
 8006714:	d10b      	bne.n	800672e <_free_r+0x6e>
 8006716:	6820      	ldr	r0, [r4, #0]
 8006718:	1809      	adds	r1, r1, r0
 800671a:	1850      	adds	r0, r2, r1
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	4283      	cmp	r3, r0
 8006720:	d1e0      	bne.n	80066e4 <_free_r+0x24>
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	1841      	adds	r1, r0, r1
 8006728:	6011      	str	r1, [r2, #0]
 800672a:	6053      	str	r3, [r2, #4]
 800672c:	e7da      	b.n	80066e4 <_free_r+0x24>
 800672e:	42a0      	cmp	r0, r4
 8006730:	d902      	bls.n	8006738 <_free_r+0x78>
 8006732:	230c      	movs	r3, #12
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	e7d5      	b.n	80066e4 <_free_r+0x24>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428b      	cmp	r3, r1
 800673e:	d103      	bne.n	8006748 <_free_r+0x88>
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	1809      	adds	r1, r1, r0
 8006746:	6021      	str	r1, [r4, #0]
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	6054      	str	r4, [r2, #4]
 800674c:	e7ca      	b.n	80066e4 <_free_r+0x24>
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	200002a8 	.word	0x200002a8

08006754 <_malloc_usable_size_r>:
 8006754:	1f0b      	subs	r3, r1, #4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	1f18      	subs	r0, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	da01      	bge.n	8006762 <_malloc_usable_size_r+0xe>
 800675e:	580b      	ldr	r3, [r1, r0]
 8006760:	18c0      	adds	r0, r0, r3
 8006762:	4770      	bx	lr

08006764 <__ssputs_r>:
 8006764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006766:	688e      	ldr	r6, [r1, #8]
 8006768:	b085      	sub	sp, #20
 800676a:	001f      	movs	r7, r3
 800676c:	000c      	movs	r4, r1
 800676e:	680b      	ldr	r3, [r1, #0]
 8006770:	9002      	str	r0, [sp, #8]
 8006772:	9203      	str	r2, [sp, #12]
 8006774:	42be      	cmp	r6, r7
 8006776:	d830      	bhi.n	80067da <__ssputs_r+0x76>
 8006778:	210c      	movs	r1, #12
 800677a:	5e62      	ldrsh	r2, [r4, r1]
 800677c:	2190      	movs	r1, #144	@ 0x90
 800677e:	00c9      	lsls	r1, r1, #3
 8006780:	420a      	tst	r2, r1
 8006782:	d028      	beq.n	80067d6 <__ssputs_r+0x72>
 8006784:	2003      	movs	r0, #3
 8006786:	6921      	ldr	r1, [r4, #16]
 8006788:	1a5b      	subs	r3, r3, r1
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	6963      	ldr	r3, [r4, #20]
 800678e:	4343      	muls	r3, r0
 8006790:	9801      	ldr	r0, [sp, #4]
 8006792:	0fdd      	lsrs	r5, r3, #31
 8006794:	18ed      	adds	r5, r5, r3
 8006796:	1c7b      	adds	r3, r7, #1
 8006798:	181b      	adds	r3, r3, r0
 800679a:	106d      	asrs	r5, r5, #1
 800679c:	42ab      	cmp	r3, r5
 800679e:	d900      	bls.n	80067a2 <__ssputs_r+0x3e>
 80067a0:	001d      	movs	r5, r3
 80067a2:	0552      	lsls	r2, r2, #21
 80067a4:	d528      	bpl.n	80067f8 <__ssputs_r+0x94>
 80067a6:	0029      	movs	r1, r5
 80067a8:	9802      	ldr	r0, [sp, #8]
 80067aa:	f7ff fe41 	bl	8006430 <_malloc_r>
 80067ae:	1e06      	subs	r6, r0, #0
 80067b0:	d02c      	beq.n	800680c <__ssputs_r+0xa8>
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	6921      	ldr	r1, [r4, #16]
 80067b6:	f7ff ff79 	bl	80066ac <memcpy>
 80067ba:	89a2      	ldrh	r2, [r4, #12]
 80067bc:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <__ssputs_r+0xbc>)
 80067be:	401a      	ands	r2, r3
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	4313      	orrs	r3, r2
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	6126      	str	r6, [r4, #16]
 80067ca:	18f6      	adds	r6, r6, r3
 80067cc:	6026      	str	r6, [r4, #0]
 80067ce:	003e      	movs	r6, r7
 80067d0:	6165      	str	r5, [r4, #20]
 80067d2:	1aed      	subs	r5, r5, r3
 80067d4:	60a5      	str	r5, [r4, #8]
 80067d6:	42be      	cmp	r6, r7
 80067d8:	d900      	bls.n	80067dc <__ssputs_r+0x78>
 80067da:	003e      	movs	r6, r7
 80067dc:	0032      	movs	r2, r6
 80067de:	9903      	ldr	r1, [sp, #12]
 80067e0:	6820      	ldr	r0, [r4, #0]
 80067e2:	f000 fa9b 	bl	8006d1c <memmove>
 80067e6:	2000      	movs	r0, #0
 80067e8:	68a3      	ldr	r3, [r4, #8]
 80067ea:	1b9b      	subs	r3, r3, r6
 80067ec:	60a3      	str	r3, [r4, #8]
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	199b      	adds	r3, r3, r6
 80067f2:	6023      	str	r3, [r4, #0]
 80067f4:	b005      	add	sp, #20
 80067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f8:	002a      	movs	r2, r5
 80067fa:	9802      	ldr	r0, [sp, #8]
 80067fc:	f7ff feb2 	bl	8006564 <_realloc_r>
 8006800:	1e06      	subs	r6, r0, #0
 8006802:	d1e0      	bne.n	80067c6 <__ssputs_r+0x62>
 8006804:	6921      	ldr	r1, [r4, #16]
 8006806:	9802      	ldr	r0, [sp, #8]
 8006808:	f7ff ff5a 	bl	80066c0 <_free_r>
 800680c:	230c      	movs	r3, #12
 800680e:	2001      	movs	r0, #1
 8006810:	9a02      	ldr	r2, [sp, #8]
 8006812:	4240      	negs	r0, r0
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	89a2      	ldrh	r2, [r4, #12]
 8006818:	3334      	adds	r3, #52	@ 0x34
 800681a:	4313      	orrs	r3, r2
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	e7e9      	b.n	80067f4 <__ssputs_r+0x90>
 8006820:	fffffb7f 	.word	0xfffffb7f

08006824 <_svfiprintf_r>:
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	b0a1      	sub	sp, #132	@ 0x84
 8006828:	9003      	str	r0, [sp, #12]
 800682a:	001d      	movs	r5, r3
 800682c:	898b      	ldrh	r3, [r1, #12]
 800682e:	000f      	movs	r7, r1
 8006830:	0016      	movs	r6, r2
 8006832:	061b      	lsls	r3, r3, #24
 8006834:	d511      	bpl.n	800685a <_svfiprintf_r+0x36>
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10e      	bne.n	800685a <_svfiprintf_r+0x36>
 800683c:	2140      	movs	r1, #64	@ 0x40
 800683e:	f7ff fdf7 	bl	8006430 <_malloc_r>
 8006842:	6038      	str	r0, [r7, #0]
 8006844:	6138      	str	r0, [r7, #16]
 8006846:	2800      	cmp	r0, #0
 8006848:	d105      	bne.n	8006856 <_svfiprintf_r+0x32>
 800684a:	230c      	movs	r3, #12
 800684c:	9a03      	ldr	r2, [sp, #12]
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	2001      	movs	r0, #1
 8006852:	4240      	negs	r0, r0
 8006854:	e0cf      	b.n	80069f6 <_svfiprintf_r+0x1d2>
 8006856:	2340      	movs	r3, #64	@ 0x40
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	2300      	movs	r3, #0
 800685c:	ac08      	add	r4, sp, #32
 800685e:	6163      	str	r3, [r4, #20]
 8006860:	3320      	adds	r3, #32
 8006862:	7663      	strb	r3, [r4, #25]
 8006864:	3310      	adds	r3, #16
 8006866:	76a3      	strb	r3, [r4, #26]
 8006868:	9507      	str	r5, [sp, #28]
 800686a:	0035      	movs	r5, r6
 800686c:	782b      	ldrb	r3, [r5, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <_svfiprintf_r+0x52>
 8006872:	2b25      	cmp	r3, #37	@ 0x25
 8006874:	d148      	bne.n	8006908 <_svfiprintf_r+0xe4>
 8006876:	1bab      	subs	r3, r5, r6
 8006878:	9305      	str	r3, [sp, #20]
 800687a:	42b5      	cmp	r5, r6
 800687c:	d00b      	beq.n	8006896 <_svfiprintf_r+0x72>
 800687e:	0032      	movs	r2, r6
 8006880:	0039      	movs	r1, r7
 8006882:	9803      	ldr	r0, [sp, #12]
 8006884:	f7ff ff6e 	bl	8006764 <__ssputs_r>
 8006888:	3001      	adds	r0, #1
 800688a:	d100      	bne.n	800688e <_svfiprintf_r+0x6a>
 800688c:	e0ae      	b.n	80069ec <_svfiprintf_r+0x1c8>
 800688e:	6963      	ldr	r3, [r4, #20]
 8006890:	9a05      	ldr	r2, [sp, #20]
 8006892:	189b      	adds	r3, r3, r2
 8006894:	6163      	str	r3, [r4, #20]
 8006896:	782b      	ldrb	r3, [r5, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d100      	bne.n	800689e <_svfiprintf_r+0x7a>
 800689c:	e0a6      	b.n	80069ec <_svfiprintf_r+0x1c8>
 800689e:	2201      	movs	r2, #1
 80068a0:	2300      	movs	r3, #0
 80068a2:	4252      	negs	r2, r2
 80068a4:	6062      	str	r2, [r4, #4]
 80068a6:	a904      	add	r1, sp, #16
 80068a8:	3254      	adds	r2, #84	@ 0x54
 80068aa:	1852      	adds	r2, r2, r1
 80068ac:	1c6e      	adds	r6, r5, #1
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	60e3      	str	r3, [r4, #12]
 80068b2:	60a3      	str	r3, [r4, #8]
 80068b4:	7013      	strb	r3, [r2, #0]
 80068b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80068b8:	4b54      	ldr	r3, [pc, #336]	@ (8006a0c <_svfiprintf_r+0x1e8>)
 80068ba:	2205      	movs	r2, #5
 80068bc:	0018      	movs	r0, r3
 80068be:	7831      	ldrb	r1, [r6, #0]
 80068c0:	9305      	str	r3, [sp, #20]
 80068c2:	f000 fa3e 	bl	8006d42 <memchr>
 80068c6:	1c75      	adds	r5, r6, #1
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d11f      	bne.n	800690c <_svfiprintf_r+0xe8>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	06d3      	lsls	r3, r2, #27
 80068d0:	d504      	bpl.n	80068dc <_svfiprintf_r+0xb8>
 80068d2:	2353      	movs	r3, #83	@ 0x53
 80068d4:	a904      	add	r1, sp, #16
 80068d6:	185b      	adds	r3, r3, r1
 80068d8:	2120      	movs	r1, #32
 80068da:	7019      	strb	r1, [r3, #0]
 80068dc:	0713      	lsls	r3, r2, #28
 80068de:	d504      	bpl.n	80068ea <_svfiprintf_r+0xc6>
 80068e0:	2353      	movs	r3, #83	@ 0x53
 80068e2:	a904      	add	r1, sp, #16
 80068e4:	185b      	adds	r3, r3, r1
 80068e6:	212b      	movs	r1, #43	@ 0x2b
 80068e8:	7019      	strb	r1, [r3, #0]
 80068ea:	7833      	ldrb	r3, [r6, #0]
 80068ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80068ee:	d016      	beq.n	800691e <_svfiprintf_r+0xfa>
 80068f0:	0035      	movs	r5, r6
 80068f2:	2100      	movs	r1, #0
 80068f4:	200a      	movs	r0, #10
 80068f6:	68e3      	ldr	r3, [r4, #12]
 80068f8:	782a      	ldrb	r2, [r5, #0]
 80068fa:	1c6e      	adds	r6, r5, #1
 80068fc:	3a30      	subs	r2, #48	@ 0x30
 80068fe:	2a09      	cmp	r2, #9
 8006900:	d950      	bls.n	80069a4 <_svfiprintf_r+0x180>
 8006902:	2900      	cmp	r1, #0
 8006904:	d111      	bne.n	800692a <_svfiprintf_r+0x106>
 8006906:	e017      	b.n	8006938 <_svfiprintf_r+0x114>
 8006908:	3501      	adds	r5, #1
 800690a:	e7af      	b.n	800686c <_svfiprintf_r+0x48>
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	1ac0      	subs	r0, r0, r3
 8006912:	2301      	movs	r3, #1
 8006914:	4083      	lsls	r3, r0
 8006916:	4313      	orrs	r3, r2
 8006918:	002e      	movs	r6, r5
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	e7cc      	b.n	80068b8 <_svfiprintf_r+0x94>
 800691e:	9b07      	ldr	r3, [sp, #28]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	9107      	str	r1, [sp, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	db01      	blt.n	800692e <_svfiprintf_r+0x10a>
 800692a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800692c:	e004      	b.n	8006938 <_svfiprintf_r+0x114>
 800692e:	425b      	negs	r3, r3
 8006930:	60e3      	str	r3, [r4, #12]
 8006932:	2302      	movs	r3, #2
 8006934:	4313      	orrs	r3, r2
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	782b      	ldrb	r3, [r5, #0]
 800693a:	2b2e      	cmp	r3, #46	@ 0x2e
 800693c:	d10c      	bne.n	8006958 <_svfiprintf_r+0x134>
 800693e:	786b      	ldrb	r3, [r5, #1]
 8006940:	2b2a      	cmp	r3, #42	@ 0x2a
 8006942:	d134      	bne.n	80069ae <_svfiprintf_r+0x18a>
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	3502      	adds	r5, #2
 8006948:	1d1a      	adds	r2, r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	9207      	str	r2, [sp, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	da01      	bge.n	8006956 <_svfiprintf_r+0x132>
 8006952:	2301      	movs	r3, #1
 8006954:	425b      	negs	r3, r3
 8006956:	9309      	str	r3, [sp, #36]	@ 0x24
 8006958:	4e2d      	ldr	r6, [pc, #180]	@ (8006a10 <_svfiprintf_r+0x1ec>)
 800695a:	2203      	movs	r2, #3
 800695c:	0030      	movs	r0, r6
 800695e:	7829      	ldrb	r1, [r5, #0]
 8006960:	f000 f9ef 	bl	8006d42 <memchr>
 8006964:	2800      	cmp	r0, #0
 8006966:	d006      	beq.n	8006976 <_svfiprintf_r+0x152>
 8006968:	2340      	movs	r3, #64	@ 0x40
 800696a:	1b80      	subs	r0, r0, r6
 800696c:	4083      	lsls	r3, r0
 800696e:	6822      	ldr	r2, [r4, #0]
 8006970:	3501      	adds	r5, #1
 8006972:	4313      	orrs	r3, r2
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	7829      	ldrb	r1, [r5, #0]
 8006978:	2206      	movs	r2, #6
 800697a:	4826      	ldr	r0, [pc, #152]	@ (8006a14 <_svfiprintf_r+0x1f0>)
 800697c:	1c6e      	adds	r6, r5, #1
 800697e:	7621      	strb	r1, [r4, #24]
 8006980:	f000 f9df 	bl	8006d42 <memchr>
 8006984:	2800      	cmp	r0, #0
 8006986:	d038      	beq.n	80069fa <_svfiprintf_r+0x1d6>
 8006988:	4b23      	ldr	r3, [pc, #140]	@ (8006a18 <_svfiprintf_r+0x1f4>)
 800698a:	2b00      	cmp	r3, #0
 800698c:	d122      	bne.n	80069d4 <_svfiprintf_r+0x1b0>
 800698e:	2207      	movs	r2, #7
 8006990:	9b07      	ldr	r3, [sp, #28]
 8006992:	3307      	adds	r3, #7
 8006994:	4393      	bics	r3, r2
 8006996:	3308      	adds	r3, #8
 8006998:	9307      	str	r3, [sp, #28]
 800699a:	6963      	ldr	r3, [r4, #20]
 800699c:	9a04      	ldr	r2, [sp, #16]
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	6163      	str	r3, [r4, #20]
 80069a2:	e762      	b.n	800686a <_svfiprintf_r+0x46>
 80069a4:	4343      	muls	r3, r0
 80069a6:	0035      	movs	r5, r6
 80069a8:	2101      	movs	r1, #1
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	e7a4      	b.n	80068f8 <_svfiprintf_r+0xd4>
 80069ae:	2300      	movs	r3, #0
 80069b0:	200a      	movs	r0, #10
 80069b2:	0019      	movs	r1, r3
 80069b4:	3501      	adds	r5, #1
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	782a      	ldrb	r2, [r5, #0]
 80069ba:	1c6e      	adds	r6, r5, #1
 80069bc:	3a30      	subs	r2, #48	@ 0x30
 80069be:	2a09      	cmp	r2, #9
 80069c0:	d903      	bls.n	80069ca <_svfiprintf_r+0x1a6>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0c8      	beq.n	8006958 <_svfiprintf_r+0x134>
 80069c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80069c8:	e7c6      	b.n	8006958 <_svfiprintf_r+0x134>
 80069ca:	4341      	muls	r1, r0
 80069cc:	0035      	movs	r5, r6
 80069ce:	2301      	movs	r3, #1
 80069d0:	1889      	adds	r1, r1, r2
 80069d2:	e7f1      	b.n	80069b8 <_svfiprintf_r+0x194>
 80069d4:	aa07      	add	r2, sp, #28
 80069d6:	9200      	str	r2, [sp, #0]
 80069d8:	0021      	movs	r1, r4
 80069da:	003a      	movs	r2, r7
 80069dc:	4b0f      	ldr	r3, [pc, #60]	@ (8006a1c <_svfiprintf_r+0x1f8>)
 80069de:	9803      	ldr	r0, [sp, #12]
 80069e0:	e000      	b.n	80069e4 <_svfiprintf_r+0x1c0>
 80069e2:	bf00      	nop
 80069e4:	9004      	str	r0, [sp, #16]
 80069e6:	9b04      	ldr	r3, [sp, #16]
 80069e8:	3301      	adds	r3, #1
 80069ea:	d1d6      	bne.n	800699a <_svfiprintf_r+0x176>
 80069ec:	89bb      	ldrh	r3, [r7, #12]
 80069ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80069f0:	065b      	lsls	r3, r3, #25
 80069f2:	d500      	bpl.n	80069f6 <_svfiprintf_r+0x1d2>
 80069f4:	e72c      	b.n	8006850 <_svfiprintf_r+0x2c>
 80069f6:	b021      	add	sp, #132	@ 0x84
 80069f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fa:	aa07      	add	r2, sp, #28
 80069fc:	9200      	str	r2, [sp, #0]
 80069fe:	0021      	movs	r1, r4
 8006a00:	003a      	movs	r2, r7
 8006a02:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <_svfiprintf_r+0x1f8>)
 8006a04:	9803      	ldr	r0, [sp, #12]
 8006a06:	f000 f87b 	bl	8006b00 <_printf_i>
 8006a0a:	e7eb      	b.n	80069e4 <_svfiprintf_r+0x1c0>
 8006a0c:	08006eec 	.word	0x08006eec
 8006a10:	08006ef2 	.word	0x08006ef2
 8006a14:	08006ef6 	.word	0x08006ef6
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	08006765 	.word	0x08006765

08006a20 <_printf_common>:
 8006a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a22:	0016      	movs	r6, r2
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	688a      	ldr	r2, [r1, #8]
 8006a28:	690b      	ldr	r3, [r1, #16]
 8006a2a:	000c      	movs	r4, r1
 8006a2c:	9000      	str	r0, [sp, #0]
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	da00      	bge.n	8006a34 <_printf_common+0x14>
 8006a32:	0013      	movs	r3, r2
 8006a34:	0022      	movs	r2, r4
 8006a36:	6033      	str	r3, [r6, #0]
 8006a38:	3243      	adds	r2, #67	@ 0x43
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	d001      	beq.n	8006a44 <_printf_common+0x24>
 8006a40:	3301      	adds	r3, #1
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	069b      	lsls	r3, r3, #26
 8006a48:	d502      	bpl.n	8006a50 <_printf_common+0x30>
 8006a4a:	6833      	ldr	r3, [r6, #0]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	6033      	str	r3, [r6, #0]
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	2306      	movs	r3, #6
 8006a54:	0015      	movs	r5, r2
 8006a56:	401d      	ands	r5, r3
 8006a58:	421a      	tst	r2, r3
 8006a5a:	d027      	beq.n	8006aac <_printf_common+0x8c>
 8006a5c:	0023      	movs	r3, r4
 8006a5e:	3343      	adds	r3, #67	@ 0x43
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	1e5a      	subs	r2, r3, #1
 8006a64:	4193      	sbcs	r3, r2
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	0692      	lsls	r2, r2, #26
 8006a6a:	d430      	bmi.n	8006ace <_printf_common+0xae>
 8006a6c:	0022      	movs	r2, r4
 8006a6e:	9901      	ldr	r1, [sp, #4]
 8006a70:	9800      	ldr	r0, [sp, #0]
 8006a72:	9d08      	ldr	r5, [sp, #32]
 8006a74:	3243      	adds	r2, #67	@ 0x43
 8006a76:	47a8      	blx	r5
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d025      	beq.n	8006ac8 <_printf_common+0xa8>
 8006a7c:	2206      	movs	r2, #6
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	2500      	movs	r5, #0
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d105      	bne.n	8006a94 <_printf_common+0x74>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	68e5      	ldr	r5, [r4, #12]
 8006a8c:	1aed      	subs	r5, r5, r3
 8006a8e:	43eb      	mvns	r3, r5
 8006a90:	17db      	asrs	r3, r3, #31
 8006a92:	401d      	ands	r5, r3
 8006a94:	68a3      	ldr	r3, [r4, #8]
 8006a96:	6922      	ldr	r2, [r4, #16]
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	dd01      	ble.n	8006aa0 <_printf_common+0x80>
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	18ed      	adds	r5, r5, r3
 8006aa0:	2600      	movs	r6, #0
 8006aa2:	42b5      	cmp	r5, r6
 8006aa4:	d120      	bne.n	8006ae8 <_printf_common+0xc8>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e010      	b.n	8006acc <_printf_common+0xac>
 8006aaa:	3501      	adds	r5, #1
 8006aac:	68e3      	ldr	r3, [r4, #12]
 8006aae:	6832      	ldr	r2, [r6, #0]
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	42ab      	cmp	r3, r5
 8006ab4:	ddd2      	ble.n	8006a5c <_printf_common+0x3c>
 8006ab6:	0022      	movs	r2, r4
 8006ab8:	2301      	movs	r3, #1
 8006aba:	9901      	ldr	r1, [sp, #4]
 8006abc:	9800      	ldr	r0, [sp, #0]
 8006abe:	9f08      	ldr	r7, [sp, #32]
 8006ac0:	3219      	adds	r2, #25
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d1f0      	bne.n	8006aaa <_printf_common+0x8a>
 8006ac8:	2001      	movs	r0, #1
 8006aca:	4240      	negs	r0, r0
 8006acc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ace:	2030      	movs	r0, #48	@ 0x30
 8006ad0:	18e1      	adds	r1, r4, r3
 8006ad2:	3143      	adds	r1, #67	@ 0x43
 8006ad4:	7008      	strb	r0, [r1, #0]
 8006ad6:	0021      	movs	r1, r4
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	3145      	adds	r1, #69	@ 0x45
 8006adc:	7809      	ldrb	r1, [r1, #0]
 8006ade:	18a2      	adds	r2, r4, r2
 8006ae0:	3243      	adds	r2, #67	@ 0x43
 8006ae2:	3302      	adds	r3, #2
 8006ae4:	7011      	strb	r1, [r2, #0]
 8006ae6:	e7c1      	b.n	8006a6c <_printf_common+0x4c>
 8006ae8:	0022      	movs	r2, r4
 8006aea:	2301      	movs	r3, #1
 8006aec:	9901      	ldr	r1, [sp, #4]
 8006aee:	9800      	ldr	r0, [sp, #0]
 8006af0:	9f08      	ldr	r7, [sp, #32]
 8006af2:	321a      	adds	r2, #26
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	d0e6      	beq.n	8006ac8 <_printf_common+0xa8>
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7d1      	b.n	8006aa2 <_printf_common+0x82>
	...

08006b00 <_printf_i>:
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	b08b      	sub	sp, #44	@ 0x2c
 8006b04:	9206      	str	r2, [sp, #24]
 8006b06:	000a      	movs	r2, r1
 8006b08:	3243      	adds	r2, #67	@ 0x43
 8006b0a:	9307      	str	r3, [sp, #28]
 8006b0c:	9005      	str	r0, [sp, #20]
 8006b0e:	9203      	str	r2, [sp, #12]
 8006b10:	7e0a      	ldrb	r2, [r1, #24]
 8006b12:	000c      	movs	r4, r1
 8006b14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b16:	2a78      	cmp	r2, #120	@ 0x78
 8006b18:	d809      	bhi.n	8006b2e <_printf_i+0x2e>
 8006b1a:	2a62      	cmp	r2, #98	@ 0x62
 8006b1c:	d80b      	bhi.n	8006b36 <_printf_i+0x36>
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d100      	bne.n	8006b24 <_printf_i+0x24>
 8006b22:	e0bc      	b.n	8006c9e <_printf_i+0x19e>
 8006b24:	497b      	ldr	r1, [pc, #492]	@ (8006d14 <_printf_i+0x214>)
 8006b26:	9104      	str	r1, [sp, #16]
 8006b28:	2a58      	cmp	r2, #88	@ 0x58
 8006b2a:	d100      	bne.n	8006b2e <_printf_i+0x2e>
 8006b2c:	e090      	b.n	8006c50 <_printf_i+0x150>
 8006b2e:	0025      	movs	r5, r4
 8006b30:	3542      	adds	r5, #66	@ 0x42
 8006b32:	702a      	strb	r2, [r5, #0]
 8006b34:	e022      	b.n	8006b7c <_printf_i+0x7c>
 8006b36:	0010      	movs	r0, r2
 8006b38:	3863      	subs	r0, #99	@ 0x63
 8006b3a:	2815      	cmp	r0, #21
 8006b3c:	d8f7      	bhi.n	8006b2e <_printf_i+0x2e>
 8006b3e:	f7f9 faeb 	bl	8000118 <__gnu_thumb1_case_shi>
 8006b42:	0016      	.short	0x0016
 8006b44:	fff6001f 	.word	0xfff6001f
 8006b48:	fff6fff6 	.word	0xfff6fff6
 8006b4c:	001ffff6 	.word	0x001ffff6
 8006b50:	fff6fff6 	.word	0xfff6fff6
 8006b54:	fff6fff6 	.word	0xfff6fff6
 8006b58:	003600a1 	.word	0x003600a1
 8006b5c:	fff60080 	.word	0xfff60080
 8006b60:	00b2fff6 	.word	0x00b2fff6
 8006b64:	0036fff6 	.word	0x0036fff6
 8006b68:	fff6fff6 	.word	0xfff6fff6
 8006b6c:	0084      	.short	0x0084
 8006b6e:	0025      	movs	r5, r4
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	3542      	adds	r5, #66	@ 0x42
 8006b74:	1d11      	adds	r1, r2, #4
 8006b76:	6019      	str	r1, [r3, #0]
 8006b78:	6813      	ldr	r3, [r2, #0]
 8006b7a:	702b      	strb	r3, [r5, #0]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0a0      	b.n	8006cc2 <_printf_i+0x1c2>
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	6809      	ldr	r1, [r1, #0]
 8006b84:	1d02      	adds	r2, r0, #4
 8006b86:	060d      	lsls	r5, r1, #24
 8006b88:	d50b      	bpl.n	8006ba2 <_printf_i+0xa2>
 8006b8a:	6806      	ldr	r6, [r0, #0]
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	da03      	bge.n	8006b9a <_printf_i+0x9a>
 8006b92:	232d      	movs	r3, #45	@ 0x2d
 8006b94:	9a03      	ldr	r2, [sp, #12]
 8006b96:	4276      	negs	r6, r6
 8006b98:	7013      	strb	r3, [r2, #0]
 8006b9a:	4b5e      	ldr	r3, [pc, #376]	@ (8006d14 <_printf_i+0x214>)
 8006b9c:	270a      	movs	r7, #10
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	e018      	b.n	8006bd4 <_printf_i+0xd4>
 8006ba2:	6806      	ldr	r6, [r0, #0]
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	0649      	lsls	r1, r1, #25
 8006ba8:	d5f1      	bpl.n	8006b8e <_printf_i+0x8e>
 8006baa:	b236      	sxth	r6, r6
 8006bac:	e7ef      	b.n	8006b8e <_printf_i+0x8e>
 8006bae:	6808      	ldr	r0, [r1, #0]
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	c940      	ldmia	r1!, {r6}
 8006bb4:	0605      	lsls	r5, r0, #24
 8006bb6:	d402      	bmi.n	8006bbe <_printf_i+0xbe>
 8006bb8:	0640      	lsls	r0, r0, #25
 8006bba:	d500      	bpl.n	8006bbe <_printf_i+0xbe>
 8006bbc:	b2b6      	uxth	r6, r6
 8006bbe:	6019      	str	r1, [r3, #0]
 8006bc0:	4b54      	ldr	r3, [pc, #336]	@ (8006d14 <_printf_i+0x214>)
 8006bc2:	270a      	movs	r7, #10
 8006bc4:	9304      	str	r3, [sp, #16]
 8006bc6:	2a6f      	cmp	r2, #111	@ 0x6f
 8006bc8:	d100      	bne.n	8006bcc <_printf_i+0xcc>
 8006bca:	3f02      	subs	r7, #2
 8006bcc:	0023      	movs	r3, r4
 8006bce:	2200      	movs	r2, #0
 8006bd0:	3343      	adds	r3, #67	@ 0x43
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	db03      	blt.n	8006be4 <_printf_i+0xe4>
 8006bdc:	2104      	movs	r1, #4
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	438a      	bics	r2, r1
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	2e00      	cmp	r6, #0
 8006be6:	d102      	bne.n	8006bee <_printf_i+0xee>
 8006be8:	9d03      	ldr	r5, [sp, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <_printf_i+0x108>
 8006bee:	9d03      	ldr	r5, [sp, #12]
 8006bf0:	0030      	movs	r0, r6
 8006bf2:	0039      	movs	r1, r7
 8006bf4:	f7f9 fb20 	bl	8000238 <__aeabi_uidivmod>
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	3d01      	subs	r5, #1
 8006bfc:	5c5b      	ldrb	r3, [r3, r1]
 8006bfe:	702b      	strb	r3, [r5, #0]
 8006c00:	0033      	movs	r3, r6
 8006c02:	0006      	movs	r6, r0
 8006c04:	429f      	cmp	r7, r3
 8006c06:	d9f3      	bls.n	8006bf0 <_printf_i+0xf0>
 8006c08:	2f08      	cmp	r7, #8
 8006c0a:	d109      	bne.n	8006c20 <_printf_i+0x120>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07db      	lsls	r3, r3, #31
 8006c10:	d506      	bpl.n	8006c20 <_printf_i+0x120>
 8006c12:	6862      	ldr	r2, [r4, #4]
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	dc02      	bgt.n	8006c20 <_printf_i+0x120>
 8006c1a:	2330      	movs	r3, #48	@ 0x30
 8006c1c:	3d01      	subs	r5, #1
 8006c1e:	702b      	strb	r3, [r5, #0]
 8006c20:	9b03      	ldr	r3, [sp, #12]
 8006c22:	1b5b      	subs	r3, r3, r5
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	9b07      	ldr	r3, [sp, #28]
 8006c28:	0021      	movs	r1, r4
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	9805      	ldr	r0, [sp, #20]
 8006c2e:	9b06      	ldr	r3, [sp, #24]
 8006c30:	aa09      	add	r2, sp, #36	@ 0x24
 8006c32:	f7ff fef5 	bl	8006a20 <_printf_common>
 8006c36:	3001      	adds	r0, #1
 8006c38:	d148      	bne.n	8006ccc <_printf_i+0x1cc>
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	4240      	negs	r0, r0
 8006c3e:	b00b      	add	sp, #44	@ 0x2c
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c42:	2220      	movs	r2, #32
 8006c44:	6809      	ldr	r1, [r1, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	2278      	movs	r2, #120	@ 0x78
 8006c4c:	4932      	ldr	r1, [pc, #200]	@ (8006d18 <_printf_i+0x218>)
 8006c4e:	9104      	str	r1, [sp, #16]
 8006c50:	0021      	movs	r1, r4
 8006c52:	3145      	adds	r1, #69	@ 0x45
 8006c54:	700a      	strb	r2, [r1, #0]
 8006c56:	6819      	ldr	r1, [r3, #0]
 8006c58:	6822      	ldr	r2, [r4, #0]
 8006c5a:	c940      	ldmia	r1!, {r6}
 8006c5c:	0610      	lsls	r0, r2, #24
 8006c5e:	d402      	bmi.n	8006c66 <_printf_i+0x166>
 8006c60:	0650      	lsls	r0, r2, #25
 8006c62:	d500      	bpl.n	8006c66 <_printf_i+0x166>
 8006c64:	b2b6      	uxth	r6, r6
 8006c66:	6019      	str	r1, [r3, #0]
 8006c68:	07d3      	lsls	r3, r2, #31
 8006c6a:	d502      	bpl.n	8006c72 <_printf_i+0x172>
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	d001      	beq.n	8006c7a <_printf_i+0x17a>
 8006c76:	2710      	movs	r7, #16
 8006c78:	e7a8      	b.n	8006bcc <_printf_i+0xcc>
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	4393      	bics	r3, r2
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	e7f8      	b.n	8006c76 <_printf_i+0x176>
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	680d      	ldr	r5, [r1, #0]
 8006c88:	1d10      	adds	r0, r2, #4
 8006c8a:	6949      	ldr	r1, [r1, #20]
 8006c8c:	6018      	str	r0, [r3, #0]
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	062e      	lsls	r6, r5, #24
 8006c92:	d501      	bpl.n	8006c98 <_printf_i+0x198>
 8006c94:	6019      	str	r1, [r3, #0]
 8006c96:	e002      	b.n	8006c9e <_printf_i+0x19e>
 8006c98:	066d      	lsls	r5, r5, #25
 8006c9a:	d5fb      	bpl.n	8006c94 <_printf_i+0x194>
 8006c9c:	8019      	strh	r1, [r3, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9d03      	ldr	r5, [sp, #12]
 8006ca2:	6123      	str	r3, [r4, #16]
 8006ca4:	e7bf      	b.n	8006c26 <_printf_i+0x126>
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	1d11      	adds	r1, r2, #4
 8006caa:	6019      	str	r1, [r3, #0]
 8006cac:	6815      	ldr	r5, [r2, #0]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	0028      	movs	r0, r5
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	f000 f845 	bl	8006d42 <memchr>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d001      	beq.n	8006cc0 <_printf_i+0x1c0>
 8006cbc:	1b40      	subs	r0, r0, r5
 8006cbe:	6060      	str	r0, [r4, #4]
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9a03      	ldr	r2, [sp, #12]
 8006cc8:	7013      	strb	r3, [r2, #0]
 8006cca:	e7ac      	b.n	8006c26 <_printf_i+0x126>
 8006ccc:	002a      	movs	r2, r5
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	9906      	ldr	r1, [sp, #24]
 8006cd2:	9805      	ldr	r0, [sp, #20]
 8006cd4:	9d07      	ldr	r5, [sp, #28]
 8006cd6:	47a8      	blx	r5
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d0ae      	beq.n	8006c3a <_printf_i+0x13a>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	079b      	lsls	r3, r3, #30
 8006ce0:	d415      	bmi.n	8006d0e <_printf_i+0x20e>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce4:	68e0      	ldr	r0, [r4, #12]
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	daa9      	bge.n	8006c3e <_printf_i+0x13e>
 8006cea:	0018      	movs	r0, r3
 8006cec:	e7a7      	b.n	8006c3e <_printf_i+0x13e>
 8006cee:	0022      	movs	r2, r4
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	9906      	ldr	r1, [sp, #24]
 8006cf4:	9805      	ldr	r0, [sp, #20]
 8006cf6:	9e07      	ldr	r6, [sp, #28]
 8006cf8:	3219      	adds	r2, #25
 8006cfa:	47b0      	blx	r6
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d09c      	beq.n	8006c3a <_printf_i+0x13a>
 8006d00:	3501      	adds	r5, #1
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dcf0      	bgt.n	8006cee <_printf_i+0x1ee>
 8006d0c:	e7e9      	b.n	8006ce2 <_printf_i+0x1e2>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	e7f7      	b.n	8006d02 <_printf_i+0x202>
 8006d12:	46c0      	nop			@ (mov r8, r8)
 8006d14:	08006efd 	.word	0x08006efd
 8006d18:	08006f0e 	.word	0x08006f0e

08006d1c <memmove>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4288      	cmp	r0, r1
 8006d20:	d806      	bhi.n	8006d30 <memmove+0x14>
 8006d22:	2300      	movs	r3, #0
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d008      	beq.n	8006d3a <memmove+0x1e>
 8006d28:	5ccc      	ldrb	r4, [r1, r3]
 8006d2a:	54c4      	strb	r4, [r0, r3]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	e7f9      	b.n	8006d24 <memmove+0x8>
 8006d30:	188b      	adds	r3, r1, r2
 8006d32:	4298      	cmp	r0, r3
 8006d34:	d2f5      	bcs.n	8006d22 <memmove+0x6>
 8006d36:	3a01      	subs	r2, #1
 8006d38:	d200      	bcs.n	8006d3c <memmove+0x20>
 8006d3a:	bd10      	pop	{r4, pc}
 8006d3c:	5c8b      	ldrb	r3, [r1, r2]
 8006d3e:	5483      	strb	r3, [r0, r2]
 8006d40:	e7f9      	b.n	8006d36 <memmove+0x1a>

08006d42 <memchr>:
 8006d42:	b2c9      	uxtb	r1, r1
 8006d44:	1882      	adds	r2, r0, r2
 8006d46:	4290      	cmp	r0, r2
 8006d48:	d101      	bne.n	8006d4e <memchr+0xc>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	4770      	bx	lr
 8006d4e:	7803      	ldrb	r3, [r0, #0]
 8006d50:	428b      	cmp	r3, r1
 8006d52:	d0fb      	beq.n	8006d4c <memchr+0xa>
 8006d54:	3001      	adds	r0, #1
 8006d56:	e7f6      	b.n	8006d46 <memchr+0x4>

08006d58 <_init>:
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5e:	bc08      	pop	{r3}
 8006d60:	469e      	mov	lr, r3
 8006d62:	4770      	bx	lr

08006d64 <_fini>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr
