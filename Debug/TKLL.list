
TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e2c  08006e2c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000000  08006e2c  08006e2c  0000805c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e2c  08006e2c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e2c  08006e2c  00007e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e30  08006e30  00007e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006e34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000005c  08006e90  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006e90  000083d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001546e  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351a  00000000  00000000  0001d4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00020a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f65  00000000  00000000  00021db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d83  00000000  00000000  00022d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b591  00000000  00000000  00036aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b647  00000000  00000000  00052031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b50  00000000  00000000  000bd6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000c220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c48 	.word	0x08006c48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006c48 	.word	0x08006c48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000250:	240f      	movs	r4, #15
 8000252:	193a      	adds	r2, r7, r4
 8000254:	1df9      	adds	r1, r7, #7
 8000256:	4806      	ldr	r0, [pc, #24]	@ (8000270 <RC522_SPI_Transfer+0x2c>)
 8000258:	2364      	movs	r3, #100	@ 0x64
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	2301      	movs	r3, #1
 800025e:	f003 fc65 	bl	8003b2c <HAL_SPI_TransmitReceive>

	return rx_data;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	781b      	ldrb	r3, [r3, #0]
}
 8000266:	0018      	movs	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	b005      	add	sp, #20
 800026c:	bd90      	pop	{r4, r7, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	200000e4 	.word	0x200000e4

08000274 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	1dbb      	adds	r3, r7, #6
 8000282:	1c0a      	adds	r2, r1, #0
 8000284:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000286:	2390      	movs	r3, #144	@ 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2200      	movs	r2, #0
 800028c:	2110      	movs	r1, #16
 800028e:	0018      	movs	r0, r3
 8000290:	f002 f9ad 	bl	80025ee <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	227e      	movs	r2, #126	@ 0x7e
 800029e:	4013      	ands	r3, r2
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffce 	bl	8000244 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80002a8:	1dbb      	adds	r3, r7, #6
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	0018      	movs	r0, r3
 80002ae:	f7ff ffc9 	bl	8000244 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80002b2:	2390      	movs	r3, #144	@ 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f002 f997 	bl	80025ee <HAL_GPIO_WritePin>
}
 80002c0:	46c0      	nop			@ (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b002      	add	sp, #8
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	0002      	movs	r2, r0
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80002d4:	2390      	movs	r3, #144	@ 0x90
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	2200      	movs	r2, #0
 80002da:	2110      	movs	r1, #16
 80002dc:	0018      	movs	r0, r3
 80002de:	f002 f986 	bl	80025ee <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	227e      	movs	r2, #126	@ 0x7e
 80002ec:	4013      	ands	r3, r2
 80002ee:	b25b      	sxtb	r3, r3
 80002f0:	2280      	movs	r2, #128	@ 0x80
 80002f2:	4252      	negs	r2, r2
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ffa2 	bl	8000244 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000300:	250f      	movs	r5, #15
 8000302:	197c      	adds	r4, r7, r5
 8000304:	2000      	movs	r0, #0
 8000306:	f7ff ff9d 	bl	8000244 <RC522_SPI_Transfer>
 800030a:	0003      	movs	r3, r0
 800030c:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800030e:	2390      	movs	r3, #144	@ 0x90
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	0018      	movs	r0, r3
 8000318:	f002 f969 	bl	80025ee <HAL_GPIO_WritePin>

	return val;
 800031c:	197b      	adds	r3, r7, r5
 800031e:	781b      	ldrb	r3, [r3, #0]

}
 8000320:	0018      	movs	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	b004      	add	sp, #16
 8000326:	bdb0      	pop	{r4, r5, r7, pc}

08000328 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000328:	b5b0      	push	{r4, r5, r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	0002      	movs	r2, r0
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	1dbb      	adds	r3, r7, #6
 8000336:	1c0a      	adds	r2, r1, #0
 8000338:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800033a:	250f      	movs	r5, #15
 800033c:	197c      	adds	r4, r7, r5
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	0018      	movs	r0, r3
 8000344:	f7ff ffc0 	bl	80002c8 <Read_MFRC522>
 8000348:	0003      	movs	r3, r0
 800034a:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800034c:	197a      	adds	r2, r7, r5
 800034e:	1dbb      	adds	r3, r7, #6
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	4313      	orrs	r3, r2
 8000356:	b2da      	uxtb	r2, r3
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f7ff ff88 	bl	8000274 <Write_MFRC522>
}
 8000364:	46c0      	nop			@ (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b004      	add	sp, #16
 800036a:	bdb0      	pop	{r4, r5, r7, pc}

0800036c <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800036c:	b5b0      	push	{r4, r5, r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	0002      	movs	r2, r0
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	1dbb      	adds	r3, r7, #6
 800037a:	1c0a      	adds	r2, r1, #0
 800037c:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800037e:	250f      	movs	r5, #15
 8000380:	197c      	adds	r4, r7, r5
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	0018      	movs	r0, r3
 8000388:	f7ff ff9e 	bl	80002c8 <Read_MFRC522>
 800038c:	0003      	movs	r3, r0
 800038e:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000390:	1dbb      	adds	r3, r7, #6
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b25b      	sxtb	r3, r3
 8000396:	43db      	mvns	r3, r3
 8000398:	b25b      	sxtb	r3, r3
 800039a:	197a      	adds	r2, r7, r5
 800039c:	7812      	ldrb	r2, [r2, #0]
 800039e:	b252      	sxtb	r2, r2
 80003a0:	4013      	ands	r3, r2
 80003a2:	b25b      	sxtb	r3, r3
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	0011      	movs	r1, r2
 80003ac:	0018      	movs	r0, r3
 80003ae:	f7ff ff61 	bl	8000274 <Write_MFRC522>
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b004      	add	sp, #16
 80003b8:	bdb0      	pop	{r4, r5, r7, pc}

080003ba <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80003be:	2014      	movs	r0, #20
 80003c0:	f7ff ff82 	bl	80002c8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80003c4:	2103      	movs	r1, #3
 80003c6:	2014      	movs	r0, #20
 80003c8:	f7ff ffae 	bl	8000328 <SetBitMask>
}
 80003cc:	46c0      	nop			@ (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80003d6:	210f      	movs	r1, #15
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff ff4b 	bl	8000274 <Write_MFRC522>
}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80003e8:	2390      	movs	r3, #144	@ 0x90
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 f8fc 	bl	80025ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80003f6:	2390      	movs	r3, #144	@ 0x90
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	2201      	movs	r2, #1
 80003fc:	2101      	movs	r1, #1
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 f8f5 	bl	80025ee <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000404:	f7ff ffe5 	bl	80003d2 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000408:	218d      	movs	r1, #141	@ 0x8d
 800040a:	202a      	movs	r0, #42	@ 0x2a
 800040c:	f7ff ff32 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000410:	213e      	movs	r1, #62	@ 0x3e
 8000412:	202b      	movs	r0, #43	@ 0x2b
 8000414:	f7ff ff2e 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000418:	211e      	movs	r1, #30
 800041a:	202d      	movs	r0, #45	@ 0x2d
 800041c:	f7ff ff2a 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000420:	2100      	movs	r1, #0
 8000422:	202c      	movs	r0, #44	@ 0x2c
 8000424:	f7ff ff26 	bl	8000274 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000428:	2140      	movs	r1, #64	@ 0x40
 800042a:	2015      	movs	r0, #21
 800042c:	f7ff ff22 	bl	8000274 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000430:	213d      	movs	r1, #61	@ 0x3d
 8000432:	2011      	movs	r0, #17
 8000434:	f7ff ff1e 	bl	8000274 <Write_MFRC522>

	AntennaOn();
 8000438:	f7ff ffbf 	bl	80003ba <AntennaOn>
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000442:	b5b0      	push	{r4, r5, r7, lr}
 8000444:	b088      	sub	sp, #32
 8000446:	af00      	add	r7, sp, #0
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	0011      	movs	r1, r2
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	240f      	movs	r4, #15
 8000450:	193b      	adds	r3, r7, r4
 8000452:	1c02      	adds	r2, r0, #0
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	230e      	movs	r3, #14
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	1c0a      	adds	r2, r1, #0
 800045c:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 800045e:	231f      	movs	r3, #31
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	2202      	movs	r2, #2
 8000464:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 8000466:	211e      	movs	r1, #30
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 800046e:	201d      	movs	r0, #29
 8000470:	183b      	adds	r3, r7, r0
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000476:	193b      	adds	r3, r7, r4
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b0c      	cmp	r3, #12
 800047c:	d008      	beq.n	8000490 <MFRC522_ToCard+0x4e>
 800047e:	2b0e      	cmp	r3, #14
 8000480:	d10f      	bne.n	80004a2 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2212      	movs	r2, #18
 8000486:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8000488:	183b      	adds	r3, r7, r0
 800048a:	2210      	movs	r2, #16
 800048c:	701a      	strb	r2, [r3, #0]
			break;
 800048e:	e009      	b.n	80004a4 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000490:	231e      	movs	r3, #30
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	2277      	movs	r2, #119	@ 0x77
 8000496:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8000498:	231d      	movs	r3, #29
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	2230      	movs	r2, #48	@ 0x30
 800049e:	701a      	strb	r2, [r3, #0]
			break;
 80004a0:	e000      	b.n	80004a4 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 80004a2:	46c0      	nop			@ (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80004a4:	231e      	movs	r3, #30
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	4252      	negs	r2, r2
 80004ae:	4313      	orrs	r3, r2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	0019      	movs	r1, r3
 80004b4:	2002      	movs	r0, #2
 80004b6:	f7ff fedd 	bl	8000274 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80004ba:	2180      	movs	r1, #128	@ 0x80
 80004bc:	2004      	movs	r0, #4
 80004be:	f7ff ff55 	bl	800036c <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	200a      	movs	r0, #10
 80004c6:	f7ff ff2f 	bl	8000328 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80004ca:	2100      	movs	r1, #0
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff fed1 	bl	8000274 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
 80004d6:	e00a      	b.n	80004ee <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	18d3      	adds	r3, r2, r3
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	0019      	movs	r1, r3
 80004e2:	2009      	movs	r0, #9
 80004e4:	f7ff fec6 	bl	8000274 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	3301      	adds	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	230e      	movs	r3, #14
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d3ee      	bcc.n	80004d8 <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80004fa:	240f      	movs	r4, #15
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	0019      	movs	r1, r3
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff feb6 	bl	8000274 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000508:	193b      	adds	r3, r7, r4
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b0c      	cmp	r3, #12
 800050e:	d103      	bne.n	8000518 <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	200d      	movs	r0, #13
 8000514:	f7ff ff08 	bl	8000328 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000518:	23fa      	movs	r3, #250	@ 0xfa
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800051e:	251c      	movs	r5, #28
 8000520:	197c      	adds	r4, r7, r5
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff fed0 	bl	80002c8 <Read_MFRC522>
 8000528:	0003      	movs	r3, r0
 800052a:	7023      	strb	r3, [r4, #0]
        i--;
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	3b01      	subs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00d      	beq.n	8000554 <MFRC522_ToCard+0x112>
 8000538:	197b      	adds	r3, r7, r5
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	4013      	ands	r3, r2
 8000540:	d108      	bne.n	8000554 <MFRC522_ToCard+0x112>
 8000542:	197b      	adds	r3, r7, r5
 8000544:	221d      	movs	r2, #29
 8000546:	18ba      	adds	r2, r7, r2
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	4013      	ands	r3, r2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0e4      	beq.n	800051e <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000554:	2180      	movs	r1, #128	@ 0x80
 8000556:	200d      	movs	r0, #13
 8000558:	f7ff ff08 	bl	800036c <ClearBitMask>

    if (i != 0)
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d100      	bne.n	8000564 <MFRC522_ToCard+0x122>
 8000562:	e070      	b.n	8000646 <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000564:	2006      	movs	r0, #6
 8000566:	f7ff feaf 	bl	80002c8 <Read_MFRC522>
 800056a:	0003      	movs	r3, r0
 800056c:	001a      	movs	r2, r3
 800056e:	231b      	movs	r3, #27
 8000570:	4013      	ands	r3, r2
 8000572:	d164      	bne.n	800063e <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8000574:	211f      	movs	r1, #31
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 800057c:	231c      	movs	r3, #28
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	221e      	movs	r2, #30
 8000582:	18ba      	adds	r2, r7, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	4013      	ands	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	001a      	movs	r2, r3
 800058e:	2301      	movs	r3, #1
 8000590:	4013      	ands	r3, r2
 8000592:	d002      	beq.n	800059a <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 800059a:	230f      	movs	r3, #15
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b0c      	cmp	r3, #12
 80005a2:	d150      	bne.n	8000646 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80005a4:	251c      	movs	r5, #28
 80005a6:	197c      	adds	r4, r7, r5
 80005a8:	200a      	movs	r0, #10
 80005aa:	f7ff fe8d 	bl	80002c8 <Read_MFRC522>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80005b2:	200c      	movs	r0, #12
 80005b4:	f7ff fe88 	bl	80002c8 <Read_MFRC522>
 80005b8:	0003      	movs	r3, r0
 80005ba:	0019      	movs	r1, r3
 80005bc:	2017      	movs	r0, #23
 80005be:	183b      	adds	r3, r7, r0
 80005c0:	2207      	movs	r2, #7
 80005c2:	400a      	ands	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 80005c6:	0001      	movs	r1, r0
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00a      	beq.n	80005e6 <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 80005d0:	197b      	adds	r3, r7, r5
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	00da      	lsls	r2, r3, #3
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	001a      	movs	r2, r3
 80005e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	e006      	b.n	80005f4 <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 80005e6:	231c      	movs	r3, #28
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	001a      	movs	r2, r3
 80005f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f2:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80005f4:	221c      	movs	r2, #28
 80005f6:	18bb      	adds	r3, r7, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 80005fe:	18bb      	adds	r3, r7, r2
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 8000604:	221c      	movs	r2, #28
 8000606:	18bb      	adds	r3, r7, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b10      	cmp	r3, #16
 800060c:	d902      	bls.n	8000614 <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 800060e:	18bb      	adds	r3, r7, r2
 8000610:	2210      	movs	r2, #16
 8000612:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	e00a      	b.n	8000630 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	18d4      	adds	r4, r2, r3
 8000620:	2009      	movs	r0, #9
 8000622:	f7ff fe51 	bl	80002c8 <Read_MFRC522>
 8000626:	0003      	movs	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	3301      	adds	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
 8000630:	231c      	movs	r3, #28
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	69ba      	ldr	r2, [r7, #24]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3ee      	bcc.n	800061a <MFRC522_ToCard+0x1d8>
 800063c:	e003      	b.n	8000646 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800063e:	231f      	movs	r3, #31
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000646:	231f      	movs	r3, #31
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b008      	add	sp, #32
 8000652:	bdb0      	pop	{r4, r5, r7, pc}

08000654 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	0002      	movs	r2, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000662:	2107      	movs	r1, #7
 8000664:	200d      	movs	r0, #13
 8000666:	f7ff fe05 	bl	8000274 <Write_MFRC522>

	TagType[0] = reqMode;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	1dfa      	adds	r2, r7, #7
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000672:	250f      	movs	r5, #15
 8000674:	197c      	adds	r4, r7, r5
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	2308      	movs	r3, #8
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	0013      	movs	r3, r2
 8000682:	2201      	movs	r2, #1
 8000684:	200c      	movs	r0, #12
 8000686:	f7ff fedc 	bl	8000442 <MFRC522_ToCard>
 800068a:	0003      	movs	r3, r0
 800068c:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <MFRC522_Request+0x48>
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2b10      	cmp	r3, #16
 800069a:	d003      	beq.n	80006a4 <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 800069c:	230f      	movs	r3, #15
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	781b      	ldrb	r3, [r3, #0]
}
 80006aa:	0018      	movs	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bdb0      	pop	{r4, r5, r7, pc}

080006b2 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80006b2:	b5b0      	push	{r4, r5, r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af02      	add	r7, sp, #8
 80006b8:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80006ba:	230d      	movs	r3, #13
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80006c2:	2100      	movs	r1, #0
 80006c4:	200d      	movs	r0, #13
 80006c6:	f7ff fdd5 	bl	8000274 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2293      	movs	r2, #147	@ 0x93
 80006ce:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	2220      	movs	r2, #32
 80006d6:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80006d8:	250f      	movs	r5, #15
 80006da:	197c      	adds	r4, r7, r5
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	2308      	movs	r3, #8
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	0013      	movs	r3, r2
 80006e8:	2202      	movs	r2, #2
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff fea9 	bl	8000442 <MFRC522_ToCard>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d128      	bne.n	800074e <MFRC522_Anticoll+0x9c>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80006fc:	230e      	movs	r3, #14
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e010      	b.n	8000728 <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 8000706:	200e      	movs	r0, #14
 8000708:	183b      	adds	r3, r7, r0
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	7819      	ldrb	r1, [r3, #0]
 8000712:	220d      	movs	r2, #13
 8000714:	18bb      	adds	r3, r7, r2
 8000716:	18ba      	adds	r2, r7, r2
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	404a      	eors	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 800071e:	183b      	adds	r3, r7, r0
 8000720:	781a      	ldrb	r2, [r3, #0]
 8000722:	183b      	adds	r3, r7, r0
 8000724:	3201      	adds	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	220e      	movs	r2, #14
 800072a:	18bb      	adds	r3, r7, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9e9      	bls.n	8000706 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 8000732:	18bb      	adds	r3, r7, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	220d      	movs	r2, #13
 800073e:	18ba      	adds	r2, r7, r2
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d003      	beq.n	800074e <MFRC522_Anticoll+0x9c>
		{
			status = MI_ERR;
 8000746:	230f      	movs	r3, #15
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
		}
    }

    return status;
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	781b      	ldrb	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b004      	add	sp, #16
 800075a:	bdb0      	pop	{r4, r5, r7, pc}

0800075c <rgb>:
int red = 0;
int status_led =1;
int increasing = 1;
int decreasing = 0;

void rgb(int red, int green, int blue){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100 - blue);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2264      	movs	r2, #100	@ 0x64
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <rgb+0x38>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 110 - green);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	226e      	movs	r2, #110	@ 0x6e
 8000778:	1ad2      	subs	r2, r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <rgb+0x38>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 120 - red);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2278      	movs	r2, #120	@ 0x78
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <rgb+0x38>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000148 	.word	0x20000148

08000798 <RGB_RED>:
void RGB_RED(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	rgb(100, 0, 0); // RED
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2064      	movs	r0, #100	@ 0x64
 80007a2:	f7ff ffdb 	bl	800075c <rgb>
}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <RGB_PURPLE>:
void RGB_PURPLE(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	rgb(100, 0, 100);
 80007b0:	2264      	movs	r2, #100	@ 0x64
 80007b2:	2100      	movs	r1, #0
 80007b4:	2064      	movs	r0, #100	@ 0x64
 80007b6:	f7ff ffd1 	bl	800075c <rgb>
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <RGB_GREEN>:
void RGB_GREEN(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	rgb(0, 100, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2164      	movs	r1, #100	@ 0x64
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ffc7 	bl	800075c <rgb>
}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <getKeyinput>:
 */
#include "button.h"

int count  = 0;
int buttonFlag[2] = {0,0};
void getKeyinput(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	if (count > 0) count--;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <getKeyinput+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dd04      	ble.n	80007ea <getKeyinput+0x16>
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <getKeyinput+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <getKeyinput+0x64>)
 80007e8:	601a      	str	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <getKeyinput+0x64>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10d      	bne.n	800080e <getKeyinput+0x3a>
 80007f2:	2390      	movs	r3, #144	@ 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2102      	movs	r1, #2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 fedb 	bl	80025b4 <HAL_GPIO_ReadPin>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d105      	bne.n	800080e <getKeyinput+0x3a>
		buttonFlag[0] = 1;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <getKeyinput+0x68>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
		count = 10;
 8000808:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <getKeyinput+0x64>)
 800080a:	220a      	movs	r2, #10
 800080c:	601a      	str	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <getKeyinput+0x64>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10d      	bne.n	8000832 <getKeyinput+0x5e>
 8000816:	2390      	movs	r3, #144	@ 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2108      	movs	r1, #8
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fec9 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d105      	bne.n	8000832 <getKeyinput+0x5e>
		buttonFlag[1] = 1;
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <getKeyinput+0x68>)
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
		count = 10;
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <getKeyinput+0x64>)
 800082e:	220a      	movs	r2, #10
 8000830:	601a      	str	r2, [r3, #0]
	}
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000078 	.word	0x20000078
 800083c:	2000007c 	.word	0x2000007c

08000840 <isButtonPress>:
int isButtonPress(int i){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <isButtonPress+0x2c>)
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	0092      	lsls	r2, r2, #2
 800084e:	58d3      	ldr	r3, [r2, r3]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d106      	bne.n	8000862 <isButtonPress+0x22>
		buttonFlag[i] = 0;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <isButtonPress+0x2c>)
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	0092      	lsls	r2, r2, #2
 800085a:	2100      	movs	r1, #0
 800085c:	50d1      	str	r1, [r2, r3]
		return 1;
 800085e:	2301      	movs	r3, #1
 8000860:	e000      	b.n	8000864 <isButtonPress+0x24>
	}
	return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000007c 	.word	0x2000007c

08000870 <fsm>:
 */

#include "fsm.h"

int status = INIT;
void fsm(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	switch (status){
 8000874:	4bbe      	ldr	r3, [pc, #760]	@ (8000b70 <fsm+0x300>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b06      	cmp	r3, #6
 800087a:	d900      	bls.n	800087e <fsm+0xe>
 800087c:	e167      	b.n	8000b4e <fsm+0x2de>
 800087e:	009a      	lsls	r2, r3, #2
 8000880:	4bbc      	ldr	r3, [pc, #752]	@ (8000b74 <fsm+0x304>)
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	469f      	mov	pc, r3
		case INIT:
			lcd_clear_display();
 8000888:	f000 fb9c 	bl	8000fc4 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fba3 	bl	8000fda <lcd_goto_XY>
			lcd_send_string("PUT ON YOUR CARD");
 8000894:	4bb8      	ldr	r3, [pc, #736]	@ (8000b78 <fsm+0x308>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fb7f 	bl	8000f9a <lcd_send_string>
			lcd_goto_XY(0, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 fb9b 	bl	8000fda <lcd_goto_XY>
			lcd_send_string("TO CONTROL LED");
 80008a4:	4bb5      	ldr	r3, [pc, #724]	@ (8000b7c <fsm+0x30c>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fb77 	bl	8000f9a <lcd_send_string>
			status = WAITCARD;
 80008ac:	4bb0      	ldr	r3, [pc, #704]	@ (8000b70 <fsm+0x300>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
		case WAITCARD:
			if( status_read == MI_OK && cardProcessed == 0 ){
 80008b2:	4bb3      	ldr	r3, [pc, #716]	@ (8000b80 <fsm+0x310>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d000      	beq.n	80008bc <fsm+0x4c>
 80008ba:	e14a      	b.n	8000b52 <fsm+0x2e2>
 80008bc:	4bb1      	ldr	r3, [pc, #708]	@ (8000b84 <fsm+0x314>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d000      	beq.n	80008c6 <fsm+0x56>
 80008c4:	e145      	b.n	8000b52 <fsm+0x2e2>
				// ---------MASTER CARD ----------------
				if(check_Card(readCard) == 2){
 80008c6:	4bb0      	ldr	r3, [pc, #704]	@ (8000b88 <fsm+0x318>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f995 	bl	8000bf8 <check_Card>
 80008ce:	0003      	movs	r3, r0
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d121      	bne.n	8000918 <fsm+0xa8>
					sendDataToESP32("MASTER LOGGIN\r\n");
 80008d4:	4bad      	ldr	r3, [pc, #692]	@ (8000b8c <fsm+0x31c>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 f9da 	bl	8001c90 <sendDataToESP32>
					RGB_PURPLE();
 80008dc:	f7ff ff66 	bl	80007ac <RGB_PURPLE>
					SCH_Add_Task(RGB_RED, 3000, 0);
 80008e0:	49ab      	ldr	r1, [pc, #684]	@ (8000b90 <fsm+0x320>)
 80008e2:	4bac      	ldr	r3, [pc, #688]	@ (8000b94 <fsm+0x324>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fec6 	bl	8001678 <SCH_Add_Task>
					//state_MASTER_INIT();
					lcd_clear_display();
 80008ec:	f000 fb6a 	bl	8000fc4 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fb71 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("1. ADD - DELETE");
 80008f8:	4ba7      	ldr	r3, [pc, #668]	@ (8000b98 <fsm+0x328>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fb4d 	bl	8000f9a <lcd_send_string>
					lcd_goto_XY(0, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f000 fb69 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("2. OTHER");
 8000908:	4ba4      	ldr	r3, [pc, #656]	@ (8000b9c <fsm+0x32c>)
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fb45 	bl	8000f9a <lcd_send_string>
					status = MASTER_MENU_1;
 8000910:	4b97      	ldr	r3, [pc, #604]	@ (8000b70 <fsm+0x300>)
 8000912:	2202      	movs	r2, #2
 8000914:	601a      	str	r2, [r3, #0]
					lcd_goto_XY(0, 0);
					lcd_send_string("TRY AGAIN");
					SCH_Add_Task(state_INIT, 1000, 0);
				}
			}
			break;
 8000916:	e11c      	b.n	8000b52 <fsm+0x2e2>
				else if( check_Card(readCard) == 1){
 8000918:	4b9b      	ldr	r3, [pc, #620]	@ (8000b88 <fsm+0x318>)
 800091a:	0018      	movs	r0, r3
 800091c:	f000 f96c 	bl	8000bf8 <check_Card>
 8000920:	0003      	movs	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d10c      	bne.n	8000940 <fsm+0xd0>
					sendDataToESP32("TURN LED\r\n");
 8000926:	4b9e      	ldr	r3, [pc, #632]	@ (8000ba0 <fsm+0x330>)
 8000928:	0018      	movs	r0, r3
 800092a:	f001 f9b1 	bl	8001c90 <sendDataToESP32>
					RGB_GREEN();
 800092e:	f7ff ff47 	bl	80007c0 <RGB_GREEN>
					SCH_Add_Task(RGB_RED, 3000, 0);
 8000932:	4997      	ldr	r1, [pc, #604]	@ (8000b90 <fsm+0x320>)
 8000934:	4b97      	ldr	r3, [pc, #604]	@ (8000b94 <fsm+0x324>)
 8000936:	2200      	movs	r2, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fe9d 	bl	8001678 <SCH_Add_Task>
			break;
 800093e:	e108      	b.n	8000b52 <fsm+0x2e2>
					lcd_clear_display();
 8000940:	f000 fb40 	bl	8000fc4 <lcd_clear_display>
					lcd_goto_XY(1, 0);
 8000944:	2100      	movs	r1, #0
 8000946:	2001      	movs	r0, #1
 8000948:	f000 fb47 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("CARD NOT EXIST");
 800094c:	4b95      	ldr	r3, [pc, #596]	@ (8000ba4 <fsm+0x334>)
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fb23 	bl	8000f9a <lcd_send_string>
					lcd_goto_XY(0, 0);
 8000954:	2100      	movs	r1, #0
 8000956:	2000      	movs	r0, #0
 8000958:	f000 fb3f 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("TRY AGAIN");
 800095c:	4b92      	ldr	r3, [pc, #584]	@ (8000ba8 <fsm+0x338>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fb1b 	bl	8000f9a <lcd_send_string>
					SCH_Add_Task(state_INIT, 1000, 0);
 8000964:	23fa      	movs	r3, #250	@ 0xfa
 8000966:	0099      	lsls	r1, r3, #2
 8000968:	4b90      	ldr	r3, [pc, #576]	@ (8000bac <fsm+0x33c>)
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fe83 	bl	8001678 <SCH_Add_Task>
			break;
 8000972:	e0ee      	b.n	8000b52 <fsm+0x2e2>
		case MASTER_MENU_1:
			if(isButtonPress(0) == 1){
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff63 	bl	8000840 <isButtonPress>
 800097a:	0003      	movs	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d114      	bne.n	80009aa <fsm+0x13a>
				lcd_clear_display();
 8000980:	f000 fb20 	bl	8000fc4 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000984:	2100      	movs	r1, #0
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fb27 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("1. ADD CARD");
 800098c:	4b88      	ldr	r3, [pc, #544]	@ (8000bb0 <fsm+0x340>)
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fb03 	bl	8000f9a <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fb1f 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("2. DELETE CARD");
 800099c:	4b85      	ldr	r3, [pc, #532]	@ (8000bb4 <fsm+0x344>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fafb 	bl	8000f9a <lcd_send_string>
				status = MASTER_MENU_2;
 80009a4:	4b72      	ldr	r3, [pc, #456]	@ (8000b70 <fsm+0x300>)
 80009a6:	2203      	movs	r2, #3
 80009a8:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(1) == 1){
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff ff48 	bl	8000840 <isButtonPress>
 80009b0:	0003      	movs	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d000      	beq.n	80009b8 <fsm+0x148>
 80009b6:	e0ce      	b.n	8000b56 <fsm+0x2e6>
				lcd_clear_display();
 80009b8:	f000 fb04 	bl	8000fc4 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 80009bc:	2100      	movs	r1, #0
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fb0b 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("1. NUMBER OF CARDS");
 80009c4:	4b7c      	ldr	r3, [pc, #496]	@ (8000bb8 <fsm+0x348>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fae7 	bl	8000f9a <lcd_send_string>
				lcd_goto_XY(0, 0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 fb03 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("2. EXIT");
 80009d4:	4b79      	ldr	r3, [pc, #484]	@ (8000bbc <fsm+0x34c>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fadf 	bl	8000f9a <lcd_send_string>
				status = MASTER_MENU_3;
 80009dc:	4b64      	ldr	r3, [pc, #400]	@ (8000b70 <fsm+0x300>)
 80009de:	2204      	movs	r2, #4
 80009e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80009e2:	e0b8      	b.n	8000b56 <fsm+0x2e6>
		case MASTER_MENU_2:
			if(isButtonPress(0) == 1){
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff ff2b 	bl	8000840 <isButtonPress>
 80009ea:	0003      	movs	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d10c      	bne.n	8000a0a <fsm+0x19a>
				lcd_clear_display();
 80009f0:	f000 fae8 	bl	8000fc4 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 80009f4:	2100      	movs	r1, #0
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 faef 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("SET CLOSER CARD");
 80009fc:	4b70      	ldr	r3, [pc, #448]	@ (8000bc0 <fsm+0x350>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 facb 	bl	8000f9a <lcd_send_string>
				status = MASTER_ADDCARD;
 8000a04:	4b5a      	ldr	r3, [pc, #360]	@ (8000b70 <fsm+0x300>)
 8000a06:	2205      	movs	r2, #5
 8000a08:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(1) == 1){
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff ff18 	bl	8000840 <isButtonPress>
 8000a10:	0003      	movs	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d000      	beq.n	8000a18 <fsm+0x1a8>
 8000a16:	e0a0      	b.n	8000b5a <fsm+0x2ea>
				lcd_clear_display();
 8000a18:	f000 fad4 	bl	8000fc4 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f000 fadb 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("SET CLOSER CARD");
 8000a24:	4b66      	ldr	r3, [pc, #408]	@ (8000bc0 <fsm+0x350>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fab7 	bl	8000f9a <lcd_send_string>
				status = MASTER_DELCARD;
 8000a2c:	4b50      	ldr	r3, [pc, #320]	@ (8000b70 <fsm+0x300>)
 8000a2e:	2206      	movs	r2, #6
 8000a30:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a32:	e092      	b.n	8000b5a <fsm+0x2ea>
		case MASTER_MENU_3:
			if(isButtonPress(0) == 1){
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ff03 	bl	8000840 <isButtonPress>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d115      	bne.n	8000a6c <fsm+0x1fc>
				lcd_clear_display();
 8000a40:	f000 fac0 	bl	8000fc4 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 fac7 	bl	8000fda <lcd_goto_XY>
				lcd_send_string("NUMBER OF CARDS");
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc4 <fsm+0x354>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 faa3 	bl	8000f9a <lcd_send_string>
				lcd_send_int(numCard);
 8000a54:	4b5c      	ldr	r3, [pc, #368]	@ (8000bc8 <fsm+0x358>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fadd 	bl	8001018 <lcd_send_int>
				SCH_Add_Task(state_INIT, 1000, 0);
 8000a5e:	23fa      	movs	r3, #250	@ 0xfa
 8000a60:	0099      	lsls	r1, r3, #2
 8000a62:	4b52      	ldr	r3, [pc, #328]	@ (8000bac <fsm+0x33c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fe06 	bl	8001678 <SCH_Add_Task>
			}
			if(isButtonPress(1) == 1){
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fee7 	bl	8000840 <isButtonPress>
 8000a72:	0003      	movs	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d000      	beq.n	8000a7a <fsm+0x20a>
 8000a78:	e071      	b.n	8000b5e <fsm+0x2ee>
				status = INIT;
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b70 <fsm+0x300>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a80:	e06d      	b.n	8000b5e <fsm+0x2ee>
		case MASTER_ADDCARD:
			if(status_read == MI_OK){
 8000a82:	4b3f      	ldr	r3, [pc, #252]	@ (8000b80 <fsm+0x310>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d16b      	bne.n	8000b62 <fsm+0x2f2>
				if(check_Card(readCard) == 1){
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b88 <fsm+0x318>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 f8b3 	bl	8000bf8 <check_Card>
 8000a92:	0003      	movs	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d108      	bne.n	8000aaa <fsm+0x23a>
					lcd_goto_XY(0, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 fa9d 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("CARD EXISTED");
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bcc <fsm+0x35c>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fa79 	bl	8000f9a <lcd_send_string>
 8000aa8:	e00f      	b.n	8000aca <fsm+0x25a>
				}
				else {
					add_Card(readCard);
 8000aaa:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <fsm+0x318>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 f8cd 	bl	8000c4c <add_Card>
					lcd_goto_XY(0, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fa90 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("ADDED CARD");
 8000aba:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <fsm+0x360>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fa6c 	bl	8000f9a <lcd_send_string>
					sendDataToESP32("ADDED CARD\r\n");
 8000ac2:	4b44      	ldr	r3, [pc, #272]	@ (8000bd4 <fsm+0x364>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 f8e3 	bl	8001c90 <sendDataToESP32>
				}
				SCH_Add_Task(state_INIT, 1000, 0);
 8000aca:	23fa      	movs	r3, #250	@ 0xfa
 8000acc:	0099      	lsls	r1, r3, #2
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <fsm+0x33c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fdd0 	bl	8001678 <SCH_Add_Task>
			}
			break;
 8000ad8:	e043      	b.n	8000b62 <fsm+0x2f2>
		case MASTER_DELCARD:
			if(num_Card() == 0){
 8000ada:	f000 f95d 	bl	8000d98 <num_Card>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d10e      	bne.n	8000b00 <fsm+0x290>
				lcd_goto_XY(0, 0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fa78 	bl	8000fda <lcd_goto_XY>
				lcd_send_string(" LIST CARD EMPTY");
 8000aea:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd8 <fsm+0x368>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fa54 	bl	8000f9a <lcd_send_string>
				SCH_Add_Task(state_INIT, 1000, 0);
 8000af2:	23fa      	movs	r3, #250	@ 0xfa
 8000af4:	0099      	lsls	r1, r3, #2
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <fsm+0x33c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fdbc 	bl	8001678 <SCH_Add_Task>
			}
			if(status_read == MI_OK){
 8000b00:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <fsm+0x310>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d12e      	bne.n	8000b66 <fsm+0x2f6>
				if( delete_Card(readCard) == 0){
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <fsm+0x318>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f94e 	bl	8000dac <delete_Card>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d108      	bne.n	8000b26 <fsm+0x2b6>
					lcd_goto_XY(0, 0);
 8000b14:	2100      	movs	r1, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fa5f 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("CARD NOT EXIST");
 8000b1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <fsm+0x334>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fa3b 	bl	8000f9a <lcd_send_string>
 8000b24:	e00b      	b.n	8000b3e <fsm+0x2ce>
				}
				else {
					lcd_goto_XY(0, 0);
 8000b26:	2100      	movs	r1, #0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fa56 	bl	8000fda <lcd_goto_XY>
					lcd_send_string("DELETED CARD");
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <fsm+0x36c>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fa32 	bl	8000f9a <lcd_send_string>
					sendDataToESP32("DELETED CARD\r\n");
 8000b36:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <fsm+0x370>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 f8a9 	bl	8001c90 <sendDataToESP32>
				}
				SCH_Add_Task(state_INIT, 1000, 0);
 8000b3e:	23fa      	movs	r3, #250	@ 0xfa
 8000b40:	0099      	lsls	r1, r3, #2
 8000b42:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <fsm+0x33c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fd96 	bl	8001678 <SCH_Add_Task>
			}
			break;
 8000b4c:	e00b      	b.n	8000b66 <fsm+0x2f6>
		default:
			break;
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	e00a      	b.n	8000b68 <fsm+0x2f8>
			break;
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	e008      	b.n	8000b68 <fsm+0x2f8>
			break;
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	e006      	b.n	8000b68 <fsm+0x2f8>
			break;
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	e004      	b.n	8000b68 <fsm+0x2f8>
			break;
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	e002      	b.n	8000b68 <fsm+0x2f8>
			break;
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	e000      	b.n	8000b68 <fsm+0x2f8>
			break;
 8000b66:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	20000084 	.word	0x20000084
 8000b74:	08006da4 	.word	0x08006da4
 8000b78:	08006c60 	.word	0x08006c60
 8000b7c:	08006c74 	.word	0x08006c74
 8000b80:	2000025c 	.word	0x2000025c
 8000b84:	20000274 	.word	0x20000274
 8000b88:	20000260 	.word	0x20000260
 8000b8c:	08006c84 	.word	0x08006c84
 8000b90:	00000bb8 	.word	0x00000bb8
 8000b94:	08000799 	.word	0x08000799
 8000b98:	08006c94 	.word	0x08006c94
 8000b9c:	08006ca4 	.word	0x08006ca4
 8000ba0:	08006cb0 	.word	0x08006cb0
 8000ba4:	08006cbc 	.word	0x08006cbc
 8000ba8:	08006ccc 	.word	0x08006ccc
 8000bac:	08000be5 	.word	0x08000be5
 8000bb0:	08006cd8 	.word	0x08006cd8
 8000bb4:	08006ce4 	.word	0x08006ce4
 8000bb8:	08006cf4 	.word	0x08006cf4
 8000bbc:	08006d08 	.word	0x08006d08
 8000bc0:	08006d10 	.word	0x08006d10
 8000bc4:	08006d20 	.word	0x08006d20
 8000bc8:	2000008c 	.word	0x2000008c
 8000bcc:	08006d30 	.word	0x08006d30
 8000bd0:	08006d40 	.word	0x08006d40
 8000bd4:	08006d4c 	.word	0x08006d4c
 8000bd8:	08006d5c 	.word	0x08006d5c
 8000bdc:	08006d70 	.word	0x08006d70
 8000be0:	08006d80 	.word	0x08006d80

08000be4 <state_INIT>:

void state_INIT(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	status = INIT;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <state_INIT+0x10>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000084 	.word	0x20000084

08000bf8 <check_Card>:

const uint8_t master[4] = {243, 25, 142, 19};
uint8_t ** data = NULL;
uint8_t numCard = 0;

uint8_t check_Card(uint8_t * readCard){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(readCard[0] == master[0] && readCard[1] == master[1] && readCard[2] == master[2] && readCard[3] == master[3]){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	22f3      	movs	r2, #243	@ 0xf3
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d113      	bne.n	8000c32 <check_Card+0x3a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2219      	movs	r2, #25
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10d      	bne.n	8000c32 <check_Card+0x3a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	228e      	movs	r2, #142	@ 0x8e
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d107      	bne.n	8000c32 <check_Card+0x3a>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3303      	adds	r3, #3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2213      	movs	r2, #19
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <check_Card+0x3a>
		return 2; // MASTERCARD
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e008      	b.n	8000c44 <check_Card+0x4c>
	}
	if (search_Card(readCard) >= 0){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f85f 	bl	8000cf8 <search_Card>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	db01      	blt.n	8000c42 <check_Card+0x4a>
		return 1; // NORMAL CARD
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <check_Card+0x4c>
	}
	return 0; // CARD not exist
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <add_Card>:

void add_Card(uint8_t * readCard){
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	data = (uint8_t **)realloc(data, (numCard + 1) * sizeof(uint8_t *));
 8000c54:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <add_Card+0xa4>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <add_Card+0xa8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	0019      	movs	r1, r3
 8000c62:	0010      	movs	r0, r2
 8000c64:	f005 fbec 	bl	8006440 <realloc>
 8000c68:	0002      	movs	r2, r0
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <add_Card+0xa4>)
 8000c6c:	601a      	str	r2, [r3, #0]
	data[numCard] = (uint8_t *)malloc(4 * sizeof(int));
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <add_Card+0xa4>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <add_Card+0xa8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	18d4      	adds	r4, r2, r3
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f005 fb1a 	bl	80062b4 <malloc>
 8000c80:	0003      	movs	r3, r0
 8000c82:	6023      	str	r3, [r4, #0]
	data[numCard][0] = readCard[0];
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <add_Card+0xa4>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <add_Card+0xa8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	18d3      	adds	r3, r2, r3
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	701a      	strb	r2, [r3, #0]
	data[numCard][1] = readCard[1];
 8000c98:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <add_Card+0xa4>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <add_Card+0xa8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	18d3      	adds	r3, r2, r3
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	7852      	ldrb	r2, [r2, #1]
 8000cac:	701a      	strb	r2, [r3, #0]
	data[numCard][2] = readCard[2];
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <add_Card+0xa4>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <add_Card+0xa8>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	7892      	ldrb	r2, [r2, #2]
 8000cc2:	701a      	strb	r2, [r3, #0]
	data[numCard][3] = readCard[3];
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <add_Card+0xa4>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <add_Card+0xa8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	18d3      	adds	r3, r2, r3
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	78d2      	ldrb	r2, [r2, #3]
 8000cd8:	701a      	strb	r2, [r3, #0]
	numCard++;
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <add_Card+0xa8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <add_Card+0xa8>)
 8000ce4:	701a      	strb	r2, [r3, #0]
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b003      	add	sp, #12
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	20000088 	.word	0x20000088
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <search_Card>:

int8_t search_Card(uint8_t *readCard){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < numCard; i++){
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e037      	b.n	8000d76 <search_Card+0x7e>
		if(data[i][0] == readCard[0] && data[i][1] == readCard[1] && data[i][2] == readCard[2] && data[i][3] == readCard[3] ){
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <search_Card+0x98>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	18d3      	adds	r3, r2, r3
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d129      	bne.n	8000d70 <search_Card+0x78>
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <search_Card+0x98>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d11c      	bne.n	8000d70 <search_Card+0x78>
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <search_Card+0x98>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	18d3      	adds	r3, r2, r3
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3302      	adds	r3, #2
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d10f      	bne.n	8000d70 <search_Card+0x78>
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <search_Card+0x98>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3303      	adds	r3, #3
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3303      	adds	r3, #3
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d102      	bne.n	8000d70 <search_Card+0x78>
			return i;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	e00a      	b.n	8000d86 <search_Card+0x8e>
	for(int i = 0; i < numCard; i++){
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <search_Card+0x9c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	dbc1      	blt.n	8000d06 <search_Card+0xe>
		}
	}
	return -1; // can't searched
 8000d82:	2301      	movs	r3, #1
 8000d84:	425b      	negs	r3, r3
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	20000088 	.word	0x20000088
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <num_Card>:
uint8_t num_Card(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	return numCard;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	@ (8000da8 <num_Card+0x10>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	2000008c 	.word	0x2000008c

08000dac <delete_Card>:
uint8_t delete_Card(uint8_t * readCard){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	int index = search_Card(readCard);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff ff9e 	bl	8000cf8 <search_Card>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	60bb      	str	r3, [r7, #8]
	if(index == -1){
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	d101      	bne.n	8000dca <delete_Card+0x1e>
		return 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e034      	b.n	8000e34 <delete_Card+0x88>
	}
	free(data[index]);
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <delete_Card+0x90>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	18d3      	adds	r3, r2, r3
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f005 fa76 	bl	80062c8 <free>
	for (int i = index; i < numCard - 1; i++) {
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e00f      	b.n	8000e02 <delete_Card+0x56>
	    data[i] = data[i + 1];
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <delete_Card+0x90>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	18d2      	adds	r2, r2, r3
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <delete_Card+0x90>)
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18cb      	adds	r3, r1, r3
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	601a      	str	r2, [r3, #0]
	for (int i = index; i < numCard - 1; i++) {
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <delete_Card+0x94>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbe9      	blt.n	8000de2 <delete_Card+0x36>
	}
	data = (uint8_t **)realloc(data, numCard * sizeof(uint8_t *));
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <delete_Card+0x90>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <delete_Card+0x94>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0010      	movs	r0, r2
 8000e1c:	f005 fb10 	bl	8006440 <realloc>
 8000e20:	0002      	movs	r2, r0
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <delete_Card+0x90>)
 8000e24:	601a      	str	r2, [r3, #0]
	numCard--;
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <delete_Card+0x94>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <delete_Card+0x94>)
 8000e30:	701a      	strb	r2, [r3, #0]
	return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b004      	add	sp, #16
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000088 	.word	0x20000088
 8000e40:	2000008c 	.word	0x2000008c

08000e44 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

extern I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e50:	200f      	movs	r0, #15
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	1dfa      	adds	r2, r7, #7
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	210f      	movs	r1, #15
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	011a      	lsls	r2, r3, #4
 8000e64:	240e      	movs	r4, #14
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e6a:	183b      	adds	r3, r7, r0
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	220c      	movs	r2, #12
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	2108      	movs	r1, #8
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e7a:	183b      	adds	r3, r7, r0
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2208      	movs	r2, #8
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <lcd_send_cmd+0x78>)
 8000ea8:	2364      	movs	r3, #100	@ 0x64
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2304      	movs	r3, #4
 8000eae:	214e      	movs	r1, #78	@ 0x4e
 8000eb0:	f001 fc60 	bl	8002774 <HAL_I2C_Master_Transmit>
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b005      	add	sp, #20
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	20000090 	.word	0x20000090

08000ec0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ecc:	200f      	movs	r0, #15
 8000ece:	183b      	adds	r3, r7, r0
 8000ed0:	1dfa      	adds	r2, r7, #7
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	438a      	bics	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	011a      	lsls	r2, r3, #4
 8000ee0:	240e      	movs	r4, #14
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	220d      	movs	r2, #13
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ef6:	183b      	adds	r3, r7, r0
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2209      	movs	r2, #9
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	220d      	movs	r2, #13
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2209      	movs	r2, #9
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f20:	187a      	adds	r2, r7, r1
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <lcd_send_data+0x78>)
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2304      	movs	r3, #4
 8000f2a:	214e      	movs	r1, #78	@ 0x4e
 8000f2c:	f001 fc22 	bl	8002774 <HAL_I2C_Master_Transmit>
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b005      	add	sp, #20
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	20000090 	.word	0x20000090

08000f3c <lcd_init>:

void lcd_init (void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000f40:	2033      	movs	r0, #51	@ 0x33
 8000f42:	f7ff ff7f 	bl	8000e44 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000f46:	2032      	movs	r0, #50	@ 0x32
 8000f48:	f7ff ff7c 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(50);
 8000f4c:	2032      	movs	r0, #50	@ 0x32
 8000f4e:	f000 ff43 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000f52:	2028      	movs	r0, #40	@ 0x28
 8000f54:	f7ff ff76 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(50);
 8000f58:	2032      	movs	r0, #50	@ 0x32
 8000f5a:	f000 ff3d 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff ff70 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(50);
 8000f64:	2032      	movs	r0, #50	@ 0x32
 8000f66:	f000 ff37 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff ff6a 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(50);
 8000f70:	2032      	movs	r0, #50	@ 0x32
 8000f72:	f000 ff31 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000f76:	200c      	movs	r0, #12
 8000f78:	f7ff ff64 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	@ 0x32
 8000f7e:	f000 ff2b 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000f82:	2002      	movs	r0, #2
 8000f84:	f7ff ff5e 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(50);
 8000f88:	2032      	movs	r0, #50	@ 0x32
 8000f8a:	f000 ff25 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000f8e:	2080      	movs	r0, #128	@ 0x80
 8000f90:	f7ff ff58 	bl	8000e44 <lcd_send_cmd>
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000fa2:	e006      	b.n	8000fb2 <lcd_send_string+0x18>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff87 	bl	8000ec0 <lcd_send_data>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f4      	bne.n	8000fa4 <lcd_send_string+0xa>
}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff ff3b 	bl	8000e44 <lcd_send_cmd>
	HAL_Delay(20);
 8000fce:	2014      	movs	r0, #20
 8000fd0:	f000 ff02 	bl	8001dd8 <HAL_Delay>
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <lcd_goto_XY>:

void lcd_goto_XY (int row, int col) {
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 1) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d106      	bne.n	8000ff8 <lcd_goto_XY+0x1e>
        pos_Addr = 0x80 + col; // Địa chỉ cho dòng đầu tiên
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	230f      	movs	r3, #15
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	3a80      	subs	r2, #128	@ 0x80
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e005      	b.n	8001004 <lcd_goto_XY+0x2a>
    } else {
        pos_Addr = 0xC0 + col; // Địa chỉ cho dòng thứ hai
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	3a40      	subs	r2, #64	@ 0x40
 8001002:	701a      	strb	r2, [r3, #0]
    }
    lcd_send_cmd(pos_Addr);
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff1a 	bl	8000e44 <lcd_send_cmd>
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b004      	add	sp, #16
 8001016:	bd80      	pop	{r7, pc}

08001018 <lcd_send_int>:

void lcd_send_int(int number) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    char str[16];
    sprintf(str, "%d", number);
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4907      	ldr	r1, [pc, #28]	@ (8001040 <lcd_send_int+0x28>)
 8001024:	2408      	movs	r4, #8
 8001026:	193b      	adds	r3, r7, r4
 8001028:	0018      	movs	r0, r3
 800102a:	f005 fa43 	bl	80064b4 <siprintf>
    lcd_send_string(str);
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ffb2 	bl	8000f9a <lcd_send_string>
}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b007      	add	sp, #28
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	08006da0 	.word	0x08006da0

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f000 fe62 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f848 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 fa00 	bl	8001454 <MX_GPIO_Init>
  MX_DMA_Init();
 8001054:	f000 f9e0 	bl	8001418 <MX_DMA_Init>
  MX_TIM3_Init();
 8001058:	f000 f91a 	bl	8001290 <MX_TIM3_Init>
  MX_SPI1_Init();
 800105c:	f000 f8da 	bl	8001214 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001060:	f000 f9aa 	bl	80013b8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001064:	f000 f896 	bl	8001194 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <main+0x88>)
 800106a:	0018      	movs	r0, r3
 800106c:	f003 fa0e 	bl	800448c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <main+0x88>)
 8001072:	2100      	movs	r1, #0
 8001074:	0018      	movs	r0, r3
 8001076:	f003 faad 	bl	80045d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <main+0x88>)
 800107c:	2104      	movs	r1, #4
 800107e:	0018      	movs	r0, r3
 8001080:	f003 faa8 	bl	80045d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <main+0x88>)
 8001086:	210c      	movs	r1, #12
 8001088:	0018      	movs	r0, r3
 800108a:	f003 faa3 	bl	80045d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 800108e:	f7ff ff55 	bl	8000f3c <lcd_init>
  MFRC522_Init();
 8001092:	f7ff f9a7 	bl	80003e4 <MFRC522_Init>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <main+0x8c>)
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	0018      	movs	r0, r3
 800109e:	f001 faa6 	bl	80025ee <HAL_GPIO_WritePin>
  SCH_Add_Task(getKeyinput, 100, 10);
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <main+0x90>)
 80010a4:	220a      	movs	r2, #10
 80010a6:	2164      	movs	r1, #100	@ 0x64
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 fae5 	bl	8001678 <SCH_Add_Task>
  SCH_Add_Task(fsm, 100, 10);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <main+0x94>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	2164      	movs	r1, #100	@ 0x64
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fadf 	bl	8001678 <SCH_Add_Task>
  SCH_Add_Task(READ_CARD, 100, 10);
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <main+0x98>)
 80010bc:	220a      	movs	r2, #10
 80010be:	2164      	movs	r1, #100	@ 0x64
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fad9 	bl	8001678 <SCH_Add_Task>
   while (1)
   {
		SCH_Dispatch_Task();
 80010c6:	f000 fb69 	bl	800179c <SCH_Dispatch_Task>
 80010ca:	e7fc      	b.n	80010c6 <main+0x82>
 80010cc:	20000148 	.word	0x20000148
 80010d0:	48001400 	.word	0x48001400
 80010d4:	080007d5 	.word	0x080007d5
 80010d8:	08000871 	.word	0x08000871
 80010dc:	080015b9 	.word	0x080015b9

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b095      	sub	sp, #84	@ 0x54
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	2420      	movs	r4, #32
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	0018      	movs	r0, r3
 80010ec:	2330      	movs	r3, #48	@ 0x30
 80010ee:	001a      	movs	r2, r3
 80010f0:	2100      	movs	r1, #0
 80010f2:	f005 fa0d 	bl	8006510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f6:	2310      	movs	r3, #16
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	0018      	movs	r0, r3
 80010fc:	2310      	movs	r3, #16
 80010fe:	001a      	movs	r2, r3
 8001100:	2100      	movs	r1, #0
 8001102:	f005 fa05 	bl	8006510 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001106:	003b      	movs	r3, r7
 8001108:	0018      	movs	r0, r3
 800110a:	2310      	movs	r3, #16
 800110c:	001a      	movs	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	f005 f9fe 	bl	8006510 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	0021      	movs	r1, r4
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2202      	movs	r2, #2
 800111a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2201      	movs	r2, #1
 8001120:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2210      	movs	r2, #16
 8001126:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	187b      	adds	r3, r7, r1
 8001130:	0018      	movs	r0, r3
 8001132:	f001 ff17 	bl	8002f64 <HAL_RCC_OscConfig>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800113a:	f000 fa97 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	2110      	movs	r1, #16
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2207      	movs	r2, #7
 8001144:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2100      	movs	r1, #0
 800115c:	0018      	movs	r0, r3
 800115e:	f002 fa1b 	bl	8003598 <HAL_RCC_ClockConfig>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001166:	f000 fa81 	bl	800166c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800116a:	003b      	movs	r3, r7
 800116c:	2221      	movs	r2, #33	@ 0x21
 800116e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001170:	003b      	movs	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001176:	003b      	movs	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	003b      	movs	r3, r7
 800117e:	0018      	movs	r0, r3
 8001180:	f002 fb4e 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	1e03      	subs	r3, r0, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001188:	f000 fa70 	bl	800166c <Error_Handler>
  }
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b015      	add	sp, #84	@ 0x54
 8001192:	bd90      	pop	{r4, r7, pc}

08001194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_I2C1_Init+0x74>)
 800119a:	4a1c      	ldr	r2, [pc, #112]	@ (800120c <MX_I2C1_Init+0x78>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800119e:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001210 <MX_I2C1_Init+0x7c>)
 80011a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f001 fa29 	bl	8002628 <HAL_I2C_Init>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011da:	f000 fa47 	bl	800166c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 fe26 	bl	8002e34 <HAL_I2CEx_ConfigAnalogFilter>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011ec:	f000 fa3e 	bl	800166c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <MX_I2C1_Init+0x74>)
 80011f2:	2100      	movs	r1, #0
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 fe69 	bl	8002ecc <HAL_I2CEx_ConfigDigitalFilter>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011fe:	f000 fa35 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000090 	.word	0x20000090
 800120c:	40005400 	.word	0x40005400
 8001210:	2000090e 	.word	0x2000090e

08001214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_SPI1_Init+0x74>)
 800121a:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <MX_SPI1_Init+0x78>)
 800121c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001220:	2282      	movs	r2, #130	@ 0x82
 8001222:	0052      	lsls	r2, r2, #1
 8001224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_SPI1_Init+0x74>)
 800122e:	22e0      	movs	r2, #224	@ 0xe0
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_SPI1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_SPI1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001262:	2207      	movs	r2, #7
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_SPI1_Init+0x74>)
 800126e:	2208      	movs	r2, #8
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001274:	0018      	movs	r0, r3
 8001276:	f002 fba1 	bl	80039bc <HAL_SPI_Init>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d001      	beq.n	8001282 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800127e:	f000 f9f5 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000e4 	.word	0x200000e4
 800128c:	40013000 	.word	0x40013000

08001290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	@ 0x38
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	2328      	movs	r3, #40	@ 0x28
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	0018      	movs	r0, r3
 800129c:	2310      	movs	r3, #16
 800129e:	001a      	movs	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	f005 f935 	bl	8006510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	2320      	movs	r3, #32
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	0018      	movs	r0, r3
 80012ac:	2308      	movs	r3, #8
 80012ae:	001a      	movs	r2, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	f005 f92d 	bl	8006510 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	0018      	movs	r0, r3
 80012ba:	231c      	movs	r3, #28
 80012bc:	001a      	movs	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	f005 f926 	bl	8006510 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c4:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012c6:	4a3a      	ldr	r2, [pc, #232]	@ (80013b0 <MX_TIM3_Init+0x120>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012cc:	4a39      	ldr	r2, [pc, #228]	@ (80013b4 <MX_TIM3_Init+0x124>)
 80012ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80012d6:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012d8:	2263      	movs	r2, #99	@ 0x63
 80012da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e8:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <MX_TIM3_Init+0x11c>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f003 f87e 	bl	80043ec <HAL_TIM_Base_Init>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012f4:	f000 f9ba 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	2128      	movs	r1, #40	@ 0x28
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	0152      	lsls	r2, r2, #5
 8001300:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001302:	187a      	adds	r2, r7, r1
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <MX_TIM3_Init+0x11c>)
 8001306:	0011      	movs	r1, r2
 8001308:	0018      	movs	r0, r3
 800130a:	f003 fbc3 	bl	8004a94 <HAL_TIM_ConfigClockSource>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001312:	f000 f9ab 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <MX_TIM3_Init+0x11c>)
 8001318:	0018      	movs	r0, r3
 800131a:	f003 f903 	bl	8004524 <HAL_TIM_PWM_Init>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001322:	f000 f9a3 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2120      	movs	r1, #32
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001334:	187a      	adds	r2, r7, r1
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_TIM3_Init+0x11c>)
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f003 ffc0 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001344:	f000 f992 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2260      	movs	r2, #96	@ 0x60
 800134c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001360:	1d39      	adds	r1, r7, #4
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_TIM3_Init+0x11c>)
 8001364:	2200      	movs	r2, #0
 8001366:	0018      	movs	r0, r3
 8001368:	f003 face 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001370:	f000 f97c 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001374:	1d39      	adds	r1, r7, #4
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_TIM3_Init+0x11c>)
 8001378:	2204      	movs	r2, #4
 800137a:	0018      	movs	r0, r3
 800137c:	f003 fac4 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8001384:	f000 f972 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001388:	1d39      	adds	r1, r7, #4
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_TIM3_Init+0x11c>)
 800138c:	220c      	movs	r2, #12
 800138e:	0018      	movs	r0, r3
 8001390:	f003 faba 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8001398:	f000 f968 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <MX_TIM3_Init+0x11c>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 fb5a 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b00e      	add	sp, #56	@ 0x38
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000148 	.word	0x20000148
 80013b0:	40000400 	.word	0x40000400
 80013b4:	0000031f 	.word	0x0000031f

080013b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013be:	4a15      	ldr	r2, [pc, #84]	@ (8001414 <MX_USART1_UART_Init+0x5c>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013c4:	22e1      	movs	r2, #225	@ 0xe1
 80013c6:	0252      	lsls	r2, r2, #9
 80013c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fa:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <MX_USART1_UART_Init+0x58>)
 80013fc:	0018      	movs	r0, r3
 80013fe:	f003 ffc7 	bl	8005390 <HAL_UART_Init>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d001      	beq.n	800140a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001406:	f000 f931 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200001d4 	.word	0x200001d4
 8001414:	40013800 	.word	0x40013800

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_DMA_Init+0x38>)
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_DMA_Init+0x38>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_DMA_Init+0x38>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	200a      	movs	r0, #10
 800143c:	f000 fd9c 	bl	8001f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001440:	200a      	movs	r0, #10
 8001442:	f000 fdae 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	40021000 	.word	0x40021000

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	240c      	movs	r4, #12
 800145c:	193b      	adds	r3, r7, r4
 800145e:	0018      	movs	r0, r3
 8001460:	2314      	movs	r3, #20
 8001462:	001a      	movs	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f005 f853 	bl	8006510 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <MX_GPIO_Init+0x128>)
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	4b43      	ldr	r3, [pc, #268]	@ (800157c <MX_GPIO_Init+0x128>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	03c9      	lsls	r1, r1, #15
 8001474:	430a      	orrs	r2, r1
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	4b40      	ldr	r3, [pc, #256]	@ (800157c <MX_GPIO_Init+0x128>)
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	03db      	lsls	r3, r3, #15
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MX_GPIO_Init+0x128>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <MX_GPIO_Init+0x128>)
 800148c:	2180      	movs	r1, #128	@ 0x80
 800148e:	0289      	lsls	r1, r1, #10
 8001490:	430a      	orrs	r2, r1
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	4b39      	ldr	r3, [pc, #228]	@ (800157c <MX_GPIO_Init+0x128>)
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b36      	ldr	r3, [pc, #216]	@ (800157c <MX_GPIO_Init+0x128>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	4b35      	ldr	r3, [pc, #212]	@ (800157c <MX_GPIO_Init+0x128>)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	02c9      	lsls	r1, r1, #11
 80014ac:	430a      	orrs	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	4b32      	ldr	r3, [pc, #200]	@ (800157c <MX_GPIO_Init+0x128>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	02db      	lsls	r3, r3, #11
 80014b8:	4013      	ands	r3, r2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80014be:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <MX_GPIO_Init+0x12c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 f892 	bl	80025ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_RESET_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 80014ca:	2390      	movs	r3, #144	@ 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2200      	movs	r2, #0
 80014d0:	2111      	movs	r1, #17
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 f88b 	bl	80025ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_GPIO_Init+0x130>)
 80014da:	2200      	movs	r2, #0
 80014dc:	2108      	movs	r1, #8
 80014de:	0018      	movs	r0, r3
 80014e0:	f001 f885 	bl	80025ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2201      	movs	r2, #1
 80014ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	4a20      	ldr	r2, [pc, #128]	@ (8001580 <MX_GPIO_Init+0x12c>)
 8001500:	0019      	movs	r1, r3
 8001502:	0010      	movs	r0, r2
 8001504:	f000 feee 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_RESET_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin|RC522_CS_Pin;
 8001508:	193b      	adds	r3, r7, r4
 800150a:	2211      	movs	r2, #17
 800150c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	193b      	adds	r3, r7, r4
 8001510:	2201      	movs	r2, #1
 8001512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	193b      	adds	r3, r7, r4
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	193b      	adds	r3, r7, r4
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	193a      	adds	r2, r7, r4
 8001522:	2390      	movs	r3, #144	@ 0x90
 8001524:	05db      	lsls	r3, r3, #23
 8001526:	0011      	movs	r1, r2
 8001528:	0018      	movs	r0, r3
 800152a:	f000 fedb 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	220a      	movs	r2, #10
 8001532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	193b      	adds	r3, r7, r4
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153a:	193b      	adds	r3, r7, r4
 800153c:	2201      	movs	r2, #1
 800153e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	193a      	adds	r2, r7, r4
 8001542:	2390      	movs	r3, #144	@ 0x90
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f000 fecb 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 800154e:	0021      	movs	r1, r4
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2208      	movs	r2, #8
 8001554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2201      	movs	r2, #1
 800155a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001568:	187b      	adds	r3, r7, r1
 800156a:	4a06      	ldr	r2, [pc, #24]	@ (8001584 <MX_GPIO_Init+0x130>)
 800156c:	0019      	movs	r1, r3
 800156e:	0010      	movs	r0, r2
 8001570:	f000 feb8 	bl	80022e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001574:	46c0      	nop			@ (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b009      	add	sp, #36	@ 0x24
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	48001400 	.word	0x48001400
 8001584:	48000400 	.word	0x48000400

08001588 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001590:	f000 f8f2 	bl	8001778 <SCH_Update>
}
 8001594:	46c0      	nop			@ (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <buzz_off>:
void buzz_off(){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <buzz_off+0x18>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 f821 	bl	80025ee <HAL_GPIO_WritePin>
}
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	48001400 	.word	0x48001400

080015b8 <READ_CARD>:
void READ_CARD() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    status_read = MFRC522_Request(PICC_REQIDL, str);
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <READ_CARD+0x98>)
 80015be:	0019      	movs	r1, r3
 80015c0:	2026      	movs	r0, #38	@ 0x26
 80015c2:	f7ff f847 	bl	8000654 <MFRC522_Request>
 80015c6:	0003      	movs	r3, r0
 80015c8:	001a      	movs	r2, r3
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <READ_CARD+0x9c>)
 80015cc:	701a      	strb	r2, [r3, #0]
    if (status_read == MI_OK) {
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <READ_CARD+0x9c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d12f      	bne.n	8001636 <READ_CARD+0x7e>
        status_read = MFRC522_Anticoll(str);
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <READ_CARD+0x98>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff f86a 	bl	80006b2 <MFRC522_Anticoll>
 80015de:	0003      	movs	r3, r0
 80015e0:	001a      	movs	r2, r3
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <READ_CARD+0x9c>)
 80015e4:	701a      	strb	r2, [r3, #0]
        if (status_read == MI_OK) {
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <READ_CARD+0x9c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12c      	bne.n	8001648 <READ_CARD+0x90>
            if (memcmp(previousCard, str, 4) != 0 || cardProcessed == 0) {
 80015ee:	4918      	ldr	r1, [pc, #96]	@ (8001650 <READ_CARD+0x98>)
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <READ_CARD+0xa0>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	0018      	movs	r0, r3
 80015f6:	f004 ff7d 	bl	80064f4 <memcmp>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d103      	bne.n	8001606 <READ_CARD+0x4e>
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <READ_CARD+0xa4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d120      	bne.n	8001648 <READ_CARD+0x90>
            	memcpy(readCard, str, 4);
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <READ_CARD+0x98>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <READ_CARD+0xa8>)
 800160c:	601a      	str	r2, [r3, #0]
                memcpy(previousCard, str, 4);
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <READ_CARD+0x98>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <READ_CARD+0xa0>)
 8001614:	601a      	str	r2, [r3, #0]
                cardProcessed = 1;
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <READ_CARD+0xa4>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 1);
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <READ_CARD+0xac>)
 800161e:	2201      	movs	r2, #1
 8001620:	2101      	movs	r1, #1
 8001622:	0018      	movs	r0, r3
 8001624:	f000 ffe3 	bl	80025ee <HAL_GPIO_WritePin>
                SCH_Add_Task(buzz_off, 50, 0);
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <READ_CARD+0xb0>)
 800162a:	2200      	movs	r2, #0
 800162c:	2132      	movs	r1, #50	@ 0x32
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f822 	bl	8001678 <SCH_Add_Task>
        }
    } else {
        cardProcessed = 0;
        memset(previousCard, 0, 4);
    }
}
 8001634:	e008      	b.n	8001648 <READ_CARD+0x90>
        cardProcessed = 0;
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <READ_CARD+0xa4>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
        memset(previousCard, 0, 4);
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <READ_CARD+0xa0>)
 800163e:	2204      	movs	r2, #4
 8001640:	2100      	movs	r1, #0
 8001642:	0018      	movs	r0, r3
 8001644:	f004 ff64 	bl	8006510 <memset>
}
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	20000264 	.word	0x20000264
 8001654:	2000025c 	.word	0x2000025c
 8001658:	20000278 	.word	0x20000278
 800165c:	20000274 	.word	0x20000274
 8001660:	20000260 	.word	0x20000260
 8001664:	48001400 	.word	0x48001400
 8001668:	0800159d 	.word	0x0800159d

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <SCH_Add_Task>:
void SCH_Init(void) {
	list.head = NULL;
    list.numTask = 0;
}

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8001684:	2014      	movs	r0, #20
 8001686:	f004 fe15 	bl	80062b4 <malloc>
 800168a:	0003      	movs	r3, r0
 800168c:	617b      	str	r3, [r7, #20]
	if (newTask == NULL)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d06b      	beq.n	800176c <SCH_Add_Task+0xf4>
		return;
	newTask->pTask = function;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	210a      	movs	r1, #10
 800169e:	0018      	movs	r0, r3
 80016a0:	f7fe fd44 	bl	800012c <__udivsi3>
 80016a4:	0003      	movs	r3, r0
 80016a6:	001a      	movs	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	210a      	movs	r1, #10
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7fe fd3b 	bl	800012c <__udivsi3>
 80016b6:	0003      	movs	r3, r0
 80016b8:	001a      	movs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	609a      	str	r2, [r3, #8]
	newTask->next = NULL;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
	if(list.head == NULL){
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <SCH_Add_Task+0xfc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d103      	bne.n	80016d4 <SCH_Add_Task+0x5c>
		list.head = newTask;
 80016cc:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <SCH_Add_Task+0xfc>)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e044      	b.n	800175e <SCH_Add_Task+0xe6>
	}
	else{
		sTask * cur = list.head;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <SCH_Add_Task+0xfc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61fb      	str	r3, [r7, #28]
		sTask * prev = cur;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	61bb      	str	r3, [r7, #24]
		//--------- FINDING LOCATE FOR NEWTASK-----------
		while(cur != NULL && newTask->Delay >= cur->Delay){
 80016de:	e00b      	b.n	80016f8 <SCH_Add_Task+0x80>
			newTask->Delay = newTask->Delay - cur->Delay;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	1ad2      	subs	r2, r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	605a      	str	r2, [r3, #4]
			cur = cur->next;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	61fb      	str	r3, [r7, #28]
			prev = cur;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	61bb      	str	r3, [r7, #24]
		while(cur != NULL && newTask->Delay >= cur->Delay){
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <SCH_Add_Task+0x92>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d2ea      	bcs.n	80016e0 <SCH_Add_Task+0x68>
		}
		if(cur == list.head){ // Add To First List
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <SCH_Add_Task+0xfc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	429a      	cmp	r2, r3
 8001712:	d110      	bne.n	8001736 <SCH_Add_Task+0xbe>
			newTask->next = list.head;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <SCH_Add_Task+0xfc>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	611a      	str	r2, [r3, #16]
			list.head->Delay = list.head->Delay - newTask->Delay;
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <SCH_Add_Task+0xfc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <SCH_Add_Task+0xfc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1a8a      	subs	r2, r1, r2
 800172c:	605a      	str	r2, [r3, #4]
			list.head = newTask;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <SCH_Add_Task+0xfc>)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e013      	b.n	800175e <SCH_Add_Task+0xe6>
		}
		else if(cur == NULL){ // Add to Last List -- Add After Cur
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d103      	bne.n	8001744 <SCH_Add_Task+0xcc>
			prev->next = newTask;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	e00c      	b.n	800175e <SCH_Add_Task+0xe6>
		}
		else{ // Add to Mid list -- Add before Cur
			newTask->next = cur;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	611a      	str	r2, [r3, #16]
			prev->next = newTask;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	611a      	str	r2, [r3, #16]
			cur->Delay = cur->Delay - newTask->Delay;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	1ad2      	subs	r2, r2, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	605a      	str	r2, [r3, #4]
		}
	}
	list.numTask++;
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <SCH_Add_Task+0xfc>)
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	3301      	adds	r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <SCH_Add_Task+0xfc>)
 8001768:	711a      	strb	r2, [r3, #4]
 800176a:	e000      	b.n	800176e <SCH_Add_Task+0xf6>
		return;
 800176c:	46c0      	nop			@ (mov r8, r8)
}
 800176e:	46bd      	mov	sp, r7
 8001770:	b008      	add	sp, #32
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000027c 	.word	0x2000027c

08001778 <SCH_Update>:

void SCH_Update(void){ // TIM involked every 10ms
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	if (list.head == NULL) {
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <SCH_Update+0x20>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <SCH_Update+0x18>
		return;
	}
	list.head->Delay--;
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SCH_Update+0x20>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	3a01      	subs	r2, #1
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e000      	b.n	8001792 <SCH_Update+0x1a>
		return;
 8001790:	46c0      	nop			@ (mov r8, r8)
}
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	2000027c 	.word	0x2000027c

0800179c <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(void){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	if (list.head == NULL) {
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d031      	beq.n	800180e <SCH_Dispatch_Task+0x72>
		return;
	}
	if(list.head->Delay <= 0){
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d12d      	bne.n	8001810 <SCH_Dispatch_Task+0x74>
		list.head->pTask();
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4798      	blx	r3
		sTask * temp = list.head;
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	607b      	str	r3, [r7, #4]
		list.head = list.head->next;
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 80017ca:	601a      	str	r2, [r3, #0]
		if(temp->Period > 0){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d011      	beq.n	80017f8 <SCH_Dispatch_Task+0x5c>
			SCH_Add_Task(temp->pTask, temp->Period * 10, temp->Period * 10);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	0013      	movs	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	189b      	adds	r3, r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	0019      	movs	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	0013      	movs	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	189b      	adds	r3, r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	001a      	movs	r2, r3
 80017f4:	f7ff ff40 	bl	8001678 <SCH_Add_Task>
		}
		free(temp);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f004 fd64 	bl	80062c8 <free>
		list.numTask--;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	3b01      	subs	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <SCH_Dispatch_Task+0x7c>)
 800180a:	711a      	strb	r2, [r3, #4]
 800180c:	e000      	b.n	8001810 <SCH_Dispatch_Task+0x74>
		return;
 800180e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	2000027c 	.word	0x2000027c

0800181c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_MspInit+0x44>)
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_MspInit+0x44>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	619a      	str	r2, [r3, #24]
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_MspInit+0x44>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_MspInit+0x44>)
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_MspInit+0x44>)
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	0549      	lsls	r1, r1, #21
 8001844:	430a      	orrs	r2, r1
 8001846:	61da      	str	r2, [r3, #28]
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_MspInit+0x44>)
 800184a:	69da      	ldr	r2, [r3, #28]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	055b      	lsls	r3, r3, #21
 8001850:	4013      	ands	r3, r2
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08b      	sub	sp, #44	@ 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	2414      	movs	r4, #20
 800186e:	193b      	adds	r3, r7, r4
 8001870:	0018      	movs	r0, r3
 8001872:	2314      	movs	r3, #20
 8001874:	001a      	movs	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	f004 fe4a 	bl	8006510 <memset>
  if(hi2c->Instance==I2C1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <HAL_I2C_MspInit+0x94>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d133      	bne.n	80018ee <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_I2C_MspInit+0x98>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <HAL_I2C_MspInit+0x98>)
 800188c:	2180      	movs	r1, #128	@ 0x80
 800188e:	0289      	lsls	r1, r1, #10
 8001890:	430a      	orrs	r2, r1
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_I2C_MspInit+0x98>)
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	22c0      	movs	r2, #192	@ 0xc0
 80018a6:	00d2      	lsls	r2, r2, #3
 80018a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018aa:	0021      	movs	r1, r4
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2212      	movs	r2, #18
 80018b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2203      	movs	r2, #3
 80018bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2204      	movs	r2, #4
 80018c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	187a      	adds	r2, r7, r1
 80018c6:	2390      	movs	r3, #144	@ 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	0011      	movs	r1, r2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 fd09 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_I2C_MspInit+0x98>)
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_I2C_MspInit+0x98>)
 80018d8:	2180      	movs	r1, #128	@ 0x80
 80018da:	0389      	lsls	r1, r1, #14
 80018dc:	430a      	orrs	r2, r1
 80018de:	61da      	str	r2, [r3, #28]
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_I2C_MspInit+0x98>)
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	039b      	lsls	r3, r3, #14
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b00b      	add	sp, #44	@ 0x2c
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	40005400 	.word	0x40005400
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08b      	sub	sp, #44	@ 0x2c
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	2414      	movs	r4, #20
 800190a:	193b      	adds	r3, r7, r4
 800190c:	0018      	movs	r0, r3
 800190e:	2314      	movs	r3, #20
 8001910:	001a      	movs	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f004 fdfc 	bl	8006510 <memset>
  if(hspi->Instance==SPI1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a20      	ldr	r2, [pc, #128]	@ (80019a0 <HAL_SPI_MspInit+0xa0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d13a      	bne.n	8001998 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_SPI_MspInit+0xa4>)
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_SPI_MspInit+0xa4>)
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	0149      	lsls	r1, r1, #5
 800192c:	430a      	orrs	r2, r1
 800192e:	619a      	str	r2, [r3, #24]
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_SPI_MspInit+0xa4>)
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_SPI_MspInit+0xa4>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_SPI_MspInit+0xa4>)
 8001944:	2180      	movs	r1, #128	@ 0x80
 8001946:	0289      	lsls	r1, r1, #10
 8001948:	430a      	orrs	r2, r1
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_SPI_MspInit+0xa4>)
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	029b      	lsls	r3, r3, #10
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800195a:	0021      	movs	r1, r4
 800195c:	187b      	adds	r3, r7, r1
 800195e:	22e0      	movs	r2, #224	@ 0xe0
 8001960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2202      	movs	r2, #2
 8001966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2203      	movs	r2, #3
 8001972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	187a      	adds	r2, r7, r1
 800197c:	2390      	movs	r3, #144	@ 0x90
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	0011      	movs	r1, r2
 8001982:	0018      	movs	r0, r3
 8001984:	f000 fcae 	bl	80022e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2019      	movs	r0, #25
 800198e:	f000 faf3 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001992:	2019      	movs	r0, #25
 8001994:	f000 fb05 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b00b      	add	sp, #44	@ 0x2c
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <HAL_TIM_Base_MspInit+0xa0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d141      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <HAL_TIM_Base_MspInit+0xa4>)
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_TIM_Base_MspInit+0xa4>)
 80019c0:	2102      	movs	r1, #2
 80019c2:	430a      	orrs	r2, r1
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <HAL_TIM_Base_MspInit+0xa4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <HAL_TIM_Base_MspInit+0xac>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019da:	2210      	movs	r2, #16
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019e6:	2280      	movs	r2, #128	@ 0x80
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	00d2      	lsls	r2, r2, #3
 80019f8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fae7 	bl	8001fdc <HAL_DMA_Init>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001a12:	f7ff fe2b 	bl	800166c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 8001a26:	621a      	str	r2, [r3, #32]
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_TIM_Base_MspInit+0xa8>)
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2010      	movs	r0, #16
 8001a34:	f000 faa0 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a38:	2010      	movs	r0, #16
 8001a3a:	f000 fab2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	20000190 	.word	0x20000190
 8001a54:	40020030 	.word	0x40020030

08001a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	240c      	movs	r4, #12
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	0018      	movs	r0, r3
 8001a66:	2314      	movs	r3, #20
 8001a68:	001a      	movs	r2, r3
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f004 fd50 	bl	8006510 <memset>
  if(htim->Instance==TIM3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <HAL_TIM_MspPostInit+0x74>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d123      	bne.n	8001ac2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_TIM_MspPostInit+0x78>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_TIM_MspPostInit+0x78>)
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	02c9      	lsls	r1, r1, #11
 8001a84:	430a      	orrs	r2, r1
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_TIM_MspPostInit+0x78>)
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	02db      	lsls	r3, r3, #11
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 8001a96:	0021      	movs	r1, r4
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2232      	movs	r2, #50	@ 0x32
 8001a9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_TIM_MspPostInit+0x7c>)
 8001aba:	0019      	movs	r1, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	f000 fc11 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b009      	add	sp, #36	@ 0x24
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b08b      	sub	sp, #44	@ 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	2414      	movs	r4, #20
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	2314      	movs	r3, #20
 8001ae8:	001a      	movs	r2, r3
 8001aea:	2100      	movs	r1, #0
 8001aec:	f004 fd10 	bl	8006510 <memset>
  if(huart->Instance==USART1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <HAL_UART_MspInit+0xa0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d139      	bne.n	8001b6e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <HAL_UART_MspInit+0xa4>)
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <HAL_UART_MspInit+0xa4>)
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	01c9      	lsls	r1, r1, #7
 8001b04:	430a      	orrs	r2, r1
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <HAL_UART_MspInit+0xa4>)
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_UART_MspInit+0xa4>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_UART_MspInit+0xa4>)
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	02c9      	lsls	r1, r1, #11
 8001b20:	430a      	orrs	r2, r1
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <HAL_UART_MspInit+0xa4>)
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	02db      	lsls	r3, r3, #11
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b32:	0021      	movs	r1, r4
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	22c0      	movs	r2, #192	@ 0xc0
 8001b38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_UART_MspInit+0xa8>)
 8001b56:	0019      	movs	r1, r3
 8001b58:	0010      	movs	r0, r2
 8001b5a:	f000 fbc3 	bl	80022e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	201b      	movs	r0, #27
 8001b64:	f000 fa08 	bl	8001f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b68:	201b      	movs	r0, #27
 8001b6a:	f000 fa1a 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b00b      	add	sp, #44	@ 0x2c
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	e7fd      	b.n	8001b88 <NMI_Handler+0x4>

08001b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	e7fd      	b.n	8001b90 <HardFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f8f8 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <DMA1_Channel2_3_IRQHandler+0x14>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 fad1 	bl	8002166 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	20000190 	.word	0x20000190

08001bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <TIM3_IRQHandler+0x14>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 fda8 	bl	800472c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	20000148 	.word	0x20000148

08001be8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <SPI1_IRQHandler+0x14>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f002 f97e 	bl	8003ef0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	200000e4 	.word	0x200000e4

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <USART1_IRQHandler+0x14>)
 8001c06:	0018      	movs	r0, r3
 8001c08:	f003 fcb6 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	200001d4 	.word	0x200001d4

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f004 fc7c 	bl	8006544 <__errno>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	425b      	negs	r3, r3
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	18d2      	adds	r2, r2, r3
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <_sbrk+0x64>)
 8001c68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b006      	add	sp, #24
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20001000 	.word	0x20001000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000284 	.word	0x20000284
 8001c80:	200003d8 	.word	0x200003d8

08001c84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <sendDataToESP32>:
 *  Created on: Nov 17, 2024
 *      Author: HOME
 */
#include "uart_ESP.h"

void sendDataToESP32(char *data) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)data, strlen(data), HAL_MAX_DELAY); // Gửi dữ liệu qua UART
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7fe fa34 	bl	8000108 <strlen>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <sendDataToESP32+0x28>)
 8001cac:	f003 fbc4 	bl	8005438 <HAL_UART_Transmit>
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200001d4 	.word	0x200001d4

08001cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cbc:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc0:	f7ff ffe0 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc4:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cc6:	490d      	ldr	r1, [pc, #52]	@ (8001cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <LoopForever+0xe>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ccc:	e002      	b.n	8001cd4 <LoopCopyDataInit>

08001cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd2:	3304      	adds	r3, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd8:	d3f9      	bcc.n	8001cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d08 <LoopForever+0x16>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce0:	e001      	b.n	8001ce6 <LoopFillZerobss>

08001ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce4:	3204      	adds	r2, #4

08001ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce8:	d3fb      	bcc.n	8001ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cea:	f004 fc31 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cee:	f7ff f9a9 	bl	8001044 <main>

08001cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cf2:	e7fe      	b.n	8001cf2 <LoopForever>
  ldr   r0, =_estack
 8001cf4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d00:	08006e34 	.word	0x08006e34
  ldr r2, =_sbss
 8001d04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d08:	200003d4 	.word	0x200003d4

08001d0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_IRQHandler>
	...

08001d10 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_Init+0x24>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_Init+0x24>)
 8001d1a:	2110      	movs	r1, #16
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f000 f809 	bl	8001d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d26:	f7ff fd79 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	40022000 	.word	0x40022000

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <HAL_InitTick+0x5c>)
 8001d42:	681c      	ldr	r4, [r3, #0]
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_InitTick+0x60>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	0019      	movs	r1, r3
 8001d4a:	23fa      	movs	r3, #250	@ 0xfa
 8001d4c:	0098      	lsls	r0, r3, #2
 8001d4e:	f7fe f9ed 	bl	800012c <__udivsi3>
 8001d52:	0003      	movs	r3, r0
 8001d54:	0019      	movs	r1, r3
 8001d56:	0020      	movs	r0, r4
 8001d58:	f7fe f9e8 	bl	800012c <__udivsi3>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 f92f 	bl	8001fc2 <HAL_SYSTICK_Config>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e00f      	b.n	8001d8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d80b      	bhi.n	8001d8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	2301      	movs	r3, #1
 8001d76:	425b      	negs	r3, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 f8fc 	bl	8001f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_InitTick+0x64>)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b003      	add	sp, #12
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_IncTick+0x1c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	001a      	movs	r2, r3
 8001daa:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	18d2      	adds	r2, r2, r3
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001db2:	601a      	str	r2, [r3, #0]
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000288 	.word	0x20000288

08001dc4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	@ (8001dd4 <HAL_GetTick+0x10>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	20000288 	.word	0x20000288

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fff0 	bl	8001dc4 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	001a      	movs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dfe:	46c0      	nop			@ (mov r8, r8)
 8001e00:	f7ff ffe0 	bl	8001dc4 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b004      	add	sp, #16
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	20000008 	.word	0x20000008

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	0002      	movs	r2, r0
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	1dfb      	adds	r3, r7, #7
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e32:	d809      	bhi.n	8001e48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	001a      	movs	r2, r3
 8001e3a:	231f      	movs	r3, #31
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <__NVIC_EnableIRQ+0x30>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	4091      	lsls	r1, r2
 8001e44:	000a      	movs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
  }
}
 8001e48:	46c0      	nop			@ (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e68:	d828      	bhi.n	8001ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f28 <__NVIC_SetPriority+0xd4>)
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	33c0      	adds	r3, #192	@ 0xc0
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	589b      	ldr	r3, [r3, r2]
 8001e7a:	1dfa      	adds	r2, r7, #7
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	0011      	movs	r1, r2
 8001e80:	2203      	movs	r2, #3
 8001e82:	400a      	ands	r2, r1
 8001e84:	00d2      	lsls	r2, r2, #3
 8001e86:	21ff      	movs	r1, #255	@ 0xff
 8001e88:	4091      	lsls	r1, r2
 8001e8a:	000a      	movs	r2, r1
 8001e8c:	43d2      	mvns	r2, r2
 8001e8e:	401a      	ands	r2, r3
 8001e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	22ff      	movs	r2, #255	@ 0xff
 8001e98:	401a      	ands	r2, r3
 8001e9a:	1dfb      	adds	r3, r7, #7
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	4003      	ands	r3, r0
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea8:	481f      	ldr	r0, [pc, #124]	@ (8001f28 <__NVIC_SetPriority+0xd4>)
 8001eaa:	1dfb      	adds	r3, r7, #7
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	33c0      	adds	r3, #192	@ 0xc0
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001eba:	e031      	b.n	8001f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f2c <__NVIC_SetPriority+0xd8>)
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3306      	adds	r3, #6
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	18d3      	adds	r3, r2, r3
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	1dfa      	adds	r2, r7, #7
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	0011      	movs	r1, r2
 8001edc:	2203      	movs	r2, #3
 8001ede:	400a      	ands	r2, r1
 8001ee0:	00d2      	lsls	r2, r2, #3
 8001ee2:	21ff      	movs	r1, #255	@ 0xff
 8001ee4:	4091      	lsls	r1, r2
 8001ee6:	000a      	movs	r2, r1
 8001ee8:	43d2      	mvns	r2, r2
 8001eea:	401a      	ands	r2, r3
 8001eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	22ff      	movs	r2, #255	@ 0xff
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	1dfb      	adds	r3, r7, #7
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	0018      	movs	r0, r3
 8001efc:	2303      	movs	r3, #3
 8001efe:	4003      	ands	r3, r0
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f04:	4809      	ldr	r0, [pc, #36]	@ (8001f2c <__NVIC_SetPriority+0xd8>)
 8001f06:	1dfb      	adds	r3, r7, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	4023      	ands	r3, r4
 8001f10:	3b08      	subs	r3, #8
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	430a      	orrs	r2, r1
 8001f16:	3306      	adds	r3, #6
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	18c3      	adds	r3, r0, r3
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b003      	add	sp, #12
 8001f26:	bd90      	pop	{r4, r7, pc}
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	045b      	lsls	r3, r3, #17
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d301      	bcc.n	8001f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f44:	2301      	movs	r3, #1
 8001f46:	e010      	b.n	8001f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <SysTick_Config+0x44>)
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f50:	2301      	movs	r3, #1
 8001f52:	425b      	negs	r3, r3
 8001f54:	2103      	movs	r1, #3
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff ff7c 	bl	8001e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <SysTick_Config+0x44>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <SysTick_Config+0x44>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	210f      	movs	r1, #15
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	1c02      	adds	r2, r0, #0
 8001f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ff5d 	bl	8001e54 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	0002      	movs	r2, r0
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff ff33 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff ffaf 	bl	8001f30 <SysTick_Config>
 8001fd2:	0003      	movs	r3, r0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e036      	b.n	8002060 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2221      	movs	r2, #33	@ 0x21
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_DMA_Init+0x8c>)
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f932 	bl	80022ac <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	@ 0x21
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	2100      	movs	r1, #0
 800205c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	ffffc00f 	.word	0xffffc00f

0800206c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2221      	movs	r2, #33	@ 0x21
 8002078:	5c9b      	ldrb	r3, [r3, r2]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2204      	movs	r2, #4
 8002084:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	210e      	movs	r1, #14
 800209e:	438a      	bics	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	438a      	bics	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ba:	2101      	movs	r1, #1
 80020bc:	4091      	lsls	r1, r2
 80020be:	000a      	movs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2221      	movs	r2, #33	@ 0x21
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	210f      	movs	r1, #15
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2221      	movs	r2, #33	@ 0x21
 80020f0:	5c9b      	ldrb	r3, [r3, r2]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d006      	beq.n	8002106 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2204      	movs	r2, #4
 80020fc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e028      	b.n	8002158 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	210e      	movs	r1, #14
 8002112:	438a      	bics	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	438a      	bics	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212e:	2101      	movs	r1, #1
 8002130:	4091      	lsls	r1, r2
 8002132:	000a      	movs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2221      	movs	r2, #33	@ 0x21
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	0010      	movs	r0, r2
 8002156:	4798      	blx	r3
    }
  }
  return status;
 8002158:	230f      	movs	r3, #15
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	d024      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x72>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2204      	movs	r2, #4
 8002192:	4013      	ands	r3, r2
 8002194:	d020      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2220      	movs	r2, #32
 800219e:	4013      	ands	r3, r2
 80021a0:	d107      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2104      	movs	r1, #4
 80021ae:	438a      	bics	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ba:	2104      	movs	r1, #4
 80021bc:	4091      	lsls	r1, r2
 80021be:	000a      	movs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <HAL_DMA_IRQHandler+0x66>
 80021ca:	e06a      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	0010      	movs	r0, r2
 80021d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021d6:	e064      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	2202      	movs	r2, #2
 80021de:	409a      	lsls	r2, r3
 80021e0:	0013      	movs	r3, r2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	d02b      	beq.n	8002240 <HAL_DMA_IRQHandler+0xda>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d027      	beq.n	8002240 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	d10b      	bne.n	8002214 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	210a      	movs	r1, #10
 8002208:	438a      	bics	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2221      	movs	r2, #33	@ 0x21
 8002210:	2101      	movs	r1, #1
 8002212:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	2102      	movs	r1, #2
 800221e:	4091      	lsls	r1, r2
 8002220:	000a      	movs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	d036      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	0010      	movs	r0, r2
 800223c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800223e:	e030      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	2208      	movs	r2, #8
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	d028      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2208      	movs	r2, #8
 8002254:	4013      	ands	r3, r2
 8002256:	d024      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	210e      	movs	r1, #14
 8002264:	438a      	bics	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002270:	2101      	movs	r1, #1
 8002272:	4091      	lsls	r1, r2
 8002274:	000a      	movs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2221      	movs	r2, #33	@ 0x21
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	0010      	movs	r0, r2
 800229e:	4798      	blx	r3
    }
  }
}
 80022a0:	e7ff      	b.n	80022a2 <HAL_DMA_IRQHandler+0x13c>
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <DMA_CalcBaseAndBitshift+0x30>)
 80022ba:	4694      	mov	ip, r2
 80022bc:	4463      	add	r3, ip
 80022be:	2114      	movs	r1, #20
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7fd ff33 	bl	800012c <__udivsi3>
 80022c6:	0003      	movs	r3, r0
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a03      	ldr	r2, [pc, #12]	@ (80022e0 <DMA_CalcBaseAndBitshift+0x34>)
 80022d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	bffdfff8 	.word	0xbffdfff8
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e149      	b.n	8002588 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4091      	lsls	r1, r2
 80022fe:	000a      	movs	r2, r1
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <HAL_GPIO_Init+0x28>
 800230a:	e13a      	b.n	8002582 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2203      	movs	r2, #3
 8002312:	4013      	ands	r3, r2
 8002314:	2b01      	cmp	r3, #1
 8002316:	d005      	beq.n	8002324 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002320:	2b02      	cmp	r3, #2
 8002322:	d130      	bne.n	8002386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	409a      	lsls	r2, r3
 8002332:	0013      	movs	r3, r2
 8002334:	43da      	mvns	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	0013      	movs	r3, r2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235a:	2201      	movs	r2, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	2201      	movs	r2, #1
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	4013      	ands	r3, r2
 800238e:	2b03      	cmp	r3, #3
 8002390:	d017      	beq.n	80023c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	58d3      	ldr	r3, [r2, r3]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2207      	movs	r2, #7
 80023e0:	4013      	ands	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2107      	movs	r1, #7
 80023fa:	400b      	ands	r3, r1
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	409a      	lsls	r2, r3
 8002400:	0013      	movs	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	6939      	ldr	r1, [r7, #16]
 8002414:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	43da      	mvns	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2203      	movs	r2, #3
 8002434:	401a      	ands	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	23c0      	movs	r3, #192	@ 0xc0
 8002450:	029b      	lsls	r3, r3, #10
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_GPIO_Init+0x174>
 8002456:	e094      	b.n	8002582 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	4b51      	ldr	r3, [pc, #324]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	4b50      	ldr	r3, [pc, #320]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	4b4e      	ldr	r3, [pc, #312]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002470:	4a4c      	ldr	r2, [pc, #304]	@ (80025a4 <HAL_GPIO_Init+0x2c0>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	589b      	ldr	r3, [r3, r2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2203      	movs	r2, #3
 8002482:	4013      	ands	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	409a      	lsls	r2, r3
 800248a:	0013      	movs	r3, r2
 800248c:	43da      	mvns	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	2390      	movs	r3, #144	@ 0x90
 8002498:	05db      	lsls	r3, r3, #23
 800249a:	429a      	cmp	r2, r3
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x1d6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a41      	ldr	r2, [pc, #260]	@ (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x1d2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <HAL_GPIO_Init+0x2c8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x1ce>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x1d8>
 80024b2:	2305      	movs	r3, #5
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x1d8>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x1d8>
 80024ba:	2300      	movs	r3, #0
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	2103      	movs	r1, #3
 80024c0:	400a      	ands	r2, r1
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	@ (80025a4 <HAL_GPIO_Init+0x2c0>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43da      	mvns	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	035b      	lsls	r3, r3, #13
 80024f2:	4013      	ands	r3, r2
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024fe:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002504:	4b2a      	ldr	r3, [pc, #168]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43da      	mvns	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	039b      	lsls	r3, r3, #14
 800251c:	4013      	ands	r3, r2
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002528:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43da      	mvns	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	4013      	ands	r3, r2
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002558:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43da      	mvns	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	4013      	ands	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	40da      	lsrs	r2, r3
 8002590:	1e13      	subs	r3, r2, #0
 8002592:	d000      	beq.n	8002596 <HAL_GPIO_Init+0x2b2>
 8002594:	e6ae      	b.n	80022f4 <HAL_GPIO_Init+0x10>
  } 
}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b006      	add	sp, #24
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	000a      	movs	r2, r1
 80025be:	1cbb      	adds	r3, r7, #2
 80025c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	1cba      	adds	r2, r7, #2
 80025c8:	8812      	ldrh	r2, [r2, #0]
 80025ca:	4013      	ands	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80025ce:	230f      	movs	r3, #15
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e003      	b.n	80025e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d8:	230f      	movs	r3, #15
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80025e0:	230f      	movs	r3, #15
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	781b      	ldrb	r3, [r3, #0]
  }
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	0008      	movs	r0, r1
 80025f8:	0011      	movs	r1, r2
 80025fa:	1cbb      	adds	r3, r7, #2
 80025fc:	1c02      	adds	r2, r0, #0
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	1c7b      	adds	r3, r7, #1
 8002602:	1c0a      	adds	r2, r1, #0
 8002604:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002606:	1c7b      	adds	r3, r7, #1
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260e:	1cbb      	adds	r3, r7, #2
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002616:	e003      	b.n	8002620 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002618:	1cbb      	adds	r3, r7, #2
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e08f      	b.n	800275a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2241      	movs	r2, #65	@ 0x41
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2240      	movs	r2, #64	@ 0x40
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff f907 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2241      	movs	r2, #65	@ 0x41
 800265a:	2124      	movs	r1, #36	@ 0x24
 800265c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	438a      	bics	r2, r1
 800266c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	493b      	ldr	r1, [pc, #236]	@ (8002764 <HAL_I2C_Init+0x13c>)
 8002678:	400a      	ands	r2, r1
 800267a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4938      	ldr	r1, [pc, #224]	@ (8002768 <HAL_I2C_Init+0x140>)
 8002688:	400a      	ands	r2, r1
 800268a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	0209      	lsls	r1, r1, #8
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e007      	b.n	80026b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2184      	movs	r1, #132	@ 0x84
 80026b0:	0209      	lsls	r1, r1, #8
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d109      	bne.n	80026d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2180      	movs	r1, #128	@ 0x80
 80026ca:	0109      	lsls	r1, r1, #4
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e007      	b.n	80026e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4923      	ldr	r1, [pc, #140]	@ (800276c <HAL_I2C_Init+0x144>)
 80026de:	400a      	ands	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4920      	ldr	r1, [pc, #128]	@ (8002770 <HAL_I2C_Init+0x148>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	491a      	ldr	r1, [pc, #104]	@ (8002768 <HAL_I2C_Init+0x140>)
 80026fe:	400a      	ands	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	431a      	orrs	r2, r3
 800270c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69d9      	ldr	r1, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2101      	movs	r1, #1
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2241      	movs	r2, #65	@ 0x41
 8002746:	2120      	movs	r1, #32
 8002748:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2242      	movs	r2, #66	@ 0x42
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	f0ffffff 	.word	0xf0ffffff
 8002768:	ffff7fff 	.word	0xffff7fff
 800276c:	fffff7ff 	.word	0xfffff7ff
 8002770:	02008000 	.word	0x02008000

08002774 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	0008      	movs	r0, r1
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	0019      	movs	r1, r3
 8002782:	230a      	movs	r3, #10
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	1c02      	adds	r2, r0, #0
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	2308      	movs	r3, #8
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	1c0a      	adds	r2, r1, #0
 8002790:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2241      	movs	r2, #65	@ 0x41
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b20      	cmp	r3, #32
 800279c:	d000      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0x2c>
 800279e:	e10a      	b.n	80029b6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2240      	movs	r2, #64	@ 0x40
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Master_Transmit+0x3a>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e104      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x244>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2240      	movs	r2, #64	@ 0x40
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027b6:	f7ff fb05 	bl	8001dc4 <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	0219      	lsls	r1, r3, #8
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2319      	movs	r3, #25
 80027ca:	2201      	movs	r2, #1
 80027cc:	f000 f91e 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0ef      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2241      	movs	r2, #65	@ 0x41
 80027dc:	2121      	movs	r1, #33	@ 0x21
 80027de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2242      	movs	r2, #66	@ 0x42
 80027e4:	2110      	movs	r1, #16
 80027e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2208      	movs	r2, #8
 80027f8:	18ba      	adds	r2, r7, r2
 80027fa:	8812      	ldrh	r2, [r2, #0]
 80027fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2bff      	cmp	r3, #255	@ 0xff
 800280c:	d906      	bls.n	800281c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	@ 0xff
 8002812:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	045b      	lsls	r3, r3, #17
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e007      	b.n	800282c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002826:	2380      	movs	r3, #128	@ 0x80
 8002828:	049b      	lsls	r3, r3, #18
 800282a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	d027      	beq.n	8002884 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	697c      	ldr	r4, [r7, #20]
 8002870:	230a      	movs	r3, #10
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	8819      	ldrh	r1, [r3, #0]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	4b51      	ldr	r3, [pc, #324]	@ (80029c0 <HAL_I2C_Master_Transmit+0x24c>)
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	0023      	movs	r3, r4
 800287e:	f000 fa9f 	bl	8002dc0 <I2C_TransferConfig>
 8002882:	e06f      	b.n	8002964 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	b2da      	uxtb	r2, r3
 800288a:	697c      	ldr	r4, [r7, #20]
 800288c:	230a      	movs	r3, #10
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	8819      	ldrh	r1, [r3, #0]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <HAL_I2C_Master_Transmit+0x24c>)
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	0023      	movs	r3, r4
 800289a:	f000 fa91 	bl	8002dc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800289e:	e061      	b.n	8002964 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f908 	bl	8002abc <I2C_WaitOnTXISFlagUntilTimeout>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e081      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_I2C_Master_Transmit+0x1f0>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d136      	bne.n	8002964 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	0013      	movs	r3, r2
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	@ 0x80
 8002904:	f000 f882 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 8002908:	1e03      	subs	r3, r0, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e053      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2bff      	cmp	r3, #255	@ 0xff
 8002918:	d911      	bls.n	800293e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	22ff      	movs	r2, #255	@ 0xff
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	045c      	lsls	r4, r3, #17
 800292a:	230a      	movs	r3, #10
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	8819      	ldrh	r1, [r3, #0]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	0023      	movs	r3, r4
 8002938:	f000 fa42 	bl	8002dc0 <I2C_TransferConfig>
 800293c:	e012      	b.n	8002964 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	b2da      	uxtb	r2, r3
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	049c      	lsls	r4, r3, #18
 8002952:	230a      	movs	r3, #10
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	8819      	ldrh	r1, [r3, #0]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	0023      	movs	r3, r4
 8002960:	f000 fa2e 	bl	8002dc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d198      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f8e7 	bl	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e01a      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2220      	movs	r2, #32
 8002988:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	490b      	ldr	r1, [pc, #44]	@ (80029c4 <HAL_I2C_Master_Transmit+0x250>)
 8002996:	400a      	ands	r2, r1
 8002998:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2241      	movs	r2, #65	@ 0x41
 800299e:	2120      	movs	r1, #32
 80029a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2242      	movs	r2, #66	@ 0x42
 80029a6:	2100      	movs	r1, #0
 80029a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2240      	movs	r2, #64	@ 0x40
 80029ae:	2100      	movs	r1, #0
 80029b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b007      	add	sp, #28
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	80002000 	.word	0x80002000
 80029c4:	fe00e800 	.word	0xfe00e800

080029c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2202      	movs	r2, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d103      	bne.n	80029e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d007      	beq.n	8002a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2101      	movs	r1, #1
 8002a00:	430a      	orrs	r2, r1
 8002a02:	619a      	str	r2, [r3, #24]
  }
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1c:	e03a      	b.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f8d3 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e040      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	d02d      	beq.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7ff f9c4 	bl	8001dc4 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d122      	bne.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	425a      	negs	r2, r3
 8002a5e:	4153      	adcs	r3, r2
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	001a      	movs	r2, r3
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d113      	bne.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a70:	2220      	movs	r2, #32
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2241      	movs	r2, #65	@ 0x41
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2242      	movs	r2, #66	@ 0x42
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2240      	movs	r2, #64	@ 0x40
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e00f      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	425a      	negs	r2, r3
 8002aa4:	4153      	adcs	r3, r2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d0b5      	beq.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac8:	e032      	b.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f87d 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e030      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	d025      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	f7ff f96e 	bl	8001dc4 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d302      	bcc.n	8002afa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11a      	bne.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2202      	movs	r2, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d013      	beq.n	8002b30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2241      	movs	r2, #65	@ 0x41
 8002b18:	2120      	movs	r1, #32
 8002b1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2242      	movs	r2, #66	@ 0x42
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2240      	movs	r2, #64	@ 0x40
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e007      	b.n	8002b40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d1c5      	bne.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	0018      	movs	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b54:	e02f      	b.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f837 	bl	8002bd0 <I2C_IsErrorOccurred>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02d      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7ff f92b 	bl	8001dc4 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2220      	movs	r2, #32
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d013      	beq.n	8002bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	2220      	movs	r2, #32
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2241      	movs	r2, #65	@ 0x41
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2242      	movs	r2, #66	@ 0x42
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2240      	movs	r2, #64	@ 0x40
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e007      	b.n	8002bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d1c8      	bne.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2327      	movs	r3, #39	@ 0x27
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <I2C_IsErrorOccurred+0x2e>
 8002bfc:	e079      	b.n	8002cf2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2210      	movs	r2, #16
 8002c04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c06:	e057      	b.n	8002cb8 <I2C_IsErrorOccurred+0xe8>
 8002c08:	2227      	movs	r2, #39	@ 0x27
 8002c0a:	18bb      	adds	r3, r7, r2
 8002c0c:	18ba      	adds	r2, r7, r2
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	d04f      	beq.n	8002cb8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c18:	f7ff f8d4 	bl	8001dc4 <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d302      	bcc.n	8002c2e <I2C_IsErrorOccurred+0x5e>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d144      	bne.n	8002cb8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	01db      	lsls	r3, r3, #7
 8002c38:	4013      	ands	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c3c:	2013      	movs	r0, #19
 8002c3e:	183b      	adds	r3, r7, r0
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	2142      	movs	r1, #66	@ 0x42
 8002c44:	5c52      	ldrb	r2, [r2, r1]
 8002c46:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	401a      	ands	r2, r3
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d126      	bne.n	8002caa <I2C_IsErrorOccurred+0xda>
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	01db      	lsls	r3, r3, #7
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d021      	beq.n	8002caa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002c66:	183b      	adds	r3, r7, r0
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d01d      	beq.n	8002caa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2180      	movs	r1, #128	@ 0x80
 8002c7a:	01c9      	lsls	r1, r1, #7
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c80:	f7ff f8a0 	bl	8001dc4 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	e00f      	b.n	8002caa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c8a:	f7ff f89b 	bl	8001dc4 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b19      	cmp	r3, #25
 8002c96:	d908      	bls.n	8002caa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ca0:	2327      	movs	r3, #39	@ 0x27
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]

              break;
 8002ca8:	e006      	b.n	8002cb8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d1e8      	bne.n	8002c8a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d004      	beq.n	8002cd0 <I2C_IsErrorOccurred+0x100>
 8002cc6:	2327      	movs	r3, #39	@ 0x27
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d09b      	beq.n	8002c08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cd0:	2327      	movs	r3, #39	@ 0x27
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cea:	2327      	movs	r3, #39	@ 0x27
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00c      	beq.n	8002d1e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2280      	movs	r2, #128	@ 0x80
 8002d12:	0052      	lsls	r2, r2, #1
 8002d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d16:	2327      	movs	r3, #39	@ 0x27
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4013      	ands	r3, r2
 8002d26:	d00c      	beq.n	8002d42 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2280      	movs	r2, #128	@ 0x80
 8002d36:	00d2      	lsls	r2, r2, #3
 8002d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d3a:	2327      	movs	r3, #39	@ 0x27
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d00c      	beq.n	8002d66 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4313      	orrs	r3, r2
 8002d52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2280      	movs	r2, #128	@ 0x80
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d5e:	2327      	movs	r3, #39	@ 0x27
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002d66:	2327      	movs	r3, #39	@ 0x27
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01d      	beq.n	8002dac <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7ff fe28 	bl	80029c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	490e      	ldr	r1, [pc, #56]	@ (8002dbc <I2C_IsErrorOccurred+0x1ec>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2241      	movs	r2, #65	@ 0x41
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2242      	movs	r2, #66	@ 0x42
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2240      	movs	r2, #64	@ 0x40
 8002da8:	2100      	movs	r1, #0
 8002daa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002dac:	2327      	movs	r3, #39	@ 0x27
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b00a      	add	sp, #40	@ 0x28
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	fe00e800 	.word	0xfe00e800

08002dc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	0008      	movs	r0, r1
 8002dca:	0011      	movs	r1, r2
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	240a      	movs	r4, #10
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	1c02      	adds	r2, r0, #0
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	2009      	movs	r0, #9
 8002dd8:	183b      	adds	r3, r7, r0
 8002dda:	1c0a      	adds	r2, r1, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dde:	193b      	adds	r3, r7, r4
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	059b      	lsls	r3, r3, #22
 8002de4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002de6:	183b      	adds	r3, r7, r0
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	0419      	lsls	r1, r3, #16
 8002dec:	23ff      	movs	r3, #255	@ 0xff
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e0a:	0d51      	lsrs	r1, r2, #21
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	00d2      	lsls	r2, r2, #3
 8002e10:	400a      	ands	r2, r1
 8002e12:	4907      	ldr	r1, [pc, #28]	@ (8002e30 <I2C_TransferConfig+0x70>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	43d2      	mvns	r2, r2
 8002e18:	401a      	ands	r2, r3
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b007      	add	sp, #28
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	03ff63ff 	.word	0x03ff63ff

08002e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2241      	movs	r2, #65	@ 0x41
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d138      	bne.n	8002ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2240      	movs	r2, #64	@ 0x40
 8002e4e:	5c9b      	ldrb	r3, [r3, r2]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e032      	b.n	8002ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	@ 0x40
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2241      	movs	r2, #65	@ 0x41
 8002e64:	2124      	movs	r1, #36	@ 0x24
 8002e66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4911      	ldr	r1, [pc, #68]	@ (8002ec8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2241      	movs	r2, #65	@ 0x41
 8002eac:	2120      	movs	r1, #32
 8002eae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2240      	movs	r2, #64	@ 0x40
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	ffffefff 	.word	0xffffefff

08002ecc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2241      	movs	r2, #65	@ 0x41
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d139      	bne.n	8002f56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2240      	movs	r2, #64	@ 0x40
 8002ee6:	5c9b      	ldrb	r3, [r3, r2]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e033      	b.n	8002f58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2241      	movs	r2, #65	@ 0x41
 8002efc:	2124      	movs	r1, #36	@ 0x24
 8002efe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a11      	ldr	r2, [pc, #68]	@ (8002f60 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2241      	movs	r2, #65	@ 0x41
 8002f46:	2120      	movs	r1, #32
 8002f48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2240      	movs	r2, #64	@ 0x40
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	fffff0ff 	.word	0xfffff0ff

08002f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e301      	b.n	800357a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <HAL_RCC_OscConfig+0x1e>
 8002f80:	e08d      	b.n	800309e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f82:	4bc3      	ldr	r3, [pc, #780]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	220c      	movs	r2, #12
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d00e      	beq.n	8002fac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f8e:	4bc0      	ldr	r3, [pc, #768]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	220c      	movs	r2, #12
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x64>
 8002f9a:	4bbd      	ldr	r3, [pc, #756]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	025b      	lsls	r3, r3, #9
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	4bb8      	ldr	r3, [pc, #736]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d100      	bne.n	8002fba <HAL_RCC_OscConfig+0x56>
 8002fb8:	e070      	b.n	800309c <HAL_RCC_OscConfig+0x138>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d000      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x60>
 8002fc2:	e06b      	b.n	800309c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e2d8      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x7c>
 8002fd0:	4baf      	ldr	r3, [pc, #700]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4bae      	ldr	r3, [pc, #696]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	0249      	lsls	r1, r1, #9
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e02f      	b.n	8003040 <HAL_RCC_OscConfig+0xdc>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x9e>
 8002fe8:	4ba9      	ldr	r3, [pc, #676]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4ba8      	ldr	r3, [pc, #672]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	49a9      	ldr	r1, [pc, #676]	@ (8003294 <HAL_RCC_OscConfig+0x330>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	4ba6      	ldr	r3, [pc, #664]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4ba5      	ldr	r3, [pc, #660]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8002ffa:	49a7      	ldr	r1, [pc, #668]	@ (8003298 <HAL_RCC_OscConfig+0x334>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e01e      	b.n	8003040 <HAL_RCC_OscConfig+0xdc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d10e      	bne.n	8003028 <HAL_RCC_OscConfig+0xc4>
 800300a:	4ba1      	ldr	r3, [pc, #644]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4ba0      	ldr	r3, [pc, #640]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003010:	2180      	movs	r1, #128	@ 0x80
 8003012:	02c9      	lsls	r1, r1, #11
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	4b9d      	ldr	r3, [pc, #628]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b9c      	ldr	r3, [pc, #624]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	0249      	lsls	r1, r1, #9
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xdc>
 8003028:	4b99      	ldr	r3, [pc, #612]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b98      	ldr	r3, [pc, #608]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800302e:	4999      	ldr	r1, [pc, #612]	@ (8003294 <HAL_RCC_OscConfig+0x330>)
 8003030:	400a      	ands	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	4b96      	ldr	r3, [pc, #600]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b95      	ldr	r3, [pc, #596]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800303a:	4997      	ldr	r1, [pc, #604]	@ (8003298 <HAL_RCC_OscConfig+0x334>)
 800303c:	400a      	ands	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d014      	beq.n	8003072 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe febc 	bl	8001dc4 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003052:	f7fe feb7 	bl	8001dc4 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	@ 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e28a      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003064:	4b8a      	ldr	r3, [pc, #552]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	@ 0x80
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	4013      	ands	r3, r2
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0xee>
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe fea7 	bl	8001dc4 <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fea2 	bl	8001dc4 <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e275      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	4b80      	ldr	r3, [pc, #512]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	4013      	ands	r3, r2
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x118>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d100      	bne.n	80030aa <HAL_RCC_OscConfig+0x146>
 80030a8:	e069      	b.n	800317e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030aa:	4b79      	ldr	r3, [pc, #484]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	220c      	movs	r2, #12
 80030b0:	4013      	ands	r3, r2
 80030b2:	d00b      	beq.n	80030cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030b4:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	220c      	movs	r2, #12
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d11c      	bne.n	80030fa <HAL_RCC_OscConfig+0x196>
 80030c0:	4b73      	ldr	r3, [pc, #460]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	025b      	lsls	r3, r3, #9
 80030c8:	4013      	ands	r3, r2
 80030ca:	d116      	bne.n	80030fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030cc:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x17e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e24b      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	22f8      	movs	r2, #248	@ 0xf8
 80030e8:	4393      	bics	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	00da      	lsls	r2, r3, #3
 80030f2:	4b67      	ldr	r3, [pc, #412]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f8:	e041      	b.n	800317e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d024      	beq.n	800314c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003102:	4b63      	ldr	r3, [pc, #396]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b62      	ldr	r3, [pc, #392]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003108:	2101      	movs	r1, #1
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe fe59 	bl	8001dc4 <HAL_GetTick>
 8003112:	0003      	movs	r3, r0
 8003114:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fe54 	bl	8001dc4 <HAL_GetTick>
 800311c:	0002      	movs	r2, r0
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e227      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b59      	ldr	r3, [pc, #356]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2202      	movs	r2, #2
 8003130:	4013      	ands	r3, r2
 8003132:	d0f1      	beq.n	8003118 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b56      	ldr	r3, [pc, #344]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	22f8      	movs	r2, #248	@ 0xf8
 800313a:	4393      	bics	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00da      	lsls	r2, r3, #3
 8003144:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e018      	b.n	800317e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314c:	4b50      	ldr	r3, [pc, #320]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b4f      	ldr	r3, [pc, #316]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003152:	2101      	movs	r1, #1
 8003154:	438a      	bics	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fe34 	bl	8001dc4 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003162:	f7fe fe2f 	bl	8001dc4 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e202      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003174:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2202      	movs	r2, #2
 800317a:	4013      	ands	r3, r2
 800317c:	d1f1      	bne.n	8003162 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2208      	movs	r2, #8
 8003184:	4013      	ands	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d019      	beq.n	80031c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003190:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003194:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003196:	2101      	movs	r1, #1
 8003198:	430a      	orrs	r2, r1
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fe fe12 	bl	8001dc4 <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a6:	f7fe fe0d 	bl	8001dc4 <HAL_GetTick>
 80031aa:	0002      	movs	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1e0      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b8:	4b35      	ldr	r3, [pc, #212]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d0f1      	beq.n	80031a6 <HAL_RCC_OscConfig+0x242>
 80031c2:	e018      	b.n	80031f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b32      	ldr	r3, [pc, #200]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80031c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c8:	4b31      	ldr	r3, [pc, #196]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80031ca:	2101      	movs	r1, #1
 80031cc:	438a      	bics	r2, r1
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d0:	f7fe fdf8 	bl	8001dc4 <HAL_GetTick>
 80031d4:	0003      	movs	r3, r0
 80031d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7fe fdf3 	bl	8001dc4 <HAL_GetTick>
 80031de:	0002      	movs	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1c6      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	2202      	movs	r2, #2
 80031f2:	4013      	ands	r3, r2
 80031f4:	d1f1      	bne.n	80031da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	d100      	bne.n	8003202 <HAL_RCC_OscConfig+0x29e>
 8003200:	e0b4      	b.n	800336c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	201f      	movs	r0, #31
 8003204:	183b      	adds	r3, r7, r0
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	2380      	movs	r3, #128	@ 0x80
 8003210:	055b      	lsls	r3, r3, #21
 8003212:	4013      	ands	r3, r2
 8003214:	d110      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003216:	4b1e      	ldr	r3, [pc, #120]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 800321c:	2180      	movs	r1, #128	@ 0x80
 800321e:	0549      	lsls	r1, r1, #21
 8003220:	430a      	orrs	r2, r1
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	4b1a      	ldr	r3, [pc, #104]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	2380      	movs	r3, #128	@ 0x80
 800322a:	055b      	lsls	r3, r3, #21
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003232:	183b      	adds	r3, r7, r0
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	4b18      	ldr	r3, [pc, #96]	@ (800329c <HAL_RCC_OscConfig+0x338>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4013      	ands	r3, r2
 8003242:	d11a      	bne.n	800327a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003244:	4b15      	ldr	r3, [pc, #84]	@ (800329c <HAL_RCC_OscConfig+0x338>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b14      	ldr	r3, [pc, #80]	@ (800329c <HAL_RCC_OscConfig+0x338>)
 800324a:	2180      	movs	r1, #128	@ 0x80
 800324c:	0049      	lsls	r1, r1, #1
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003252:	f7fe fdb7 	bl	8001dc4 <HAL_GetTick>
 8003256:	0003      	movs	r3, r0
 8003258:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fe fdb2 	bl	8001dc4 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e185      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_OscConfig+0x338>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2380      	movs	r3, #128	@ 0x80
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4013      	ands	r3, r2
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10e      	bne.n	80032a0 <HAL_RCC_OscConfig+0x33c>
 8003282:	4b03      	ldr	r3, [pc, #12]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	4b02      	ldr	r3, [pc, #8]	@ (8003290 <HAL_RCC_OscConfig+0x32c>)
 8003288:	2101      	movs	r1, #1
 800328a:	430a      	orrs	r2, r1
 800328c:	621a      	str	r2, [r3, #32]
 800328e:	e035      	b.n	80032fc <HAL_RCC_OscConfig+0x398>
 8003290:	40021000 	.word	0x40021000
 8003294:	fffeffff 	.word	0xfffeffff
 8003298:	fffbffff 	.word	0xfffbffff
 800329c:	40007000 	.word	0x40007000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x35e>
 80032a8:	4bb6      	ldr	r3, [pc, #728]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	4bb5      	ldr	r3, [pc, #724]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	438a      	bics	r2, r1
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	4bb3      	ldr	r3, [pc, #716]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	4bb2      	ldr	r3, [pc, #712]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032ba:	2104      	movs	r1, #4
 80032bc:	438a      	bics	r2, r1
 80032be:	621a      	str	r2, [r3, #32]
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0x398>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x380>
 80032ca:	4bae      	ldr	r3, [pc, #696]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	4bad      	ldr	r3, [pc, #692]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032d0:	2104      	movs	r1, #4
 80032d2:	430a      	orrs	r2, r1
 80032d4:	621a      	str	r2, [r3, #32]
 80032d6:	4bab      	ldr	r3, [pc, #684]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032d8:	6a1a      	ldr	r2, [r3, #32]
 80032da:	4baa      	ldr	r3, [pc, #680]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032dc:	2101      	movs	r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	621a      	str	r2, [r3, #32]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0x398>
 80032e4:	4ba7      	ldr	r3, [pc, #668]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	4ba6      	ldr	r3, [pc, #664]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032ea:	2101      	movs	r1, #1
 80032ec:	438a      	bics	r2, r1
 80032ee:	621a      	str	r2, [r3, #32]
 80032f0:	4ba4      	ldr	r3, [pc, #656]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	4ba3      	ldr	r3, [pc, #652]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80032f6:	2104      	movs	r1, #4
 80032f8:	438a      	bics	r2, r1
 80032fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d014      	beq.n	800332e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fe fd5e 	bl	8001dc4 <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	e009      	b.n	8003322 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe fd59 	bl	8001dc4 <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	4a9b      	ldr	r2, [pc, #620]	@ (8003588 <HAL_RCC_OscConfig+0x624>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e12b      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	4b98      	ldr	r3, [pc, #608]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x3aa>
 800332c:	e013      	b.n	8003356 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7fe fd49 	bl	8001dc4 <HAL_GetTick>
 8003332:	0003      	movs	r3, r0
 8003334:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	e009      	b.n	800334c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fe fd44 	bl	8001dc4 <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	4a91      	ldr	r2, [pc, #580]	@ (8003588 <HAL_RCC_OscConfig+0x624>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e116      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	4b8d      	ldr	r3, [pc, #564]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	2202      	movs	r2, #2
 8003352:	4013      	ands	r3, r2
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003356:	231f      	movs	r3, #31
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4b88      	ldr	r3, [pc, #544]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	4b87      	ldr	r3, [pc, #540]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003366:	4989      	ldr	r1, [pc, #548]	@ (800358c <HAL_RCC_OscConfig+0x628>)
 8003368:	400a      	ands	r2, r1
 800336a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2210      	movs	r2, #16
 8003372:	4013      	ands	r3, r2
 8003374:	d063      	beq.n	800343e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d12a      	bne.n	80033d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800337e:	4b81      	ldr	r3, [pc, #516]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003382:	4b80      	ldr	r3, [pc, #512]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003384:	2104      	movs	r1, #4
 8003386:	430a      	orrs	r2, r1
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800338a:	4b7e      	ldr	r3, [pc, #504]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 800338c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338e:	4b7d      	ldr	r3, [pc, #500]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003396:	f7fe fd15 	bl	8001dc4 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033a0:	f7fe fd10 	bl	8001dc4 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0e3      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033b2:	4b74      	ldr	r3, [pc, #464]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d0f1      	beq.n	80033a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033bc:	4b71      	ldr	r3, [pc, #452]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	22f8      	movs	r2, #248	@ 0xf8
 80033c2:	4393      	bics	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	00da      	lsls	r2, r3, #3
 80033cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033d2:	e034      	b.n	800343e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	3305      	adds	r3, #5
 80033da:	d111      	bne.n	8003400 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033dc:	4b69      	ldr	r3, [pc, #420]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033e2:	2104      	movs	r1, #4
 80033e4:	438a      	bics	r2, r1
 80033e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033e8:	4b66      	ldr	r3, [pc, #408]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	22f8      	movs	r2, #248	@ 0xf8
 80033ee:	4393      	bics	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	00da      	lsls	r2, r3, #3
 80033f8:	4b62      	ldr	r3, [pc, #392]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80033fa:	430a      	orrs	r2, r1
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fe:	e01e      	b.n	800343e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003400:	4b60      	ldr	r3, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003404:	4b5f      	ldr	r3, [pc, #380]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003406:	2104      	movs	r1, #4
 8003408:	430a      	orrs	r2, r1
 800340a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800340c:	4b5d      	ldr	r3, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 800340e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003410:	4b5c      	ldr	r3, [pc, #368]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003412:	2101      	movs	r1, #1
 8003414:	438a      	bics	r2, r1
 8003416:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003418:	f7fe fcd4 	bl	8001dc4 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003422:	f7fe fccf 	bl	8001dc4 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0a2      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003434:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d1f1      	bne.n	8003422 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d100      	bne.n	8003448 <HAL_RCC_OscConfig+0x4e4>
 8003446:	e097      	b.n	8003578 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003448:	4b4e      	ldr	r3, [pc, #312]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	220c      	movs	r2, #12
 800344e:	4013      	ands	r3, r2
 8003450:	2b08      	cmp	r3, #8
 8003452:	d100      	bne.n	8003456 <HAL_RCC_OscConfig+0x4f2>
 8003454:	e06b      	b.n	800352e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d14c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b48      	ldr	r3, [pc, #288]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003464:	494a      	ldr	r1, [pc, #296]	@ (8003590 <HAL_RCC_OscConfig+0x62c>)
 8003466:	400a      	ands	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe fcab 	bl	8001dc4 <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fca6 	bl	8001dc4 <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e079      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	4b3f      	ldr	r3, [pc, #252]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	049b      	lsls	r3, r3, #18
 800348e:	4013      	ands	r3, r2
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003492:	4b3c      	ldr	r3, [pc, #240]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	220f      	movs	r2, #15
 8003498:	4393      	bics	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a0:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034a2:	430a      	orrs	r2, r1
 80034a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034a6:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_RCC_OscConfig+0x630>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	431a      	orrs	r2, r3
 80034ba:	4b32      	ldr	r3, [pc, #200]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b30      	ldr	r3, [pc, #192]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034c6:	2180      	movs	r1, #128	@ 0x80
 80034c8:	0449      	lsls	r1, r1, #17
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fc79 	bl	8001dc4 <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fc74 	bl	8001dc4 <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e047      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ea:	4b26      	ldr	r3, [pc, #152]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	049b      	lsls	r3, r3, #18
 80034f2:	4013      	ands	r3, r2
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x574>
 80034f6:	e03f      	b.n	8003578 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b21      	ldr	r3, [pc, #132]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 80034fe:	4924      	ldr	r1, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x62c>)
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe fc5e 	bl	8001dc4 <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fc59 	bl	8001dc4 <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e02c      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	4b18      	ldr	r3, [pc, #96]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	049b      	lsls	r3, r3, #18
 8003528:	4013      	ands	r3, r2
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x5aa>
 800352c:	e024      	b.n	8003578 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01f      	b.n	800357a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003540:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <HAL_RCC_OscConfig+0x620>)
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	2380      	movs	r3, #128	@ 0x80
 800354a:	025b      	lsls	r3, r3, #9
 800354c:	401a      	ands	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d10e      	bne.n	8003574 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	220f      	movs	r2, #15
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	23f0      	movs	r3, #240	@ 0xf0
 8003568:	039b      	lsls	r3, r3, #14
 800356a:	401a      	ands	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b008      	add	sp, #32
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	40021000 	.word	0x40021000
 8003588:	00001388 	.word	0x00001388
 800358c:	efffffff 	.word	0xefffffff
 8003590:	feffffff 	.word	0xfeffffff
 8003594:	ffc2ffff 	.word	0xffc2ffff

08003598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0b3      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ac:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4013      	ands	r3, r2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d911      	bls.n	80035de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b58      	ldr	r3, [pc, #352]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	4393      	bics	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	4b55      	ldr	r3, [pc, #340]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2201      	movs	r2, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e09a      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2202      	movs	r2, #2
 80035e4:	4013      	ands	r3, r2
 80035e6:	d015      	beq.n	8003614 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2204      	movs	r2, #4
 80035ee:	4013      	ands	r3, r2
 80035f0:	d006      	beq.n	8003600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 80035f8:	21e0      	movs	r1, #224	@ 0xe0
 80035fa:	00c9      	lsls	r1, r1, #3
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	22f0      	movs	r2, #240	@ 0xf0
 8003606:	4393      	bics	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	4013      	ands	r3, r2
 800361c:	d040      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	029b      	lsls	r3, r3, #10
 800362e:	4013      	ands	r3, r2
 8003630:	d114      	bne.n	800365c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06e      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b38      	ldr	r3, [pc, #224]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	049b      	lsls	r3, r3, #18
 8003646:	4013      	ands	r3, r2
 8003648:	d108      	bne.n	800365c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e062      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	4013      	ands	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e05b      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365c:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	4393      	bics	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe fba8 	bl	8001dc4 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003678:	e009      	b.n	800368e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367a:	f7fe fba3 	bl	8001dc4 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	4a27      	ldr	r2, [pc, #156]	@ (8003724 <HAL_RCC_ClockConfig+0x18c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e042      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	220c      	movs	r2, #12
 8003694:	401a      	ands	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1ec      	bne.n	800367a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d211      	bcs.n	80036d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2201      	movs	r2, #1
 80036b4:	4393      	bics	r3, r2
 80036b6:	0019      	movs	r1, r3
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c0:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_RCC_ClockConfig+0x184>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4013      	ands	r3, r2
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e020      	b.n	8003714 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2204      	movs	r2, #4
 80036d8:	4013      	ands	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a11      	ldr	r2, [pc, #68]	@ (8003728 <HAL_RCC_ClockConfig+0x190>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036f0:	f000 f820 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036f4:	0001      	movs	r1, r0
 80036f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <HAL_RCC_ClockConfig+0x188>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	220f      	movs	r2, #15
 80036fe:	4013      	ands	r3, r2
 8003700:	4a0a      	ldr	r2, [pc, #40]	@ (800372c <HAL_RCC_ClockConfig+0x194>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	000a      	movs	r2, r1
 8003706:	40da      	lsrs	r2, r3
 8003708:	4b09      	ldr	r3, [pc, #36]	@ (8003730 <HAL_RCC_ClockConfig+0x198>)
 800370a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800370c:	2000      	movs	r0, #0
 800370e:	f7fe fb13 	bl	8001d38 <HAL_InitTick>
  
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40022000 	.word	0x40022000
 8003720:	40021000 	.word	0x40021000
 8003724:	00001388 	.word	0x00001388
 8003728:	fffff8ff 	.word	0xfffff8ff
 800372c:	08006dc0 	.word	0x08006dc0
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800374e:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	220c      	movs	r2, #12
 8003758:	4013      	ands	r3, r2
 800375a:	2b04      	cmp	r3, #4
 800375c:	d002      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x30>
 800375e:	2b08      	cmp	r3, #8
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x36>
 8003762:	e02c      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003764:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003766:	613b      	str	r3, [r7, #16]
      break;
 8003768:	e02c      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	0c9b      	lsrs	r3, r3, #18
 800376e:	220f      	movs	r2, #15
 8003770:	4013      	ands	r3, r2
 8003772:	4a19      	ldr	r2, [pc, #100]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003778:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	220f      	movs	r2, #15
 800377e:	4013      	ands	r3, r2
 8003780:	4a16      	ldr	r2, [pc, #88]	@ (80037dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003782:	5cd3      	ldrb	r3, [r2, r3]
 8003784:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	025b      	lsls	r3, r3, #9
 800378c:	4013      	ands	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	4810      	ldr	r0, [pc, #64]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003794:	f7fc fcca 	bl	800012c <__udivsi3>
 8003798:	0003      	movs	r3, r0
 800379a:	001a      	movs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4353      	muls	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e009      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	000a      	movs	r2, r1
 80037a8:	0152      	lsls	r2, r2, #5
 80037aa:	1a52      	subs	r2, r2, r1
 80037ac:	0193      	lsls	r3, r2, #6
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	185b      	adds	r3, r3, r1
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
      break;
 80037bc:	e002      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037c0:	613b      	str	r3, [r7, #16]
      break;
 80037c2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	40021000 	.word	0x40021000
 80037d4:	007a1200 	.word	0x007a1200
 80037d8:	08006dd8 	.word	0x08006dd8
 80037dc:	08006de8 	.word	0x08006de8

080037e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b02      	ldr	r3, [pc, #8]	@ (80037f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	20000000 	.word	0x20000000

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037f8:	f7ff fff2 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 80037fc:	0001      	movs	r1, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	2207      	movs	r2, #7
 8003806:	4013      	ands	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x28>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	40d9      	lsrs	r1, r3
 800380e:	000b      	movs	r3, r1
}    
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	40021000 	.word	0x40021000
 800381c:	08006dd0 	.word	0x08006dd0

08003820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	025b      	lsls	r3, r3, #9
 8003838:	4013      	ands	r3, r2
 800383a:	d100      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800383c:	e08e      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2017      	movs	r0, #23
 8003840:	183b      	adds	r3, r7, r0
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	055b      	lsls	r3, r3, #21
 800384e:	4013      	ands	r3, r2
 8003850:	d110      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	4b54      	ldr	r3, [pc, #336]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	4b53      	ldr	r3, [pc, #332]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	0549      	lsls	r1, r1, #21
 800385c:	430a      	orrs	r2, r1
 800385e:	61da      	str	r2, [r3, #28]
 8003860:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	2380      	movs	r3, #128	@ 0x80
 8003866:	055b      	lsls	r3, r3, #21
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	183b      	adds	r3, r7, r0
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	4b4c      	ldr	r3, [pc, #304]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4013      	ands	r3, r2
 800387e:	d11a      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003880:	4b49      	ldr	r3, [pc, #292]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b48      	ldr	r3, [pc, #288]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003886:	2180      	movs	r1, #128	@ 0x80
 8003888:	0049      	lsls	r1, r1, #1
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388e:	f7fe fa99 	bl	8001dc4 <HAL_GetTick>
 8003892:	0003      	movs	r3, r0
 8003894:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	e008      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003898:	f7fe fa94 	bl	8001dc4 <HAL_GetTick>
 800389c:	0002      	movs	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e077      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038aa:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038b8:	6a1a      	ldr	r2, [r3, #32]
 80038ba:	23c0      	movs	r3, #192	@ 0xc0
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d034      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	23c0      	movs	r3, #192	@ 0xc0
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4013      	ands	r3, r2
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d02c      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d8:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a33      	ldr	r2, [pc, #204]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e2:	4b30      	ldr	r3, [pc, #192]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	4b2f      	ldr	r3, [pc, #188]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038e8:	2180      	movs	r1, #128	@ 0x80
 80038ea:	0249      	lsls	r1, r1, #9
 80038ec:	430a      	orrs	r2, r1
 80038ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f0:	4b2c      	ldr	r3, [pc, #176]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038f6:	492e      	ldr	r1, [pc, #184]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038fc:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fa5b 	bl	8001dc4 <HAL_GetTick>
 800390e:	0003      	movs	r3, r0
 8003910:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003912:	e009      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe fa56 	bl	8001dc4 <HAL_GetTick>
 8003918:	0002      	movs	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	4a25      	ldr	r2, [pc, #148]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e038      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	4b1e      	ldr	r3, [pc, #120]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d0f0      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003932:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003938:	4013      	ands	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003942:	430a      	orrs	r2, r1
 8003944:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003946:	2317      	movs	r3, #23
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d105      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	4b13      	ldr	r3, [pc, #76]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003956:	4918      	ldr	r1, [pc, #96]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003958:	400a      	ands	r2, r1
 800395a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003966:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	2203      	movs	r2, #3
 800396c:	4393      	bics	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003976:	430a      	orrs	r2, r1
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	4013      	ands	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003984:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	2210      	movs	r2, #16
 800398a:	4393      	bics	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003994:	430a      	orrs	r2, r1
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b006      	add	sp, #24
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40007000 	.word	0x40007000
 80039ac:	fffffcff 	.word	0xfffffcff
 80039b0:	fffeffff 	.word	0xfffeffff
 80039b4:	00001388 	.word	0x00001388
 80039b8:	efffffff 	.word	0xefffffff

080039bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0a8      	b.n	8003b20 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	2382      	movs	r3, #130	@ 0x82
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	429a      	cmp	r2, r3
 80039e0:	d009      	beq.n	80039f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	61da      	str	r2, [r3, #28]
 80039e8:	e005      	b.n	80039f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	225d      	movs	r2, #93	@ 0x5d
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	225c      	movs	r2, #92	@ 0x5c
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7fd ff74 	bl	8001900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	225d      	movs	r2, #93	@ 0x5d
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2140      	movs	r1, #64	@ 0x40
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	23e0      	movs	r3, #224	@ 0xe0
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d902      	bls.n	8003a42 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	015b      	lsls	r3, r3, #5
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	23f0      	movs	r3, #240	@ 0xf0
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d008      	beq.n	8003a66 <HAL_SPI_Init+0xaa>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	23e0      	movs	r3, #224	@ 0xe0
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	2382      	movs	r3, #130	@ 0x82
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	401a      	ands	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	2384      	movs	r3, #132	@ 0x84
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	400b      	ands	r3, r1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2102      	movs	r1, #2
 8003a82:	400b      	ands	r3, r1
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	400b      	ands	r3, r1
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6999      	ldr	r1, [r3, #24]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	400b      	ands	r3, r1
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2138      	movs	r1, #56	@ 0x38
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	400b      	ands	r3, r1
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	0011      	movs	r1, r2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	019b      	lsls	r3, r3, #6
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	2204      	movs	r2, #4
 8003acc:	401a      	ands	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	2108      	movs	r1, #8
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68d9      	ldr	r1, [r3, #12]
 8003ae6:	23f0      	movs	r3, #240	@ 0xf0
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	400b      	ands	r3, r1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	0011      	movs	r1, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	2380      	movs	r3, #128	@ 0x80
 8003af4:	015b      	lsls	r3, r3, #5
 8003af6:	401a      	ands	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4907      	ldr	r1, [pc, #28]	@ (8003b28 <HAL_SPI_Init+0x16c>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	225d      	movs	r2, #93	@ 0x5d
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b004      	add	sp, #16
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	fffff7ff 	.word	0xfffff7ff

08003b2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	@ 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	001a      	movs	r2, r3
 8003b3a:	1cbb      	adds	r3, r7, #2
 8003b3c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b42:	2323      	movs	r3, #35	@ 0x23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	225c      	movs	r2, #92	@ 0x5c
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_SPI_TransmitReceive+0x2c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e1c4      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x3b6>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	225c      	movs	r2, #92	@ 0x5c
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b60:	f7fe f930 	bl	8001dc4 <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b68:	201b      	movs	r0, #27
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	215d      	movs	r1, #93	@ 0x5d
 8003b70:	5c52      	ldrb	r2, [r2, r1]
 8003b72:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b7a:	2312      	movs	r3, #18
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	1cba      	adds	r2, r7, #2
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b84:	183b      	adds	r3, r7, r0
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d011      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x84>
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	2382      	movs	r3, #130	@ 0x82
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d107      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x7a>
 8003b9e:	183b      	adds	r3, r7, r0
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d004      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003ba6:	2323      	movs	r3, #35	@ 0x23
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	2202      	movs	r2, #2
 8003bac:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bae:	e191      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x98>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x98>
 8003bbc:	1cbb      	adds	r3, r7, #2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003bc4:	2323      	movs	r3, #35	@ 0x23
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bcc:	e182      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	225d      	movs	r2, #93	@ 0x5d
 8003bd2:	5c9b      	ldrb	r3, [r3, r2]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	225d      	movs	r2, #93	@ 0x5d
 8003bde:	2105      	movs	r1, #5
 8003be0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1cba      	adds	r2, r7, #2
 8003bf2:	2146      	movs	r1, #70	@ 0x46
 8003bf4:	8812      	ldrh	r2, [r2, #0]
 8003bf6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1cba      	adds	r2, r7, #2
 8003bfc:	2144      	movs	r1, #68	@ 0x44
 8003bfe:	8812      	ldrh	r2, [r2, #0]
 8003c00:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1cba      	adds	r2, r7, #2
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1cba      	adds	r2, r7, #2
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	23e0      	movs	r3, #224	@ 0xe0
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d908      	bls.n	8003c42 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	49ac      	ldr	r1, [pc, #688]	@ (8003eec <HAL_SPI_TransmitReceive+0x3c0>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	e008      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	0149      	lsls	r1, r1, #5
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2240      	movs	r2, #64	@ 0x40
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b40      	cmp	r3, #64	@ 0x40
 8003c60:	d007      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2140      	movs	r1, #64	@ 0x40
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	23e0      	movs	r3, #224	@ 0xe0
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d800      	bhi.n	8003c80 <HAL_SPI_TransmitReceive+0x154>
 8003c7e:	e083      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x168>
 8003c88:	2312      	movs	r3, #18
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d000      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x168>
 8003c92:	e06d      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb8:	e05a      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x1d4>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x1d4>
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d113      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11c      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x21c>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2246      	movs	r2, #70	@ 0x46
 8003d12:	5a9b      	ldrh	r3, [r3, r2]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	b292      	uxth	r2, r2
 8003d26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	1c9a      	adds	r2, r3, #2
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2246      	movs	r2, #70	@ 0x46
 8003d36:	5a9b      	ldrh	r3, [r3, r2]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b299      	uxth	r1, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2246      	movs	r2, #70	@ 0x46
 8003d42:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d48:	f7fe f83c 	bl	8001dc4 <HAL_GetTick>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d80b      	bhi.n	8003d70 <HAL_SPI_TransmitReceive+0x244>
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	d008      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003d5e:	2323      	movs	r3, #35	@ 0x23
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	2203      	movs	r2, #3
 8003d64:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	225d      	movs	r2, #93	@ 0x5d
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
        goto error;
 8003d6e:	e0b1      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d19f      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x18e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2246      	movs	r2, #70	@ 0x46
 8003d7e:	5a9b      	ldrh	r3, [r3, r2]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d199      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x18e>
 8003d86:	e089      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x270>
 8003d90:	2312      	movs	r3, #18
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d000      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x270>
 8003d9a:	e074      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc2:	e060      	b.n	8003e86 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d11c      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x2e0>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d017      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x2e0>
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d114      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2201      	movs	r2, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11e      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x32c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2246      	movs	r2, #70	@ 0x46
 8003e1e:	5a9b      	ldrh	r3, [r3, r2]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d018      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2246      	movs	r2, #70	@ 0x46
 8003e46:	5a9b      	ldrh	r3, [r3, r2]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b299      	uxth	r1, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2246      	movs	r2, #70	@ 0x46
 8003e52:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e54:	2301      	movs	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e58:	f7fd ffb4 	bl	8001dc4 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d802      	bhi.n	8003e6e <HAL_SPI_TransmitReceive+0x342>
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	d102      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x348>
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d108      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003e74:	2323      	movs	r3, #35	@ 0x23
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	2203      	movs	r2, #3
 8003e7a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	225d      	movs	r2, #93	@ 0x5d
 8003e80:	2101      	movs	r1, #1
 8003e82:	5499      	strb	r1, [r3, r2]
        goto error;
 8003e84:	e026      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d199      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x298>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2246      	movs	r2, #70	@ 0x46
 8003e94:	5a9b      	ldrh	r3, [r3, r2]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d193      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fa5c 	bl	8004360 <SPI_EndRxTxTransaction>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003eac:	2323      	movs	r3, #35	@ 0x23
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003ec2:	2323      	movs	r3, #35	@ 0x23
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e003      	b.n	8003ed4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	225d      	movs	r2, #93	@ 0x5d
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	225c      	movs	r2, #92	@ 0x5c
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003edc:	2323      	movs	r3, #35	@ 0x23
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	781b      	ldrb	r3, [r3, #0]
}
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b00a      	add	sp, #40	@ 0x28
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	ffffefff 	.word	0xffffefff

08003ef0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2240      	movs	r2, #64	@ 0x40
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d10d      	bne.n	8003f2c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2201      	movs	r2, #1
 8003f14:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f16:	d009      	beq.n	8003f2c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d005      	beq.n	8003f2c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	0010      	movs	r0, r2
 8003f28:	4798      	blx	r3
    return;
 8003f2a:	e0c5      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	4013      	ands	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_SPI_IRQHandler+0x58>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2280      	movs	r2, #128	@ 0x80
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d005      	beq.n	8003f48 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	0010      	movs	r0, r2
 8003f44:	4798      	blx	r3
    return;
 8003f46:	e0b7      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d109      	bne.n	8003f64 <HAL_SPI_IRQHandler+0x74>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2240      	movs	r2, #64	@ 0x40
 8003f54:	4013      	ands	r3, r2
 8003f56:	d105      	bne.n	8003f64 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d100      	bne.n	8003f64 <HAL_SPI_IRQHandler+0x74>
 8003f62:	e0a9      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1c8>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2220      	movs	r2, #32
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <HAL_SPI_IRQHandler+0x7e>
 8003f6c:	e0a4      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2240      	movs	r2, #64	@ 0x40
 8003f72:	4013      	ands	r3, r2
 8003f74:	d023      	beq.n	8003fbe <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	225d      	movs	r2, #93	@ 0x5d
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d011      	beq.n	8003fa6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f86:	2204      	movs	r2, #4
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	e00b      	b.n	8003fbe <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
        return;
 8003fbc:	e07c      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d014      	beq.n	8003ff0 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	2201      	movs	r2, #1
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	@ 0x40
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	2380      	movs	r3, #128	@ 0x80
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d00c      	beq.n	8004014 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	2208      	movs	r2, #8
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004018:	2b00      	cmp	r3, #0
 800401a:	d04c      	beq.n	80040b6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	21e0      	movs	r1, #224	@ 0xe0
 8004028:	438a      	bics	r2, r1
 800402a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	225d      	movs	r2, #93	@ 0x5d
 8004030:	2101      	movs	r1, #1
 8004032:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d103      	bne.n	8004044 <HAL_SPI_IRQHandler+0x154>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2201      	movs	r2, #1
 8004040:	4013      	ands	r3, r2
 8004042:	d032      	beq.n	80040aa <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2103      	movs	r1, #3
 8004050:	438a      	bics	r2, r1
 8004052:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	2b00      	cmp	r3, #0
 800405a:	d010      	beq.n	800407e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <HAL_SPI_IRQHandler+0x1d0>)
 8004062:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	0018      	movs	r0, r3
 800406a:	f7fe f837 	bl	80020dc <HAL_DMA_Abort_IT>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d005      	beq.n	800407e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	2240      	movs	r2, #64	@ 0x40
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	4a0d      	ldr	r2, [pc, #52]	@ (80040c0 <HAL_SPI_IRQHandler+0x1d0>)
 800408c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004092:	0018      	movs	r0, r3
 8004094:	f7fe f822 	bl	80020dc <HAL_DMA_Abort_IT>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a0:	2240      	movs	r2, #64	@ 0x40
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80040a8:	e004      	b.n	80040b4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 f809 	bl	80040c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80040b2:	e000      	b.n	80040b6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80040b4:	46c0      	nop			@ (mov r8, r8)
    return;
 80040b6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b008      	add	sp, #32
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	080040d5 	.word	0x080040d5

080040c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040cc:	46c0      	nop			@ (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2246      	movs	r2, #70	@ 0x46
 80040e6:	2100      	movs	r1, #0
 80040e8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff ffe6 	bl	80040c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b004      	add	sp, #16
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004110:	f7fd fe58 	bl	8001dc4 <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004120:	f7fd fe50 	bl	8001dc4 <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004128:	4b3a      	ldr	r3, [pc, #232]	@ (8004214 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	015b      	lsls	r3, r3, #5
 800412e:	0d1b      	lsrs	r3, r3, #20
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	4353      	muls	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004136:	e058      	b.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	d055      	beq.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800413e:	f7fd fe41 	bl	8001dc4 <HAL_GetTick>
 8004142:	0002      	movs	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	429a      	cmp	r2, r3
 800414c:	d902      	bls.n	8004154 <SPI_WaitFlagStateUntilTimeout+0x54>
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d142      	bne.n	80041da <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	21e0      	movs	r1, #224	@ 0xe0
 8004160:	438a      	bics	r2, r1
 8004162:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	2382      	movs	r3, #130	@ 0x82
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	429a      	cmp	r2, r3
 800416e:	d113      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	429a      	cmp	r2, r3
 800417a:	d005      	beq.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	2380      	movs	r3, #128	@ 0x80
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2140      	movs	r1, #64	@ 0x40
 8004194:	438a      	bics	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	019b      	lsls	r3, r3, #6
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d110      	bne.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	491a      	ldr	r1, [pc, #104]	@ (8004218 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2180      	movs	r1, #128	@ 0x80
 80041c0:	0189      	lsls	r1, r1, #6
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	225d      	movs	r2, #93	@ 0x5d
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	225c      	movs	r2, #92	@ 0x5c
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e017      	b.n	800420a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	425a      	negs	r2, r3
 80041fa:	4153      	adcs	r3, r2
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	001a      	movs	r2, r3
 8004200:	1dfb      	adds	r3, r7, #7
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d197      	bne.n	8004138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b008      	add	sp, #32
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	20000000 	.word	0x20000000
 8004218:	ffffdfff 	.word	0xffffdfff

0800421c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	@ 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800422a:	2317      	movs	r3, #23
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004232:	f7fd fdc7 	bl	8001dc4 <HAL_GetTick>
 8004236:	0002      	movs	r2, r0
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004242:	f7fd fdbf 	bl	8001dc4 <HAL_GetTick>
 8004246:	0003      	movs	r3, r0
 8004248:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	0013      	movs	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	189b      	adds	r3, r3, r2
 800425c:	00da      	lsls	r2, r3, #3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	0d1b      	lsrs	r3, r3, #20
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	4353      	muls	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004268:	e068      	b.n	800433c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	23c0      	movs	r3, #192	@ 0xc0
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	429a      	cmp	r2, r3
 8004272:	d10a      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d107      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	2117      	movs	r1, #23
 8004282:	187b      	adds	r3, r7, r1
 8004284:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004286:	187b      	adds	r3, r7, r1
 8004288:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	d055      	beq.n	800433c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004290:	f7fd fd98 	bl	8001dc4 <HAL_GetTick>
 8004294:	0002      	movs	r2, r0
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d142      	bne.n	800432c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	21e0      	movs	r1, #224	@ 0xe0
 80042b2:	438a      	bics	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	2382      	movs	r3, #130	@ 0x82
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	429a      	cmp	r2, r3
 80042c0:	d113      	bne.n	80042ea <SPI_WaitFifoStateUntilTimeout+0xce>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	2380      	movs	r3, #128	@ 0x80
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d005      	beq.n	80042da <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d107      	bne.n	80042ea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	@ 0x40
 80042e6:	438a      	bics	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d110      	bne.n	8004318 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4916      	ldr	r1, [pc, #88]	@ (800435c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004302:	400a      	ands	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2180      	movs	r1, #128	@ 0x80
 8004312:	0189      	lsls	r1, r1, #6
 8004314:	430a      	orrs	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	225d      	movs	r2, #93	@ 0x5d
 800431c:	2101      	movs	r1, #1
 800431e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	225c      	movs	r2, #92	@ 0x5c
 8004324:	2100      	movs	r1, #0
 8004326:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e010      	b.n	800434e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	3b01      	subs	r3, #1
 800433a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d18e      	bne.n	800426a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b00a      	add	sp, #40	@ 0x28
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	20000000 	.word	0x20000000
 800435c:	ffffdfff 	.word	0xffffdfff

08004360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	23c0      	movs	r3, #192	@ 0xc0
 8004370:	0159      	lsls	r1, r3, #5
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	0013      	movs	r3, r2
 800437a:	2200      	movs	r2, #0
 800437c:	f7ff ff4e 	bl	800421c <SPI_WaitFifoStateUntilTimeout>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d007      	beq.n	8004394 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	2220      	movs	r2, #32
 800438a:	431a      	orrs	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e027      	b.n	80043e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	0013      	movs	r3, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	2180      	movs	r1, #128	@ 0x80
 80043a2:	f7ff fead 	bl	8004100 <SPI_WaitFlagStateUntilTimeout>
 80043a6:	1e03      	subs	r3, r0, #0
 80043a8:	d007      	beq.n	80043ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ae:	2220      	movs	r2, #32
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e014      	b.n	80043e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	23c0      	movs	r3, #192	@ 0xc0
 80043be:	00d9      	lsls	r1, r3, #3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	0013      	movs	r3, r2
 80043c8:	2200      	movs	r2, #0
 80043ca:	f7ff ff27 	bl	800421c <SPI_WaitFifoStateUntilTimeout>
 80043ce:	1e03      	subs	r3, r0, #0
 80043d0:	d007      	beq.n	80043e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d6:	2220      	movs	r2, #32
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e000      	b.n	80043e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b004      	add	sp, #16
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e042      	b.n	8004484 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	223d      	movs	r2, #61	@ 0x3d
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223c      	movs	r2, #60	@ 0x3c
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0018      	movs	r0, r3
 8004416:	f7fd fac7 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	223d      	movs	r2, #61	@ 0x3d
 800441e:	2102      	movs	r1, #2
 8004420:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	0019      	movs	r1, r3
 800442c:	0010      	movs	r0, r2
 800442e:	f000 fc25 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2246      	movs	r2, #70	@ 0x46
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223e      	movs	r2, #62	@ 0x3e
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223f      	movs	r2, #63	@ 0x3f
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2240      	movs	r2, #64	@ 0x40
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2241      	movs	r2, #65	@ 0x41
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2242      	movs	r2, #66	@ 0x42
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2243      	movs	r2, #67	@ 0x43
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2244      	movs	r2, #68	@ 0x44
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2245      	movs	r2, #69	@ 0x45
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	223d      	movs	r2, #61	@ 0x3d
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	223d      	movs	r2, #61	@ 0x3d
 8004498:	5c9b      	ldrb	r3, [r3, r2]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e036      	b.n	8004512 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	223d      	movs	r2, #61	@ 0x3d
 80044a8:	2102      	movs	r1, #2
 80044aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2101      	movs	r1, #1
 80044b8:	430a      	orrs	r2, r1
 80044ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a16      	ldr	r2, [pc, #88]	@ (800451c <HAL_TIM_Base_Start_IT+0x90>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00a      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x50>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	05db      	lsls	r3, r3, #23
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x50>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a12      	ldr	r2, [pc, #72]	@ (8004520 <HAL_TIM_Base_Start_IT+0x94>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d111      	bne.n	8004500 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2207      	movs	r2, #7
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d010      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	e007      	b.n	8004510 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2101      	movs	r1, #1
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	40012c00 	.word	0x40012c00
 8004520:	40000400 	.word	0x40000400

08004524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e042      	b.n	80045bc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	223d      	movs	r2, #61	@ 0x3d
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d107      	bne.n	8004552 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223c      	movs	r2, #60	@ 0x3c
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f000 f839 	bl	80045c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	223d      	movs	r2, #61	@ 0x3d
 8004556:	2102      	movs	r1, #2
 8004558:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	0019      	movs	r1, r3
 8004564:	0010      	movs	r0, r2
 8004566:	f000 fb89 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2246      	movs	r2, #70	@ 0x46
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	223e      	movs	r2, #62	@ 0x3e
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	223f      	movs	r2, #63	@ 0x3f
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2240      	movs	r2, #64	@ 0x40
 8004586:	2101      	movs	r1, #1
 8004588:	5499      	strb	r1, [r3, r2]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2241      	movs	r2, #65	@ 0x41
 800458e:	2101      	movs	r1, #1
 8004590:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2242      	movs	r2, #66	@ 0x42
 8004596:	2101      	movs	r1, #1
 8004598:	5499      	strb	r1, [r3, r2]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2243      	movs	r2, #67	@ 0x43
 800459e:	2101      	movs	r1, #1
 80045a0:	5499      	strb	r1, [r3, r2]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2244      	movs	r2, #68	@ 0x44
 80045a6:	2101      	movs	r1, #1
 80045a8:	5499      	strb	r1, [r3, r2]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2245      	movs	r2, #69	@ 0x45
 80045ae:	2101      	movs	r1, #1
 80045b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	223d      	movs	r2, #61	@ 0x3d
 80045b6:	2101      	movs	r1, #1
 80045b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b002      	add	sp, #8
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d108      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x22>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	223e      	movs	r2, #62	@ 0x3e
 80045e8:	5c9b      	ldrb	r3, [r3, r2]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	4193      	sbcs	r3, r2
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e01f      	b.n	8004636 <HAL_TIM_PWM_Start+0x62>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d108      	bne.n	800460e <HAL_TIM_PWM_Start+0x3a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	223f      	movs	r2, #63	@ 0x3f
 8004600:	5c9b      	ldrb	r3, [r3, r2]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	1e5a      	subs	r2, r3, #1
 8004608:	4193      	sbcs	r3, r2
 800460a:	b2db      	uxtb	r3, r3
 800460c:	e013      	b.n	8004636 <HAL_TIM_PWM_Start+0x62>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d108      	bne.n	8004626 <HAL_TIM_PWM_Start+0x52>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2240      	movs	r2, #64	@ 0x40
 8004618:	5c9b      	ldrb	r3, [r3, r2]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	1e5a      	subs	r2, r3, #1
 8004620:	4193      	sbcs	r3, r2
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e007      	b.n	8004636 <HAL_TIM_PWM_Start+0x62>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2241      	movs	r2, #65	@ 0x41
 800462a:	5c9b      	ldrb	r3, [r3, r2]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	4193      	sbcs	r3, r2
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06a      	b.n	8004714 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0x7a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	223e      	movs	r2, #62	@ 0x3e
 8004648:	2102      	movs	r1, #2
 800464a:	5499      	strb	r1, [r3, r2]
 800464c:	e013      	b.n	8004676 <HAL_TIM_PWM_Start+0xa2>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0x8a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	223f      	movs	r2, #63	@ 0x3f
 8004658:	2102      	movs	r1, #2
 800465a:	5499      	strb	r1, [r3, r2]
 800465c:	e00b      	b.n	8004676 <HAL_TIM_PWM_Start+0xa2>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0x9a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2240      	movs	r2, #64	@ 0x40
 8004668:	2102      	movs	r1, #2
 800466a:	5499      	strb	r1, [r3, r2]
 800466c:	e003      	b.n	8004676 <HAL_TIM_PWM_Start+0xa2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2241      	movs	r2, #65	@ 0x41
 8004672:	2102      	movs	r1, #2
 8004674:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6839      	ldr	r1, [r7, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	0018      	movs	r0, r3
 8004680:	f000 fdfa 	bl	8005278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a24      	ldr	r2, [pc, #144]	@ (800471c <HAL_TIM_PWM_Start+0x148>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_TIM_PWM_Start+0xce>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a23      	ldr	r2, [pc, #140]	@ (8004720 <HAL_TIM_PWM_Start+0x14c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIM_PWM_Start+0xce>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a21      	ldr	r2, [pc, #132]	@ (8004724 <HAL_TIM_PWM_Start+0x150>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xd2>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_PWM_Start+0xd4>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2180      	movs	r1, #128	@ 0x80
 80046b8:	0209      	lsls	r1, r1, #8
 80046ba:	430a      	orrs	r2, r1
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIM_PWM_Start+0x148>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00a      	beq.n	80046de <HAL_TIM_PWM_Start+0x10a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	05db      	lsls	r3, r3, #23
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d004      	beq.n	80046de <HAL_TIM_PWM_Start+0x10a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <HAL_TIM_PWM_Start+0x154>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2207      	movs	r2, #7
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b06      	cmp	r3, #6
 80046ee:	d010      	beq.n	8004712 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	e007      	b.n	8004712 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800
 8004728:	40000400 	.word	0x40000400

0800472c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2202      	movs	r2, #2
 8004748:	4013      	ands	r3, r2
 800474a:	d021      	beq.n	8004790 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2202      	movs	r2, #2
 8004750:	4013      	ands	r3, r2
 8004752:	d01d      	beq.n	8004790 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2203      	movs	r2, #3
 800475a:	4252      	negs	r2, r2
 800475c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2203      	movs	r2, #3
 800476c:	4013      	ands	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0018      	movs	r0, r3
 8004774:	f000 fa6a 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004778:	e007      	b.n	800478a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 fa5d 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 fa69 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2204      	movs	r2, #4
 8004794:	4013      	ands	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2204      	movs	r2, #4
 800479c:	4013      	ands	r3, r2
 800479e:	d01e      	beq.n	80047de <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2205      	movs	r2, #5
 80047a6:	4252      	negs	r2, r2
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	23c0      	movs	r3, #192	@ 0xc0
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f000 fa43 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fa36 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 fa42 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2208      	movs	r2, #8
 80047e2:	4013      	ands	r3, r2
 80047e4:	d021      	beq.n	800482a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2208      	movs	r2, #8
 80047ea:	4013      	ands	r3, r2
 80047ec:	d01d      	beq.n	800482a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2209      	movs	r2, #9
 80047f4:	4252      	negs	r2, r2
 80047f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2204      	movs	r2, #4
 80047fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	2203      	movs	r2, #3
 8004806:	4013      	ands	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0018      	movs	r0, r3
 800480e:	f000 fa1d 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004812:	e007      	b.n	8004824 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0018      	movs	r0, r3
 8004818:	f000 fa10 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fa1c 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2210      	movs	r2, #16
 800482e:	4013      	ands	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2210      	movs	r2, #16
 8004836:	4013      	ands	r3, r2
 8004838:	d01e      	beq.n	8004878 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2211      	movs	r2, #17
 8004840:	4252      	negs	r2, r2
 8004842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2208      	movs	r2, #8
 8004848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	23c0      	movs	r3, #192	@ 0xc0
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4013      	ands	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0018      	movs	r0, r3
 800485c:	f000 f9f6 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004860:	e007      	b.n	8004872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 f9e9 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 f9f5 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2201      	movs	r2, #1
 800487c:	4013      	ands	r3, r2
 800487e:	d00c      	beq.n	800489a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	4013      	ands	r3, r2
 8004886:	d008      	beq.n	800489a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2202      	movs	r2, #2
 800488e:	4252      	negs	r2, r2
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7fc fe77 	bl	8001588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	4013      	ands	r3, r2
 80048a0:	d00c      	beq.n	80048bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2280      	movs	r2, #128	@ 0x80
 80048a6:	4013      	ands	r3, r2
 80048a8:	d008      	beq.n	80048bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2281      	movs	r2, #129	@ 0x81
 80048b0:	4252      	negs	r2, r2
 80048b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 fd62 	bl	8005380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	d00c      	beq.n	80048de <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2240      	movs	r2, #64	@ 0x40
 80048c8:	4013      	ands	r3, r2
 80048ca:	d008      	beq.n	80048de <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2241      	movs	r2, #65	@ 0x41
 80048d2:	4252      	negs	r2, r2
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 f9c7 	bl	8004c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2220      	movs	r2, #32
 80048e2:	4013      	ands	r3, r2
 80048e4:	d00c      	beq.n	8004900 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	4013      	ands	r3, r2
 80048ec:	d008      	beq.n	8004900 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2221      	movs	r2, #33	@ 0x21
 80048f4:	4252      	negs	r2, r2
 80048f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f000 fd38 	bl	8005370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2317      	movs	r3, #23
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	223c      	movs	r2, #60	@ 0x3c
 8004920:	5c9b      	ldrb	r3, [r3, r2]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004926:	2302      	movs	r3, #2
 8004928:	e0ad      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	223c      	movs	r2, #60	@ 0x3c
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b0c      	cmp	r3, #12
 8004936:	d100      	bne.n	800493a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004938:	e076      	b.n	8004a28 <HAL_TIM_PWM_ConfigChannel+0x120>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d900      	bls.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004940:	e095      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d04e      	beq.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b08      	cmp	r3, #8
 800494c:	d900      	bls.n	8004950 <HAL_TIM_PWM_ConfigChannel+0x48>
 800494e:	e08e      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d021      	beq.n	80049a0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800495c:	e087      	b.n	8004a6e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0011      	movs	r1, r2
 8004966:	0018      	movs	r0, r3
 8004968:	f000 fa0c 	bl	8004d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2108      	movs	r1, #8
 8004978:	430a      	orrs	r2, r1
 800497a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2104      	movs	r1, #4
 8004988:	438a      	bics	r2, r1
 800498a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6999      	ldr	r1, [r3, #24]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	619a      	str	r2, [r3, #24]
      break;
 800499e:	e06b      	b.n	8004a78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	0011      	movs	r1, r2
 80049a8:	0018      	movs	r0, r3
 80049aa:	f000 fa69 	bl	8004e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699a      	ldr	r2, [r3, #24]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2180      	movs	r1, #128	@ 0x80
 80049ba:	0109      	lsls	r1, r1, #4
 80049bc:	430a      	orrs	r2, r1
 80049be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4931      	ldr	r1, [pc, #196]	@ (8004a90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	619a      	str	r2, [r3, #24]
      break;
 80049e4:	e048      	b.n	8004a78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	0011      	movs	r1, r2
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 fac4 	bl	8004f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69da      	ldr	r2, [r3, #28]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2108      	movs	r1, #8
 8004a00:	430a      	orrs	r2, r1
 8004a02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2104      	movs	r1, #4
 8004a10:	438a      	bics	r2, r1
 8004a12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69d9      	ldr	r1, [r3, #28]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	61da      	str	r2, [r3, #28]
      break;
 8004a26:	e027      	b.n	8004a78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 fb23 	bl	800507c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2180      	movs	r1, #128	@ 0x80
 8004a42:	0109      	lsls	r1, r1, #4
 8004a44:	430a      	orrs	r2, r1
 8004a46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	490f      	ldr	r1, [pc, #60]	@ (8004a90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004a54:	400a      	ands	r2, r1
 8004a56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69d9      	ldr	r1, [r3, #28]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	61da      	str	r2, [r3, #28]
      break;
 8004a6c:	e004      	b.n	8004a78 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004a6e:	2317      	movs	r3, #23
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
      break;
 8004a76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	223c      	movs	r2, #60	@ 0x3c
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	5499      	strb	r1, [r3, r2]

  return status;
 8004a80:	2317      	movs	r3, #23
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	781b      	ldrb	r3, [r3, #0]
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b006      	add	sp, #24
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	fffffbff 	.word	0xfffffbff

08004a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	223c      	movs	r2, #60	@ 0x3c
 8004aaa:	5c9b      	ldrb	r3, [r3, r2]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_ConfigClockSource+0x20>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0bc      	b.n	8004c2e <HAL_TIM_ConfigClockSource+0x19a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	223c      	movs	r2, #60	@ 0x3c
 8004ab8:	2101      	movs	r1, #1
 8004aba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	223d      	movs	r2, #61	@ 0x3d
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2277      	movs	r2, #119	@ 0x77
 8004ad0:	4393      	bics	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4a58      	ldr	r2, [pc, #352]	@ (8004c38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2280      	movs	r2, #128	@ 0x80
 8004aea:	0192      	lsls	r2, r2, #6
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d040      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0xde>
 8004af0:	2280      	movs	r2, #128	@ 0x80
 8004af2:	0192      	lsls	r2, r2, #6
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d900      	bls.n	8004afa <HAL_TIM_ConfigClockSource+0x66>
 8004af8:	e088      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004afa:	2280      	movs	r2, #128	@ 0x80
 8004afc:	0152      	lsls	r2, r2, #5
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d100      	bne.n	8004b04 <HAL_TIM_ConfigClockSource+0x70>
 8004b02:	e088      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x182>
 8004b04:	2280      	movs	r2, #128	@ 0x80
 8004b06:	0152      	lsls	r2, r2, #5
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d900      	bls.n	8004b0e <HAL_TIM_ConfigClockSource+0x7a>
 8004b0c:	e07e      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b0e:	2b70      	cmp	r3, #112	@ 0x70
 8004b10:	d018      	beq.n	8004b44 <HAL_TIM_ConfigClockSource+0xb0>
 8004b12:	d900      	bls.n	8004b16 <HAL_TIM_ConfigClockSource+0x82>
 8004b14:	e07a      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b16:	2b60      	cmp	r3, #96	@ 0x60
 8004b18:	d04f      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x126>
 8004b1a:	d900      	bls.n	8004b1e <HAL_TIM_ConfigClockSource+0x8a>
 8004b1c:	e076      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b1e:	2b50      	cmp	r3, #80	@ 0x50
 8004b20:	d03b      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x106>
 8004b22:	d900      	bls.n	8004b26 <HAL_TIM_ConfigClockSource+0x92>
 8004b24:	e072      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b26:	2b40      	cmp	r3, #64	@ 0x40
 8004b28:	d057      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x146>
 8004b2a:	d900      	bls.n	8004b2e <HAL_TIM_ConfigClockSource+0x9a>
 8004b2c:	e06e      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b2e:	2b30      	cmp	r3, #48	@ 0x30
 8004b30:	d063      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x166>
 8004b32:	d86b      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d060      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x166>
 8004b38:	d868      	bhi.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d05d      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x166>
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d05b      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x166>
 8004b42:	e063      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	f000 fb70 	bl	8005238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2277      	movs	r2, #119	@ 0x77
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
      break;
 8004b70:	e052      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b82:	f000 fb59 	bl	8005238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2180      	movs	r1, #128	@ 0x80
 8004b92:	01c9      	lsls	r1, r1, #7
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
      break;
 8004b98:	e03e      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	f000 facc 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2150      	movs	r1, #80	@ 0x50
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 fb26 	bl	8005204 <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e02e      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	f000 faea 	bl	80051a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2160      	movs	r1, #96	@ 0x60
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 fb16 	bl	8005204 <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e01e      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be6:	001a      	movs	r2, r3
 8004be8:	f000 faac 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2140      	movs	r1, #64	@ 0x40
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 fb06 	bl	8005204 <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e00e      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	0019      	movs	r1, r3
 8004c04:	0010      	movs	r0, r2
 8004c06:	f000 fafd 	bl	8005204 <TIM_ITRx_SetConfig>
      break;
 8004c0a:	e005      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c0c:	230f      	movs	r3, #15
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004c16:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223d      	movs	r2, #61	@ 0x3d
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	223c      	movs	r2, #60	@ 0x3c
 8004c24:	2100      	movs	r1, #0
 8004c26:	5499      	strb	r1, [r3, r2]

  return status;
 8004c28:	230f      	movs	r3, #15
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	ffff00ff 	.word	0xffff00ff

08004c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c54:	46c0      	nop			@ (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a37      	ldr	r2, [pc, #220]	@ (8004d6c <TIM_Base_SetConfig+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d008      	beq.n	8004ca6 <TIM_Base_SetConfig+0x2a>
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	2380      	movs	r3, #128	@ 0x80
 8004c98:	05db      	lsls	r3, r3, #23
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d003      	beq.n	8004ca6 <TIM_Base_SetConfig+0x2a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <TIM_Base_SetConfig+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d108      	bne.n	8004cb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2270      	movs	r2, #112	@ 0x70
 8004caa:	4393      	bics	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a2c      	ldr	r2, [pc, #176]	@ (8004d6c <TIM_Base_SetConfig+0xf0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d014      	beq.n	8004cea <TIM_Base_SetConfig+0x6e>
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	2380      	movs	r3, #128	@ 0x80
 8004cc4:	05db      	lsls	r3, r3, #23
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d00f      	beq.n	8004cea <TIM_Base_SetConfig+0x6e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a28      	ldr	r2, [pc, #160]	@ (8004d70 <TIM_Base_SetConfig+0xf4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_Base_SetConfig+0x6e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a27      	ldr	r2, [pc, #156]	@ (8004d74 <TIM_Base_SetConfig+0xf8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0x6e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <TIM_Base_SetConfig+0xfc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0x6e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a25      	ldr	r2, [pc, #148]	@ (8004d7c <TIM_Base_SetConfig+0x100>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <TIM_Base_SetConfig+0x104>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2280      	movs	r2, #128	@ 0x80
 8004d00:	4393      	bics	r3, r2
 8004d02:	001a      	movs	r2, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a11      	ldr	r2, [pc, #68]	@ (8004d6c <TIM_Base_SetConfig+0xf0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d007      	beq.n	8004d3a <TIM_Base_SetConfig+0xbe>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	@ (8004d78 <TIM_Base_SetConfig+0xfc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_Base_SetConfig+0xbe>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a11      	ldr	r2, [pc, #68]	@ (8004d7c <TIM_Base_SetConfig+0x100>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d103      	bne.n	8004d42 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d106      	bne.n	8004d62 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	4393      	bics	r3, r2
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
  }
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40002000 	.word	0x40002000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800
 8004d80:	fffffcff 	.word	0xfffffcff

08004d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2270      	movs	r2, #112	@ 0x70
 8004db2:	4393      	bics	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2203      	movs	r2, #3
 8004dba:	4393      	bics	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4393      	bics	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <TIM_OC1_SetConfig+0xe8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <TIM_OC1_SetConfig+0x6e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a22      	ldr	r2, [pc, #136]	@ (8004e70 <TIM_OC1_SetConfig+0xec>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_OC1_SetConfig+0x6e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a21      	ldr	r2, [pc, #132]	@ (8004e74 <TIM_OC1_SetConfig+0xf0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10c      	bne.n	8004e0c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2208      	movs	r2, #8
 8004df6:	4393      	bics	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2204      	movs	r2, #4
 8004e08:	4393      	bics	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a17      	ldr	r2, [pc, #92]	@ (8004e6c <TIM_OC1_SetConfig+0xe8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_OC1_SetConfig+0xa0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a16      	ldr	r2, [pc, #88]	@ (8004e70 <TIM_OC1_SetConfig+0xec>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC1_SetConfig+0xa0>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a15      	ldr	r2, [pc, #84]	@ (8004e74 <TIM_OC1_SetConfig+0xf0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d111      	bne.n	8004e48 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4a14      	ldr	r2, [pc, #80]	@ (8004e78 <TIM_OC1_SetConfig+0xf4>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4a13      	ldr	r2, [pc, #76]	@ (8004e7c <TIM_OC1_SetConfig+0xf8>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b006      	add	sp, #24
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800
 8004e78:	fffffeff 	.word	0xfffffeff
 8004e7c:	fffffdff 	.word	0xfffffdff

08004e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	2210      	movs	r2, #16
 8004e96:	4393      	bics	r3, r2
 8004e98:	001a      	movs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <TIM_OC2_SetConfig+0xe0>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <TIM_OC2_SetConfig+0xe4>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	4393      	bics	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a22      	ldr	r2, [pc, #136]	@ (8004f68 <TIM_OC2_SetConfig+0xe8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10d      	bne.n	8004efe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2280      	movs	r2, #128	@ 0x80
 8004ee6:	4393      	bics	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2240      	movs	r2, #64	@ 0x40
 8004efa:	4393      	bics	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <TIM_OC2_SetConfig+0xe8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_OC2_SetConfig+0x96>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC2_SetConfig+0xec>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC2_SetConfig+0x96>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC2_SetConfig+0xf0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d113      	bne.n	8004f3e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_OC2_SetConfig+0xf4>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_OC2_SetConfig+0xf8>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	621a      	str	r2, [r3, #32]
}
 8004f58:	46c0      	nop			@ (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b006      	add	sp, #24
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	ffff8fff 	.word	0xffff8fff
 8004f64:	fffffcff 	.word	0xfffffcff
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800
 8004f74:	fffffbff 	.word	0xfffffbff
 8004f78:	fffff7ff 	.word	0xfffff7ff

08004f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	4a31      	ldr	r2, [pc, #196]	@ (8005058 <TIM_OC3_SetConfig+0xdc>)
 8004f92:	401a      	ands	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2270      	movs	r2, #112	@ 0x70
 8004fa8:	4393      	bics	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	4393      	bics	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4a26      	ldr	r2, [pc, #152]	@ (800505c <TIM_OC3_SetConfig+0xe0>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <TIM_OC3_SetConfig+0xe4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d10d      	bne.n	8004ff6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	4a21      	ldr	r2, [pc, #132]	@ (8005064 <TIM_OC3_SetConfig+0xe8>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8005068 <TIM_OC3_SetConfig+0xec>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a19      	ldr	r2, [pc, #100]	@ (8005060 <TIM_OC3_SetConfig+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_OC3_SetConfig+0x92>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <TIM_OC3_SetConfig+0xf0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x92>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <TIM_OC3_SetConfig+0xf4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d113      	bne.n	8005036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4a18      	ldr	r2, [pc, #96]	@ (8005074 <TIM_OC3_SetConfig+0xf8>)
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4a17      	ldr	r2, [pc, #92]	@ (8005078 <TIM_OC3_SetConfig+0xfc>)
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b006      	add	sp, #24
 8005056:	bd80      	pop	{r7, pc}
 8005058:	fffffeff 	.word	0xfffffeff
 800505c:	fffffdff 	.word	0xfffffdff
 8005060:	40012c00 	.word	0x40012c00
 8005064:	fffff7ff 	.word	0xfffff7ff
 8005068:	fffffbff 	.word	0xfffffbff
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800
 8005074:	ffffefff 	.word	0xffffefff
 8005078:	ffffdfff 	.word	0xffffdfff

0800507c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a24      	ldr	r2, [pc, #144]	@ (8005124 <TIM_OC4_SetConfig+0xa8>)
 8005092:	401a      	ands	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a20      	ldr	r2, [pc, #128]	@ (8005128 <TIM_OC4_SetConfig+0xac>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a1f      	ldr	r2, [pc, #124]	@ (800512c <TIM_OC4_SetConfig+0xb0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <TIM_OC4_SetConfig+0xb4>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	031b      	lsls	r3, r3, #12
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <TIM_OC4_SetConfig+0xb8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC4_SetConfig+0x70>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <TIM_OC4_SetConfig+0xbc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC4_SetConfig+0x70>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a15      	ldr	r2, [pc, #84]	@ (800513c <TIM_OC4_SetConfig+0xc0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d109      	bne.n	8005100 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4a14      	ldr	r2, [pc, #80]	@ (8005140 <TIM_OC4_SetConfig+0xc4>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	019b      	lsls	r3, r3, #6
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b006      	add	sp, #24
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	ffffefff 	.word	0xffffefff
 8005128:	ffff8fff 	.word	0xffff8fff
 800512c:	fffffcff 	.word	0xfffffcff
 8005130:	ffffdfff 	.word	0xffffdfff
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800
 8005140:	ffffbfff 	.word	0xffffbfff

08005144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	2201      	movs	r2, #1
 800515c:	4393      	bics	r3, r2
 800515e:	001a      	movs	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	22f0      	movs	r2, #240	@ 0xf0
 800516e:	4393      	bics	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	220a      	movs	r2, #10
 8005180:	4393      	bics	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b006      	add	sp, #24
 800519e:	bd80      	pop	{r7, pc}

080051a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	2210      	movs	r2, #16
 80051b8:	4393      	bics	r3, r2
 80051ba:	001a      	movs	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005200 <TIM_TI2_ConfigInputStage+0x60>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	031b      	lsls	r3, r3, #12
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	22a0      	movs	r2, #160	@ 0xa0
 80051dc:	4393      	bics	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b006      	add	sp, #24
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	ffff0fff 	.word	0xffff0fff

08005204 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2270      	movs	r2, #112	@ 0x70
 8005218:	4393      	bics	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	2207      	movs	r2, #7
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	609a      	str	r2, [r3, #8]
}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	b004      	add	sp, #16
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4a09      	ldr	r2, [pc, #36]	@ (8005274 <TIM_ETR_SetConfig+0x3c>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	431a      	orrs	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	46c0      	nop			@ (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b006      	add	sp, #24
 8005272:	bd80      	pop	{r7, pc}
 8005274:	ffff00ff 	.word	0xffff00ff

08005278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	221f      	movs	r2, #31
 8005288:	4013      	ands	r3, r2
 800528a:	2201      	movs	r2, #1
 800528c:	409a      	lsls	r2, r3
 800528e:	0013      	movs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	43d2      	mvns	r2, r2
 800529a:	401a      	ands	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	211f      	movs	r1, #31
 80052a8:	400b      	ands	r3, r1
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	4099      	lsls	r1, r3
 80052ae:	000b      	movs	r3, r1
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b006      	add	sp, #24
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	223c      	movs	r2, #60	@ 0x3c
 80052ce:	5c9b      	ldrb	r3, [r3, r2]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e042      	b.n	800535e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	223c      	movs	r2, #60	@ 0x3c
 80052dc:	2101      	movs	r1, #1
 80052de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	223d      	movs	r2, #61	@ 0x3d
 80052e4:	2102      	movs	r1, #2
 80052e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2270      	movs	r2, #112	@ 0x70
 80052fc:	4393      	bics	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a14      	ldr	r2, [pc, #80]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00a      	beq.n	8005332 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	05db      	lsls	r3, r3, #23
 8005324:	429a      	cmp	r2, r3
 8005326:	d004      	beq.n	8005332 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a0f      	ldr	r2, [pc, #60]	@ (800536c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10c      	bne.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2280      	movs	r2, #128	@ 0x80
 8005336:	4393      	bics	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4313      	orrs	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	223d      	movs	r2, #61	@ 0x3d
 8005350:	2101      	movs	r1, #1
 8005352:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	223c      	movs	r2, #60	@ 0x3c
 8005358:	2100      	movs	r1, #0
 800535a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b004      	add	sp, #16
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40000400 	.word	0x40000400

08005370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005378:	46c0      	nop			@ (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b002      	add	sp, #8
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005388:	46c0      	nop			@ (mov r8, r8)
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e044      	b.n	800542c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2278      	movs	r2, #120	@ 0x78
 80053ae:	2100      	movs	r1, #0
 80053b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7fc fb8f 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2224      	movs	r2, #36	@ 0x24
 80053be:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2101      	movs	r1, #1
 80053cc:	438a      	bics	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0018      	movs	r0, r3
 80053dc:	f000 fcf0 	bl	8005dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 fbc4 	bl	8005b70 <UART_SetConfig>
 80053e8:	0003      	movs	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e01c      	b.n	800542c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	490d      	ldr	r1, [pc, #52]	@ (8005434 <HAL_UART_Init+0xa4>)
 80053fe:	400a      	ands	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	212a      	movs	r1, #42	@ 0x2a
 800540e:	438a      	bics	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2101      	movs	r1, #1
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	0018      	movs	r0, r3
 8005426:	f000 fd7f 	bl	8005f28 <UART_CheckIdleState>
 800542a:	0003      	movs	r3, r0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b002      	add	sp, #8
 8005432:	bd80      	pop	{r7, pc}
 8005434:	ffffb7ff 	.word	0xffffb7ff

08005438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	@ 0x28
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	1dbb      	adds	r3, r7, #6
 8005446:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800544c:	2b20      	cmp	r3, #32
 800544e:	d000      	beq.n	8005452 <HAL_UART_Transmit+0x1a>
 8005450:	e08c      	b.n	800556c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_UART_Transmit+0x28>
 8005458:	1dbb      	adds	r3, r7, #6
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e084      	b.n	800556e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	015b      	lsls	r3, r3, #5
 800546c:	429a      	cmp	r2, r3
 800546e:	d109      	bne.n	8005484 <HAL_UART_Transmit+0x4c>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2201      	movs	r2, #1
 800547c:	4013      	ands	r3, r2
 800547e:	d001      	beq.n	8005484 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e074      	b.n	800556e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2284      	movs	r2, #132	@ 0x84
 8005488:	2100      	movs	r1, #0
 800548a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2221      	movs	r2, #33	@ 0x21
 8005490:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005492:	f7fc fc97 	bl	8001dc4 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1dba      	adds	r2, r7, #6
 800549e:	2150      	movs	r1, #80	@ 0x50
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1dba      	adds	r2, r7, #6
 80054a8:	2152      	movs	r1, #82	@ 0x52
 80054aa:	8812      	ldrh	r2, [r2, #0]
 80054ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	2380      	movs	r3, #128	@ 0x80
 80054b4:	015b      	lsls	r3, r3, #5
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d108      	bne.n	80054cc <HAL_UART_Transmit+0x94>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e003      	b.n	80054d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054d4:	e02f      	b.n	8005536 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	0013      	movs	r3, r2
 80054e0:	2200      	movs	r2, #0
 80054e2:	2180      	movs	r1, #128	@ 0x80
 80054e4:	f000 fdc8 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 80054e8:	1e03      	subs	r3, r0, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e03b      	b.n	800556e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	881a      	ldrh	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	05d2      	lsls	r2, r2, #23
 8005506:	0dd2      	lsrs	r2, r2, #23
 8005508:	b292      	uxth	r2, r2
 800550a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3302      	adds	r3, #2
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e007      	b.n	8005524 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3301      	adds	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2252      	movs	r2, #82	@ 0x52
 8005528:	5a9b      	ldrh	r3, [r3, r2]
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b299      	uxth	r1, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2252      	movs	r2, #82	@ 0x52
 8005534:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2252      	movs	r2, #82	@ 0x52
 800553a:	5a9b      	ldrh	r3, [r3, r2]
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1c9      	bne.n	80054d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	0013      	movs	r3, r2
 800554c:	2200      	movs	r2, #0
 800554e:	2140      	movs	r1, #64	@ 0x40
 8005550:	f000 fd92 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d004      	beq.n	8005562 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e005      	b.n	800556e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b008      	add	sp, #32
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b0ab      	sub	sp, #172	@ 0xac
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	22a4      	movs	r2, #164	@ 0xa4
 8005588:	18b9      	adds	r1, r7, r2
 800558a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	20a0      	movs	r0, #160	@ 0xa0
 8005594:	1839      	adds	r1, r7, r0
 8005596:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	219c      	movs	r1, #156	@ 0x9c
 80055a0:	1879      	adds	r1, r7, r1
 80055a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055a4:	0011      	movs	r1, r2
 80055a6:	18bb      	adds	r3, r7, r2
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a99      	ldr	r2, [pc, #612]	@ (8005810 <HAL_UART_IRQHandler+0x298>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	2298      	movs	r2, #152	@ 0x98
 80055b0:	18bc      	adds	r4, r7, r2
 80055b2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80055b4:	18bb      	adds	r3, r7, r2
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d114      	bne.n	80055e6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2220      	movs	r2, #32
 80055c2:	4013      	ands	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055c6:	183b      	adds	r3, r7, r0
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2220      	movs	r2, #32
 80055cc:	4013      	ands	r3, r2
 80055ce:	d00a      	beq.n	80055e6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d100      	bne.n	80055da <HAL_UART_IRQHandler+0x62>
 80055d8:	e29e      	b.n	8005b18 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	0010      	movs	r0, r2
 80055e2:	4798      	blx	r3
      }
      return;
 80055e4:	e298      	b.n	8005b18 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055e6:	2398      	movs	r3, #152	@ 0x98
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d100      	bne.n	80055f2 <HAL_UART_IRQHandler+0x7a>
 80055f0:	e114      	b.n	800581c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055f2:	239c      	movs	r3, #156	@ 0x9c
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2201      	movs	r2, #1
 80055fa:	4013      	ands	r3, r2
 80055fc:	d106      	bne.n	800560c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055fe:	23a0      	movs	r3, #160	@ 0xa0
 8005600:	18fb      	adds	r3, r7, r3
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a83      	ldr	r2, [pc, #524]	@ (8005814 <HAL_UART_IRQHandler+0x29c>)
 8005606:	4013      	ands	r3, r2
 8005608:	d100      	bne.n	800560c <HAL_UART_IRQHandler+0x94>
 800560a:	e107      	b.n	800581c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800560c:	23a4      	movs	r3, #164	@ 0xa4
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	4013      	ands	r3, r2
 8005616:	d012      	beq.n	800563e <HAL_UART_IRQHandler+0xc6>
 8005618:	23a0      	movs	r3, #160	@ 0xa0
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	@ 0x80
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4013      	ands	r3, r2
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2284      	movs	r2, #132	@ 0x84
 8005632:	589b      	ldr	r3, [r3, r2]
 8005634:	2201      	movs	r2, #1
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2184      	movs	r1, #132	@ 0x84
 800563c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800563e:	23a4      	movs	r3, #164	@ 0xa4
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	d011      	beq.n	800566e <HAL_UART_IRQHandler+0xf6>
 800564a:	239c      	movs	r3, #156	@ 0x9c
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	4013      	ands	r3, r2
 8005654:	d00b      	beq.n	800566e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2202      	movs	r2, #2
 800565c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2284      	movs	r2, #132	@ 0x84
 8005662:	589b      	ldr	r3, [r3, r2]
 8005664:	2204      	movs	r2, #4
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2184      	movs	r1, #132	@ 0x84
 800566c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800566e:	23a4      	movs	r3, #164	@ 0xa4
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2204      	movs	r2, #4
 8005676:	4013      	ands	r3, r2
 8005678:	d011      	beq.n	800569e <HAL_UART_IRQHandler+0x126>
 800567a:	239c      	movs	r3, #156	@ 0x9c
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	4013      	ands	r3, r2
 8005684:	d00b      	beq.n	800569e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2204      	movs	r2, #4
 800568c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2284      	movs	r2, #132	@ 0x84
 8005692:	589b      	ldr	r3, [r3, r2]
 8005694:	2202      	movs	r2, #2
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2184      	movs	r1, #132	@ 0x84
 800569c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800569e:	23a4      	movs	r3, #164	@ 0xa4
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2208      	movs	r2, #8
 80056a6:	4013      	ands	r3, r2
 80056a8:	d017      	beq.n	80056da <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056aa:	23a0      	movs	r3, #160	@ 0xa0
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2220      	movs	r2, #32
 80056b2:	4013      	ands	r3, r2
 80056b4:	d105      	bne.n	80056c2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056b6:	239c      	movs	r3, #156	@ 0x9c
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056c0:	d00b      	beq.n	80056da <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2208      	movs	r2, #8
 80056c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2284      	movs	r2, #132	@ 0x84
 80056ce:	589b      	ldr	r3, [r3, r2]
 80056d0:	2208      	movs	r2, #8
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2184      	movs	r1, #132	@ 0x84
 80056d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056da:	23a4      	movs	r3, #164	@ 0xa4
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4013      	ands	r3, r2
 80056e6:	d013      	beq.n	8005710 <HAL_UART_IRQHandler+0x198>
 80056e8:	23a0      	movs	r3, #160	@ 0xa0
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	2380      	movs	r3, #128	@ 0x80
 80056f0:	04db      	lsls	r3, r3, #19
 80056f2:	4013      	ands	r3, r2
 80056f4:	d00c      	beq.n	8005710 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2280      	movs	r2, #128	@ 0x80
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2284      	movs	r2, #132	@ 0x84
 8005704:	589b      	ldr	r3, [r3, r2]
 8005706:	2220      	movs	r2, #32
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2184      	movs	r1, #132	@ 0x84
 800570e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2284      	movs	r2, #132	@ 0x84
 8005714:	589b      	ldr	r3, [r3, r2]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d100      	bne.n	800571c <HAL_UART_IRQHandler+0x1a4>
 800571a:	e1ff      	b.n	8005b1c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800571c:	23a4      	movs	r3, #164	@ 0xa4
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2220      	movs	r2, #32
 8005724:	4013      	ands	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005728:	23a0      	movs	r3, #160	@ 0xa0
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2220      	movs	r2, #32
 8005730:	4013      	ands	r3, r2
 8005732:	d008      	beq.n	8005746 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	0010      	movs	r0, r2
 8005744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2284      	movs	r2, #132	@ 0x84
 800574a:	589b      	ldr	r3, [r3, r2]
 800574c:	2194      	movs	r1, #148	@ 0x94
 800574e:	187a      	adds	r2, r7, r1
 8005750:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2240      	movs	r2, #64	@ 0x40
 800575a:	4013      	ands	r3, r2
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d004      	beq.n	800576a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005760:	187b      	adds	r3, r7, r1
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2228      	movs	r2, #40	@ 0x28
 8005766:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005768:	d047      	beq.n	80057fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 fcf3 	bl	8006158 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2240      	movs	r2, #64	@ 0x40
 800577a:	4013      	ands	r3, r2
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d137      	bne.n	80057f0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005788:	2090      	movs	r0, #144	@ 0x90
 800578a:	183a      	adds	r2, r7, r0
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	2301      	movs	r3, #1
 8005790:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			@ (mov r8, r8)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2140      	movs	r1, #64	@ 0x40
 80057a6:	438a      	bics	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]
 80057aa:	183b      	adds	r3, r7, r0
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057b2:	f383 8810 	msr	PRIMASK, r3
}
 80057b6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d012      	beq.n	80057e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c4:	4a14      	ldr	r2, [pc, #80]	@ (8005818 <HAL_UART_IRQHandler+0x2a0>)
 80057c6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057cc:	0018      	movs	r0, r3
 80057ce:	f7fc fc85 	bl	80020dc <HAL_DMA_Abort_IT>
 80057d2:	1e03      	subs	r3, r0, #0
 80057d4:	d01a      	beq.n	800580c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e0:	0018      	movs	r0, r3
 80057e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e012      	b.n	800580c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f000 f9ad 	bl	8005b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ee:	e00d      	b.n	800580c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 f9a8 	bl	8005b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e008      	b.n	800580c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 f9a3 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2284      	movs	r2, #132	@ 0x84
 8005806:	2100      	movs	r1, #0
 8005808:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800580a:	e187      	b.n	8005b1c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	46c0      	nop			@ (mov r8, r8)
    return;
 800580e:	e185      	b.n	8005b1c <HAL_UART_IRQHandler+0x5a4>
 8005810:	0000080f 	.word	0x0000080f
 8005814:	04000120 	.word	0x04000120
 8005818:	08006221 	.word	0x08006221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005820:	2b01      	cmp	r3, #1
 8005822:	d000      	beq.n	8005826 <HAL_UART_IRQHandler+0x2ae>
 8005824:	e139      	b.n	8005a9a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005826:	23a4      	movs	r3, #164	@ 0xa4
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2210      	movs	r2, #16
 800582e:	4013      	ands	r3, r2
 8005830:	d100      	bne.n	8005834 <HAL_UART_IRQHandler+0x2bc>
 8005832:	e132      	b.n	8005a9a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005834:	23a0      	movs	r3, #160	@ 0xa0
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2210      	movs	r2, #16
 800583c:	4013      	ands	r3, r2
 800583e:	d100      	bne.n	8005842 <HAL_UART_IRQHandler+0x2ca>
 8005840:	e12b      	b.n	8005a9a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2210      	movs	r2, #16
 8005848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2240      	movs	r2, #64	@ 0x40
 8005852:	4013      	ands	r3, r2
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d000      	beq.n	800585a <HAL_UART_IRQHandler+0x2e2>
 8005858:	e09f      	b.n	800599a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	217e      	movs	r1, #126	@ 0x7e
 8005864:	187b      	adds	r3, r7, r1
 8005866:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005868:	187b      	adds	r3, r7, r1
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d100      	bne.n	8005872 <HAL_UART_IRQHandler+0x2fa>
 8005870:	e156      	b.n	8005b20 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2258      	movs	r2, #88	@ 0x58
 8005876:	5a9b      	ldrh	r3, [r3, r2]
 8005878:	187a      	adds	r2, r7, r1
 800587a:	8812      	ldrh	r2, [r2, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d300      	bcc.n	8005882 <HAL_UART_IRQHandler+0x30a>
 8005880:	e14e      	b.n	8005b20 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	187a      	adds	r2, r7, r1
 8005886:	215a      	movs	r1, #90	@ 0x5a
 8005888:	8812      	ldrh	r2, [r2, #0]
 800588a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b20      	cmp	r3, #32
 8005894:	d06f      	beq.n	8005976 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005896:	f3ef 8310 	mrs	r3, PRIMASK
 800589a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058a0:	2301      	movs	r3, #1
 80058a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	f383 8810 	msr	PRIMASK, r3
}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	499e      	ldr	r1, [pc, #632]	@ (8005b30 <HAL_UART_IRQHandler+0x5b8>)
 80058b8:	400a      	ands	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	f383 8810 	msr	PRIMASK, r3
}
 80058c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c8:	f3ef 8310 	mrs	r3, PRIMASK
 80058cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80058ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80058d2:	2301      	movs	r3, #1
 80058d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d8:	f383 8810 	msr	PRIMASK, r3
}
 80058dc:	46c0      	nop			@ (mov r8, r8)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2101      	movs	r1, #1
 80058ea:	438a      	bics	r2, r1
 80058ec:	609a      	str	r2, [r3, #8]
 80058ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f4:	f383 8810 	msr	PRIMASK, r3
}
 80058f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058fa:	f3ef 8310 	mrs	r3, PRIMASK
 80058fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005902:	673b      	str	r3, [r7, #112]	@ 0x70
 8005904:	2301      	movs	r3, #1
 8005906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2140      	movs	r1, #64	@ 0x40
 800591c:	438a      	bics	r2, r1
 800591e:	609a      	str	r2, [r3, #8]
 8005920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005922:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005926:	f383 8810 	msr	PRIMASK, r3
}
 800592a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2280      	movs	r2, #128	@ 0x80
 8005930:	2120      	movs	r1, #32
 8005932:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593a:	f3ef 8310 	mrs	r3, PRIMASK
 800593e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005942:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005944:	2301      	movs	r3, #1
 8005946:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800594a:	f383 8810 	msr	PRIMASK, r3
}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2110      	movs	r1, #16
 800595c:	438a      	bics	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005966:	f383 8810 	msr	PRIMASK, r3
}
 800596a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005970:	0018      	movs	r0, r3
 8005972:	f7fc fb7b 	bl	800206c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2258      	movs	r2, #88	@ 0x58
 8005980:	5a9a      	ldrh	r2, [r3, r2]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	215a      	movs	r1, #90	@ 0x5a
 8005986:	5a5b      	ldrh	r3, [r3, r1]
 8005988:	b29b      	uxth	r3, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0011      	movs	r1, r2
 8005992:	0018      	movs	r0, r3
 8005994:	f000 f8e0 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005998:	e0c2      	b.n	8005b20 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2258      	movs	r2, #88	@ 0x58
 800599e:	5a99      	ldrh	r1, [r3, r2]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	225a      	movs	r2, #90	@ 0x5a
 80059a4:	5a9b      	ldrh	r3, [r3, r2]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	208e      	movs	r0, #142	@ 0x8e
 80059aa:	183b      	adds	r3, r7, r0
 80059ac:	1a8a      	subs	r2, r1, r2
 80059ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	225a      	movs	r2, #90	@ 0x5a
 80059b4:	5a9b      	ldrh	r3, [r3, r2]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d100      	bne.n	80059be <HAL_UART_IRQHandler+0x446>
 80059bc:	e0b2      	b.n	8005b24 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80059be:	183b      	adds	r3, r7, r0
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d100      	bne.n	80059c8 <HAL_UART_IRQHandler+0x450>
 80059c6:	e0ad      	b.n	8005b24 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c8:	f3ef 8310 	mrs	r3, PRIMASK
 80059cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d0:	2488      	movs	r4, #136	@ 0x88
 80059d2:	193a      	adds	r2, r7, r4
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	2301      	movs	r3, #1
 80059d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			@ (mov r8, r8)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4951      	ldr	r1, [pc, #324]	@ (8005b34 <HAL_UART_IRQHandler+0x5bc>)
 80059ee:	400a      	ands	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	193b      	adds	r3, r7, r4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a06:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a08:	2484      	movs	r4, #132	@ 0x84
 8005a0a:	193a      	adds	r2, r7, r4
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2101      	movs	r1, #1
 8005a26:	438a      	bics	r2, r1
 8005a28:	609a      	str	r2, [r3, #8]
 8005a2a:	193b      	adds	r3, r7, r4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f383 8810 	msr	PRIMASK, r3
}
 8005a36:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2280      	movs	r2, #128	@ 0x80
 8005a3c:	2120      	movs	r1, #32
 8005a3e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	2480      	movs	r4, #128	@ 0x80
 8005a56:	193a      	adds	r2, r7, r4
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	f383 8810 	msr	PRIMASK, r3
}
 8005a64:	46c0      	nop			@ (mov r8, r8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2110      	movs	r1, #16
 8005a72:	438a      	bics	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	193b      	adds	r3, r7, r4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a8a:	183b      	adds	r3, r7, r0
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0011      	movs	r1, r2
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 f860 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a98:	e044      	b.n	8005b24 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a9a:	23a4      	movs	r3, #164	@ 0xa4
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	2380      	movs	r3, #128	@ 0x80
 8005aa2:	035b      	lsls	r3, r3, #13
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d010      	beq.n	8005aca <HAL_UART_IRQHandler+0x552>
 8005aa8:	239c      	movs	r3, #156	@ 0x9c
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	03db      	lsls	r3, r3, #15
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2280      	movs	r2, #128	@ 0x80
 8005abc:	0352      	lsls	r2, r2, #13
 8005abe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 fbee 	bl	80062a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ac8:	e02f      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005aca:	23a4      	movs	r3, #164	@ 0xa4
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2280      	movs	r2, #128	@ 0x80
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d00f      	beq.n	8005af6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ad6:	23a0      	movs	r3, #160	@ 0xa0
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2280      	movs	r2, #128	@ 0x80
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01e      	beq.n	8005b28 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	0010      	movs	r0, r2
 8005af2:	4798      	blx	r3
    }
    return;
 8005af4:	e018      	b.n	8005b28 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005af6:	23a4      	movs	r3, #164	@ 0xa4
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2240      	movs	r2, #64	@ 0x40
 8005afe:	4013      	ands	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
 8005b02:	23a0      	movs	r3, #160	@ 0xa0
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2240      	movs	r2, #64	@ 0x40
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d00d      	beq.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 fb9c 	bl	800624e <UART_EndTransmit_IT>
    return;
 8005b16:	e008      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005b18:	46c0      	nop			@ (mov r8, r8)
 8005b1a:	e006      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005b1c:	46c0      	nop			@ (mov r8, r8)
 8005b1e:	e004      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005b20:	46c0      	nop			@ (mov r8, r8)
 8005b22:	e002      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005b24:	46c0      	nop			@ (mov r8, r8)
 8005b26:	e000      	b.n	8005b2a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005b28:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b02b      	add	sp, #172	@ 0xac
 8005b2e:	bd90      	pop	{r4, r7, pc}
 8005b30:	fffffeff 	.word	0xfffffeff
 8005b34:	fffffedf 	.word	0xfffffedf

08005b38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b40:	46c0      	nop			@ (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b50:	46c0      	nop			@ (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b002      	add	sp, #8
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	000a      	movs	r2, r1
 8005b62:	1cbb      	adds	r3, r7, #2
 8005b64:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	b002      	add	sp, #8
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b78:	231e      	movs	r3, #30
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a83      	ldr	r2, [pc, #524]	@ (8005dac <UART_SetConfig+0x23c>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4a7e      	ldr	r2, [pc, #504]	@ (8005db0 <UART_SetConfig+0x240>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4a75      	ldr	r2, [pc, #468]	@ (8005db4 <UART_SetConfig+0x244>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bec:	4b72      	ldr	r3, [pc, #456]	@ (8005db8 <UART_SetConfig+0x248>)
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d00d      	beq.n	8005c14 <UART_SetConfig+0xa4>
 8005bf8:	d81b      	bhi.n	8005c32 <UART_SetConfig+0xc2>
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d014      	beq.n	8005c28 <UART_SetConfig+0xb8>
 8005bfe:	d818      	bhi.n	8005c32 <UART_SetConfig+0xc2>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <UART_SetConfig+0x9a>
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d00a      	beq.n	8005c1e <UART_SetConfig+0xae>
 8005c08:	e013      	b.n	8005c32 <UART_SetConfig+0xc2>
 8005c0a:	231f      	movs	r3, #31
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e012      	b.n	8005c3a <UART_SetConfig+0xca>
 8005c14:	231f      	movs	r3, #31
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	2202      	movs	r2, #2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e00d      	b.n	8005c3a <UART_SetConfig+0xca>
 8005c1e:	231f      	movs	r3, #31
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	2204      	movs	r2, #4
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e008      	b.n	8005c3a <UART_SetConfig+0xca>
 8005c28:	231f      	movs	r3, #31
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e003      	b.n	8005c3a <UART_SetConfig+0xca>
 8005c32:	231f      	movs	r3, #31
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	2210      	movs	r2, #16
 8005c38:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	2380      	movs	r3, #128	@ 0x80
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d15c      	bne.n	8005d00 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8005c46:	231f      	movs	r3, #31
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d015      	beq.n	8005c7c <UART_SetConfig+0x10c>
 8005c50:	dc18      	bgt.n	8005c84 <UART_SetConfig+0x114>
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d00d      	beq.n	8005c72 <UART_SetConfig+0x102>
 8005c56:	dc15      	bgt.n	8005c84 <UART_SetConfig+0x114>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <UART_SetConfig+0xf2>
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d005      	beq.n	8005c6c <UART_SetConfig+0xfc>
 8005c60:	e010      	b.n	8005c84 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c62:	f7fd fdc7 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005c66:	0003      	movs	r3, r0
 8005c68:	61bb      	str	r3, [r7, #24]
        break;
 8005c6a:	e012      	b.n	8005c92 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c6c:	4b53      	ldr	r3, [pc, #332]	@ (8005dbc <UART_SetConfig+0x24c>)
 8005c6e:	61bb      	str	r3, [r7, #24]
        break;
 8005c70:	e00f      	b.n	8005c92 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c72:	f7fd fd5f 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8005c76:	0003      	movs	r3, r0
 8005c78:	61bb      	str	r3, [r7, #24]
        break;
 8005c7a:	e00a      	b.n	8005c92 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	61bb      	str	r3, [r7, #24]
        break;
 8005c82:	e006      	b.n	8005c92 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c88:	231e      	movs	r3, #30
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
        break;
 8005c90:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d100      	bne.n	8005c9a <UART_SetConfig+0x12a>
 8005c98:	e07a      	b.n	8005d90 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	005a      	lsls	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	18d2      	adds	r2, r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	0019      	movs	r1, r3
 8005cac:	0010      	movs	r0, r2
 8005cae:	f7fa fa3d 	bl	800012c <__udivsi3>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b0f      	cmp	r3, #15
 8005cba:	d91c      	bls.n	8005cf6 <UART_SetConfig+0x186>
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	025b      	lsls	r3, r3, #9
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d217      	bcs.n	8005cf6 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	200e      	movs	r0, #14
 8005ccc:	183b      	adds	r3, r7, r0
 8005cce:	210f      	movs	r1, #15
 8005cd0:	438a      	bics	r2, r1
 8005cd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4013      	ands	r3, r2
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	183b      	adds	r3, r7, r0
 8005ce2:	183a      	adds	r2, r7, r0
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	183a      	adds	r2, r7, r0
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
 8005cf4:	e04c      	b.n	8005d90 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf6:	231e      	movs	r3, #30
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	e047      	b.n	8005d90 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d00:	231f      	movs	r3, #31
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d015      	beq.n	8005d36 <UART_SetConfig+0x1c6>
 8005d0a:	dc18      	bgt.n	8005d3e <UART_SetConfig+0x1ce>
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d00d      	beq.n	8005d2c <UART_SetConfig+0x1bc>
 8005d10:	dc15      	bgt.n	8005d3e <UART_SetConfig+0x1ce>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <UART_SetConfig+0x1ac>
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d005      	beq.n	8005d26 <UART_SetConfig+0x1b6>
 8005d1a:	e010      	b.n	8005d3e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d1c:	f7fd fd6a 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005d20:	0003      	movs	r3, r0
 8005d22:	61bb      	str	r3, [r7, #24]
        break;
 8005d24:	e012      	b.n	8005d4c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d26:	4b25      	ldr	r3, [pc, #148]	@ (8005dbc <UART_SetConfig+0x24c>)
 8005d28:	61bb      	str	r3, [r7, #24]
        break;
 8005d2a:	e00f      	b.n	8005d4c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2c:	f7fd fd02 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8005d30:	0003      	movs	r3, r0
 8005d32:	61bb      	str	r3, [r7, #24]
        break;
 8005d34:	e00a      	b.n	8005d4c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d36:	2380      	movs	r3, #128	@ 0x80
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	61bb      	str	r3, [r7, #24]
        break;
 8005d3c:	e006      	b.n	8005d4c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d42:	231e      	movs	r3, #30
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2201      	movs	r2, #1
 8005d48:	701a      	strb	r2, [r3, #0]
        break;
 8005d4a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01e      	beq.n	8005d90 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	085a      	lsrs	r2, r3, #1
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	18d2      	adds	r2, r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0019      	movs	r1, r3
 8005d62:	0010      	movs	r0, r2
 8005d64:	f7fa f9e2 	bl	800012c <__udivsi3>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d90a      	bls.n	8005d88 <UART_SetConfig+0x218>
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	2380      	movs	r3, #128	@ 0x80
 8005d76:	025b      	lsls	r3, r3, #9
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d205      	bcs.n	8005d88 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	e003      	b.n	8005d90 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005d88:	231e      	movs	r3, #30
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d9c:	231e      	movs	r3, #30
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	781b      	ldrb	r3, [r3, #0]
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b008      	add	sp, #32
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	ffff69f3 	.word	0xffff69f3
 8005db0:	ffffcfff 	.word	0xffffcfff
 8005db4:	fffff4ff 	.word	0xfffff4ff
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	007a1200 	.word	0x007a1200

08005dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d00b      	beq.n	8005dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8005f04 <UART_AdvFeatureConfig+0x144>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	0019      	movs	r1, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	2201      	movs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4a43      	ldr	r2, [pc, #268]	@ (8005f08 <UART_AdvFeatureConfig+0x148>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	0019      	movs	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	2202      	movs	r2, #2
 8005e12:	4013      	ands	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f0c <UART_AdvFeatureConfig+0x14c>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	0019      	movs	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	2204      	movs	r2, #4
 8005e34:	4013      	ands	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4a34      	ldr	r2, [pc, #208]	@ (8005f10 <UART_AdvFeatureConfig+0x150>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	0019      	movs	r1, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	2210      	movs	r2, #16
 8005e56:	4013      	ands	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <UART_AdvFeatureConfig+0x154>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	2220      	movs	r2, #32
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	4a25      	ldr	r2, [pc, #148]	@ (8005f18 <UART_AdvFeatureConfig+0x158>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	2240      	movs	r2, #64	@ 0x40
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d01d      	beq.n	8005eda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f1c <UART_AdvFeatureConfig+0x15c>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	0019      	movs	r1, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	035b      	lsls	r3, r3, #13
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d10b      	bne.n	8005eda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	@ (8005f20 <UART_AdvFeatureConfig+0x160>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	0019      	movs	r1, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	2280      	movs	r2, #128	@ 0x80
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4a0e      	ldr	r2, [pc, #56]	@ (8005f24 <UART_AdvFeatureConfig+0x164>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	0019      	movs	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
  }
}
 8005efc:	46c0      	nop			@ (mov r8, r8)
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	ffff7fff 	.word	0xffff7fff
 8005f08:	fffdffff 	.word	0xfffdffff
 8005f0c:	fffeffff 	.word	0xfffeffff
 8005f10:	fffbffff 	.word	0xfffbffff
 8005f14:	ffffefff 	.word	0xffffefff
 8005f18:	ffffdfff 	.word	0xffffdfff
 8005f1c:	ffefffff 	.word	0xffefffff
 8005f20:	ff9fffff 	.word	0xff9fffff
 8005f24:	fff7ffff 	.word	0xfff7ffff

08005f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b092      	sub	sp, #72	@ 0x48
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2284      	movs	r2, #132	@ 0x84
 8005f34:	2100      	movs	r1, #0
 8005f36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f38:	f7fb ff44 	bl	8001dc4 <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2208      	movs	r2, #8
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d12c      	bne.n	8005fa8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f50:	2280      	movs	r2, #128	@ 0x80
 8005f52:	0391      	lsls	r1, r2, #14
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4a46      	ldr	r2, [pc, #280]	@ (8006070 <UART_CheckIdleState+0x148>)
 8005f58:	9200      	str	r2, [sp, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f000 f88c 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005f60:	1e03      	subs	r3, r0, #0
 8005f62:	d021      	beq.n	8005fa8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f64:	f3ef 8310 	mrs	r3, PRIMASK
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f6e:	2301      	movs	r3, #1
 8005f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	f383 8810 	msr	PRIMASK, r3
}
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2180      	movs	r1, #128	@ 0x80
 8005f86:	438a      	bics	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	f383 8810 	msr	PRIMASK, r3
}
 8005f94:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2278      	movs	r2, #120	@ 0x78
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e05f      	b.n	8006068 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d146      	bne.n	8006044 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb8:	2280      	movs	r2, #128	@ 0x80
 8005fba:	03d1      	lsls	r1, r2, #15
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006070 <UART_CheckIdleState+0x148>)
 8005fc0:	9200      	str	r2, [sp, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f000 f858 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005fc8:	1e03      	subs	r3, r0, #0
 8005fca:	d03b      	beq.n	8006044 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			@ (mov r8, r8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4921      	ldr	r1, [pc, #132]	@ (8006074 <UART_CheckIdleState+0x14c>)
 8005fee:	400a      	ands	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f383 8810 	msr	PRIMASK, r3
}
 8005ffc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	61bb      	str	r3, [r7, #24]
  return(result);
 8006004:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	633b      	str	r3, [r7, #48]	@ 0x30
 8006008:	2301      	movs	r3, #1
 800600a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2101      	movs	r1, #1
 8006020:	438a      	bics	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2280      	movs	r2, #128	@ 0x80
 8006034:	2120      	movs	r1, #32
 8006036:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2278      	movs	r2, #120	@ 0x78
 800603c:	2100      	movs	r1, #0
 800603e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e011      	b.n	8006068 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2280      	movs	r2, #128	@ 0x80
 800604e:	2120      	movs	r1, #32
 8006050:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2278      	movs	r2, #120	@ 0x78
 8006062:	2100      	movs	r1, #0
 8006064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	b010      	add	sp, #64	@ 0x40
 800606e:	bd80      	pop	{r7, pc}
 8006070:	01ffffff 	.word	0x01ffffff
 8006074:	fffffedf 	.word	0xfffffedf

08006078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	1dfb      	adds	r3, r7, #7
 8006086:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006088:	e051      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	3301      	adds	r3, #1
 800608e:	d04e      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006090:	f7fb fe98 	bl	8001dc4 <HAL_GetTick>
 8006094:	0002      	movs	r2, r0
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e051      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2204      	movs	r2, #4
 80060b2:	4013      	ands	r3, r2
 80060b4:	d03b      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb6>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b80      	cmp	r3, #128	@ 0x80
 80060ba:	d038      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb6>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d035      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	2208      	movs	r2, #8
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d111      	bne.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2208      	movs	r2, #8
 80060d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 f83c 	bl	8006158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2284      	movs	r2, #132	@ 0x84
 80060e4:	2108      	movs	r1, #8
 80060e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2278      	movs	r2, #120	@ 0x78
 80060ec:	2100      	movs	r1, #0
 80060ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e02c      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	2380      	movs	r3, #128	@ 0x80
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	401a      	ands	r2, r3
 8006100:	2380      	movs	r3, #128	@ 0x80
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	429a      	cmp	r2, r3
 8006106:	d112      	bne.n	800612e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2280      	movs	r2, #128	@ 0x80
 800610e:	0112      	lsls	r2, r2, #4
 8006110:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0018      	movs	r0, r3
 8006116:	f000 f81f 	bl	8006158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2284      	movs	r2, #132	@ 0x84
 800611e:	2120      	movs	r1, #32
 8006120:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2278      	movs	r2, #120	@ 0x78
 8006126:	2100      	movs	r1, #0
 8006128:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e00f      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	425a      	negs	r2, r3
 800613e:	4153      	adcs	r3, r2
 8006140:	b2db      	uxtb	r3, r3
 8006142:	001a      	movs	r2, r3
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d09e      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b004      	add	sp, #16
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	@ 0x38
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006160:	f3ef 8310 	mrs	r3, PRIMASK
 8006164:	617b      	str	r3, [r7, #20]
  return(result);
 8006166:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
 800616a:	2301      	movs	r3, #1
 800616c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f383 8810 	msr	PRIMASK, r3
}
 8006174:	46c0      	nop			@ (mov r8, r8)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4926      	ldr	r1, [pc, #152]	@ (800621c <UART_EndRxTransfer+0xc4>)
 8006182:	400a      	ands	r2, r1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	623b      	str	r3, [r7, #32]
  return(result);
 8006198:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	633b      	str	r3, [r7, #48]	@ 0x30
 800619c:	2301      	movs	r3, #1
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	f383 8810 	msr	PRIMASK, r3
}
 80061a6:	46c0      	nop			@ (mov r8, r8)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2101      	movs	r1, #1
 80061b4:	438a      	bics	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	f383 8810 	msr	PRIMASK, r3
}
 80061c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d118      	bne.n	80061fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
 80061d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80061d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061d6:	2301      	movs	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	46c0      	nop			@ (mov r8, r8)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2110      	movs	r1, #16
 80061ee:	438a      	bics	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f383 8810 	msr	PRIMASK, r3
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2280      	movs	r2, #128	@ 0x80
 8006202:	2120      	movs	r1, #32
 8006204:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	46bd      	mov	sp, r7
 8006216:	b00e      	add	sp, #56	@ 0x38
 8006218:	bd80      	pop	{r7, pc}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	fffffedf 	.word	0xfffffedf

08006220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	225a      	movs	r2, #90	@ 0x5a
 8006232:	2100      	movs	r1, #0
 8006234:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2252      	movs	r2, #82	@ 0x52
 800623a:	2100      	movs	r1, #0
 800623c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	0018      	movs	r0, r3
 8006242:	f7ff fc81 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006246:	46c0      	nop			@ (mov r8, r8)
 8006248:	46bd      	mov	sp, r7
 800624a:	b004      	add	sp, #16
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006256:	f3ef 8310 	mrs	r3, PRIMASK
 800625a:	60bb      	str	r3, [r7, #8]
  return(result);
 800625c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	2301      	movs	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f383 8810 	msr	PRIMASK, r3
}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2140      	movs	r1, #64	@ 0x40
 8006278:	438a      	bics	r2, r1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f383 8810 	msr	PRIMASK, r3
}
 8006286:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	0018      	movs	r0, r3
 8006298:	f7ff fc4e 	bl	8005b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800629c:	46c0      	nop			@ (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b006      	add	sp, #24
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062ac:	46c0      	nop			@ (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <malloc>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	4b03      	ldr	r3, [pc, #12]	@ (80062c4 <malloc+0x10>)
 80062b8:	0001      	movs	r1, r0
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f000 f830 	bl	8006320 <_malloc_r>
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	2000000c 	.word	0x2000000c

080062c8 <free>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	4b03      	ldr	r3, [pc, #12]	@ (80062d8 <free+0x10>)
 80062cc:	0001      	movs	r1, r0
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	f000 f96e 	bl	80065b0 <_free_r>
 80062d4:	bd10      	pop	{r4, pc}
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	2000000c 	.word	0x2000000c

080062dc <sbrk_aligned>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4e0f      	ldr	r6, [pc, #60]	@ (800631c <sbrk_aligned+0x40>)
 80062e0:	000d      	movs	r5, r1
 80062e2:	6831      	ldr	r1, [r6, #0]
 80062e4:	0004      	movs	r4, r0
 80062e6:	2900      	cmp	r1, #0
 80062e8:	d102      	bne.n	80062f0 <sbrk_aligned+0x14>
 80062ea:	f000 f919 	bl	8006520 <_sbrk_r>
 80062ee:	6030      	str	r0, [r6, #0]
 80062f0:	0029      	movs	r1, r5
 80062f2:	0020      	movs	r0, r4
 80062f4:	f000 f914 	bl	8006520 <_sbrk_r>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d103      	bne.n	8006304 <sbrk_aligned+0x28>
 80062fc:	2501      	movs	r5, #1
 80062fe:	426d      	negs	r5, r5
 8006300:	0028      	movs	r0, r5
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	2303      	movs	r3, #3
 8006306:	1cc5      	adds	r5, r0, #3
 8006308:	439d      	bics	r5, r3
 800630a:	42a8      	cmp	r0, r5
 800630c:	d0f8      	beq.n	8006300 <sbrk_aligned+0x24>
 800630e:	1a29      	subs	r1, r5, r0
 8006310:	0020      	movs	r0, r4
 8006312:	f000 f905 	bl	8006520 <_sbrk_r>
 8006316:	3001      	adds	r0, #1
 8006318:	d1f2      	bne.n	8006300 <sbrk_aligned+0x24>
 800631a:	e7ef      	b.n	80062fc <sbrk_aligned+0x20>
 800631c:	2000028c 	.word	0x2000028c

08006320 <_malloc_r>:
 8006320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006322:	2203      	movs	r2, #3
 8006324:	1ccb      	adds	r3, r1, #3
 8006326:	4393      	bics	r3, r2
 8006328:	3308      	adds	r3, #8
 800632a:	0005      	movs	r5, r0
 800632c:	001f      	movs	r7, r3
 800632e:	2b0c      	cmp	r3, #12
 8006330:	d234      	bcs.n	800639c <_malloc_r+0x7c>
 8006332:	270c      	movs	r7, #12
 8006334:	42b9      	cmp	r1, r7
 8006336:	d833      	bhi.n	80063a0 <_malloc_r+0x80>
 8006338:	0028      	movs	r0, r5
 800633a:	f000 f871 	bl	8006420 <__malloc_lock>
 800633e:	4e37      	ldr	r6, [pc, #220]	@ (800641c <_malloc_r+0xfc>)
 8006340:	6833      	ldr	r3, [r6, #0]
 8006342:	001c      	movs	r4, r3
 8006344:	2c00      	cmp	r4, #0
 8006346:	d12f      	bne.n	80063a8 <_malloc_r+0x88>
 8006348:	0039      	movs	r1, r7
 800634a:	0028      	movs	r0, r5
 800634c:	f7ff ffc6 	bl	80062dc <sbrk_aligned>
 8006350:	0004      	movs	r4, r0
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	d15f      	bne.n	8006416 <_malloc_r+0xf6>
 8006356:	6834      	ldr	r4, [r6, #0]
 8006358:	9400      	str	r4, [sp, #0]
 800635a:	9b00      	ldr	r3, [sp, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d14a      	bne.n	80063f6 <_malloc_r+0xd6>
 8006360:	2c00      	cmp	r4, #0
 8006362:	d052      	beq.n	800640a <_malloc_r+0xea>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	0028      	movs	r0, r5
 8006368:	18e3      	adds	r3, r4, r3
 800636a:	9900      	ldr	r1, [sp, #0]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	f000 f8d7 	bl	8006520 <_sbrk_r>
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	4283      	cmp	r3, r0
 8006376:	d148      	bne.n	800640a <_malloc_r+0xea>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	0028      	movs	r0, r5
 800637c:	1aff      	subs	r7, r7, r3
 800637e:	0039      	movs	r1, r7
 8006380:	f7ff ffac 	bl	80062dc <sbrk_aligned>
 8006384:	3001      	adds	r0, #1
 8006386:	d040      	beq.n	800640a <_malloc_r+0xea>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	19db      	adds	r3, r3, r7
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	6833      	ldr	r3, [r6, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	2a00      	cmp	r2, #0
 8006394:	d133      	bne.n	80063fe <_malloc_r+0xde>
 8006396:	9b00      	ldr	r3, [sp, #0]
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	e019      	b.n	80063d0 <_malloc_r+0xb0>
 800639c:	2b00      	cmp	r3, #0
 800639e:	dac9      	bge.n	8006334 <_malloc_r+0x14>
 80063a0:	230c      	movs	r3, #12
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	2000      	movs	r0, #0
 80063a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063a8:	6821      	ldr	r1, [r4, #0]
 80063aa:	1bc9      	subs	r1, r1, r7
 80063ac:	d420      	bmi.n	80063f0 <_malloc_r+0xd0>
 80063ae:	290b      	cmp	r1, #11
 80063b0:	d90a      	bls.n	80063c8 <_malloc_r+0xa8>
 80063b2:	19e2      	adds	r2, r4, r7
 80063b4:	6027      	str	r7, [r4, #0]
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	d104      	bne.n	80063c4 <_malloc_r+0xa4>
 80063ba:	6032      	str	r2, [r6, #0]
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	6011      	str	r1, [r2, #0]
 80063c0:	6053      	str	r3, [r2, #4]
 80063c2:	e005      	b.n	80063d0 <_malloc_r+0xb0>
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	e7f9      	b.n	80063bc <_malloc_r+0x9c>
 80063c8:	6862      	ldr	r2, [r4, #4]
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	d10e      	bne.n	80063ec <_malloc_r+0xcc>
 80063ce:	6032      	str	r2, [r6, #0]
 80063d0:	0028      	movs	r0, r5
 80063d2:	f000 f82d 	bl	8006430 <__malloc_unlock>
 80063d6:	0020      	movs	r0, r4
 80063d8:	2207      	movs	r2, #7
 80063da:	300b      	adds	r0, #11
 80063dc:	1d23      	adds	r3, r4, #4
 80063de:	4390      	bics	r0, r2
 80063e0:	1ac2      	subs	r2, r0, r3
 80063e2:	4298      	cmp	r0, r3
 80063e4:	d0df      	beq.n	80063a6 <_malloc_r+0x86>
 80063e6:	1a1b      	subs	r3, r3, r0
 80063e8:	50a3      	str	r3, [r4, r2]
 80063ea:	e7dc      	b.n	80063a6 <_malloc_r+0x86>
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	e7ef      	b.n	80063d0 <_malloc_r+0xb0>
 80063f0:	0023      	movs	r3, r4
 80063f2:	6864      	ldr	r4, [r4, #4]
 80063f4:	e7a6      	b.n	8006344 <_malloc_r+0x24>
 80063f6:	9c00      	ldr	r4, [sp, #0]
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	e7ad      	b.n	800635a <_malloc_r+0x3a>
 80063fe:	001a      	movs	r2, r3
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	42a3      	cmp	r3, r4
 8006404:	d1fb      	bne.n	80063fe <_malloc_r+0xde>
 8006406:	2300      	movs	r3, #0
 8006408:	e7da      	b.n	80063c0 <_malloc_r+0xa0>
 800640a:	230c      	movs	r3, #12
 800640c:	0028      	movs	r0, r5
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	f000 f80e 	bl	8006430 <__malloc_unlock>
 8006414:	e7c6      	b.n	80063a4 <_malloc_r+0x84>
 8006416:	6007      	str	r7, [r0, #0]
 8006418:	e7da      	b.n	80063d0 <_malloc_r+0xb0>
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	20000290 	.word	0x20000290

08006420 <__malloc_lock>:
 8006420:	b510      	push	{r4, lr}
 8006422:	4802      	ldr	r0, [pc, #8]	@ (800642c <__malloc_lock+0xc>)
 8006424:	f000 f8b8 	bl	8006598 <__retarget_lock_acquire_recursive>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	200003d0 	.word	0x200003d0

08006430 <__malloc_unlock>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4802      	ldr	r0, [pc, #8]	@ (800643c <__malloc_unlock+0xc>)
 8006434:	f000 f8b1 	bl	800659a <__retarget_lock_release_recursive>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	200003d0 	.word	0x200003d0

08006440 <realloc>:
 8006440:	b510      	push	{r4, lr}
 8006442:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <realloc+0x10>)
 8006444:	000a      	movs	r2, r1
 8006446:	0001      	movs	r1, r0
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f000 f803 	bl	8006454 <_realloc_r>
 800644e:	bd10      	pop	{r4, pc}
 8006450:	2000000c 	.word	0x2000000c

08006454 <_realloc_r>:
 8006454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006456:	0006      	movs	r6, r0
 8006458:	000c      	movs	r4, r1
 800645a:	0015      	movs	r5, r2
 800645c:	2900      	cmp	r1, #0
 800645e:	d105      	bne.n	800646c <_realloc_r+0x18>
 8006460:	0011      	movs	r1, r2
 8006462:	f7ff ff5d 	bl	8006320 <_malloc_r>
 8006466:	0004      	movs	r4, r0
 8006468:	0020      	movs	r0, r4
 800646a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800646c:	2a00      	cmp	r2, #0
 800646e:	d103      	bne.n	8006478 <_realloc_r+0x24>
 8006470:	f000 f89e 	bl	80065b0 <_free_r>
 8006474:	2400      	movs	r4, #0
 8006476:	e7f7      	b.n	8006468 <_realloc_r+0x14>
 8006478:	f000 f8e4 	bl	8006644 <_malloc_usable_size_r>
 800647c:	0007      	movs	r7, r0
 800647e:	4285      	cmp	r5, r0
 8006480:	d802      	bhi.n	8006488 <_realloc_r+0x34>
 8006482:	0843      	lsrs	r3, r0, #1
 8006484:	42ab      	cmp	r3, r5
 8006486:	d3ef      	bcc.n	8006468 <_realloc_r+0x14>
 8006488:	0029      	movs	r1, r5
 800648a:	0030      	movs	r0, r6
 800648c:	f7ff ff48 	bl	8006320 <_malloc_r>
 8006490:	9001      	str	r0, [sp, #4]
 8006492:	2800      	cmp	r0, #0
 8006494:	d0ee      	beq.n	8006474 <_realloc_r+0x20>
 8006496:	002a      	movs	r2, r5
 8006498:	42bd      	cmp	r5, r7
 800649a:	d900      	bls.n	800649e <_realloc_r+0x4a>
 800649c:	003a      	movs	r2, r7
 800649e:	0021      	movs	r1, r4
 80064a0:	9801      	ldr	r0, [sp, #4]
 80064a2:	f000 f87b 	bl	800659c <memcpy>
 80064a6:	0021      	movs	r1, r4
 80064a8:	0030      	movs	r0, r6
 80064aa:	f000 f881 	bl	80065b0 <_free_r>
 80064ae:	9c01      	ldr	r4, [sp, #4]
 80064b0:	e7da      	b.n	8006468 <_realloc_r+0x14>
	...

080064b4 <siprintf>:
 80064b4:	b40e      	push	{r1, r2, r3}
 80064b6:	b500      	push	{lr}
 80064b8:	490b      	ldr	r1, [pc, #44]	@ (80064e8 <siprintf+0x34>)
 80064ba:	b09c      	sub	sp, #112	@ 0x70
 80064bc:	ab1d      	add	r3, sp, #116	@ 0x74
 80064be:	9002      	str	r0, [sp, #8]
 80064c0:	9006      	str	r0, [sp, #24]
 80064c2:	9107      	str	r1, [sp, #28]
 80064c4:	9104      	str	r1, [sp, #16]
 80064c6:	4809      	ldr	r0, [pc, #36]	@ (80064ec <siprintf+0x38>)
 80064c8:	4909      	ldr	r1, [pc, #36]	@ (80064f0 <siprintf+0x3c>)
 80064ca:	cb04      	ldmia	r3!, {r2}
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	a902      	add	r1, sp, #8
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	f000 f91e 	bl	8006714 <_svfiprintf_r>
 80064d8:	2200      	movs	r2, #0
 80064da:	9b02      	ldr	r3, [sp, #8]
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	b01c      	add	sp, #112	@ 0x70
 80064e0:	bc08      	pop	{r3}
 80064e2:	b003      	add	sp, #12
 80064e4:	4718      	bx	r3
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	7fffffff 	.word	0x7fffffff
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	ffff0208 	.word	0xffff0208

080064f4 <memcmp>:
 80064f4:	b530      	push	{r4, r5, lr}
 80064f6:	2400      	movs	r4, #0
 80064f8:	3901      	subs	r1, #1
 80064fa:	42a2      	cmp	r2, r4
 80064fc:	d101      	bne.n	8006502 <memcmp+0xe>
 80064fe:	2000      	movs	r0, #0
 8006500:	e005      	b.n	800650e <memcmp+0x1a>
 8006502:	5d03      	ldrb	r3, [r0, r4]
 8006504:	3401      	adds	r4, #1
 8006506:	5d0d      	ldrb	r5, [r1, r4]
 8006508:	42ab      	cmp	r3, r5
 800650a:	d0f6      	beq.n	80064fa <memcmp+0x6>
 800650c:	1b58      	subs	r0, r3, r5
 800650e:	bd30      	pop	{r4, r5, pc}

08006510 <memset>:
 8006510:	0003      	movs	r3, r0
 8006512:	1882      	adds	r2, r0, r2
 8006514:	4293      	cmp	r3, r2
 8006516:	d100      	bne.n	800651a <memset+0xa>
 8006518:	4770      	bx	lr
 800651a:	7019      	strb	r1, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	e7f9      	b.n	8006514 <memset+0x4>

08006520 <_sbrk_r>:
 8006520:	2300      	movs	r3, #0
 8006522:	b570      	push	{r4, r5, r6, lr}
 8006524:	4d06      	ldr	r5, [pc, #24]	@ (8006540 <_sbrk_r+0x20>)
 8006526:	0004      	movs	r4, r0
 8006528:	0008      	movs	r0, r1
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	f7fb fb74 	bl	8001c18 <_sbrk>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d103      	bne.n	800653c <_sbrk_r+0x1c>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d000      	beq.n	800653c <_sbrk_r+0x1c>
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	bd70      	pop	{r4, r5, r6, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	200003cc 	.word	0x200003cc

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	@ (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	2000000c 	.word	0x2000000c

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	2600      	movs	r6, #0
 8006554:	4c0c      	ldr	r4, [pc, #48]	@ (8006588 <__libc_init_array+0x38>)
 8006556:	4d0d      	ldr	r5, [pc, #52]	@ (800658c <__libc_init_array+0x3c>)
 8006558:	1b64      	subs	r4, r4, r5
 800655a:	10a4      	asrs	r4, r4, #2
 800655c:	42a6      	cmp	r6, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	2600      	movs	r6, #0
 8006562:	f000 fb71 	bl	8006c48 <_init>
 8006566:	4c0a      	ldr	r4, [pc, #40]	@ (8006590 <__libc_init_array+0x40>)
 8006568:	4d0a      	ldr	r5, [pc, #40]	@ (8006594 <__libc_init_array+0x44>)
 800656a:	1b64      	subs	r4, r4, r5
 800656c:	10a4      	asrs	r4, r4, #2
 800656e:	42a6      	cmp	r6, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	00b3      	lsls	r3, r6, #2
 8006576:	58eb      	ldr	r3, [r5, r3]
 8006578:	4798      	blx	r3
 800657a:	3601      	adds	r6, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	00b3      	lsls	r3, r6, #2
 8006580:	58eb      	ldr	r3, [r5, r3]
 8006582:	4798      	blx	r3
 8006584:	3601      	adds	r6, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	08006e2c 	.word	0x08006e2c
 800658c:	08006e2c 	.word	0x08006e2c
 8006590:	08006e30 	.word	0x08006e30
 8006594:	08006e2c 	.word	0x08006e2c

08006598 <__retarget_lock_acquire_recursive>:
 8006598:	4770      	bx	lr

0800659a <__retarget_lock_release_recursive>:
 800659a:	4770      	bx	lr

0800659c <memcpy>:
 800659c:	2300      	movs	r3, #0
 800659e:	b510      	push	{r4, lr}
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d100      	bne.n	80065a6 <memcpy+0xa>
 80065a4:	bd10      	pop	{r4, pc}
 80065a6:	5ccc      	ldrb	r4, [r1, r3]
 80065a8:	54c4      	strb	r4, [r0, r3]
 80065aa:	3301      	adds	r3, #1
 80065ac:	e7f8      	b.n	80065a0 <memcpy+0x4>
	...

080065b0 <_free_r>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	0005      	movs	r5, r0
 80065b4:	1e0c      	subs	r4, r1, #0
 80065b6:	d010      	beq.n	80065da <_free_r+0x2a>
 80065b8:	3c04      	subs	r4, #4
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da00      	bge.n	80065c2 <_free_r+0x12>
 80065c0:	18e4      	adds	r4, r4, r3
 80065c2:	0028      	movs	r0, r5
 80065c4:	f7ff ff2c 	bl	8006420 <__malloc_lock>
 80065c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <_free_r+0x90>)
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <_free_r+0x2c>
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6014      	str	r4, [r2, #0]
 80065d4:	0028      	movs	r0, r5
 80065d6:	f7ff ff2b 	bl	8006430 <__malloc_unlock>
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d908      	bls.n	80065f2 <_free_r+0x42>
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	1821      	adds	r1, r4, r0
 80065e4:	428b      	cmp	r3, r1
 80065e6:	d1f3      	bne.n	80065d0 <_free_r+0x20>
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	1809      	adds	r1, r1, r0
 80065ee:	6021      	str	r1, [r4, #0]
 80065f0:	e7ee      	b.n	80065d0 <_free_r+0x20>
 80065f2:	001a      	movs	r2, r3
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <_free_r+0x4e>
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	d9f9      	bls.n	80065f2 <_free_r+0x42>
 80065fe:	6811      	ldr	r1, [r2, #0]
 8006600:	1850      	adds	r0, r2, r1
 8006602:	42a0      	cmp	r0, r4
 8006604:	d10b      	bne.n	800661e <_free_r+0x6e>
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	1809      	adds	r1, r1, r0
 800660a:	1850      	adds	r0, r2, r1
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	4283      	cmp	r3, r0
 8006610:	d1e0      	bne.n	80065d4 <_free_r+0x24>
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	1841      	adds	r1, r0, r1
 8006618:	6011      	str	r1, [r2, #0]
 800661a:	6053      	str	r3, [r2, #4]
 800661c:	e7da      	b.n	80065d4 <_free_r+0x24>
 800661e:	42a0      	cmp	r0, r4
 8006620:	d902      	bls.n	8006628 <_free_r+0x78>
 8006622:	230c      	movs	r3, #12
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	e7d5      	b.n	80065d4 <_free_r+0x24>
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	1821      	adds	r1, r4, r0
 800662c:	428b      	cmp	r3, r1
 800662e:	d103      	bne.n	8006638 <_free_r+0x88>
 8006630:	6819      	ldr	r1, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	1809      	adds	r1, r1, r0
 8006636:	6021      	str	r1, [r4, #0]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	6054      	str	r4, [r2, #4]
 800663c:	e7ca      	b.n	80065d4 <_free_r+0x24>
 800663e:	46c0      	nop			@ (mov r8, r8)
 8006640:	20000290 	.word	0x20000290

08006644 <_malloc_usable_size_r>:
 8006644:	1f0b      	subs	r3, r1, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	1f18      	subs	r0, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	da01      	bge.n	8006652 <_malloc_usable_size_r+0xe>
 800664e:	580b      	ldr	r3, [r1, r0]
 8006650:	18c0      	adds	r0, r0, r3
 8006652:	4770      	bx	lr

08006654 <__ssputs_r>:
 8006654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006656:	688e      	ldr	r6, [r1, #8]
 8006658:	b085      	sub	sp, #20
 800665a:	001f      	movs	r7, r3
 800665c:	000c      	movs	r4, r1
 800665e:	680b      	ldr	r3, [r1, #0]
 8006660:	9002      	str	r0, [sp, #8]
 8006662:	9203      	str	r2, [sp, #12]
 8006664:	42be      	cmp	r6, r7
 8006666:	d830      	bhi.n	80066ca <__ssputs_r+0x76>
 8006668:	210c      	movs	r1, #12
 800666a:	5e62      	ldrsh	r2, [r4, r1]
 800666c:	2190      	movs	r1, #144	@ 0x90
 800666e:	00c9      	lsls	r1, r1, #3
 8006670:	420a      	tst	r2, r1
 8006672:	d028      	beq.n	80066c6 <__ssputs_r+0x72>
 8006674:	2003      	movs	r0, #3
 8006676:	6921      	ldr	r1, [r4, #16]
 8006678:	1a5b      	subs	r3, r3, r1
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	4343      	muls	r3, r0
 8006680:	9801      	ldr	r0, [sp, #4]
 8006682:	0fdd      	lsrs	r5, r3, #31
 8006684:	18ed      	adds	r5, r5, r3
 8006686:	1c7b      	adds	r3, r7, #1
 8006688:	181b      	adds	r3, r3, r0
 800668a:	106d      	asrs	r5, r5, #1
 800668c:	42ab      	cmp	r3, r5
 800668e:	d900      	bls.n	8006692 <__ssputs_r+0x3e>
 8006690:	001d      	movs	r5, r3
 8006692:	0552      	lsls	r2, r2, #21
 8006694:	d528      	bpl.n	80066e8 <__ssputs_r+0x94>
 8006696:	0029      	movs	r1, r5
 8006698:	9802      	ldr	r0, [sp, #8]
 800669a:	f7ff fe41 	bl	8006320 <_malloc_r>
 800669e:	1e06      	subs	r6, r0, #0
 80066a0:	d02c      	beq.n	80066fc <__ssputs_r+0xa8>
 80066a2:	9a01      	ldr	r2, [sp, #4]
 80066a4:	6921      	ldr	r1, [r4, #16]
 80066a6:	f7ff ff79 	bl	800659c <memcpy>
 80066aa:	89a2      	ldrh	r2, [r4, #12]
 80066ac:	4b18      	ldr	r3, [pc, #96]	@ (8006710 <__ssputs_r+0xbc>)
 80066ae:	401a      	ands	r2, r3
 80066b0:	2380      	movs	r3, #128	@ 0x80
 80066b2:	4313      	orrs	r3, r2
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	6126      	str	r6, [r4, #16]
 80066ba:	18f6      	adds	r6, r6, r3
 80066bc:	6026      	str	r6, [r4, #0]
 80066be:	003e      	movs	r6, r7
 80066c0:	6165      	str	r5, [r4, #20]
 80066c2:	1aed      	subs	r5, r5, r3
 80066c4:	60a5      	str	r5, [r4, #8]
 80066c6:	42be      	cmp	r6, r7
 80066c8:	d900      	bls.n	80066cc <__ssputs_r+0x78>
 80066ca:	003e      	movs	r6, r7
 80066cc:	0032      	movs	r2, r6
 80066ce:	9903      	ldr	r1, [sp, #12]
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	f000 fa9b 	bl	8006c0c <memmove>
 80066d6:	2000      	movs	r0, #0
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	1b9b      	subs	r3, r3, r6
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	199b      	adds	r3, r3, r6
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	b005      	add	sp, #20
 80066e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e8:	002a      	movs	r2, r5
 80066ea:	9802      	ldr	r0, [sp, #8]
 80066ec:	f7ff feb2 	bl	8006454 <_realloc_r>
 80066f0:	1e06      	subs	r6, r0, #0
 80066f2:	d1e0      	bne.n	80066b6 <__ssputs_r+0x62>
 80066f4:	6921      	ldr	r1, [r4, #16]
 80066f6:	9802      	ldr	r0, [sp, #8]
 80066f8:	f7ff ff5a 	bl	80065b0 <_free_r>
 80066fc:	230c      	movs	r3, #12
 80066fe:	2001      	movs	r0, #1
 8006700:	9a02      	ldr	r2, [sp, #8]
 8006702:	4240      	negs	r0, r0
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	89a2      	ldrh	r2, [r4, #12]
 8006708:	3334      	adds	r3, #52	@ 0x34
 800670a:	4313      	orrs	r3, r2
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	e7e9      	b.n	80066e4 <__ssputs_r+0x90>
 8006710:	fffffb7f 	.word	0xfffffb7f

08006714 <_svfiprintf_r>:
 8006714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006716:	b0a1      	sub	sp, #132	@ 0x84
 8006718:	9003      	str	r0, [sp, #12]
 800671a:	001d      	movs	r5, r3
 800671c:	898b      	ldrh	r3, [r1, #12]
 800671e:	000f      	movs	r7, r1
 8006720:	0016      	movs	r6, r2
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	d511      	bpl.n	800674a <_svfiprintf_r+0x36>
 8006726:	690b      	ldr	r3, [r1, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10e      	bne.n	800674a <_svfiprintf_r+0x36>
 800672c:	2140      	movs	r1, #64	@ 0x40
 800672e:	f7ff fdf7 	bl	8006320 <_malloc_r>
 8006732:	6038      	str	r0, [r7, #0]
 8006734:	6138      	str	r0, [r7, #16]
 8006736:	2800      	cmp	r0, #0
 8006738:	d105      	bne.n	8006746 <_svfiprintf_r+0x32>
 800673a:	230c      	movs	r3, #12
 800673c:	9a03      	ldr	r2, [sp, #12]
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	2001      	movs	r0, #1
 8006742:	4240      	negs	r0, r0
 8006744:	e0cf      	b.n	80068e6 <_svfiprintf_r+0x1d2>
 8006746:	2340      	movs	r3, #64	@ 0x40
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	2300      	movs	r3, #0
 800674c:	ac08      	add	r4, sp, #32
 800674e:	6163      	str	r3, [r4, #20]
 8006750:	3320      	adds	r3, #32
 8006752:	7663      	strb	r3, [r4, #25]
 8006754:	3310      	adds	r3, #16
 8006756:	76a3      	strb	r3, [r4, #26]
 8006758:	9507      	str	r5, [sp, #28]
 800675a:	0035      	movs	r5, r6
 800675c:	782b      	ldrb	r3, [r5, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <_svfiprintf_r+0x52>
 8006762:	2b25      	cmp	r3, #37	@ 0x25
 8006764:	d148      	bne.n	80067f8 <_svfiprintf_r+0xe4>
 8006766:	1bab      	subs	r3, r5, r6
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	42b5      	cmp	r5, r6
 800676c:	d00b      	beq.n	8006786 <_svfiprintf_r+0x72>
 800676e:	0032      	movs	r2, r6
 8006770:	0039      	movs	r1, r7
 8006772:	9803      	ldr	r0, [sp, #12]
 8006774:	f7ff ff6e 	bl	8006654 <__ssputs_r>
 8006778:	3001      	adds	r0, #1
 800677a:	d100      	bne.n	800677e <_svfiprintf_r+0x6a>
 800677c:	e0ae      	b.n	80068dc <_svfiprintf_r+0x1c8>
 800677e:	6963      	ldr	r3, [r4, #20]
 8006780:	9a05      	ldr	r2, [sp, #20]
 8006782:	189b      	adds	r3, r3, r2
 8006784:	6163      	str	r3, [r4, #20]
 8006786:	782b      	ldrb	r3, [r5, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d100      	bne.n	800678e <_svfiprintf_r+0x7a>
 800678c:	e0a6      	b.n	80068dc <_svfiprintf_r+0x1c8>
 800678e:	2201      	movs	r2, #1
 8006790:	2300      	movs	r3, #0
 8006792:	4252      	negs	r2, r2
 8006794:	6062      	str	r2, [r4, #4]
 8006796:	a904      	add	r1, sp, #16
 8006798:	3254      	adds	r2, #84	@ 0x54
 800679a:	1852      	adds	r2, r2, r1
 800679c:	1c6e      	adds	r6, r5, #1
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	60e3      	str	r3, [r4, #12]
 80067a2:	60a3      	str	r3, [r4, #8]
 80067a4:	7013      	strb	r3, [r2, #0]
 80067a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80067a8:	4b54      	ldr	r3, [pc, #336]	@ (80068fc <_svfiprintf_r+0x1e8>)
 80067aa:	2205      	movs	r2, #5
 80067ac:	0018      	movs	r0, r3
 80067ae:	7831      	ldrb	r1, [r6, #0]
 80067b0:	9305      	str	r3, [sp, #20]
 80067b2:	f000 fa3e 	bl	8006c32 <memchr>
 80067b6:	1c75      	adds	r5, r6, #1
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d11f      	bne.n	80067fc <_svfiprintf_r+0xe8>
 80067bc:	6822      	ldr	r2, [r4, #0]
 80067be:	06d3      	lsls	r3, r2, #27
 80067c0:	d504      	bpl.n	80067cc <_svfiprintf_r+0xb8>
 80067c2:	2353      	movs	r3, #83	@ 0x53
 80067c4:	a904      	add	r1, sp, #16
 80067c6:	185b      	adds	r3, r3, r1
 80067c8:	2120      	movs	r1, #32
 80067ca:	7019      	strb	r1, [r3, #0]
 80067cc:	0713      	lsls	r3, r2, #28
 80067ce:	d504      	bpl.n	80067da <_svfiprintf_r+0xc6>
 80067d0:	2353      	movs	r3, #83	@ 0x53
 80067d2:	a904      	add	r1, sp, #16
 80067d4:	185b      	adds	r3, r3, r1
 80067d6:	212b      	movs	r1, #43	@ 0x2b
 80067d8:	7019      	strb	r1, [r3, #0]
 80067da:	7833      	ldrb	r3, [r6, #0]
 80067dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80067de:	d016      	beq.n	800680e <_svfiprintf_r+0xfa>
 80067e0:	0035      	movs	r5, r6
 80067e2:	2100      	movs	r1, #0
 80067e4:	200a      	movs	r0, #10
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	782a      	ldrb	r2, [r5, #0]
 80067ea:	1c6e      	adds	r6, r5, #1
 80067ec:	3a30      	subs	r2, #48	@ 0x30
 80067ee:	2a09      	cmp	r2, #9
 80067f0:	d950      	bls.n	8006894 <_svfiprintf_r+0x180>
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d111      	bne.n	800681a <_svfiprintf_r+0x106>
 80067f6:	e017      	b.n	8006828 <_svfiprintf_r+0x114>
 80067f8:	3501      	adds	r5, #1
 80067fa:	e7af      	b.n	800675c <_svfiprintf_r+0x48>
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	1ac0      	subs	r0, r0, r3
 8006802:	2301      	movs	r3, #1
 8006804:	4083      	lsls	r3, r0
 8006806:	4313      	orrs	r3, r2
 8006808:	002e      	movs	r6, r5
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	e7cc      	b.n	80067a8 <_svfiprintf_r+0x94>
 800680e:	9b07      	ldr	r3, [sp, #28]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	9107      	str	r1, [sp, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	db01      	blt.n	800681e <_svfiprintf_r+0x10a>
 800681a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800681c:	e004      	b.n	8006828 <_svfiprintf_r+0x114>
 800681e:	425b      	negs	r3, r3
 8006820:	60e3      	str	r3, [r4, #12]
 8006822:	2302      	movs	r3, #2
 8006824:	4313      	orrs	r3, r2
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	782b      	ldrb	r3, [r5, #0]
 800682a:	2b2e      	cmp	r3, #46	@ 0x2e
 800682c:	d10c      	bne.n	8006848 <_svfiprintf_r+0x134>
 800682e:	786b      	ldrb	r3, [r5, #1]
 8006830:	2b2a      	cmp	r3, #42	@ 0x2a
 8006832:	d134      	bne.n	800689e <_svfiprintf_r+0x18a>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	3502      	adds	r5, #2
 8006838:	1d1a      	adds	r2, r3, #4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	9207      	str	r2, [sp, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	da01      	bge.n	8006846 <_svfiprintf_r+0x132>
 8006842:	2301      	movs	r3, #1
 8006844:	425b      	negs	r3, r3
 8006846:	9309      	str	r3, [sp, #36]	@ 0x24
 8006848:	4e2d      	ldr	r6, [pc, #180]	@ (8006900 <_svfiprintf_r+0x1ec>)
 800684a:	2203      	movs	r2, #3
 800684c:	0030      	movs	r0, r6
 800684e:	7829      	ldrb	r1, [r5, #0]
 8006850:	f000 f9ef 	bl	8006c32 <memchr>
 8006854:	2800      	cmp	r0, #0
 8006856:	d006      	beq.n	8006866 <_svfiprintf_r+0x152>
 8006858:	2340      	movs	r3, #64	@ 0x40
 800685a:	1b80      	subs	r0, r0, r6
 800685c:	4083      	lsls	r3, r0
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	3501      	adds	r5, #1
 8006862:	4313      	orrs	r3, r2
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	7829      	ldrb	r1, [r5, #0]
 8006868:	2206      	movs	r2, #6
 800686a:	4826      	ldr	r0, [pc, #152]	@ (8006904 <_svfiprintf_r+0x1f0>)
 800686c:	1c6e      	adds	r6, r5, #1
 800686e:	7621      	strb	r1, [r4, #24]
 8006870:	f000 f9df 	bl	8006c32 <memchr>
 8006874:	2800      	cmp	r0, #0
 8006876:	d038      	beq.n	80068ea <_svfiprintf_r+0x1d6>
 8006878:	4b23      	ldr	r3, [pc, #140]	@ (8006908 <_svfiprintf_r+0x1f4>)
 800687a:	2b00      	cmp	r3, #0
 800687c:	d122      	bne.n	80068c4 <_svfiprintf_r+0x1b0>
 800687e:	2207      	movs	r2, #7
 8006880:	9b07      	ldr	r3, [sp, #28]
 8006882:	3307      	adds	r3, #7
 8006884:	4393      	bics	r3, r2
 8006886:	3308      	adds	r3, #8
 8006888:	9307      	str	r3, [sp, #28]
 800688a:	6963      	ldr	r3, [r4, #20]
 800688c:	9a04      	ldr	r2, [sp, #16]
 800688e:	189b      	adds	r3, r3, r2
 8006890:	6163      	str	r3, [r4, #20]
 8006892:	e762      	b.n	800675a <_svfiprintf_r+0x46>
 8006894:	4343      	muls	r3, r0
 8006896:	0035      	movs	r5, r6
 8006898:	2101      	movs	r1, #1
 800689a:	189b      	adds	r3, r3, r2
 800689c:	e7a4      	b.n	80067e8 <_svfiprintf_r+0xd4>
 800689e:	2300      	movs	r3, #0
 80068a0:	200a      	movs	r0, #10
 80068a2:	0019      	movs	r1, r3
 80068a4:	3501      	adds	r5, #1
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	782a      	ldrb	r2, [r5, #0]
 80068aa:	1c6e      	adds	r6, r5, #1
 80068ac:	3a30      	subs	r2, #48	@ 0x30
 80068ae:	2a09      	cmp	r2, #9
 80068b0:	d903      	bls.n	80068ba <_svfiprintf_r+0x1a6>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0c8      	beq.n	8006848 <_svfiprintf_r+0x134>
 80068b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80068b8:	e7c6      	b.n	8006848 <_svfiprintf_r+0x134>
 80068ba:	4341      	muls	r1, r0
 80068bc:	0035      	movs	r5, r6
 80068be:	2301      	movs	r3, #1
 80068c0:	1889      	adds	r1, r1, r2
 80068c2:	e7f1      	b.n	80068a8 <_svfiprintf_r+0x194>
 80068c4:	aa07      	add	r2, sp, #28
 80068c6:	9200      	str	r2, [sp, #0]
 80068c8:	0021      	movs	r1, r4
 80068ca:	003a      	movs	r2, r7
 80068cc:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <_svfiprintf_r+0x1f8>)
 80068ce:	9803      	ldr	r0, [sp, #12]
 80068d0:	e000      	b.n	80068d4 <_svfiprintf_r+0x1c0>
 80068d2:	bf00      	nop
 80068d4:	9004      	str	r0, [sp, #16]
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	3301      	adds	r3, #1
 80068da:	d1d6      	bne.n	800688a <_svfiprintf_r+0x176>
 80068dc:	89bb      	ldrh	r3, [r7, #12]
 80068de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80068e0:	065b      	lsls	r3, r3, #25
 80068e2:	d500      	bpl.n	80068e6 <_svfiprintf_r+0x1d2>
 80068e4:	e72c      	b.n	8006740 <_svfiprintf_r+0x2c>
 80068e6:	b021      	add	sp, #132	@ 0x84
 80068e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ea:	aa07      	add	r2, sp, #28
 80068ec:	9200      	str	r2, [sp, #0]
 80068ee:	0021      	movs	r1, r4
 80068f0:	003a      	movs	r2, r7
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <_svfiprintf_r+0x1f8>)
 80068f4:	9803      	ldr	r0, [sp, #12]
 80068f6:	f000 f87b 	bl	80069f0 <_printf_i>
 80068fa:	e7eb      	b.n	80068d4 <_svfiprintf_r+0x1c0>
 80068fc:	08006df8 	.word	0x08006df8
 8006900:	08006dfe 	.word	0x08006dfe
 8006904:	08006e02 	.word	0x08006e02
 8006908:	00000000 	.word	0x00000000
 800690c:	08006655 	.word	0x08006655

08006910 <_printf_common>:
 8006910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006912:	0016      	movs	r6, r2
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	688a      	ldr	r2, [r1, #8]
 8006918:	690b      	ldr	r3, [r1, #16]
 800691a:	000c      	movs	r4, r1
 800691c:	9000      	str	r0, [sp, #0]
 800691e:	4293      	cmp	r3, r2
 8006920:	da00      	bge.n	8006924 <_printf_common+0x14>
 8006922:	0013      	movs	r3, r2
 8006924:	0022      	movs	r2, r4
 8006926:	6033      	str	r3, [r6, #0]
 8006928:	3243      	adds	r2, #67	@ 0x43
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	2a00      	cmp	r2, #0
 800692e:	d001      	beq.n	8006934 <_printf_common+0x24>
 8006930:	3301      	adds	r3, #1
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	069b      	lsls	r3, r3, #26
 8006938:	d502      	bpl.n	8006940 <_printf_common+0x30>
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	3302      	adds	r3, #2
 800693e:	6033      	str	r3, [r6, #0]
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	2306      	movs	r3, #6
 8006944:	0015      	movs	r5, r2
 8006946:	401d      	ands	r5, r3
 8006948:	421a      	tst	r2, r3
 800694a:	d027      	beq.n	800699c <_printf_common+0x8c>
 800694c:	0023      	movs	r3, r4
 800694e:	3343      	adds	r3, #67	@ 0x43
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	1e5a      	subs	r2, r3, #1
 8006954:	4193      	sbcs	r3, r2
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	0692      	lsls	r2, r2, #26
 800695a:	d430      	bmi.n	80069be <_printf_common+0xae>
 800695c:	0022      	movs	r2, r4
 800695e:	9901      	ldr	r1, [sp, #4]
 8006960:	9800      	ldr	r0, [sp, #0]
 8006962:	9d08      	ldr	r5, [sp, #32]
 8006964:	3243      	adds	r2, #67	@ 0x43
 8006966:	47a8      	blx	r5
 8006968:	3001      	adds	r0, #1
 800696a:	d025      	beq.n	80069b8 <_printf_common+0xa8>
 800696c:	2206      	movs	r2, #6
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	2500      	movs	r5, #0
 8006972:	4013      	ands	r3, r2
 8006974:	2b04      	cmp	r3, #4
 8006976:	d105      	bne.n	8006984 <_printf_common+0x74>
 8006978:	6833      	ldr	r3, [r6, #0]
 800697a:	68e5      	ldr	r5, [r4, #12]
 800697c:	1aed      	subs	r5, r5, r3
 800697e:	43eb      	mvns	r3, r5
 8006980:	17db      	asrs	r3, r3, #31
 8006982:	401d      	ands	r5, r3
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	6922      	ldr	r2, [r4, #16]
 8006988:	4293      	cmp	r3, r2
 800698a:	dd01      	ble.n	8006990 <_printf_common+0x80>
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	18ed      	adds	r5, r5, r3
 8006990:	2600      	movs	r6, #0
 8006992:	42b5      	cmp	r5, r6
 8006994:	d120      	bne.n	80069d8 <_printf_common+0xc8>
 8006996:	2000      	movs	r0, #0
 8006998:	e010      	b.n	80069bc <_printf_common+0xac>
 800699a:	3501      	adds	r5, #1
 800699c:	68e3      	ldr	r3, [r4, #12]
 800699e:	6832      	ldr	r2, [r6, #0]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	ddd2      	ble.n	800694c <_printf_common+0x3c>
 80069a6:	0022      	movs	r2, r4
 80069a8:	2301      	movs	r3, #1
 80069aa:	9901      	ldr	r1, [sp, #4]
 80069ac:	9800      	ldr	r0, [sp, #0]
 80069ae:	9f08      	ldr	r7, [sp, #32]
 80069b0:	3219      	adds	r2, #25
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	d1f0      	bne.n	800699a <_printf_common+0x8a>
 80069b8:	2001      	movs	r0, #1
 80069ba:	4240      	negs	r0, r0
 80069bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069be:	2030      	movs	r0, #48	@ 0x30
 80069c0:	18e1      	adds	r1, r4, r3
 80069c2:	3143      	adds	r1, #67	@ 0x43
 80069c4:	7008      	strb	r0, [r1, #0]
 80069c6:	0021      	movs	r1, r4
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	3145      	adds	r1, #69	@ 0x45
 80069cc:	7809      	ldrb	r1, [r1, #0]
 80069ce:	18a2      	adds	r2, r4, r2
 80069d0:	3243      	adds	r2, #67	@ 0x43
 80069d2:	3302      	adds	r3, #2
 80069d4:	7011      	strb	r1, [r2, #0]
 80069d6:	e7c1      	b.n	800695c <_printf_common+0x4c>
 80069d8:	0022      	movs	r2, r4
 80069da:	2301      	movs	r3, #1
 80069dc:	9901      	ldr	r1, [sp, #4]
 80069de:	9800      	ldr	r0, [sp, #0]
 80069e0:	9f08      	ldr	r7, [sp, #32]
 80069e2:	321a      	adds	r2, #26
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0e6      	beq.n	80069b8 <_printf_common+0xa8>
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7d1      	b.n	8006992 <_printf_common+0x82>
	...

080069f0 <_printf_i>:
 80069f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f2:	b08b      	sub	sp, #44	@ 0x2c
 80069f4:	9206      	str	r2, [sp, #24]
 80069f6:	000a      	movs	r2, r1
 80069f8:	3243      	adds	r2, #67	@ 0x43
 80069fa:	9307      	str	r3, [sp, #28]
 80069fc:	9005      	str	r0, [sp, #20]
 80069fe:	9203      	str	r2, [sp, #12]
 8006a00:	7e0a      	ldrb	r2, [r1, #24]
 8006a02:	000c      	movs	r4, r1
 8006a04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a06:	2a78      	cmp	r2, #120	@ 0x78
 8006a08:	d809      	bhi.n	8006a1e <_printf_i+0x2e>
 8006a0a:	2a62      	cmp	r2, #98	@ 0x62
 8006a0c:	d80b      	bhi.n	8006a26 <_printf_i+0x36>
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d100      	bne.n	8006a14 <_printf_i+0x24>
 8006a12:	e0bc      	b.n	8006b8e <_printf_i+0x19e>
 8006a14:	497b      	ldr	r1, [pc, #492]	@ (8006c04 <_printf_i+0x214>)
 8006a16:	9104      	str	r1, [sp, #16]
 8006a18:	2a58      	cmp	r2, #88	@ 0x58
 8006a1a:	d100      	bne.n	8006a1e <_printf_i+0x2e>
 8006a1c:	e090      	b.n	8006b40 <_printf_i+0x150>
 8006a1e:	0025      	movs	r5, r4
 8006a20:	3542      	adds	r5, #66	@ 0x42
 8006a22:	702a      	strb	r2, [r5, #0]
 8006a24:	e022      	b.n	8006a6c <_printf_i+0x7c>
 8006a26:	0010      	movs	r0, r2
 8006a28:	3863      	subs	r0, #99	@ 0x63
 8006a2a:	2815      	cmp	r0, #21
 8006a2c:	d8f7      	bhi.n	8006a1e <_printf_i+0x2e>
 8006a2e:	f7f9 fb73 	bl	8000118 <__gnu_thumb1_case_shi>
 8006a32:	0016      	.short	0x0016
 8006a34:	fff6001f 	.word	0xfff6001f
 8006a38:	fff6fff6 	.word	0xfff6fff6
 8006a3c:	001ffff6 	.word	0x001ffff6
 8006a40:	fff6fff6 	.word	0xfff6fff6
 8006a44:	fff6fff6 	.word	0xfff6fff6
 8006a48:	003600a1 	.word	0x003600a1
 8006a4c:	fff60080 	.word	0xfff60080
 8006a50:	00b2fff6 	.word	0x00b2fff6
 8006a54:	0036fff6 	.word	0x0036fff6
 8006a58:	fff6fff6 	.word	0xfff6fff6
 8006a5c:	0084      	.short	0x0084
 8006a5e:	0025      	movs	r5, r4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	3542      	adds	r5, #66	@ 0x42
 8006a64:	1d11      	adds	r1, r2, #4
 8006a66:	6019      	str	r1, [r3, #0]
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	702b      	strb	r3, [r5, #0]
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0a0      	b.n	8006bb2 <_printf_i+0x1c2>
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	6809      	ldr	r1, [r1, #0]
 8006a74:	1d02      	adds	r2, r0, #4
 8006a76:	060d      	lsls	r5, r1, #24
 8006a78:	d50b      	bpl.n	8006a92 <_printf_i+0xa2>
 8006a7a:	6806      	ldr	r6, [r0, #0]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	da03      	bge.n	8006a8a <_printf_i+0x9a>
 8006a82:	232d      	movs	r3, #45	@ 0x2d
 8006a84:	9a03      	ldr	r2, [sp, #12]
 8006a86:	4276      	negs	r6, r6
 8006a88:	7013      	strb	r3, [r2, #0]
 8006a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8006c04 <_printf_i+0x214>)
 8006a8c:	270a      	movs	r7, #10
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	e018      	b.n	8006ac4 <_printf_i+0xd4>
 8006a92:	6806      	ldr	r6, [r0, #0]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	0649      	lsls	r1, r1, #25
 8006a98:	d5f1      	bpl.n	8006a7e <_printf_i+0x8e>
 8006a9a:	b236      	sxth	r6, r6
 8006a9c:	e7ef      	b.n	8006a7e <_printf_i+0x8e>
 8006a9e:	6808      	ldr	r0, [r1, #0]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	c940      	ldmia	r1!, {r6}
 8006aa4:	0605      	lsls	r5, r0, #24
 8006aa6:	d402      	bmi.n	8006aae <_printf_i+0xbe>
 8006aa8:	0640      	lsls	r0, r0, #25
 8006aaa:	d500      	bpl.n	8006aae <_printf_i+0xbe>
 8006aac:	b2b6      	uxth	r6, r6
 8006aae:	6019      	str	r1, [r3, #0]
 8006ab0:	4b54      	ldr	r3, [pc, #336]	@ (8006c04 <_printf_i+0x214>)
 8006ab2:	270a      	movs	r7, #10
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	2a6f      	cmp	r2, #111	@ 0x6f
 8006ab8:	d100      	bne.n	8006abc <_printf_i+0xcc>
 8006aba:	3f02      	subs	r7, #2
 8006abc:	0023      	movs	r3, r4
 8006abe:	2200      	movs	r2, #0
 8006ac0:	3343      	adds	r3, #67	@ 0x43
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	60a3      	str	r3, [r4, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	db03      	blt.n	8006ad4 <_printf_i+0xe4>
 8006acc:	2104      	movs	r1, #4
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	438a      	bics	r2, r1
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	d102      	bne.n	8006ade <_printf_i+0xee>
 8006ad8:	9d03      	ldr	r5, [sp, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <_printf_i+0x108>
 8006ade:	9d03      	ldr	r5, [sp, #12]
 8006ae0:	0030      	movs	r0, r6
 8006ae2:	0039      	movs	r1, r7
 8006ae4:	f7f9 fba8 	bl	8000238 <__aeabi_uidivmod>
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	3d01      	subs	r5, #1
 8006aec:	5c5b      	ldrb	r3, [r3, r1]
 8006aee:	702b      	strb	r3, [r5, #0]
 8006af0:	0033      	movs	r3, r6
 8006af2:	0006      	movs	r6, r0
 8006af4:	429f      	cmp	r7, r3
 8006af6:	d9f3      	bls.n	8006ae0 <_printf_i+0xf0>
 8006af8:	2f08      	cmp	r7, #8
 8006afa:	d109      	bne.n	8006b10 <_printf_i+0x120>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07db      	lsls	r3, r3, #31
 8006b00:	d506      	bpl.n	8006b10 <_printf_i+0x120>
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	dc02      	bgt.n	8006b10 <_printf_i+0x120>
 8006b0a:	2330      	movs	r3, #48	@ 0x30
 8006b0c:	3d01      	subs	r5, #1
 8006b0e:	702b      	strb	r3, [r5, #0]
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	1b5b      	subs	r3, r3, r5
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	9b07      	ldr	r3, [sp, #28]
 8006b18:	0021      	movs	r1, r4
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	9805      	ldr	r0, [sp, #20]
 8006b1e:	9b06      	ldr	r3, [sp, #24]
 8006b20:	aa09      	add	r2, sp, #36	@ 0x24
 8006b22:	f7ff fef5 	bl	8006910 <_printf_common>
 8006b26:	3001      	adds	r0, #1
 8006b28:	d148      	bne.n	8006bbc <_printf_i+0x1cc>
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	4240      	negs	r0, r0
 8006b2e:	b00b      	add	sp, #44	@ 0x2c
 8006b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b32:	2220      	movs	r2, #32
 8006b34:	6809      	ldr	r1, [r1, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	2278      	movs	r2, #120	@ 0x78
 8006b3c:	4932      	ldr	r1, [pc, #200]	@ (8006c08 <_printf_i+0x218>)
 8006b3e:	9104      	str	r1, [sp, #16]
 8006b40:	0021      	movs	r1, r4
 8006b42:	3145      	adds	r1, #69	@ 0x45
 8006b44:	700a      	strb	r2, [r1, #0]
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	c940      	ldmia	r1!, {r6}
 8006b4c:	0610      	lsls	r0, r2, #24
 8006b4e:	d402      	bmi.n	8006b56 <_printf_i+0x166>
 8006b50:	0650      	lsls	r0, r2, #25
 8006b52:	d500      	bpl.n	8006b56 <_printf_i+0x166>
 8006b54:	b2b6      	uxth	r6, r6
 8006b56:	6019      	str	r1, [r3, #0]
 8006b58:	07d3      	lsls	r3, r2, #31
 8006b5a:	d502      	bpl.n	8006b62 <_printf_i+0x172>
 8006b5c:	2320      	movs	r3, #32
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	d001      	beq.n	8006b6a <_printf_i+0x17a>
 8006b66:	2710      	movs	r7, #16
 8006b68:	e7a8      	b.n	8006abc <_printf_i+0xcc>
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	4393      	bics	r3, r2
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	e7f8      	b.n	8006b66 <_printf_i+0x176>
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	680d      	ldr	r5, [r1, #0]
 8006b78:	1d10      	adds	r0, r2, #4
 8006b7a:	6949      	ldr	r1, [r1, #20]
 8006b7c:	6018      	str	r0, [r3, #0]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	062e      	lsls	r6, r5, #24
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0x198>
 8006b84:	6019      	str	r1, [r3, #0]
 8006b86:	e002      	b.n	8006b8e <_printf_i+0x19e>
 8006b88:	066d      	lsls	r5, r5, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0x194>
 8006b8c:	8019      	strh	r1, [r3, #0]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9d03      	ldr	r5, [sp, #12]
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	e7bf      	b.n	8006b16 <_printf_i+0x126>
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	1d11      	adds	r1, r2, #4
 8006b9a:	6019      	str	r1, [r3, #0]
 8006b9c:	6815      	ldr	r5, [r2, #0]
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	0028      	movs	r0, r5
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	f000 f845 	bl	8006c32 <memchr>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d001      	beq.n	8006bb0 <_printf_i+0x1c0>
 8006bac:	1b40      	subs	r0, r0, r5
 8006bae:	6060      	str	r0, [r4, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9a03      	ldr	r2, [sp, #12]
 8006bb8:	7013      	strb	r3, [r2, #0]
 8006bba:	e7ac      	b.n	8006b16 <_printf_i+0x126>
 8006bbc:	002a      	movs	r2, r5
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	9906      	ldr	r1, [sp, #24]
 8006bc2:	9805      	ldr	r0, [sp, #20]
 8006bc4:	9d07      	ldr	r5, [sp, #28]
 8006bc6:	47a8      	blx	r5
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0ae      	beq.n	8006b2a <_printf_i+0x13a>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	079b      	lsls	r3, r3, #30
 8006bd0:	d415      	bmi.n	8006bfe <_printf_i+0x20e>
 8006bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd4:	68e0      	ldr	r0, [r4, #12]
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	daa9      	bge.n	8006b2e <_printf_i+0x13e>
 8006bda:	0018      	movs	r0, r3
 8006bdc:	e7a7      	b.n	8006b2e <_printf_i+0x13e>
 8006bde:	0022      	movs	r2, r4
 8006be0:	2301      	movs	r3, #1
 8006be2:	9906      	ldr	r1, [sp, #24]
 8006be4:	9805      	ldr	r0, [sp, #20]
 8006be6:	9e07      	ldr	r6, [sp, #28]
 8006be8:	3219      	adds	r2, #25
 8006bea:	47b0      	blx	r6
 8006bec:	3001      	adds	r0, #1
 8006bee:	d09c      	beq.n	8006b2a <_printf_i+0x13a>
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	68e3      	ldr	r3, [r4, #12]
 8006bf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf6:	1a9b      	subs	r3, r3, r2
 8006bf8:	42ab      	cmp	r3, r5
 8006bfa:	dcf0      	bgt.n	8006bde <_printf_i+0x1ee>
 8006bfc:	e7e9      	b.n	8006bd2 <_printf_i+0x1e2>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	e7f7      	b.n	8006bf2 <_printf_i+0x202>
 8006c02:	46c0      	nop			@ (mov r8, r8)
 8006c04:	08006e09 	.word	0x08006e09
 8006c08:	08006e1a 	.word	0x08006e1a

08006c0c <memmove>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	4288      	cmp	r0, r1
 8006c10:	d806      	bhi.n	8006c20 <memmove+0x14>
 8006c12:	2300      	movs	r3, #0
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d008      	beq.n	8006c2a <memmove+0x1e>
 8006c18:	5ccc      	ldrb	r4, [r1, r3]
 8006c1a:	54c4      	strb	r4, [r0, r3]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	e7f9      	b.n	8006c14 <memmove+0x8>
 8006c20:	188b      	adds	r3, r1, r2
 8006c22:	4298      	cmp	r0, r3
 8006c24:	d2f5      	bcs.n	8006c12 <memmove+0x6>
 8006c26:	3a01      	subs	r2, #1
 8006c28:	d200      	bcs.n	8006c2c <memmove+0x20>
 8006c2a:	bd10      	pop	{r4, pc}
 8006c2c:	5c8b      	ldrb	r3, [r1, r2]
 8006c2e:	5483      	strb	r3, [r0, r2]
 8006c30:	e7f9      	b.n	8006c26 <memmove+0x1a>

08006c32 <memchr>:
 8006c32:	b2c9      	uxtb	r1, r1
 8006c34:	1882      	adds	r2, r0, r2
 8006c36:	4290      	cmp	r0, r2
 8006c38:	d101      	bne.n	8006c3e <memchr+0xc>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	4770      	bx	lr
 8006c3e:	7803      	ldrb	r3, [r0, #0]
 8006c40:	428b      	cmp	r3, r1
 8006c42:	d0fb      	beq.n	8006c3c <memchr+0xa>
 8006c44:	3001      	adds	r0, #1
 8006c46:	e7f6      	b.n	8006c36 <memchr+0x4>

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	46c0      	nop			@ (mov r8, r8)
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
