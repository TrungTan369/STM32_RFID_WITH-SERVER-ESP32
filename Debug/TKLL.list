
TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08005e1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005e1c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d1f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de6  00000000  00000000  00036d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00039b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a16  00000000  00000000  0003bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017548  00000000  00000000  0004e90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c64d  00000000  00000000  00065e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d24a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  000d24f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005da8 	.word	0x08005da8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005da8 	.word	0x08005da8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	701a      	strb	r2, [r3, #0]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	227e      	movs	r2, #126	; 0x7e
 800023c:	4013      	ands	r3, r2
 800023e:	b2da      	uxtb	r2, r3
 8000240:	240f      	movs	r4, #15
 8000242:	193b      	adds	r3, r7, r4
 8000244:	701a      	strb	r2, [r3, #0]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000246:	2390      	movs	r3, #144	; 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2200      	movs	r2, #0
 800024c:	2110      	movs	r1, #16
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fc8e 	bl	8001b70 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	1939      	adds	r1, r7, r4
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <Write_MFRC522+0x68>)
 800025c:	2201      	movs	r2, #1
 800025e:	f002 ff2f 	bl	80030c0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	1db9      	adds	r1, r7, #6
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <Write_MFRC522+0x68>)
 800026a:	2201      	movs	r2, #1
 800026c:	f002 ff28 	bl	80030c0 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000270:	2390      	movs	r3, #144	; 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fc79 	bl	8001b70 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b005      	add	sp, #20
 8000284:	bd90      	pop	{r4, r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000040 	.word	0x20000040

0800028c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	227e      	movs	r2, #126	; 0x7e
 80002a2:	4013      	ands	r3, r2
 80002a4:	b25b      	sxtb	r3, r3
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	4252      	negs	r2, r2
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b25b      	sxtb	r3, r3
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	240e      	movs	r4, #14
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	701a      	strb	r2, [r3, #0]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80002b6:	2390      	movs	r3, #144	; 0x90
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	2200      	movs	r2, #0
 80002bc:	2110      	movs	r1, #16
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fc56 	bl	8001b70 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 80002c4:	23fa      	movs	r3, #250	; 0xfa
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	1939      	adds	r1, r7, r4
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <Read_MFRC522+0x70>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	f002 fef7 	bl	80030c0 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 80002d2:	23fa      	movs	r3, #250	; 0xfa
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	240f      	movs	r4, #15
 80002d8:	1939      	adds	r1, r7, r4
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <Read_MFRC522+0x70>)
 80002dc:	2201      	movs	r2, #1
 80002de:	f003 f84f 	bl	8003380 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80002e2:	2390      	movs	r3, #144	; 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2201      	movs	r2, #1
 80002e8:	2110      	movs	r1, #16
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fc40 	bl	8001b70 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	781b      	ldrb	r3, [r3, #0]
}
 80002f4:	0018      	movs	r0, r3
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b005      	add	sp, #20
 80002fa:	bd90      	pop	{r4, r7, pc}
 80002fc:	20000040 	.word	0x20000040

08000300 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8000300:	b5b0      	push	{r4, r5, r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	1dbb      	adds	r3, r7, #6
 800030e:	1c0a      	adds	r2, r1, #0
 8000310:	701a      	strb	r2, [r3, #0]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000312:	250f      	movs	r5, #15
 8000314:	197c      	adds	r4, r7, r5
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	0018      	movs	r0, r3
 800031c:	f7ff ffb6 	bl	800028c <Read_MFRC522>
 8000320:	0003      	movs	r3, r0
 8000322:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000324:	197a      	adds	r2, r7, r5
 8000326:	1dbb      	adds	r3, r7, #6
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4313      	orrs	r3, r2
 800032e:	b2da      	uxtb	r2, r3
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	0011      	movs	r1, r2
 8000336:	0018      	movs	r0, r3
 8000338:	f7ff ff72 	bl	8000220 <Write_MFRC522>
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b004      	add	sp, #16
 8000342:	bdb0      	pop	{r4, r5, r7, pc}

08000344 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	0002      	movs	r2, r0
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	1dbb      	adds	r3, r7, #6
 8000352:	1c0a      	adds	r2, r1, #0
 8000354:	701a      	strb	r2, [r3, #0]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000356:	250f      	movs	r5, #15
 8000358:	197c      	adds	r4, r7, r5
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	0018      	movs	r0, r3
 8000360:	f7ff ff94 	bl	800028c <Read_MFRC522>
 8000364:	0003      	movs	r3, r0
 8000366:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000368:	1dbb      	adds	r3, r7, #6
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b25b      	sxtb	r3, r3
 800036e:	43db      	mvns	r3, r3
 8000370:	b25b      	sxtb	r3, r3
 8000372:	197a      	adds	r2, r7, r5
 8000374:	7812      	ldrb	r2, [r2, #0]
 8000376:	b252      	sxtb	r2, r2
 8000378:	4013      	ands	r3, r2
 800037a:	b25b      	sxtb	r3, r3
 800037c:	b2da      	uxtb	r2, r3
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f7ff ff4b 	bl	8000220 <Write_MFRC522>
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b004      	add	sp, #16
 8000390:	bdb0      	pop	{r4, r5, r7, pc}

08000392 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8000396:	2103      	movs	r1, #3
 8000398:	2014      	movs	r0, #20
 800039a:	f7ff ffb1 	bl	8000300 <SetBitMask>
}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80003a8:	210f      	movs	r1, #15
 80003aa:	2001      	movs	r0, #1
 80003ac:	f7ff ff38 	bl	8000220 <Write_MFRC522>
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 80003ba:	f7ff fff3 	bl	80003a4 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80003be:	2180      	movs	r1, #128	; 0x80
 80003c0:	202a      	movs	r0, #42	; 0x2a
 80003c2:	f7ff ff2d 	bl	8000220 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 80003c6:	21a9      	movs	r1, #169	; 0xa9
 80003c8:	202b      	movs	r0, #43	; 0x2b
 80003ca:	f7ff ff29 	bl	8000220 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 80003ce:	2103      	movs	r1, #3
 80003d0:	202d      	movs	r0, #45	; 0x2d
 80003d2:	f7ff ff25 	bl	8000220 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 80003d6:	21e8      	movs	r1, #232	; 0xe8
 80003d8:	202c      	movs	r0, #44	; 0x2c
 80003da:	f7ff ff21 	bl	8000220 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	2015      	movs	r0, #21
 80003e2:	f7ff ff1d 	bl	8000220 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80003e6:	213d      	movs	r1, #61	; 0x3d
 80003e8:	2011      	movs	r0, #17
 80003ea:	f7ff ff19 	bl	8000220 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 80003ee:	f7ff ffd0 	bl	8000392 <AntennaOn>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80003f8:	b5b0      	push	{r4, r5, r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	0011      	movs	r1, r2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	240f      	movs	r4, #15
 8000406:	193b      	adds	r3, r7, r4
 8000408:	1c02      	adds	r2, r0, #0
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	230e      	movs	r3, #14
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	1c0a      	adds	r2, r1, #0
 8000412:	701a      	strb	r2, [r3, #0]
  u_char status = MI_ERR;
 8000414:	231f      	movs	r3, #31
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	2202      	movs	r2, #2
 800041a:	701a      	strb	r2, [r3, #0]
  u_char irqEn = 0x00;
 800041c:	211e      	movs	r1, #30
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
  u_char waitIRq = 0x00;
 8000424:	201d      	movs	r0, #29
 8000426:	183b      	adds	r3, r7, r0
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800042c:	193b      	adds	r3, r7, r4
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b0c      	cmp	r3, #12
 8000432:	d008      	beq.n	8000446 <MFRC522_ToCard+0x4e>
 8000434:	2b0e      	cmp	r3, #14
 8000436:	d10f      	bne.n	8000458 <MFRC522_ToCard+0x60>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2212      	movs	r2, #18
 800043c:	701a      	strb	r2, [r3, #0]
        waitIRq = 0x10;
 800043e:	183b      	adds	r3, r7, r0
 8000440:	2210      	movs	r2, #16
 8000442:	701a      	strb	r2, [r3, #0]
        break;
 8000444:	e009      	b.n	800045a <MFRC522_ToCard+0x62>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8000446:	231e      	movs	r3, #30
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	2277      	movs	r2, #119	; 0x77
 800044c:	701a      	strb	r2, [r3, #0]
        waitIRq = 0x30;
 800044e:	231d      	movs	r3, #29
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	2230      	movs	r2, #48	; 0x30
 8000454:	701a      	strb	r2, [r3, #0]
        break;
 8000456:	e000      	b.n	800045a <MFRC522_ToCard+0x62>
      }
    default:
      break;
 8000458:	46c0      	nop			; (mov r8, r8)
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 800045a:	231e      	movs	r3, #30
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	4252      	negs	r2, r2
 8000464:	4313      	orrs	r3, r2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	0019      	movs	r1, r3
 800046a:	2002      	movs	r0, #2
 800046c:	f7ff fed8 	bl	8000220 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	2004      	movs	r0, #4
 8000474:	f7ff ff66 	bl	8000344 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	200a      	movs	r0, #10
 800047c:	f7ff ff40 	bl	8000300 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8000480:	2100      	movs	r1, #0
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff fecc 	bl	8000220 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
 800048c:	e00a      	b.n	80004a4 <MFRC522_ToCard+0xac>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	0019      	movs	r1, r3
 8000498:	2009      	movs	r0, #9
 800049a:	f7ff fec1 	bl	8000220 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	3301      	adds	r3, #1
 80004a2:	61bb      	str	r3, [r7, #24]
 80004a4:	230e      	movs	r3, #14
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	69ba      	ldr	r2, [r7, #24]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d3ee      	bcc.n	800048e <MFRC522_ToCard+0x96>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80004b0:	240f      	movs	r4, #15
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	0019      	movs	r1, r3
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff feb1 	bl	8000220 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	d103      	bne.n	80004ce <MFRC522_ToCard+0xd6>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	200d      	movs	r0, #13
 80004ca:	f7ff ff19 	bl	8000300 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80004ce:	23fa      	movs	r3, #250	; 0xfa
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80004d4:	251c      	movs	r5, #28
 80004d6:	197c      	adds	r4, r7, r5
 80004d8:	2004      	movs	r0, #4
 80004da:	f7ff fed7 	bl	800028c <Read_MFRC522>
 80004de:	0003      	movs	r3, r0
 80004e0:	7023      	strb	r3, [r4, #0]
    i--;
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00d      	beq.n	800050a <MFRC522_ToCard+0x112>
 80004ee:	197b      	adds	r3, r7, r5
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	d108      	bne.n	800050a <MFRC522_ToCard+0x112>
 80004f8:	197b      	adds	r3, r7, r5
 80004fa:	221d      	movs	r2, #29
 80004fc:	18ba      	adds	r2, r7, r2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	4013      	ands	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0e4      	beq.n	80004d4 <MFRC522_ToCard+0xdc>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	200d      	movs	r0, #13
 800050e:	f7ff ff19 	bl	8000344 <ClearBitMask>

  if (i != 0)
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d100      	bne.n	800051a <MFRC522_ToCard+0x122>
 8000518:	e070      	b.n	80005fc <MFRC522_ToCard+0x204>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff feb6 	bl	800028c <Read_MFRC522>
 8000520:	0003      	movs	r3, r0
 8000522:	001a      	movs	r2, r3
 8000524:	231b      	movs	r3, #27
 8000526:	4013      	ands	r3, r2
 8000528:	d164      	bne.n	80005f4 <MFRC522_ToCard+0x1fc>
    {
      status = MI_OK;
 800052a:	211f      	movs	r1, #31
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
      if (n & irqEn & 0x01)
 8000532:	231c      	movs	r3, #28
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	221e      	movs	r2, #30
 8000538:	18ba      	adds	r2, r7, r2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	7812      	ldrb	r2, [r2, #0]
 800053e:	4013      	ands	r3, r2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	001a      	movs	r2, r3
 8000544:	2301      	movs	r3, #1
 8000546:	4013      	ands	r3, r2
 8000548:	d002      	beq.n	8000550 <MFRC522_ToCard+0x158>
      {
        status = MI_NOTAGERR;             // ??
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
      }

      if (command == PCD_TRANSCEIVE)
 8000550:	230f      	movs	r3, #15
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b0c      	cmp	r3, #12
 8000558:	d150      	bne.n	80005fc <MFRC522_ToCard+0x204>
      {
        n = Read_MFRC522(FIFOLevelReg);
 800055a:	251c      	movs	r5, #28
 800055c:	197c      	adds	r4, r7, r5
 800055e:	200a      	movs	r0, #10
 8000560:	f7ff fe94 	bl	800028c <Read_MFRC522>
 8000564:	0003      	movs	r3, r0
 8000566:	7023      	strb	r3, [r4, #0]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000568:	200c      	movs	r0, #12
 800056a:	f7ff fe8f 	bl	800028c <Read_MFRC522>
 800056e:	0003      	movs	r3, r0
 8000570:	0019      	movs	r1, r3
 8000572:	2017      	movs	r0, #23
 8000574:	183b      	adds	r3, r7, r0
 8000576:	2207      	movs	r2, #7
 8000578:	400a      	ands	r2, r1
 800057a:	701a      	strb	r2, [r3, #0]
        if (lastBits)
 800057c:	0001      	movs	r1, r0
 800057e:	187b      	adds	r3, r7, r1
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <MFRC522_ToCard+0x1a4>
        {
          *backLen = (n-1)*8 + lastBits;
 8000586:	197b      	adds	r3, r7, r5
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3b01      	subs	r3, #1
 800058c:	00da      	lsls	r2, r3, #3
 800058e:	187b      	adds	r3, r7, r1
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	18d3      	adds	r3, r2, r3
 8000594:	001a      	movs	r2, r3
 8000596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e006      	b.n	80005aa <MFRC522_ToCard+0x1b2>
        }
        else
        {
          *backLen = n*8;
 800059c:	231c      	movs	r3, #28
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	001a      	movs	r2, r3
 80005a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a8:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 80005aa:	221c      	movs	r2, #28
 80005ac:	18bb      	adds	r3, r7, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <MFRC522_ToCard+0x1c2>
        {
          n = 1;
 80005b4:	18bb      	adds	r3, r7, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
        }
        if (n > MAX_LEN)
 80005ba:	221c      	movs	r2, #28
 80005bc:	18bb      	adds	r3, r7, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b10      	cmp	r3, #16
 80005c2:	d902      	bls.n	80005ca <MFRC522_ToCard+0x1d2>
        {
          n = MAX_LEN;
 80005c4:	18bb      	adds	r3, r7, r2
 80005c6:	2210      	movs	r2, #16
 80005c8:	701a      	strb	r2, [r3, #0]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	e00a      	b.n	80005e6 <MFRC522_ToCard+0x1ee>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	18d4      	adds	r4, r2, r3
 80005d6:	2009      	movs	r0, #9
 80005d8:	f7ff fe58 	bl	800028c <Read_MFRC522>
 80005dc:	0003      	movs	r3, r0
 80005de:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	3301      	adds	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	231c      	movs	r3, #28
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3ee      	bcc.n	80005d0 <MFRC522_ToCard+0x1d8>
 80005f2:	e003      	b.n	80005fc <MFRC522_ToCard+0x204>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 80005f4:	231f      	movs	r3, #31
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	2202      	movs	r2, #2
 80005fa:	701a      	strb	r2, [r3, #0]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 80005fc:	231f      	movs	r3, #31
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	781b      	ldrb	r3, [r3, #0]
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b008      	add	sp, #32
 8000608:	bdb0      	pop	{r4, r5, r7, pc}

0800060a <MFRC522_Read>:
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Read(u_char blockAddr, u_char *recvData)
{
 800060a:	b5b0      	push	{r4, r5, r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af02      	add	r7, sp, #8
 8000610:	0002      	movs	r2, r0
 8000612:	6039      	str	r1, [r7, #0]
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	701a      	strb	r2, [r3, #0]
  u_char status;
  uint unLen;

  recvData[0] = PICC_READ;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	701a      	strb	r2, [r3, #0]
  recvData[1] = blockAddr;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	1dfa      	adds	r2, r7, #7
 8000624:	7812      	ldrb	r2, [r2, #0]
 8000626:	701a      	strb	r2, [r3, #0]
  CalulateCRC(recvData,2, &recvData[2]);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	1c9a      	adds	r2, r3, #2
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2102      	movs	r1, #2
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f820 	bl	8000676 <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8000636:	250f      	movs	r5, #15
 8000638:	197c      	adds	r4, r7, r5
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	6839      	ldr	r1, [r7, #0]
 800063e:	2308      	movs	r3, #8
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	0013      	movs	r3, r2
 8000646:	2204      	movs	r2, #4
 8000648:	200c      	movs	r0, #12
 800064a:	f7ff fed5 	bl	80003f8 <MFRC522_ToCard>
 800064e:	0003      	movs	r3, r0
 8000650:	7023      	strb	r3, [r4, #0]

  if ((status != MI_OK) || (unLen != 0x90))
 8000652:	197b      	adds	r3, r7, r5
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d102      	bne.n	8000660 <MFRC522_Read+0x56>
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	2b90      	cmp	r3, #144	; 0x90
 800065e:	d003      	beq.n	8000668 <MFRC522_Read+0x5e>
  {
    status = MI_ERR;
 8000660:	230f      	movs	r3, #15
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000668:	230f      	movs	r3, #15
 800066a:	18fb      	adds	r3, r7, r3
 800066c:	781b      	ldrb	r3, [r3, #0]
}
 800066e:	0018      	movs	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bdb0      	pop	{r4, r5, r7, pc}

08000676 <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
{
 8000676:	b5b0      	push	{r4, r5, r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	230b      	movs	r3, #11
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	1c0a      	adds	r2, r1, #0
 8000686:	701a      	strb	r2, [r3, #0]
  u_char i, n;

  ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000688:	2104      	movs	r1, #4
 800068a:	2005      	movs	r0, #5
 800068c:	f7ff fe5a 	bl	8000344 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	200a      	movs	r0, #10
 8000694:	f7ff fe34 	bl	8000300 <SetBitMask>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i=0; i<len; i++)
 8000698:	2317      	movs	r3, #23
 800069a:	18fb      	adds	r3, r7, r3
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e00e      	b.n	80006c0 <CalulateCRC+0x4a>
  {
    Write_MFRC522(FIFODataReg, *(pIndata+i));
 80006a2:	2417      	movs	r4, #23
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	18d3      	adds	r3, r2, r3
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0019      	movs	r1, r3
 80006b0:	2009      	movs	r0, #9
 80006b2:	f7ff fdb5 	bl	8000220 <Write_MFRC522>
  for (i=0; i<len; i++)
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	3201      	adds	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	2417      	movs	r4, #23
 80006c2:	193a      	adds	r2, r7, r4
 80006c4:	230b      	movs	r3, #11
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3e8      	bcc.n	80006a2 <CalulateCRC+0x2c>
  }
  Write_MFRC522(CommandReg, PCD_CALCCRC);
 80006d0:	2103      	movs	r1, #3
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff fda4 	bl	8000220 <Write_MFRC522>

  //Wait CRC calculation is complete
  i = 0xFF;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	22ff      	movs	r2, #255	; 0xff
 80006dc:	701a      	strb	r2, [r3, #0]
  do
  {
    n = Read_MFRC522(DivIrqReg);
 80006de:	2516      	movs	r5, #22
 80006e0:	197c      	adds	r4, r7, r5
 80006e2:	2005      	movs	r0, #5
 80006e4:	f7ff fdd2 	bl	800028c <Read_MFRC522>
 80006e8:	0003      	movs	r3, r0
 80006ea:	7023      	strb	r3, [r4, #0]
    i--;
 80006ec:	2117      	movs	r1, #23
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	3a01      	subs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
  }
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <CalulateCRC+0x94>
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2204      	movs	r2, #4
 8000706:	4013      	ands	r3, r2
 8000708:	d0e9      	beq.n	80006de <CalulateCRC+0x68>

  //Read CRC calculation result
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 800070a:	2022      	movs	r0, #34	; 0x22
 800070c:	f7ff fdbe 	bl	800028c <Read_MFRC522>
 8000710:	0003      	movs	r3, r0
 8000712:	001a      	movs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	701a      	strb	r2, [r3, #0]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	1c5c      	adds	r4, r3, #1
 800071c:	2021      	movs	r0, #33	; 0x21
 800071e:	f7ff fdb5 	bl	800028c <Read_MFRC522>
 8000722:	0003      	movs	r3, r0
 8000724:	7023      	strb	r3, [r4, #0]
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b006      	add	sp, #24
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000730 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b087      	sub	sp, #28
 8000734:	af02      	add	r7, sp, #8
 8000736:	0002      	movs	r2, r0
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800073c:	200f      	movs	r0, #15
 800073e:	183b      	adds	r3, r7, r0
 8000740:	1dfa      	adds	r2, r7, #7
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	210f      	movs	r1, #15
 8000746:	438a      	bics	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	011a      	lsls	r2, r3, #4
 8000750:	240e      	movs	r4, #14
 8000752:	193b      	adds	r3, r7, r4
 8000754:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000756:	183b      	adds	r3, r7, r0
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	220c      	movs	r2, #12
 800075c:	4313      	orrs	r3, r2
 800075e:	b2da      	uxtb	r2, r3
 8000760:	2108      	movs	r1, #8
 8000762:	187b      	adds	r3, r7, r1
 8000764:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000766:	183b      	adds	r3, r7, r0
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2208      	movs	r2, #8
 800076c:	4313      	orrs	r3, r2
 800076e:	b2da      	uxtb	r2, r3
 8000770:	187b      	adds	r3, r7, r1
 8000772:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000774:	193b      	adds	r3, r7, r4
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	220c      	movs	r2, #12
 800077a:	4313      	orrs	r3, r2
 800077c:	b2da      	uxtb	r2, r3
 800077e:	187b      	adds	r3, r7, r1
 8000780:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000782:	193b      	adds	r3, r7, r4
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2208      	movs	r2, #8
 8000788:	4313      	orrs	r3, r2
 800078a:	b2da      	uxtb	r2, r3
 800078c:	187b      	adds	r3, r7, r1
 800078e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000790:	187a      	adds	r2, r7, r1
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <lcd_send_cmd+0x78>)
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2304      	movs	r3, #4
 800079a:	214e      	movs	r1, #78	; 0x4e
 800079c:	f001 faac 	bl	8001cf8 <HAL_I2C_Master_Transmit>
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b005      	add	sp, #20
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	20000130 	.word	0x20000130

080007ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007b8:	200f      	movs	r0, #15
 80007ba:	183b      	adds	r3, r7, r0
 80007bc:	1dfa      	adds	r2, r7, #7
 80007be:	7812      	ldrb	r2, [r2, #0]
 80007c0:	210f      	movs	r1, #15
 80007c2:	438a      	bics	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	011a      	lsls	r2, r3, #4
 80007cc:	240e      	movs	r4, #14
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007d2:	183b      	adds	r3, r7, r0
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	220d      	movs	r2, #13
 80007d8:	4313      	orrs	r3, r2
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	2108      	movs	r1, #8
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2209      	movs	r2, #9
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	220d      	movs	r2, #13
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2209      	movs	r2, #9
 8000804:	4313      	orrs	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	187b      	adds	r3, r7, r1
 800080a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800080c:	187a      	adds	r2, r7, r1
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <lcd_send_data+0x78>)
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2304      	movs	r3, #4
 8000816:	214e      	movs	r1, #78	; 0x4e
 8000818:	f001 fa6e 	bl	8001cf8 <HAL_I2C_Master_Transmit>
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b005      	add	sp, #20
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000130 	.word	0x20000130

08000828 <lcd_init>:

void lcd_init (void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800082c:	2033      	movs	r0, #51	; 0x33
 800082e:	f7ff ff7f 	bl	8000730 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000832:	2032      	movs	r0, #50	; 0x32
 8000834:	f7ff ff7c 	bl	8000730 <lcd_send_cmd>
	HAL_Delay(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f000 fdab 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff76 	bl	8000730 <lcd_send_cmd>
	HAL_Delay(50);
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f000 fda5 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff ff70 	bl	8000730 <lcd_send_cmd>
	HAL_Delay(50);
 8000850:	2032      	movs	r0, #50	; 0x32
 8000852:	f000 fd9f 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000856:	2006      	movs	r0, #6
 8000858:	f7ff ff6a 	bl	8000730 <lcd_send_cmd>
	HAL_Delay(50);
 800085c:	2032      	movs	r0, #50	; 0x32
 800085e:	f000 fd99 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000862:	200c      	movs	r0, #12
 8000864:	f7ff ff64 	bl	8000730 <lcd_send_cmd>
	HAL_Delay(50);
 8000868:	2032      	movs	r0, #50	; 0x32
 800086a:	f000 fd93 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff ff5e 	bl	8000730 <lcd_send_cmd>
	HAL_Delay(50);
 8000874:	2032      	movs	r0, #50	; 0x32
 8000876:	f000 fd8d 	bl	8001394 <HAL_Delay>
	lcd_send_cmd (0x80);
 800087a:	2080      	movs	r0, #128	; 0x80
 800087c:	f7ff ff58 	bl	8000730 <lcd_send_cmd>
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800088e:	e006      	b.n	800089e <lcd_send_string+0x18>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff87 	bl	80007ac <lcd_send_data>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1f4      	bne.n	8000890 <lcd_send_string+0xa>
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <lcd_goto_XY>:
	lcd_send_cmd (0x01); //clear display
	HAL_Delay(5);
}

void lcd_goto_XY (int row, int col)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10a      	bne.n	80008d6 <lcd_goto_XY+0x26>
		pos_Addr = 0x80 + row - 1 + col;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	230f      	movs	r3, #15
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	327f      	adds	r2, #127	; 0x7f
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e00b      	b.n	80008ee <lcd_goto_XY+0x3e>
	}
	else
		pos_Addr = 0x80 | (0x40 + col);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	3340      	adds	r3, #64	; 0x40
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	4252      	negs	r2, r2
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(pos_Addr);
 80008ee:	230f      	movs	r3, #15
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff1b 	bl	8000730 <lcd_send_cmd>
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 fcdf 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f855 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f000 fa0d 	bl	8000d30 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000916:	f000 f929 	bl	8000b6c <MX_TIM3_Init>
  MX_DMA_Init();
 800091a:	f000 f9eb 	bl	8000cf4 <MX_DMA_Init>
  MX_SPI1_Init();
 800091e:	f000 f8e7 	bl	8000af0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000922:	f000 f9b7 	bl	8000c94 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000926:	f000 f8a3 	bl	8000a70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <main+0xb0>)
 800092c:	0018      	movs	r0, r3
 800092e:	f003 fb9b 	bl	8004068 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <main+0xb0>)
 8000934:	2100      	movs	r1, #0
 8000936:	0018      	movs	r0, r3
 8000938:	f003 fc3a 	bl	80041b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <main+0xb0>)
 800093e:	2104      	movs	r1, #4
 8000940:	0018      	movs	r0, r3
 8000942:	f003 fc35 	bl	80041b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <main+0xb0>)
 8000948:	210c      	movs	r1, #12
 800094a:	0018      	movs	r0, r3
 800094c:	f003 fc30 	bl	80041b0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //setTimer(0, 500);
  lcd_init();
 8000950:	f7ff ff6a 	bl	8000828 <lcd_init>
  MFRC522_Init();
 8000954:	f7ff fd2f 	bl	80003b6 <MFRC522_Init>
  uint8_t recvData[18];
   while (1)
   {
//	   uint8_t data[] = {0x48, 0x65, 0x6C, 0x6C, 0x6F};  // Ví dụ: "Hello" trong hex
//	   HAL_UART_Transmit(&huart1, data, sizeof(data), HAL_MAX_DELAY);
	   MFRC522_Read(4, recvData);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	0019      	movs	r1, r3
 800095c:	2004      	movs	r0, #4
 800095e:	f7ff fe54 	bl	800060a <MFRC522_Read>
	   lcd_goto_XY(1, 0);
 8000962:	2100      	movs	r1, #0
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff ffa3 	bl	80008b0 <lcd_goto_XY>
	   lcd_send_data(recvData[0]);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff1c 	bl	80007ac <lcd_send_data>
	   lcd_goto_XY(1, 4);
 8000974:	2104      	movs	r1, #4
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff ff9a 	bl	80008b0 <lcd_goto_XY>
	   lcd_send_data(recvData[1]);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ff13 	bl	80007ac <lcd_send_data>
	   lcd_goto_XY(1, 8);
 8000986:	2108      	movs	r1, #8
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ff91 	bl	80008b0 <lcd_goto_XY>
	   lcd_send_data(recvData[2]);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff ff0a 	bl	80007ac <lcd_send_data>
//	   lcd_goto_XY(1, 4);
//	   lcd_send_data(recvData[1]);
	  // lcd_send_string("TEST TEST TEST");
	   lcd_goto_XY(0, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff88 	bl	80008b0 <lcd_goto_XY>
	   lcd_send_string("FAIL FAIL FAIL");
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <main+0xb4>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff ff6f 	bl	8000886 <lcd_send_string>
	    HAL_Delay(1000);          // �?ợi 1 giây
 80009a8:	23fa      	movs	r3, #250	; 0xfa
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fcf1 	bl	8001394 <HAL_Delay>
	   MFRC522_Read(4, recvData);
 80009b2:	e7d1      	b.n	8000958 <main+0x54>
 80009b4:	200000a4 	.word	0x200000a4
 80009b8:	08005dc0 	.word	0x08005dc0

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b095      	sub	sp, #84	; 0x54
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	2420      	movs	r4, #32
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2330      	movs	r3, #48	; 0x30
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f005 f9e3 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	2310      	movs	r3, #16
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	2310      	movs	r3, #16
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f005 f9db 	bl	8005d98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e2:	003b      	movs	r3, r7
 80009e4:	0018      	movs	r0, r3
 80009e6:	2310      	movs	r3, #16
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f005 f9d4 	bl	8005d98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f0:	0021      	movs	r1, r4
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2202      	movs	r2, #2
 80009f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2210      	movs	r2, #16
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fd73 	bl	80024f8 <HAL_RCC_OscConfig>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a16:	f000 f9ed 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2207      	movs	r2, #7
 8000a20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2100      	movs	r1, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 f877 	bl	8002b2c <HAL_RCC_ClockConfig>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a42:	f000 f9d7 	bl	8000df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	003b      	movs	r3, r7
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 f9aa 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a64:	f000 f9c6 	bl	8000df4 <Error_Handler>
  }
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b015      	add	sp, #84	; 0x54
 8000a6e:	bd90      	pop	{r4, r7, pc}

08000a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C1_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f87d 	bl	8001bac <HAL_I2C_Init>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 f99d 	bl	8000df4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fc82 	bl	80023c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 f994 	bl	8000df4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fcc5 	bl	8002460 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f98b 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000130 	.word	0x20000130
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	2000090e 	.word	0x2000090e

08000af0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_SPI1_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000afc:	2282      	movs	r2, #130	; 0x82
 8000afe:	0052      	lsls	r2, r2, #1
 8000b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b0a:	22e0      	movs	r2, #224	; 0xe0
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <MX_SPI1_Init+0x74>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f002 f9fd 	bl	8002f50 <HAL_SPI_Init>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 f94b 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000040 	.word	0x20000040
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	2328      	movs	r3, #40	; 0x28
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	0018      	movs	r0, r3
 8000b78:	2310      	movs	r3, #16
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f005 f90b 	bl	8005d98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	2320      	movs	r3, #32
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	0018      	movs	r0, r3
 8000b88:	2308      	movs	r3, #8
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f005 f903 	bl	8005d98 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	0018      	movs	r0, r3
 8000b96:	231c      	movs	r3, #28
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f005 f8fc 	bl	8005d98 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba0:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000ba2:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <MX_TIM3_Init+0x120>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000ba8:	4a39      	ldr	r2, [pc, #228]	; (8000c90 <MX_TIM3_Init+0x124>)
 8000baa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000bb4:	2263      	movs	r2, #99	; 0x63
 8000bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f003 f9fe 	bl	8003fc8 <HAL_TIM_Base_Init>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bd0:	f000 f910 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	2128      	movs	r1, #40	; 0x28
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0152      	lsls	r2, r2, #5
 8000bdc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bde:	187a      	adds	r2, r7, r1
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f003 fd43 	bl	8004670 <HAL_TIM_ConfigClockSource>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000bee:	f000 f901 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f003 fa83 	bl	8004100 <HAL_TIM_PWM_Init>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bfe:	f000 f8f9 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2120      	movs	r1, #32
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c10:	187a      	adds	r2, r7, r1
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f004 f940 	bl	8004e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000c20:	f000 f8e8 	bl	8000df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2260      	movs	r2, #96	; 0x60
 8000c28:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3c:	1d39      	adds	r1, r7, #4
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 fc4e 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000c4c:	f000 f8d2 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c50:	1d39      	adds	r1, r7, #4
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000c54:	2204      	movs	r2, #4
 8000c56:	0018      	movs	r0, r3
 8000c58:	f003 fc44 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000c60:	f000 f8c8 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c64:	1d39      	adds	r1, r7, #4
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000c68:	220c      	movs	r2, #12
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f003 fc3a 	bl	80044e4 <HAL_TIM_PWM_ConfigChannel>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000c74:	f000 f8be 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <MX_TIM3_Init+0x11c>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f9de 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00e      	add	sp, #56	; 0x38
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000a4 	.word	0x200000a4
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	0000031f 	.word	0x0000031f

08000c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_USART1_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000ca0:	22e1      	movs	r2, #225	; 0xe1
 8000ca2:	0252      	lsls	r2, r2, #9
 8000ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <MX_USART1_UART_Init+0x58>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f004 f947 	bl	8004f6c <HAL_UART_Init>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 f887 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000184 	.word	0x20000184
 8000cf0:	40013800 	.word	0x40013800

08000cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_DMA_Init+0x38>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_DMA_Init+0x38>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x38>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 fc0c 	bl	8001534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f000 fc1e 	bl	800155e <HAL_NVIC_EnableIRQ>

}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	40021000 	.word	0x40021000

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	240c      	movs	r4, #12
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2314      	movs	r3, #20
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f005 f829 	bl	8005d98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <MX_GPIO_Init+0xbc>)
 8000d48:	695a      	ldr	r2, [r3, #20]
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <MX_GPIO_Init+0xbc>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0289      	lsls	r1, r1, #10
 8000d50:	430a      	orrs	r2, r1
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <MX_GPIO_Init+0xbc>)
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_GPIO_Init+0xbc>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_GPIO_Init+0xbc>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	02c9      	lsls	r1, r1, #11
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_GPIO_Init+0xbc>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	02db      	lsls	r3, r3, #11
 8000d78:	4013      	ands	r3, r2
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000d7e:	2390      	movs	r3, #144	; 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 fef2 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_GPIO_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2108      	movs	r1, #8
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 feec 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2201      	movs	r2, #1
 8000da2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RC522_CS_GPIO_Port, &GPIO_InitStruct);
 8000db0:	193a      	adds	r2, r7, r4
 8000db2:	2390      	movs	r3, #144	; 0x90
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fd71 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8000dbe:	0021      	movs	r1, r4
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <MX_GPIO_Init+0xc0>)
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0010      	movs	r0, r2
 8000de0:	f000 fd5e 	bl	80018a0 <HAL_GPIO_Init>

}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b009      	add	sp, #36	; 0x24
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48000400 	.word	0x48000400

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x44>)
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_MspInit+0x44>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	619a      	str	r2, [r3, #24]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_MspInit+0x44>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x44>)
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_MspInit+0x44>)
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	0549      	lsls	r1, r1, #21
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	61da      	str	r2, [r3, #28]
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_MspInit+0x44>)
 8000e2e:	69da      	ldr	r2, [r3, #28]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	4013      	ands	r3, r2
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08b      	sub	sp, #44	; 0x2c
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	2414      	movs	r4, #20
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	0018      	movs	r0, r3
 8000e56:	2314      	movs	r3, #20
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f004 ff9c 	bl	8005d98 <memset>
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_I2C_MspInit+0x94>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d133      	bne.n	8000ed2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_I2C_MspInit+0x98>)
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_I2C_MspInit+0x98>)
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0289      	lsls	r1, r1, #10
 8000e74:	430a      	orrs	r2, r1
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_I2C_MspInit+0x98>)
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	22c0      	movs	r2, #192	; 0xc0
 8000e8a:	00d2      	lsls	r2, r2, #3
 8000e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	0021      	movs	r1, r4
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2212      	movs	r2, #18
 8000e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	187a      	adds	r2, r7, r1
 8000eaa:	2390      	movs	r3, #144	; 0x90
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 fcf5 	bl	80018a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_I2C_MspInit+0x98>)
 8000eb8:	69da      	ldr	r2, [r3, #28]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_I2C_MspInit+0x98>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0389      	lsls	r1, r1, #14
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	61da      	str	r2, [r3, #28]
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_I2C_MspInit+0x98>)
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	039b      	lsls	r3, r3, #14
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b00b      	add	sp, #44	; 0x2c
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b08b      	sub	sp, #44	; 0x2c
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	2414      	movs	r4, #20
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f004 ff4e 	bl	8005d98 <memset>
  if(hspi->Instance==SPI1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <HAL_SPI_MspInit+0xa0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d13a      	bne.n	8000f7c <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_SPI_MspInit+0xa4>)
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_SPI_MspInit+0xa4>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0149      	lsls	r1, r1, #5
 8000f10:	430a      	orrs	r2, r1
 8000f12:	619a      	str	r2, [r3, #24]
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_SPI_MspInit+0xa4>)
 8000f16:	699a      	ldr	r2, [r3, #24]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	015b      	lsls	r3, r3, #5
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_SPI_MspInit+0xa4>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_SPI_MspInit+0xa4>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0289      	lsls	r1, r1, #10
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_SPI_MspInit+0xa4>)
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	029b      	lsls	r3, r3, #10
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f3e:	0021      	movs	r1, r4
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	22e0      	movs	r2, #224	; 0xe0
 8000f44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2202      	movs	r2, #2
 8000f4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2203      	movs	r2, #3
 8000f56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	187a      	adds	r2, r7, r1
 8000f60:	2390      	movs	r3, #144	; 0x90
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fc9a 	bl	80018a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2019      	movs	r0, #25
 8000f72:	f000 fadf 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f76:	2019      	movs	r0, #25
 8000f78:	f000 faf1 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b00b      	add	sp, #44	; 0x2c
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	40013000 	.word	0x40013000
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a24      	ldr	r2, [pc, #144]	; (800102c <HAL_TIM_Base_MspInit+0xa0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d141      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_TIM_Base_MspInit+0xa4>)
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_TIM_Base_MspInit+0xa4>)
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	61da      	str	r2, [r3, #28]
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_TIM_Base_MspInit+0xa4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_TIM_Base_MspInit+0xac>)
 8000fba:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fad3 	bl	8001598 <HAL_DMA_Init>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000ff6:	f7ff fefd 	bl	8000df4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 800100a:	621a      	str	r2, [r3, #32]
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_TIM_Base_MspInit+0xa8>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2010      	movs	r0, #16
 8001018:	f000 fa8c 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800101c:	2010      	movs	r0, #16
 800101e:	f000 fa9e 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40000400 	.word	0x40000400
 8001030:	40021000 	.word	0x40021000
 8001034:	200000ec 	.word	0x200000ec
 8001038:	40020030 	.word	0x40020030

0800103c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	240c      	movs	r4, #12
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	2314      	movs	r3, #20
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f004 fea2 	bl	8005d98 <memset>
  if(htim->Instance==TIM3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <HAL_TIM_MspPostInit+0x74>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d123      	bne.n	80010a6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_TIM_MspPostInit+0x78>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_TIM_MspPostInit+0x78>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	02c9      	lsls	r1, r1, #11
 8001068:	430a      	orrs	r2, r1
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_TIM_MspPostInit+0x78>)
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	02db      	lsls	r3, r3, #11
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 800107a:	0021      	movs	r1, r4
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2232      	movs	r2, #50	; 0x32
 8001080:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2202      	movs	r2, #2
 8001086:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2201      	movs	r2, #1
 8001098:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	187b      	adds	r3, r7, r1
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_TIM_MspPostInit+0x7c>)
 800109e:	0019      	movs	r1, r3
 80010a0:	0010      	movs	r0, r2
 80010a2:	f000 fbfd 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b009      	add	sp, #36	; 0x24
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40000400 	.word	0x40000400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000400 	.word	0x48000400

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b08b      	sub	sp, #44	; 0x2c
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	2414      	movs	r4, #20
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	0018      	movs	r0, r3
 80010ca:	2314      	movs	r3, #20
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f004 fe62 	bl	8005d98 <memset>
  if(huart->Instance==USART1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <HAL_UART_MspInit+0xa0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d139      	bne.n	8001152 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_UART_MspInit+0xa4>)
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_UART_MspInit+0xa4>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	01c9      	lsls	r1, r1, #7
 80010e8:	430a      	orrs	r2, r1
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_UART_MspInit+0xa4>)
 80010ee:	699a      	ldr	r2, [r3, #24]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	01db      	lsls	r3, r3, #7
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_UART_MspInit+0xa4>)
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_UART_MspInit+0xa4>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	02c9      	lsls	r1, r1, #11
 8001104:	430a      	orrs	r2, r1
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0xa4>)
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	02db      	lsls	r3, r3, #11
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	22c0      	movs	r2, #192	; 0xc0
 800111c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2202      	movs	r2, #2
 8001122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2203      	movs	r2, #3
 800112e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	187b      	adds	r3, r7, r1
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_UART_MspInit+0xa8>)
 800113a:	0019      	movs	r1, r3
 800113c:	0010      	movs	r0, r2
 800113e:	f000 fbaf 	bl	80018a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	201b      	movs	r0, #27
 8001148:	f000 f9f4 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800114c:	201b      	movs	r0, #27
 800114e:	f000 fa06 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b00b      	add	sp, #44	; 0x2c
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40013800 	.word	0x40013800
 8001160:	40021000 	.word	0x40021000
 8001164:	48000400 	.word	0x48000400

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f8e6 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <DMA1_Channel2_3_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fabf 	bl	8001722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	200000ec 	.word	0x200000ec

080011b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <TIM3_IRQHandler+0x14>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 f8a6 	bl	8004308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	200000a4 	.word	0x200000a4

080011c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <SPI1_IRQHandler+0x14>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f002 fc0a 	bl	80039e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000040 	.word	0x20000040

080011e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <USART1_IRQHandler+0x14>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f003 ff14 	bl	8005014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	20000184 	.word	0x20000184

080011f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <timer_run>:

void setTimer(int timer, int duration){
	counter[timer] = duration / 10;
	timer_flag[timer] = 0;
}
void timer_run(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){ // 3 timer
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	e01c      	b.n	800124a <timer_run+0x46>
		if(counter[i] > 0){
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <timer_run+0x58>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	58d3      	ldr	r3, [r2, r3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dd13      	ble.n	8001244 <timer_run+0x40>
			counter[i]--;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <timer_run+0x58>)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	58d3      	ldr	r3, [r2, r3]
 8001224:	1e59      	subs	r1, r3, #1
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <timer_run+0x58>)
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <timer_run+0x58>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	58d3      	ldr	r3, [r2, r3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	dc04      	bgt.n	8001244 <timer_run+0x40>
				timer_flag[i] = 1;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <timer_run+0x5c>)
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	2101      	movs	r1, #1
 8001242:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 3; i++){ // 3 timer
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b02      	cmp	r3, #2
 800124e:	dddf      	ble.n	8001210 <timer_run+0xc>
		}
	}
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	20000028 	.word	0x20000028
 8001260:	20000034 	.word	0x20000034

08001264 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	//getKeyinput();
	timer_run();
 800126c:	f7ff ffca 	bl	8001204 <timer_run>
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f7ff ffbc 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012a6:	f004 fd53 	bl	8005d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fb2b 	bl	8000904 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012bc:	08005e10 	.word	0x08005e10
  ldr r2, =_sbss
 80012c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c4:	20000210 	.word	0x20000210

080012c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_IRQHandler>
	...

080012cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_Init+0x24>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_Init+0x24>)
 80012d6:	2110      	movs	r1, #16
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f809 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fd8d 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_InitTick+0x5c>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	23fa      	movs	r3, #250	; 0xfa
 8001308:	0098      	lsls	r0, r3, #2
 800130a:	f7fe fefd 	bl	8000108 <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	0019      	movs	r1, r3
 8001312:	0020      	movs	r0, r4
 8001314:	f7fe fef8 	bl	8000108 <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f92f 	bl	800157e <HAL_SYSTICK_Config>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00f      	b.n	8001348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d80b      	bhi.n	8001346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2200      	movs	r2, #0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f8fc 	bl	8001534 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_InitTick+0x64>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000008 	.word	0x20000008
 800137c:	2000020c 	.word	0x2000020c

08001380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	2000020c 	.word	0x2000020c

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	001a      	movs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0002      	movs	r2, r0
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b7f      	cmp	r3, #127	; 0x7f
 80013ee:	d809      	bhi.n	8001404 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	001a      	movs	r2, r3
 80013f6:	231f      	movs	r3, #31
 80013f8:	401a      	ands	r2, r3
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_EnableIRQ+0x30>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	4091      	lsls	r1, r2
 8001400:	000a      	movs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	0002      	movs	r2, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b7f      	cmp	r3, #127	; 0x7f
 8001424:	d828      	bhi.n	8001478 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	33c0      	adds	r3, #192	; 0xc0
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	589b      	ldr	r3, [r3, r2]
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	2203      	movs	r2, #3
 800143e:	400a      	ands	r2, r1
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	401a      	ands	r2, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	2303      	movs	r3, #3
 800145e:	4003      	ands	r3, r0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	430a      	orrs	r2, r1
 8001470:	33c0      	adds	r3, #192	; 0xc0
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001476:	e031      	b.n	80014dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0019      	movs	r1, r3
 8001480:	230f      	movs	r3, #15
 8001482:	400b      	ands	r3, r1
 8001484:	3b08      	subs	r3, #8
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3306      	adds	r3, #6
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1dfa      	adds	r2, r7, #7
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0011      	movs	r1, r2
 8001498:	2203      	movs	r2, #3
 800149a:	400a      	ands	r2, r1
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	21ff      	movs	r1, #255	; 0xff
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	401a      	ands	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	4003      	ands	r3, r0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	001c      	movs	r4, r3
 80014c8:	230f      	movs	r3, #15
 80014ca:	4023      	ands	r3, r4
 80014cc:	3b08      	subs	r3, #8
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	430a      	orrs	r2, r1
 80014d2:	3306      	adds	r3, #6
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	18c3      	adds	r3, r0, r3
 80014d8:	3304      	adds	r3, #4
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b003      	add	sp, #12
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	1e5a      	subs	r2, r3, #1
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	045b      	lsls	r3, r3, #17
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d301      	bcc.n	8001504 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001500:	2301      	movs	r3, #1
 8001502:	e010      	b.n	8001526 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <SysTick_Config+0x44>)
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	3a01      	subs	r2, #1
 800150a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150c:	2301      	movs	r3, #1
 800150e:	425b      	negs	r3, r3
 8001510:	2103      	movs	r1, #3
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff ff7c 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x44>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x44>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	210f      	movs	r1, #15
 8001540:	187b      	adds	r3, r7, r1
 8001542:	1c02      	adds	r2, r0, #0
 8001544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	187b      	adds	r3, r7, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25b      	sxtb	r3, r3
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	0002      	movs	r2, r0
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ffaf 	bl	80014ec <SysTick_Config>
 800158e:	0003      	movs	r3, r0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e036      	b.n	800161c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2221      	movs	r2, #33	; 0x21
 80015b2:	2102      	movs	r1, #2
 80015b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_DMA_Init+0x8c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f932 	bl	8001868 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2221      	movs	r2, #33	; 0x21
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}
 8001624:	ffffc00f 	.word	0xffffc00f

08001628 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2221      	movs	r2, #33	; 0x21
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d008      	beq.n	800164e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2204      	movs	r2, #4
 8001640:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	2100      	movs	r1, #0
 8001648:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e020      	b.n	8001690 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	210e      	movs	r1, #14
 800165a:	438a      	bics	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	438a      	bics	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2101      	movs	r1, #1
 8001678:	4091      	lsls	r1, r2
 800167a:	000a      	movs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2221      	movs	r2, #33	; 0x21
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	210f      	movs	r1, #15
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2221      	movs	r2, #33	; 0x21
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d006      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2204      	movs	r2, #4
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e028      	b.n	8001714 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	210e      	movs	r1, #14
 80016ce:	438a      	bics	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	438a      	bics	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ea:	2101      	movs	r1, #1
 80016ec:	4091      	lsls	r1, r2
 80016ee:	000a      	movs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2221      	movs	r2, #33	; 0x21
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	2100      	movs	r1, #0
 8001700:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	0010      	movs	r0, r2
 8001712:	4798      	blx	r3
    }
  }
  return status;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2204      	movs	r2, #4
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	d024      	beq.n	8001794 <HAL_DMA_IRQHandler+0x72>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2204      	movs	r2, #4
 800174e:	4013      	ands	r3, r2
 8001750:	d020      	beq.n	8001794 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2220      	movs	r2, #32
 800175a:	4013      	ands	r3, r2
 800175c:	d107      	bne.n	800176e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2104      	movs	r1, #4
 800176a:	438a      	bics	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	2104      	movs	r1, #4
 8001778:	4091      	lsls	r1, r2
 800177a:	000a      	movs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d100      	bne.n	8001788 <HAL_DMA_IRQHandler+0x66>
 8001786:	e06a      	b.n	800185e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	0010      	movs	r0, r2
 8001790:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001792:	e064      	b.n	800185e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2202      	movs	r2, #2
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	d02b      	beq.n	80017fc <HAL_DMA_IRQHandler+0xda>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d027      	beq.n	80017fc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2220      	movs	r2, #32
 80017b4:	4013      	ands	r3, r2
 80017b6:	d10b      	bne.n	80017d0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	210a      	movs	r1, #10
 80017c4:	438a      	bics	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2221      	movs	r2, #33	; 0x21
 80017cc:	2101      	movs	r1, #1
 80017ce:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	2102      	movs	r1, #2
 80017da:	4091      	lsls	r1, r2
 80017dc:	000a      	movs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d036      	beq.n	800185e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	0010      	movs	r0, r2
 80017f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017fa:	e030      	b.n	800185e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2208      	movs	r2, #8
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	d028      	beq.n	800185e <HAL_DMA_IRQHandler+0x13c>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2208      	movs	r2, #8
 8001810:	4013      	ands	r3, r2
 8001812:	d024      	beq.n	800185e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	210e      	movs	r1, #14
 8001820:	438a      	bics	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	2101      	movs	r1, #1
 800182e:	4091      	lsls	r1, r2
 8001830:	000a      	movs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2221      	movs	r2, #33	; 0x21
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	2100      	movs	r1, #0
 8001848:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	0010      	movs	r0, r2
 800185a:	4798      	blx	r3
    }
  }
}
 800185c:	e7ff      	b.n	800185e <HAL_DMA_IRQHandler+0x13c>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <DMA_CalcBaseAndBitshift+0x30>)
 8001876:	4694      	mov	ip, r2
 8001878:	4463      	add	r3, ip
 800187a:	2114      	movs	r1, #20
 800187c:	0018      	movs	r0, r3
 800187e:	f7fe fc43 	bl	8000108 <__udivsi3>
 8001882:	0003      	movs	r3, r0
 8001884:	009a      	lsls	r2, r3, #2
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <DMA_CalcBaseAndBitshift+0x34>)
 800188e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	bffdfff8 	.word	0xbffdfff8
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e149      	b.n	8001b44 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4091      	lsls	r1, r2
 80018ba:	000a      	movs	r2, r1
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d100      	bne.n	80018c8 <HAL_GPIO_Init+0x28>
 80018c6:	e13a      	b.n	8001b3e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2203      	movs	r2, #3
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d130      	bne.n	8001942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	409a      	lsls	r2, r3
 80018ee:	0013      	movs	r3, r2
 80018f0:	43da      	mvns	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001916:	2201      	movs	r2, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	2201      	movs	r2, #1
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	4013      	ands	r3, r2
 800194a:	2b03      	cmp	r3, #3
 800194c:	d017      	beq.n	800197e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2203      	movs	r2, #3
 8001984:	4013      	ands	r3, r2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d123      	bne.n	80019d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	58d3      	ldr	r3, [r2, r3]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2207      	movs	r2, #7
 800199c:	4013      	ands	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2107      	movs	r1, #7
 80019b6:	400b      	ands	r3, r1
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	6939      	ldr	r1, [r7, #16]
 80019d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	401a      	ands	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	23c0      	movs	r3, #192	; 0xc0
 8001a0c:	029b      	lsls	r3, r3, #10
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d100      	bne.n	8001a14 <HAL_GPIO_Init+0x174>
 8001a12:	e094      	b.n	8001b3e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <HAL_GPIO_Init+0x2bc>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	589b      	ldr	r3, [r3, r2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	409a      	lsls	r2, r3
 8001a46:	0013      	movs	r3, r2
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	2390      	movs	r3, #144	; 0x90
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x1d6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <HAL_GPIO_Init+0x2c4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x1d2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_GPIO_Init+0x2c8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x1ce>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x1d8>
 8001a6e:	2305      	movs	r3, #5
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x1d8>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x1d8>
 8001a76:	2300      	movs	r3, #0
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4093      	lsls	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a88:	4935      	ldr	r1, [pc, #212]	; (8001b60 <HAL_GPIO_Init+0x2c0>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	035b      	lsls	r3, r3, #13
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	039b      	lsls	r3, r3, #14
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	4013      	ands	r3, r2
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_GPIO_Init+0x2cc>)
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	40da      	lsrs	r2, r3
 8001b4c:	1e13      	subs	r3, r2, #0
 8001b4e:	d000      	beq.n	8001b52 <HAL_GPIO_Init+0x2b2>
 8001b50:	e6ae      	b.n	80018b0 <HAL_GPIO_Init+0x10>
  } 
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b006      	add	sp, #24
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000
 8001b64:	48000400 	.word	0x48000400
 8001b68:	48000800 	.word	0x48000800
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	0008      	movs	r0, r1
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	1cbb      	adds	r3, r7, #2
 8001b7e:	1c02      	adds	r2, r0, #0
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	1c7b      	adds	r3, r7, #1
 8001b84:	1c0a      	adds	r2, r1, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	1c7b      	adds	r3, r7, #1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	1cbb      	adds	r3, r7, #2
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e08f      	b.n	8001cde <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2241      	movs	r2, #65	; 0x41
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	2100      	movs	r1, #0
 8001bd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff f937 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2241      	movs	r2, #65	; 0x41
 8001bde:	2124      	movs	r1, #36	; 0x24
 8001be0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2101      	movs	r1, #1
 8001bee:	438a      	bics	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	493b      	ldr	r1, [pc, #236]	; (8001ce8 <HAL_I2C_Init+0x13c>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4938      	ldr	r1, [pc, #224]	; (8001cec <HAL_I2C_Init+0x140>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0209      	lsls	r1, r1, #8
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	e007      	b.n	8001c3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2184      	movs	r1, #132	; 0x84
 8001c34:	0209      	lsls	r1, r1, #8
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d109      	bne.n	8001c56 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0109      	lsls	r1, r1, #4
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	e007      	b.n	8001c66 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4923      	ldr	r1, [pc, #140]	; (8001cf0 <HAL_I2C_Init+0x144>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4920      	ldr	r1, [pc, #128]	; (8001cf4 <HAL_I2C_Init+0x148>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	491a      	ldr	r1, [pc, #104]	; (8001cec <HAL_I2C_Init+0x140>)
 8001c82:	400a      	ands	r2, r1
 8001c84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69d9      	ldr	r1, [r3, #28]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2241      	movs	r2, #65	; 0x41
 8001cca:	2120      	movs	r1, #32
 8001ccc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2242      	movs	r2, #66	; 0x42
 8001cd8:	2100      	movs	r1, #0
 8001cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	f0ffffff 	.word	0xf0ffffff
 8001cec:	ffff7fff 	.word	0xffff7fff
 8001cf0:	fffff7ff 	.word	0xfffff7ff
 8001cf4:	02008000 	.word	0x02008000

08001cf8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	0008      	movs	r0, r1
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	0019      	movs	r1, r3
 8001d06:	230a      	movs	r3, #10
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	1c02      	adds	r2, r0, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	2308      	movs	r3, #8
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	1c0a      	adds	r2, r1, #0
 8001d14:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2241      	movs	r2, #65	; 0x41
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d000      	beq.n	8001d24 <HAL_I2C_Master_Transmit+0x2c>
 8001d22:	e10a      	b.n	8001f3a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Master_Transmit+0x3a>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e104      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x244>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2240      	movs	r2, #64	; 0x40
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d3a:	f7ff fb21 	bl	8001380 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	0219      	lsls	r1, r3, #8
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2319      	movs	r3, #25
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f000 f91e 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0ef      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2241      	movs	r2, #65	; 0x41
 8001d60:	2121      	movs	r1, #33	; 0x21
 8001d62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2242      	movs	r2, #66	; 0x42
 8001d68:	2110      	movs	r1, #16
 8001d6a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	18ba      	adds	r2, r7, r2
 8001d7e:	8812      	ldrh	r2, [r2, #0]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d906      	bls.n	8001da0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	22ff      	movs	r2, #255	; 0xff
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	045b      	lsls	r3, r3, #17
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e007      	b.n	8001db0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	049b      	lsls	r3, r3, #18
 8001dae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d027      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697c      	ldr	r4, [r7, #20]
 8001df4:	230a      	movs	r3, #10
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	8819      	ldrh	r1, [r3, #0]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <HAL_I2C_Master_Transmit+0x24c>)
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	0023      	movs	r3, r4
 8001e02:	f000 faa7 	bl	8002354 <I2C_TransferConfig>
 8001e06:	e06f      	b.n	8001ee8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	697c      	ldr	r4, [r7, #20]
 8001e10:	230a      	movs	r3, #10
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	8819      	ldrh	r1, [r3, #0]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_I2C_Master_Transmit+0x24c>)
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	0023      	movs	r3, r4
 8001e1e:	f000 fa99 	bl	8002354 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e22:	e061      	b.n	8001ee8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f908 	bl	8002040 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e081      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03a      	beq.n	8001ee8 <HAL_I2C_Master_Transmit+0x1f0>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d136      	bne.n	8001ee8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	0013      	movs	r3, r2
 8001e84:	2200      	movs	r2, #0
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	f000 f882 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e053      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d911      	bls.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	22ff      	movs	r2, #255	; 0xff
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	045c      	lsls	r4, r3, #17
 8001eae:	230a      	movs	r3, #10
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	8819      	ldrh	r1, [r3, #0]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	0023      	movs	r3, r4
 8001ebc:	f000 fa4a 	bl	8002354 <I2C_TransferConfig>
 8001ec0:	e012      	b.n	8001ee8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	049c      	lsls	r4, r3, #18
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	8819      	ldrh	r1, [r3, #0]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	0023      	movs	r3, r4
 8001ee4:	f000 fa36 	bl	8002354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d198      	bne.n	8001e24 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f8e7 	bl	80020cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e01a      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	490b      	ldr	r1, [pc, #44]	; (8001f48 <HAL_I2C_Master_Transmit+0x250>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2241      	movs	r2, #65	; 0x41
 8001f22:	2120      	movs	r1, #32
 8001f24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2242      	movs	r2, #66	; 0x42
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	2100      	movs	r1, #0
 8001f34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
  }
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b007      	add	sp, #28
 8001f42:	bd90      	pop	{r4, r7, pc}
 8001f44:	80002000 	.word	0x80002000
 8001f48:	fe00e800 	.word	0xfe00e800

08001f4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d103      	bne.n	8001f6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d007      	beq.n	8001f88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	619a      	str	r2, [r3, #24]
  }
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa0:	e03a      	b.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f8d3 	bl	8002154 <I2C_IsErrorOccurred>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e040      	b.n	8002038 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	d02d      	beq.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbc:	f7ff f9e0 	bl	8001380 <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d302      	bcc.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d122      	bne.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	425a      	negs	r2, r3
 8001fe2:	4153      	adcs	r3, r2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d113      	bne.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2241      	movs	r2, #65	; 0x41
 8002000:	2120      	movs	r1, #32
 8002002:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2242      	movs	r2, #66	; 0x42
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	2100      	movs	r1, #0
 8002012:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e00f      	b.n	8002038 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	425a      	negs	r2, r3
 8002028:	4153      	adcs	r3, r2
 800202a:	b2db      	uxtb	r3, r3
 800202c:	001a      	movs	r2, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d0b5      	beq.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b004      	add	sp, #16
 800203e:	bd80      	pop	{r7, pc}

08002040 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800204c:	e032      	b.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	0018      	movs	r0, r3
 8002056:	f000 f87d 	bl	8002154 <I2C_IsErrorOccurred>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d001      	beq.n	8002062 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e030      	b.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	d025      	beq.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002068:	f7ff f98a 	bl	8001380 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11a      	bne.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	2b02      	cmp	r3, #2
 800208a:	d013      	beq.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	2220      	movs	r2, #32
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2241      	movs	r2, #65	; 0x41
 800209c:	2120      	movs	r1, #32
 800209e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2242      	movs	r2, #66	; 0x42
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d1c5      	bne.n	800204e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d8:	e02f      	b.n	800213a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f837 	bl	8002154 <I2C_IsErrorOccurred>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d001      	beq.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e02d      	b.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff f947 	bl	8001380 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11a      	bne.n	800213a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2220      	movs	r2, #32
 800210c:	4013      	ands	r3, r2
 800210e:	2b20      	cmp	r3, #32
 8002110:	d013      	beq.n	800213a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	2220      	movs	r2, #32
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2241      	movs	r2, #65	; 0x41
 8002122:	2120      	movs	r1, #32
 8002124:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2242      	movs	r2, #66	; 0x42
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e007      	b.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2220      	movs	r2, #32
 8002142:	4013      	ands	r3, r2
 8002144:	2b20      	cmp	r3, #32
 8002146:	d1c8      	bne.n	80020da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08b      	sub	sp, #44	; 0x2c
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2327      	movs	r3, #39	; 0x27
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2210      	movs	r2, #16
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <I2C_IsErrorOccurred+0x2e>
 8002180:	e082      	b.n	8002288 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2210      	movs	r2, #16
 8002188:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800218a:	e060      	b.n	800224e <I2C_IsErrorOccurred+0xfa>
 800218c:	2427      	movs	r4, #39	; 0x27
 800218e:	193b      	adds	r3, r7, r4
 8002190:	193a      	adds	r2, r7, r4
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	d058      	beq.n	800224e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800219c:	f7ff f8f0 	bl	8001380 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d306      	bcc.n	80021ba <I2C_IsErrorOccurred+0x66>
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	193a      	adds	r2, r7, r4
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d149      	bne.n	800224e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4013      	ands	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021c8:	2013      	movs	r0, #19
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	2142      	movs	r1, #66	; 0x42
 80021d0:	5c52      	ldrb	r2, [r2, r1]
 80021d2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	401a      	ands	r2, r3
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	021b      	lsls	r3, r3, #8
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d126      	bne.n	8002236 <I2C_IsErrorOccurred+0xe2>
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	01db      	lsls	r3, r3, #7
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d021      	beq.n	8002236 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d01d      	beq.n	8002236 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	01c9      	lsls	r1, r1, #7
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800220c:	f7ff f8b8 	bl	8001380 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002214:	e00f      	b.n	8002236 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002216:	f7ff f8b3 	bl	8001380 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b19      	cmp	r3, #25
 8002222:	d908      	bls.n	8002236 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2220      	movs	r2, #32
 8002228:	4313      	orrs	r3, r2
 800222a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800222c:	2327      	movs	r3, #39	; 0x27
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]

              break;
 8002234:	e00b      	b.n	800224e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2220      	movs	r2, #32
 800223e:	4013      	ands	r3, r2
 8002240:	2127      	movs	r1, #39	; 0x27
 8002242:	187a      	adds	r2, r7, r1
 8002244:	1879      	adds	r1, r7, r1
 8002246:	7809      	ldrb	r1, [r1, #0]
 8002248:	7011      	strb	r1, [r2, #0]
 800224a:	2b20      	cmp	r3, #32
 800224c:	d1e3      	bne.n	8002216 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	2b20      	cmp	r3, #32
 800225a:	d004      	beq.n	8002266 <I2C_IsErrorOccurred+0x112>
 800225c:	2327      	movs	r3, #39	; 0x27
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d092      	beq.n	800218c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002266:	2327      	movs	r3, #39	; 0x27
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2204      	movs	r2, #4
 800227c:	4313      	orrs	r3, r2
 800227e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002280:	2327      	movs	r3, #39	; 0x27
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d00c      	beq.n	80022b4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2201      	movs	r2, #1
 800229e:	4313      	orrs	r3, r2
 80022a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	0052      	lsls	r2, r2, #1
 80022aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ac:	2327      	movs	r3, #39	; 0x27
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4013      	ands	r3, r2
 80022bc:	d00c      	beq.n	80022d8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	2208      	movs	r2, #8
 80022c2:	4313      	orrs	r3, r2
 80022c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	00d2      	lsls	r2, r2, #3
 80022ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022d0:	2327      	movs	r3, #39	; 0x27
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d00c      	beq.n	80022fc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4313      	orrs	r3, r2
 80022e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022f4:	2327      	movs	r3, #39	; 0x27
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80022fc:	2327      	movs	r3, #39	; 0x27
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01d      	beq.n	8002342 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff fe1f 	bl	8001f4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	490d      	ldr	r1, [pc, #52]	; (8002350 <I2C_IsErrorOccurred+0x1fc>)
 800231a:	400a      	ands	r2, r1
 800231c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	431a      	orrs	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	2120      	movs	r1, #32
 8002330:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2242      	movs	r2, #66	; 0x42
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002342:	2327      	movs	r3, #39	; 0x27
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	781b      	ldrb	r3, [r3, #0]
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b00b      	add	sp, #44	; 0x2c
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	fe00e800 	.word	0xfe00e800

08002354 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	0008      	movs	r0, r1
 800235e:	0011      	movs	r1, r2
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	240a      	movs	r4, #10
 8002364:	193b      	adds	r3, r7, r4
 8002366:	1c02      	adds	r2, r0, #0
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	2009      	movs	r0, #9
 800236c:	183b      	adds	r3, r7, r0
 800236e:	1c0a      	adds	r2, r1, #0
 8002370:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002372:	193b      	adds	r3, r7, r4
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	059b      	lsls	r3, r3, #22
 8002378:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800237a:	183b      	adds	r3, r7, r0
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0419      	lsls	r1, r3, #16
 8002380:	23ff      	movs	r3, #255	; 0xff
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002386:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	4313      	orrs	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800239e:	0d51      	lsrs	r1, r2, #21
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	00d2      	lsls	r2, r2, #3
 80023a4:	400a      	ands	r2, r1
 80023a6:	4907      	ldr	r1, [pc, #28]	; (80023c4 <I2C_TransferConfig+0x70>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	43d2      	mvns	r2, r2
 80023ac:	401a      	ands	r2, r3
 80023ae:	0011      	movs	r1, r2
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b007      	add	sp, #28
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	03ff63ff 	.word	0x03ff63ff

080023c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2241      	movs	r2, #65	; 0x41
 80023d6:	5c9b      	ldrb	r3, [r3, r2]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d138      	bne.n	8002450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2240      	movs	r2, #64	; 0x40
 80023e2:	5c9b      	ldrb	r3, [r3, r2]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e032      	b.n	8002452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	2101      	movs	r1, #1
 80023f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2241      	movs	r2, #65	; 0x41
 80023f8:	2124      	movs	r1, #36	; 0x24
 80023fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	438a      	bics	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4911      	ldr	r1, [pc, #68]	; (800245c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002418:	400a      	ands	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2241      	movs	r2, #65	; 0x41
 8002440:	2120      	movs	r1, #32
 8002442:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	2100      	movs	r1, #0
 800244a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	ffffefff 	.word	0xffffefff

08002460 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	; 0x41
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	d139      	bne.n	80024ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2240      	movs	r2, #64	; 0x40
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e033      	b.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	2101      	movs	r1, #1
 800248a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2241      	movs	r2, #65	; 0x41
 8002490:	2124      	movs	r1, #36	; 0x24
 8002492:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2241      	movs	r2, #65	; 0x41
 80024da:	2120      	movs	r1, #32
 80024dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
  }
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	fffff0ff 	.word	0xfffff0ff

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e301      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d100      	bne.n	8002516 <HAL_RCC_OscConfig+0x1e>
 8002514:	e08d      	b.n	8002632 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002516:	4bc3      	ldr	r3, [pc, #780]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	220c      	movs	r2, #12
 800251c:	4013      	ands	r3, r2
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00e      	beq.n	8002540 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002522:	4bc0      	ldr	r3, [pc, #768]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	220c      	movs	r2, #12
 8002528:	4013      	ands	r3, r2
 800252a:	2b08      	cmp	r3, #8
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x64>
 800252e:	4bbd      	ldr	r3, [pc, #756]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	401a      	ands	r2, r3
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	429a      	cmp	r2, r3
 800253e:	d10d      	bne.n	800255c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4bb8      	ldr	r3, [pc, #736]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	4013      	ands	r3, r2
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x56>
 800254c:	e070      	b.n	8002630 <HAL_RCC_OscConfig+0x138>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d000      	beq.n	8002558 <HAL_RCC_OscConfig+0x60>
 8002556:	e06b      	b.n	8002630 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e2d8      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x7c>
 8002564:	4baf      	ldr	r3, [pc, #700]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4bae      	ldr	r3, [pc, #696]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e02f      	b.n	80025d4 <HAL_RCC_OscConfig+0xdc>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x9e>
 800257c:	4ba9      	ldr	r3, [pc, #676]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4ba8      	ldr	r3, [pc, #672]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002582:	49a9      	ldr	r1, [pc, #676]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4ba6      	ldr	r3, [pc, #664]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4ba5      	ldr	r3, [pc, #660]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800258e:	49a7      	ldr	r1, [pc, #668]	; (800282c <HAL_RCC_OscConfig+0x334>)
 8002590:	400a      	ands	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e01e      	b.n	80025d4 <HAL_RCC_OscConfig+0xdc>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10e      	bne.n	80025bc <HAL_RCC_OscConfig+0xc4>
 800259e:	4ba1      	ldr	r3, [pc, #644]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4ba0      	ldr	r3, [pc, #640]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	02c9      	lsls	r1, r1, #11
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b9c      	ldr	r3, [pc, #624]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0249      	lsls	r1, r1, #9
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xdc>
 80025bc:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b98      	ldr	r3, [pc, #608]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	4999      	ldr	r1, [pc, #612]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b95      	ldr	r3, [pc, #596]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	4997      	ldr	r1, [pc, #604]	; (800282c <HAL_RCC_OscConfig+0x334>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d014      	beq.n	8002606 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fed0 	bl	8001380 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e6:	f7fe fecb 	bl	8001380 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e28a      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f8:	4b8a      	ldr	r3, [pc, #552]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	029b      	lsls	r3, r3, #10
 8002600:	4013      	ands	r3, r2
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0xee>
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe febb 	bl	8001380 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe feb6 	bl	8001380 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e275      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b80      	ldr	r3, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x118>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
 800263a:	d100      	bne.n	800263e <HAL_RCC_OscConfig+0x146>
 800263c:	e069      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800263e:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	220c      	movs	r2, #12
 8002644:	4013      	ands	r3, r2
 8002646:	d00b      	beq.n	8002660 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002648:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	220c      	movs	r2, #12
 800264e:	4013      	ands	r3, r2
 8002650:	2b08      	cmp	r3, #8
 8002652:	d11c      	bne.n	800268e <HAL_RCC_OscConfig+0x196>
 8002654:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	4013      	ands	r3, r2
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002660:	4b70      	ldr	r3, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e24b      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	22f8      	movs	r2, #248	; 0xf8
 800267c:	4393      	bics	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00da      	lsls	r2, r3, #3
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268c:	e041      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d024      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800269c:	2101      	movs	r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fe6d 	bl	8001380 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fe68 	bl	8001380 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e227      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0f1      	beq.n	80026ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	22f8      	movs	r2, #248	; 0xf8
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00da      	lsls	r2, r3, #3
 80026d8:	4b52      	ldr	r3, [pc, #328]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fe48 	bl	8001380 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fe43 	bl	8001380 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e202      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f1      	bne.n	80026f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2208      	movs	r2, #8
 8002718:	4013      	ands	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002728:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800272a:	2101      	movs	r1, #1
 800272c:	430a      	orrs	r2, r1
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fe26 	bl	8001380 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe fe21 	bl	8001380 <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1e0      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0f1      	beq.n	800273a <HAL_RCC_OscConfig+0x242>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800275a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fe0c 	bl	8001380 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fe07 	bl	8001380 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1c6      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x29e>
 8002794:	e0b4      	b.n	8002900 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	201f      	movs	r0, #31
 8002798:	183b      	adds	r3, r7, r0
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	4013      	ands	r3, r2
 80027a8:	d110      	bne.n	80027cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	d11a      	bne.n	800280e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0049      	lsls	r1, r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fdcb 	bl	8001380 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe fdc6 	bl	8001380 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e185      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_RCC_OscConfig+0x33c>
 8002816:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	4b02      	ldr	r3, [pc, #8]	; (8002824 <HAL_RCC_OscConfig+0x32c>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	621a      	str	r2, [r3, #32]
 8002822:	e035      	b.n	8002890 <HAL_RCC_OscConfig+0x398>
 8002824:	40021000 	.word	0x40021000
 8002828:	fffeffff 	.word	0xfffeffff
 800282c:	fffbffff 	.word	0xfffbffff
 8002830:	40007000 	.word	0x40007000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_OscConfig+0x35e>
 800283c:	4bb6      	ldr	r3, [pc, #728]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4bb5      	ldr	r3, [pc, #724]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002842:	2101      	movs	r1, #1
 8002844:	438a      	bics	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
 8002848:	4bb3      	ldr	r3, [pc, #716]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4bb2      	ldr	r3, [pc, #712]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800284e:	2104      	movs	r1, #4
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	e01c      	b.n	8002890 <HAL_RCC_OscConfig+0x398>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b05      	cmp	r3, #5
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x380>
 800285e:	4bae      	ldr	r3, [pc, #696]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	4bad      	ldr	r3, [pc, #692]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002864:	2104      	movs	r1, #4
 8002866:	430a      	orrs	r2, r1
 8002868:	621a      	str	r2, [r3, #32]
 800286a:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	4baa      	ldr	r3, [pc, #680]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002870:	2101      	movs	r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	621a      	str	r2, [r3, #32]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0x398>
 8002878:	4ba7      	ldr	r3, [pc, #668]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	4ba6      	ldr	r3, [pc, #664]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800287e:	2101      	movs	r1, #1
 8002880:	438a      	bics	r2, r1
 8002882:	621a      	str	r2, [r3, #32]
 8002884:	4ba4      	ldr	r3, [pc, #656]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	4ba3      	ldr	r3, [pc, #652]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800288a:	2104      	movs	r1, #4
 800288c:	438a      	bics	r2, r1
 800288e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d014      	beq.n	80028c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe fd72 	bl	8001380 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fd6d 	bl	8001380 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4a9b      	ldr	r2, [pc, #620]	; (8002b1c <HAL_RCC_OscConfig+0x624>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e12b      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3aa>
 80028c0:	e013      	b.n	80028ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe fd5d 	bl	8001380 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	e009      	b.n	80028e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe fd58 	bl	8001380 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	4a91      	ldr	r2, [pc, #580]	; (8002b1c <HAL_RCC_OscConfig+0x624>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e116      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e0:	4b8d      	ldr	r3, [pc, #564]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ea:	231f      	movs	r3, #31
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f4:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	4b87      	ldr	r3, [pc, #540]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80028fa:	4989      	ldr	r1, [pc, #548]	; (8002b20 <HAL_RCC_OscConfig+0x628>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2210      	movs	r2, #16
 8002906:	4013      	ands	r3, r2
 8002908:	d063      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d12a      	bne.n	8002968 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002912:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002918:	2104      	movs	r1, #4
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800291e:	4b7e      	ldr	r3, [pc, #504]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	4b7d      	ldr	r3, [pc, #500]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002924:	2101      	movs	r1, #1
 8002926:	430a      	orrs	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7fe fd29 	bl	8001380 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002934:	f7fe fd24 	bl	8001380 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0e3      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002946:	4b74      	ldr	r3, [pc, #464]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d0f1      	beq.n	8002934 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002950:	4b71      	ldr	r3, [pc, #452]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	22f8      	movs	r2, #248	; 0xf8
 8002956:	4393      	bics	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	00da      	lsls	r2, r3, #3
 8002960:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002962:	430a      	orrs	r2, r1
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
 8002966:	e034      	b.n	80029d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	3305      	adds	r3, #5
 800296e:	d111      	bne.n	8002994 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002976:	2104      	movs	r1, #4
 8002978:	438a      	bics	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	22f8      	movs	r2, #248	; 0xf8
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	00da      	lsls	r2, r3, #3
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
 8002992:	e01e      	b.n	80029d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002994:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 800299a:	2104      	movs	r1, #4
 800299c:	430a      	orrs	r2, r1
 800299e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a4:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	438a      	bics	r2, r1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7fe fce8 	bl	8001380 <HAL_GetTick>
 80029b0:	0003      	movs	r3, r0
 80029b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029b6:	f7fe fce3 	bl	8001380 <HAL_GetTick>
 80029ba:	0002      	movs	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e0a2      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	2202      	movs	r2, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	d1f1      	bne.n	80029b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d100      	bne.n	80029dc <HAL_RCC_OscConfig+0x4e4>
 80029da:	e097      	b.n	8002b0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	220c      	movs	r2, #12
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d100      	bne.n	80029ea <HAL_RCC_OscConfig+0x4f2>
 80029e8:	e06b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d14c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 80029f8:	494a      	ldr	r1, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x62c>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe fcbf 	bl	8001380 <HAL_GetTick>
 8002a02:	0003      	movs	r3, r0
 8002a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe fcba 	bl	8001380 <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e079      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	049b      	lsls	r3, r3, #18
 8002a22:	4013      	ands	r3, r2
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a26:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_RCC_OscConfig+0x630>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	0449      	lsls	r1, r1, #17
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fc8d 	bl	8001380 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fc88 	bl	8001380 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e047      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7e:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	049b      	lsls	r3, r3, #18
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x574>
 8002a8a:	e03f      	b.n	8002b0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002a92:	4924      	ldr	r1, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x62c>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fc72 	bl	8001380 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fc6d 	bl	8001380 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e02c      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	049b      	lsls	r3, r3, #18
 8002abc:	4013      	ands	r3, r2
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5aa>
 8002ac0:	e024      	b.n	8002b0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e01f      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_RCC_OscConfig+0x620>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10e      	bne.n	8002b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	220f      	movs	r2, #15
 8002aee:	401a      	ands	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	23f0      	movs	r3, #240	; 0xf0
 8002afc:	039b      	lsls	r3, r3, #14
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b008      	add	sp, #32
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	00001388 	.word	0x00001388
 8002b20:	efffffff 	.word	0xefffffff
 8002b24:	feffffff 	.word	0xfeffffff
 8002b28:	ffc2ffff 	.word	0xffc2ffff

08002b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b3      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d911      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	4393      	bics	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e09a      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d015      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	d006      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002b8c:	21e0      	movs	r1, #224	; 0xe0
 8002b8e:	00c9      	lsls	r1, r1, #3
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	22f0      	movs	r2, #240	; 0xf0
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	029b      	lsls	r3, r3, #10
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d114      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06e      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	049b      	lsls	r3, r3, #18
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e062      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e05b      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4393      	bics	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fbbc 	bl	8001380 <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0e:	f7fe fbb7 	bl	8001380 <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x18c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e042      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	220c      	movs	r2, #12
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1ec      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d211      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x184>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e020      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_RCC_ClockConfig+0x190>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c84:	f000 f820 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c88:	0001      	movs	r1, r0
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x188>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	220f      	movs	r2, #15
 8002c92:	4013      	ands	r3, r2
 8002c94:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x194>)
 8002c96:	5cd3      	ldrb	r3, [r2, r3]
 8002c98:	000a      	movs	r2, r1
 8002c9a:	40da      	lsrs	r2, r3
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x198>)
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fe fb27 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	00001388 	.word	0x00001388
 8002cbc:	fffff8ff 	.word	0xfffff8ff
 8002cc0:	08005dd0 	.word	0x08005dd0
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	220c      	movs	r2, #12
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x36>
 8002cf6:	e02c      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cfa:	613b      	str	r3, [r7, #16]
      break;
 8002cfc:	e02c      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	220f      	movs	r2, #15
 8002d04:	4013      	ands	r3, r2
 8002d06:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
 8002d0a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	220f      	movs	r2, #15
 8002d12:	4013      	ands	r3, r2
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	025b      	lsls	r3, r3, #9
 8002d20:	4013      	ands	r3, r2
 8002d22:	d009      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	4810      	ldr	r0, [pc, #64]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d28:	f7fd f9ee 	bl	8000108 <__udivsi3>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	001a      	movs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4353      	muls	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e009      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	000a      	movs	r2, r1
 8002d3c:	0152      	lsls	r2, r2, #5
 8002d3e:	1a52      	subs	r2, r2, r1
 8002d40:	0193      	lsls	r3, r2, #6
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	185b      	adds	r3, r3, r1
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	e002      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d54:	613b      	str	r3, [r7, #16]
      break;
 8002d56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d58:	693b      	ldr	r3, [r7, #16]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40021000 	.word	0x40021000
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	08005de8 	.word	0x08005de8
 8002d70:	08005df8 	.word	0x08005df8

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	0001      	movs	r1, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	40d9      	lsrs	r1, r3
 8002da2:	000b      	movs	r3, r1
}    
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08005de0 	.word	0x08005de0

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	025b      	lsls	r3, r3, #9
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002dd0:	e08e      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2017      	movs	r0, #23
 8002dd4:	183b      	adds	r3, r7, r0
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	055b      	lsls	r3, r3, #21
 8002de2:	4013      	ands	r3, r2
 8002de4:	d110      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0549      	lsls	r1, r1, #21
 8002df0:	430a      	orrs	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	055b      	lsls	r3, r3, #21
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b4c      	ldr	r3, [pc, #304]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d11a      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	0049      	lsls	r1, r1, #1
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7fe faad 	bl	8001380 <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	e008      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe faa8 	bl	8001380 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e077      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4013      	ands	r3, r2
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	23c0      	movs	r3, #192	; 0xc0
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d034      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	23c0      	movs	r3, #192	; 0xc0
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d02c      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e6c:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a33      	ldr	r2, [pc, #204]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0249      	lsls	r1, r1, #9
 8002e80:	430a      	orrs	r2, r1
 8002e82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e8a:	492e      	ldr	r1, [pc, #184]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fa6f 	bl	8001380 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	e009      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fa6a 	bl	8001380 <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e038      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eda:	2317      	movs	r3, #23
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eea:	4918      	ldr	r1, [pc, #96]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	2203      	movs	r2, #3
 8002f00:	4393      	bics	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2220      	movs	r2, #32
 8002f14:	4013      	ands	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f18:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4393      	bics	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b006      	add	sp, #24
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	fffffcff 	.word	0xfffffcff
 8002f44:	fffeffff 	.word	0xfffeffff
 8002f48:	00001388 	.word	0x00001388
 8002f4c:	efffffff 	.word	0xefffffff

08002f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0a8      	b.n	80030b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	2382      	movs	r3, #130	; 0x82
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d009      	beq.n	8002f8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
 8002f7c:	e005      	b.n	8002f8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	225d      	movs	r2, #93	; 0x5d
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	225c      	movs	r2, #92	; 0x5c
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fd ff9c 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	225d      	movs	r2, #93	; 0x5d
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	438a      	bics	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	23e0      	movs	r3, #224	; 0xe0
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d902      	bls.n	8002fd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e002      	b.n	8002fdc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	015b      	lsls	r3, r3, #5
 8002fda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	23f0      	movs	r3, #240	; 0xf0
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d008      	beq.n	8002ffa <HAL_SPI_Init+0xaa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	23e0      	movs	r3, #224	; 0xe0
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	2382      	movs	r3, #130	; 0x82
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	401a      	ands	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6899      	ldr	r1, [r3, #8]
 8003008:	2384      	movs	r3, #132	; 0x84
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	400b      	ands	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2102      	movs	r1, #2
 8003016:	400b      	ands	r3, r1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2101      	movs	r1, #1
 8003020:	400b      	ands	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	400b      	ands	r3, r1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2138      	movs	r1, #56	; 0x38
 8003036:	400b      	ands	r3, r1
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	400b      	ands	r3, r1
 8003042:	431a      	orrs	r2, r3
 8003044:	0011      	movs	r1, r2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	401a      	ands	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	2204      	movs	r2, #4
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	2110      	movs	r1, #16
 8003068:	400b      	ands	r3, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	2108      	movs	r1, #8
 8003072:	400b      	ands	r3, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	23f0      	movs	r3, #240	; 0xf0
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	400b      	ands	r3, r1
 8003080:	431a      	orrs	r2, r3
 8003082:	0011      	movs	r1, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	015b      	lsls	r3, r3, #5
 800308a:	401a      	ands	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4907      	ldr	r1, [pc, #28]	; (80030bc <HAL_SPI_Init+0x16c>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	225d      	movs	r2, #93	; 0x5d
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	fffff7ff 	.word	0xfffff7ff

080030c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030d0:	231f      	movs	r3, #31
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	225c      	movs	r2, #92	; 0x5c
 80030dc:	5c9b      	ldrb	r3, [r3, r2]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Transmit+0x26>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e147      	b.n	8003376 <HAL_SPI_Transmit+0x2b6>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	225c      	movs	r2, #92	; 0x5c
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ee:	f7fe f947 	bl	8001380 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030f6:	2316      	movs	r3, #22
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	1dba      	adds	r2, r7, #6
 80030fc:	8812      	ldrh	r2, [r2, #0]
 80030fe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	225d      	movs	r2, #93	; 0x5d
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d004      	beq.n	8003116 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800310c:	231f      	movs	r3, #31
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
    goto error;
 8003114:	e128      	b.n	8003368 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_SPI_Transmit+0x64>
 800311c:	1dbb      	adds	r3, r7, #6
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003124:	231f      	movs	r3, #31
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
    goto error;
 800312c:	e11c      	b.n	8003368 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	225d      	movs	r2, #93	; 0x5d
 8003132:	2103      	movs	r1, #3
 8003134:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1dba      	adds	r2, r7, #6
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1dba      	adds	r2, r7, #6
 800314e:	8812      	ldrh	r2, [r2, #0]
 8003150:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2244      	movs	r2, #68	; 0x44
 800315c:	2100      	movs	r1, #0
 800315e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2246      	movs	r2, #70	; 0x46
 8003164:	2100      	movs	r1, #0
 8003166:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	429a      	cmp	r2, r3
 800317e:	d110      	bne.n	80031a2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2180      	movs	r1, #128	; 0x80
 800319c:	01c9      	lsls	r1, r1, #7
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2240      	movs	r2, #64	; 0x40
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d007      	beq.n	80031c0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2140      	movs	r1, #64	; 0x40
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	23e0      	movs	r3, #224	; 0xe0
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d952      	bls.n	8003272 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_SPI_Transmit+0x11e>
 80031d4:	2316      	movs	r3, #22
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d143      	bne.n	8003266 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	881a      	ldrh	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c9a      	adds	r2, r3, #2
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003202:	e030      	b.n	8003266 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d112      	bne.n	8003238 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	1c9a      	adds	r2, r3, #2
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003236:	e016      	b.n	8003266 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003238:	f7fe f8a2 	bl	8001380 <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d802      	bhi.n	800324e <HAL_SPI_Transmit+0x18e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x194>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2203      	movs	r2, #3
 800325a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	225d      	movs	r2, #93	; 0x5d
 8003260:	2101      	movs	r1, #1
 8003262:	5499      	strb	r1, [r3, r2]
          goto error;
 8003264:	e080      	b.n	8003368 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1c9      	bne.n	8003204 <HAL_SPI_Transmit+0x144>
 8003270:	e053      	b.n	800331a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_SPI_Transmit+0x1c4>
 800327a:	2316      	movs	r3, #22
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d145      	bne.n	8003310 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	7812      	ldrb	r2, [r2, #0]
 8003290:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80032aa:	e031      	b.n	8003310 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2202      	movs	r2, #2
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d113      	bne.n	80032e2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032e0:	e016      	b.n	8003310 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032e2:	f7fe f84d 	bl	8001380 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d802      	bhi.n	80032f8 <HAL_SPI_Transmit+0x238>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	d102      	bne.n	80032fe <HAL_SPI_Transmit+0x23e>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80032fe:	231f      	movs	r3, #31
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2203      	movs	r2, #3
 8003304:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	225d      	movs	r2, #93	; 0x5d
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
          goto error;
 800330e:	e02b      	b.n	8003368 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1c8      	bne.n	80032ac <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 fe0b 	bl	8003f3c <SPI_EndRxTxTransaction>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003356:	231f      	movs	r3, #31
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e003      	b.n	8003368 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	225d      	movs	r2, #93	; 0x5d
 8003364:	2101      	movs	r1, #1
 8003366:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	225c      	movs	r2, #92	; 0x5c
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003370:	231f      	movs	r3, #31
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b008      	add	sp, #32
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	1dbb      	adds	r3, r7, #6
 800338e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003390:	2117      	movs	r1, #23
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	225d      	movs	r2, #93	; 0x5d
 800339c:	5c9b      	ldrb	r3, [r3, r2]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d003      	beq.n	80033ac <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2202      	movs	r2, #2
 80033a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80033aa:	e12b      	b.n	8003604 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	2382      	movs	r3, #130	; 0x82
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d113      	bne.n	80033e0 <HAL_SPI_Receive+0x60>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	225d      	movs	r2, #93	; 0x5d
 80033c4:	2104      	movs	r1, #4
 80033c6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033c8:	1dbb      	adds	r3, r7, #6
 80033ca:	881c      	ldrh	r4, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	0023      	movs	r3, r4
 80033d8:	f000 f924 	bl	8003624 <HAL_SPI_TransmitReceive>
 80033dc:	0003      	movs	r3, r0
 80033de:	e118      	b.n	8003612 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	225c      	movs	r2, #92	; 0x5c
 80033e4:	5c9b      	ldrb	r3, [r3, r2]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_Receive+0x6e>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e111      	b.n	8003612 <HAL_SPI_Receive+0x292>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	225c      	movs	r2, #92	; 0x5c
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f6:	f7fd ffc3 	bl	8001380 <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_SPI_Receive+0x8c>
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d104      	bne.n	8003416 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800340c:	2317      	movs	r3, #23
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    goto error;
 8003414:	e0f6      	b.n	8003604 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	225d      	movs	r2, #93	; 0x5d
 800341a:	2104      	movs	r1, #4
 800341c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1dba      	adds	r2, r7, #6
 800342e:	2144      	movs	r1, #68	; 0x44
 8003430:	8812      	ldrh	r2, [r2, #0]
 8003432:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1dba      	adds	r2, r7, #6
 8003438:	2146      	movs	r1, #70	; 0x46
 800343a:	8812      	ldrh	r2, [r2, #0]
 800343c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	23e0      	movs	r3, #224	; 0xe0
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	429a      	cmp	r2, r3
 8003466:	d908      	bls.n	800347a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	496a      	ldr	r1, [pc, #424]	; (800361c <HAL_SPI_Receive+0x29c>)
 8003474:	400a      	ands	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	e008      	b.n	800348c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	0149      	lsls	r1, r1, #5
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	429a      	cmp	r2, r3
 8003496:	d10f      	bne.n	80034b8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	438a      	bics	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	495b      	ldr	r1, [pc, #364]	; (8003620 <HAL_SPI_Receive+0x2a0>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d007      	beq.n	80034d6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	23e0      	movs	r3, #224	; 0xe0
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	429a      	cmp	r2, r3
 80034e0:	d900      	bls.n	80034e4 <HAL_SPI_Receive+0x164>
 80034e2:	e071      	b.n	80035c8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034e4:	e035      	b.n	8003552 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2201      	movs	r2, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d117      	bne.n	8003524 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	001a      	movs	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2246      	movs	r2, #70	; 0x46
 8003514:	5a9b      	ldrh	r3, [r3, r2]
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b299      	uxth	r1, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2246      	movs	r2, #70	; 0x46
 8003520:	5299      	strh	r1, [r3, r2]
 8003522:	e016      	b.n	8003552 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003524:	f7fd ff2c 	bl	8001380 <HAL_GetTick>
 8003528:	0002      	movs	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d802      	bhi.n	800353a <HAL_SPI_Receive+0x1ba>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	3301      	adds	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_SPI_Receive+0x1c0>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003540:	2317      	movs	r3, #23
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	2203      	movs	r2, #3
 8003546:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	225d      	movs	r2, #93	; 0x5d
 800354c:	2101      	movs	r1, #1
 800354e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003550:	e058      	b.n	8003604 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2246      	movs	r2, #70	; 0x46
 8003556:	5a9b      	ldrh	r3, [r3, r2]
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1c3      	bne.n	80034e6 <HAL_SPI_Receive+0x166>
 800355e:	e039      	b.n	80035d4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	2b01      	cmp	r3, #1
 800356c:	d115      	bne.n	800359a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	b292      	uxth	r2, r2
 800357a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2246      	movs	r2, #70	; 0x46
 800358a:	5a9b      	ldrh	r3, [r3, r2]
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b299      	uxth	r1, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2246      	movs	r2, #70	; 0x46
 8003596:	5299      	strh	r1, [r3, r2]
 8003598:	e016      	b.n	80035c8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800359a:	f7fd fef1 	bl	8001380 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d802      	bhi.n	80035b0 <HAL_SPI_Receive+0x230>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_SPI_Receive+0x236>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80035b6:	2317      	movs	r3, #23
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2203      	movs	r2, #3
 80035bc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	225d      	movs	r2, #93	; 0x5d
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
          goto error;
 80035c6:	e01d      	b.n	8003604 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2246      	movs	r2, #70	; 0x46
 80035cc:	5a9b      	ldrh	r3, [r3, r2]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1c5      	bne.n	8003560 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	6839      	ldr	r1, [r7, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fc50 	bl	8003e80 <SPI_EndRxTransaction>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d002      	beq.n	80035ea <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80035f2:	2317      	movs	r3, #23
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e003      	b.n	8003604 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	225d      	movs	r2, #93	; 0x5d
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	225c      	movs	r2, #92	; 0x5c
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800360c:	2317      	movs	r3, #23
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	781b      	ldrb	r3, [r3, #0]
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b007      	add	sp, #28
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	ffffefff 	.word	0xffffefff
 8003620:	ffffbfff 	.word	0xffffbfff

08003624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	001a      	movs	r2, r3
 8003632:	1cbb      	adds	r3, r7, #2
 8003634:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003636:	2301      	movs	r3, #1
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800363a:	2323      	movs	r3, #35	; 0x23
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	225c      	movs	r2, #92	; 0x5c
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x2c>
 800364c:	2302      	movs	r3, #2
 800364e:	e1c4      	b.n	80039da <HAL_SPI_TransmitReceive+0x3b6>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	225c      	movs	r2, #92	; 0x5c
 8003654:	2101      	movs	r1, #1
 8003656:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003658:	f7fd fe92 	bl	8001380 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003660:	201b      	movs	r0, #27
 8003662:	183b      	adds	r3, r7, r0
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	215d      	movs	r1, #93	; 0x5d
 8003668:	5c52      	ldrb	r2, [r2, r1]
 800366a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003672:	2312      	movs	r3, #18
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	1cba      	adds	r2, r7, #2
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800367c:	183b      	adds	r3, r7, r0
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d011      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x84>
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	2382      	movs	r3, #130	; 0x82
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_SPI_TransmitReceive+0x7a>
 8003696:	183b      	adds	r3, r7, r0
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d004      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800369e:	2323      	movs	r3, #35	; 0x23
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2202      	movs	r2, #2
 80036a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80036a6:	e191      	b.n	80039cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x98>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x98>
 80036b4:	1cbb      	adds	r3, r7, #2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80036bc:	2323      	movs	r3, #35	; 0x23
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80036c4:	e182      	b.n	80039cc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	225d      	movs	r2, #93	; 0x5d
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d003      	beq.n	80036da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	225d      	movs	r2, #93	; 0x5d
 80036d6:	2105      	movs	r1, #5
 80036d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1cba      	adds	r2, r7, #2
 80036ea:	2146      	movs	r1, #70	; 0x46
 80036ec:	8812      	ldrh	r2, [r2, #0]
 80036ee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1cba      	adds	r2, r7, #2
 80036f4:	2144      	movs	r1, #68	; 0x44
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1cba      	adds	r2, r7, #2
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1cba      	adds	r2, r7, #2
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	23e0      	movs	r3, #224	; 0xe0
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	429a      	cmp	r2, r3
 8003726:	d908      	bls.n	800373a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	49ac      	ldr	r1, [pc, #688]	; (80039e4 <HAL_SPI_TransmitReceive+0x3c0>)
 8003734:	400a      	ands	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e008      	b.n	800374c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0149      	lsls	r1, r1, #5
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	4013      	ands	r3, r2
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d007      	beq.n	800376a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2140      	movs	r1, #64	; 0x40
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	23e0      	movs	r3, #224	; 0xe0
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	429a      	cmp	r2, r3
 8003774:	d800      	bhi.n	8003778 <HAL_SPI_TransmitReceive+0x154>
 8003776:	e083      	b.n	8003880 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_SPI_TransmitReceive+0x168>
 8003780:	2312      	movs	r3, #18
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d000      	beq.n	800378c <HAL_SPI_TransmitReceive+0x168>
 800378a:	e06d      	b.n	8003868 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b0:	e05a      	b.n	8003868 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d11b      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x1d4>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x1d4>
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d113      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2201      	movs	r2, #1
 8003800:	4013      	ands	r3, r2
 8003802:	2b01      	cmp	r3, #1
 8003804:	d11c      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x21c>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2246      	movs	r2, #70	; 0x46
 800380a:	5a9b      	ldrh	r3, [r3, r2]
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	b292      	uxth	r2, r2
 800381e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2246      	movs	r2, #70	; 0x46
 800382e:	5a9b      	ldrh	r3, [r3, r2]
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b299      	uxth	r1, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2246      	movs	r2, #70	; 0x46
 800383a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003840:	f7fd fd9e 	bl	8001380 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	429a      	cmp	r2, r3
 800384e:	d80b      	bhi.n	8003868 <HAL_SPI_TransmitReceive+0x244>
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3301      	adds	r3, #1
 8003854:	d008      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003856:	2323      	movs	r3, #35	; 0x23
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2203      	movs	r2, #3
 800385c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	225d      	movs	r2, #93	; 0x5d
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
        goto error;
 8003866:	e0b1      	b.n	80039cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d19f      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x18e>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2246      	movs	r2, #70	; 0x46
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d199      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x18e>
 800387e:	e089      	b.n	8003994 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x270>
 8003888:	2312      	movs	r3, #18
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d000      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x270>
 8003892:	e074      	b.n	800397e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ba:	e060      	b.n	800397e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d11c      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x2e0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d017      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x2e0>
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d114      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	2b01      	cmp	r3, #1
 8003910:	d11e      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x32c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2246      	movs	r2, #70	; 0x46
 8003916:	5a9b      	ldrh	r3, [r3, r2]
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	001a      	movs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2246      	movs	r2, #70	; 0x46
 800393e:	5a9b      	ldrh	r3, [r3, r2]
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b299      	uxth	r1, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2246      	movs	r2, #70	; 0x46
 800394a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800394c:	2301      	movs	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003950:	f7fd fd16 	bl	8001380 <HAL_GetTick>
 8003954:	0002      	movs	r2, r0
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395c:	429a      	cmp	r2, r3
 800395e:	d802      	bhi.n	8003966 <HAL_SPI_TransmitReceive+0x342>
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	3301      	adds	r3, #1
 8003964:	d102      	bne.n	800396c <HAL_SPI_TransmitReceive+0x348>
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800396c:	2323      	movs	r3, #35	; 0x23
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2203      	movs	r2, #3
 8003972:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	225d      	movs	r2, #93	; 0x5d
 8003978:	2101      	movs	r1, #1
 800397a:	5499      	strb	r1, [r3, r2]
        goto error;
 800397c:	e026      	b.n	80039cc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d199      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x298>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2246      	movs	r2, #70	; 0x46
 800398c:	5a9b      	ldrh	r3, [r3, r2]
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d193      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 face 	bl	8003f3c <SPI_EndRxTxTransaction>
 80039a0:	1e03      	subs	r3, r0, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80039a4:	2323      	movs	r3, #35	; 0x23
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80039ba:	2323      	movs	r3, #35	; 0x23
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e003      	b.n	80039cc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	225d      	movs	r2, #93	; 0x5d
 80039c8:	2101      	movs	r1, #1
 80039ca:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	225c      	movs	r2, #92	; 0x5c
 80039d0:	2100      	movs	r1, #0
 80039d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80039d4:	2323      	movs	r3, #35	; 0x23
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	781b      	ldrb	r3, [r3, #0]
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b00a      	add	sp, #40	; 0x28
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	ffffefff 	.word	0xffffefff

080039e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	001a      	movs	r2, r3
 8003a06:	2301      	movs	r3, #1
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d10f      	bne.n	8003a2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a12:	d00b      	beq.n	8003a2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	001a      	movs	r2, r3
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d005      	beq.n	8003a2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	0010      	movs	r0, r2
 8003a28:	4798      	blx	r3
    return;
 8003a2a:	e0d5      	b.n	8003bd8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	001a      	movs	r2, r3
 8003a32:	2301      	movs	r3, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <HAL_SPI_IRQHandler+0x68>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	09db      	lsrs	r3, r3, #7
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4013      	ands	r3, r2
 8003a42:	d005      	beq.n	8003a50 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	0010      	movs	r0, r2
 8003a4c:	4798      	blx	r3
    return;
 8003a4e:	e0c3      	b.n	8003bd8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	001a      	movs	r2, r3
 8003a56:	2301      	movs	r3, #1
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d10c      	bne.n	8003a76 <HAL_SPI_IRQHandler+0x8e>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	001a      	movs	r2, r3
 8003a62:	2301      	movs	r3, #1
 8003a64:	4013      	ands	r3, r2
 8003a66:	d106      	bne.n	8003a76 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	2301      	movs	r3, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	d100      	bne.n	8003a76 <HAL_SPI_IRQHandler+0x8e>
 8003a74:	e0b0      	b.n	8003bd8 <HAL_SPI_IRQHandler+0x1f0>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d100      	bne.n	8003a84 <HAL_SPI_IRQHandler+0x9c>
 8003a82:	e0a9      	b.n	8003bd8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	001a      	movs	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d023      	beq.n	8003ad8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	225d      	movs	r2, #93	; 0x5d
 8003a94:	5c9b      	ldrb	r3, [r3, r2]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d011      	beq.n	8003ac0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	e00b      	b.n	8003ad8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
        return;
 8003ad6:	e07f      	b.n	8003bd8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	001a      	movs	r2, r3
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d014      	beq.n	8003b0e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	2201      	movs	r2, #1
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	438a      	bics	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	001a      	movs	r2, r3
 8003b14:	2301      	movs	r3, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00c      	beq.n	8003b34 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	2208      	movs	r2, #8
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d04c      	beq.n	8003bd6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	21e0      	movs	r1, #224	; 0xe0
 8003b48:	438a      	bics	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	225d      	movs	r2, #93	; 0x5d
 8003b50:	2101      	movs	r1, #1
 8003b52:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	2202      	movs	r2, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <HAL_SPI_IRQHandler+0x17c>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	d032      	beq.n	8003bca <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2103      	movs	r1, #3
 8003b70:	438a      	bics	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <HAL_SPI_IRQHandler+0x1f8>)
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fd fd85 	bl	8001698 <HAL_DMA_Abort_IT>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_SPI_IRQHandler+0x1f8>)
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7fd fd70 	bl	8001698 <HAL_DMA_Abort_IT>
 8003bb8:	1e03      	subs	r3, r0, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	2240      	movs	r2, #64	; 0x40
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003bc8:	e004      	b.n	8003bd4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 f809 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003bd2:	e000      	b.n	8003bd6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003bd4:	46c0      	nop			; (mov r8, r8)
    return;
 8003bd6:	46c0      	nop			; (mov r8, r8)
  }
}
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b008      	add	sp, #32
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	08003bf5 	.word	0x08003bf5

08003be4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2246      	movs	r2, #70	; 0x46
 8003c06:	2100      	movs	r1, #0
 8003c08:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7ff ffe6 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	1dfb      	adds	r3, r7, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c30:	f7fd fba6 	bl	8001380 <HAL_GetTick>
 8003c34:	0002      	movs	r2, r0
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c40:	f7fd fb9e 	bl	8001380 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c48:	4b3a      	ldr	r3, [pc, #232]	; (8003d34 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	015b      	lsls	r3, r3, #5
 8003c4e:	0d1b      	lsrs	r3, r3, #20
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	4353      	muls	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c56:	e058      	b.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	d055      	beq.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c5e:	f7fd fb8f 	bl	8001380 <HAL_GetTick>
 8003c62:	0002      	movs	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d902      	bls.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d142      	bne.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	21e0      	movs	r1, #224	; 0xe0
 8003c80:	438a      	bics	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	2382      	movs	r3, #130	; 0x82
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d113      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d005      	beq.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d107      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2140      	movs	r1, #64	; 0x40
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	019b      	lsls	r3, r3, #6
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d110      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	491a      	ldr	r1, [pc, #104]	; (8003d38 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	0189      	lsls	r1, r1, #6
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	225d      	movs	r2, #93	; 0x5d
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	225c      	movs	r2, #92	; 0x5c
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e017      	b.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	425a      	negs	r2, r3
 8003d1a:	4153      	adcs	r3, r2
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	001a      	movs	r2, r3
 8003d20:	1dfb      	adds	r3, r7, #7
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d197      	bne.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b008      	add	sp, #32
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000000 	.word	0x20000000
 8003d38:	ffffdfff 	.word	0xffffdfff

08003d3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d4a:	2317      	movs	r3, #23
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d52:	f7fd fb15 	bl	8001380 <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	18d3      	adds	r3, r2, r3
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d62:	f7fd fb0d 	bl	8001380 <HAL_GetTick>
 8003d66:	0003      	movs	r3, r0
 8003d68:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d72:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	0013      	movs	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	00da      	lsls	r2, r3, #3
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	0d1b      	lsrs	r3, r3, #20
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	4353      	muls	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d88:	e068      	b.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	23c0      	movs	r3, #192	; 0xc0
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d10a      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	2117      	movs	r1, #23
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	d055      	beq.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db0:	f7fd fae6 	bl	8001380 <HAL_GetTick>
 8003db4:	0002      	movs	r2, r0
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d902      	bls.n	8003dc6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d142      	bne.n	8003e4c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	21e0      	movs	r1, #224	; 0xe0
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	2382      	movs	r3, #130	; 0x82
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d113      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d005      	beq.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d107      	bne.n	8003e0a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2140      	movs	r1, #64	; 0x40
 8003e06:	438a      	bics	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d110      	bne.n	8003e38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4916      	ldr	r1, [pc, #88]	; (8003e7c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003e22:	400a      	ands	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	0189      	lsls	r1, r1, #6
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	225d      	movs	r2, #93	; 0x5d
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	225c      	movs	r2, #92	; 0x5c
 8003e44:	2100      	movs	r1, #0
 8003e46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e010      	b.n	8003e6e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d18e      	bne.n	8003d8a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b00a      	add	sp, #40	; 0x28
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	20000000 	.word	0x20000000
 8003e7c:	ffffdfff 	.word	0xffffdfff

08003e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	2382      	movs	r3, #130	; 0x82
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d113      	bne.n	8003ec0 <SPI_EndRxTransaction+0x40>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d005      	beq.n	8003eb0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2140      	movs	r1, #64	; 0x40
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0013      	movs	r3, r2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	f7ff fea7 	bl	8003c20 <SPI_WaitFlagStateUntilTimeout>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eda:	2220      	movs	r2, #32
 8003edc:	431a      	orrs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e026      	b.n	8003f34 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	2382      	movs	r3, #130	; 0x82
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d11f      	bne.n	8003f32 <SPI_EndRxTransaction+0xb2>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d005      	beq.n	8003f0a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d113      	bne.n	8003f32 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	23c0      	movs	r3, #192	; 0xc0
 8003f0e:	00d9      	lsls	r1, r3, #3
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	0013      	movs	r3, r2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f7ff ff0f 	bl	8003d3c <SPI_WaitFifoStateUntilTimeout>
 8003f1e:	1e03      	subs	r3, r0, #0
 8003f20:	d007      	beq.n	8003f32 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	2220      	movs	r2, #32
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e000      	b.n	8003f34 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b004      	add	sp, #16
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	23c0      	movs	r3, #192	; 0xc0
 8003f4c:	0159      	lsls	r1, r3, #5
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	0013      	movs	r3, r2
 8003f56:	2200      	movs	r2, #0
 8003f58:	f7ff fef0 	bl	8003d3c <SPI_WaitFifoStateUntilTimeout>
 8003f5c:	1e03      	subs	r3, r0, #0
 8003f5e:	d007      	beq.n	8003f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	2220      	movs	r2, #32
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e027      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	0013      	movs	r3, r2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2180      	movs	r1, #128	; 0x80
 8003f7e:	f7ff fe4f 	bl	8003c20 <SPI_WaitFlagStateUntilTimeout>
 8003f82:	1e03      	subs	r3, r0, #0
 8003f84:	d007      	beq.n	8003f96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e014      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	23c0      	movs	r3, #192	; 0xc0
 8003f9a:	00d9      	lsls	r1, r3, #3
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	0013      	movs	r3, r2
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f7ff fec9 	bl	8003d3c <SPI_WaitFifoStateUntilTimeout>
 8003faa:	1e03      	subs	r3, r0, #0
 8003fac:	d007      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e000      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b004      	add	sp, #16
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e042      	b.n	8004060 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	223d      	movs	r2, #61	; 0x3d
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	223c      	movs	r2, #60	; 0x3c
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fc ffcb 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	223d      	movs	r2, #61	; 0x3d
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	0019      	movs	r1, r3
 8004008:	0010      	movs	r0, r2
 800400a:	f000 fc25 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2246      	movs	r2, #70	; 0x46
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223e      	movs	r2, #62	; 0x3e
 800401a:	2101      	movs	r1, #1
 800401c:	5499      	strb	r1, [r3, r2]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	223f      	movs	r2, #63	; 0x3f
 8004022:	2101      	movs	r1, #1
 8004024:	5499      	strb	r1, [r3, r2]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	2101      	movs	r1, #1
 800402c:	5499      	strb	r1, [r3, r2]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2241      	movs	r2, #65	; 0x41
 8004032:	2101      	movs	r1, #1
 8004034:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2242      	movs	r2, #66	; 0x42
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2243      	movs	r2, #67	; 0x43
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2244      	movs	r2, #68	; 0x44
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2245      	movs	r2, #69	; 0x45
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	223d      	movs	r2, #61	; 0x3d
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	223d      	movs	r2, #61	; 0x3d
 8004074:	5c9b      	ldrb	r3, [r3, r2]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d001      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e036      	b.n	80040ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	223d      	movs	r2, #61	; 0x3d
 8004084:	2102      	movs	r1, #2
 8004086:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_TIM_Base_Start_IT+0x90>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00a      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x50>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	05db      	lsls	r3, r3, #23
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d004      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x50>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <HAL_TIM_Base_Start_IT+0x94>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d111      	bne.n	80040dc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2207      	movs	r2, #7
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d010      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	e007      	b.n	80040ec <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2101      	movs	r1, #1
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40000400 	.word	0x40000400

08004100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e042      	b.n	8004198 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	223d      	movs	r2, #61	; 0x3d
 8004116:	5c9b      	ldrb	r3, [r3, r2]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d107      	bne.n	800412e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223c      	movs	r2, #60	; 0x3c
 8004122:	2100      	movs	r1, #0
 8004124:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f000 f839 	bl	80041a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	223d      	movs	r2, #61	; 0x3d
 8004132:	2102      	movs	r1, #2
 8004134:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	0019      	movs	r1, r3
 8004140:	0010      	movs	r0, r2
 8004142:	f000 fb89 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2246      	movs	r2, #70	; 0x46
 800414a:	2101      	movs	r1, #1
 800414c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	223e      	movs	r2, #62	; 0x3e
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	223f      	movs	r2, #63	; 0x3f
 800415a:	2101      	movs	r1, #1
 800415c:	5499      	strb	r1, [r3, r2]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	2101      	movs	r1, #1
 8004164:	5499      	strb	r1, [r3, r2]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2241      	movs	r2, #65	; 0x41
 800416a:	2101      	movs	r1, #1
 800416c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2242      	movs	r2, #66	; 0x42
 8004172:	2101      	movs	r1, #1
 8004174:	5499      	strb	r1, [r3, r2]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2243      	movs	r2, #67	; 0x43
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2244      	movs	r2, #68	; 0x44
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2245      	movs	r2, #69	; 0x45
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	223d      	movs	r2, #61	; 0x3d
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b002      	add	sp, #8
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <HAL_TIM_PWM_Start+0x22>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	223e      	movs	r2, #62	; 0x3e
 80041c4:	5c9b      	ldrb	r3, [r3, r2]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	4193      	sbcs	r3, r2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e01f      	b.n	8004212 <HAL_TIM_PWM_Start+0x62>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d108      	bne.n	80041ea <HAL_TIM_PWM_Start+0x3a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	223f      	movs	r2, #63	; 0x3f
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	1e5a      	subs	r2, r3, #1
 80041e4:	4193      	sbcs	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e013      	b.n	8004212 <HAL_TIM_PWM_Start+0x62>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d108      	bne.n	8004202 <HAL_TIM_PWM_Start+0x52>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	5c9b      	ldrb	r3, [r3, r2]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	4193      	sbcs	r3, r2
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e007      	b.n	8004212 <HAL_TIM_PWM_Start+0x62>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2241      	movs	r2, #65	; 0x41
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	1e5a      	subs	r2, r3, #1
 800420e:	4193      	sbcs	r3, r2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06a      	b.n	80042f0 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0x7a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	223e      	movs	r2, #62	; 0x3e
 8004224:	2102      	movs	r1, #2
 8004226:	5499      	strb	r1, [r3, r2]
 8004228:	e013      	b.n	8004252 <HAL_TIM_PWM_Start+0xa2>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0x8a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	223f      	movs	r2, #63	; 0x3f
 8004234:	2102      	movs	r1, #2
 8004236:	5499      	strb	r1, [r3, r2]
 8004238:	e00b      	b.n	8004252 <HAL_TIM_PWM_Start+0xa2>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0x9a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2240      	movs	r2, #64	; 0x40
 8004244:	2102      	movs	r1, #2
 8004246:	5499      	strb	r1, [r3, r2]
 8004248:	e003      	b.n	8004252 <HAL_TIM_PWM_Start+0xa2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2241      	movs	r2, #65	; 0x41
 800424e:	2102      	movs	r1, #2
 8004250:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6839      	ldr	r1, [r7, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	0018      	movs	r0, r3
 800425c:	f000 fdfa 	bl	8004e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <HAL_TIM_PWM_Start+0x148>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIM_PWM_Start+0xce>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a23      	ldr	r2, [pc, #140]	; (80042fc <HAL_TIM_PWM_Start+0x14c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIM_PWM_Start+0xce>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_TIM_PWM_Start+0x150>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_Start+0xd2>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_TIM_PWM_Start+0xd4>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	0209      	lsls	r1, r1, #8
 8004296:	430a      	orrs	r2, r1
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_TIM_PWM_Start+0x148>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00a      	beq.n	80042ba <HAL_TIM_PWM_Start+0x10a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d004      	beq.n	80042ba <HAL_TIM_PWM_Start+0x10a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a13      	ldr	r2, [pc, #76]	; (8004304 <HAL_TIM_PWM_Start+0x154>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d111      	bne.n	80042de <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2207      	movs	r2, #7
 80042c2:	4013      	ands	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d010      	beq.n	80042ee <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2101      	movs	r1, #1
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	e007      	b.n	80042ee <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2101      	movs	r1, #1
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b004      	add	sp, #16
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800
 8004304:	40000400 	.word	0x40000400

08004308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2202      	movs	r2, #2
 8004324:	4013      	ands	r3, r2
 8004326:	d021      	beq.n	800436c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2202      	movs	r2, #2
 800432c:	4013      	ands	r3, r2
 800432e:	d01d      	beq.n	800436c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2203      	movs	r2, #3
 8004336:	4252      	negs	r2, r2
 8004338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2203      	movs	r2, #3
 8004348:	4013      	ands	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 fa6a 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 8004354:	e007      	b.n	8004366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f000 fa5d 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 fa69 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2204      	movs	r2, #4
 8004370:	4013      	ands	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2204      	movs	r2, #4
 8004378:	4013      	ands	r3, r2
 800437a:	d01e      	beq.n	80043ba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2205      	movs	r2, #5
 8004382:	4252      	negs	r2, r2
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4013      	ands	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f000 fa43 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 80043a2:	e007      	b.n	80043b4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 fa36 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 fa42 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2208      	movs	r2, #8
 80043be:	4013      	ands	r3, r2
 80043c0:	d021      	beq.n	8004406 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2208      	movs	r2, #8
 80043c6:	4013      	ands	r3, r2
 80043c8:	d01d      	beq.n	8004406 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2209      	movs	r2, #9
 80043d0:	4252      	negs	r2, r2
 80043d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	2203      	movs	r2, #3
 80043e2:	4013      	ands	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 fa1d 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 80043ee:	e007      	b.n	8004400 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 fa10 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fa1c 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2210      	movs	r2, #16
 800440a:	4013      	ands	r3, r2
 800440c:	d022      	beq.n	8004454 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2210      	movs	r2, #16
 8004412:	4013      	ands	r3, r2
 8004414:	d01e      	beq.n	8004454 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2211      	movs	r2, #17
 800441c:	4252      	negs	r2, r2
 800441e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2208      	movs	r2, #8
 8004424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	23c0      	movs	r3, #192	; 0xc0
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4013      	ands	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0018      	movs	r0, r3
 8004438:	f000 f9f6 	bl	8004828 <HAL_TIM_IC_CaptureCallback>
 800443c:	e007      	b.n	800444e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f9e9 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f9f5 	bl	8004838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2201      	movs	r2, #1
 8004458:	4013      	ands	r3, r2
 800445a:	d00c      	beq.n	8004476 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	4013      	ands	r3, r2
 8004462:	d008      	beq.n	8004476 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2202      	movs	r2, #2
 800446a:	4252      	negs	r2, r2
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f7fc fef7 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2280      	movs	r2, #128	; 0x80
 800447a:	4013      	ands	r3, r2
 800447c:	d00c      	beq.n	8004498 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2280      	movs	r2, #128	; 0x80
 8004482:	4013      	ands	r3, r2
 8004484:	d008      	beq.n	8004498 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2281      	movs	r2, #129	; 0x81
 800448c:	4252      	negs	r2, r2
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	0018      	movs	r0, r3
 8004494:	f000 fd62 	bl	8004f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	4013      	ands	r3, r2
 800449e:	d00c      	beq.n	80044ba <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	4013      	ands	r3, r2
 80044a6:	d008      	beq.n	80044ba <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2241      	movs	r2, #65	; 0x41
 80044ae:	4252      	negs	r2, r2
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 f9c7 	bl	8004848 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2220      	movs	r2, #32
 80044be:	4013      	ands	r3, r2
 80044c0:	d00c      	beq.n	80044dc <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	4013      	ands	r3, r2
 80044c8:	d008      	beq.n	80044dc <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2221      	movs	r2, #33	; 0x21
 80044d0:	4252      	negs	r2, r2
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fd38 	bl	8004f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b004      	add	sp, #16
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2317      	movs	r3, #23
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	223c      	movs	r2, #60	; 0x3c
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004502:	2302      	movs	r3, #2
 8004504:	e0ad      	b.n	8004662 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	223c      	movs	r2, #60	; 0x3c
 800450a:	2101      	movs	r1, #1
 800450c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d100      	bne.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004514:	e076      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b0c      	cmp	r3, #12
 800451a:	d900      	bls.n	800451e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800451c:	e095      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x166>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d04e      	beq.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d900      	bls.n	800452c <HAL_TIM_PWM_ConfigChannel+0x48>
 800452a:	e08e      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x166>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d021      	beq.n	800457c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004538:	e087      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	0011      	movs	r1, r2
 8004542:	0018      	movs	r0, r3
 8004544:	f000 fa0c 	bl	8004960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2108      	movs	r1, #8
 8004554:	430a      	orrs	r2, r1
 8004556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2104      	movs	r1, #4
 8004564:	438a      	bics	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6999      	ldr	r1, [r3, #24]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	619a      	str	r2, [r3, #24]
      break;
 800457a:	e06b      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f000 fa69 	bl	8004a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	0109      	lsls	r1, r1, #4
 8004598:	430a      	orrs	r2, r1
 800459a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4931      	ldr	r1, [pc, #196]	; (800466c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6999      	ldr	r1, [r3, #24]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	619a      	str	r2, [r3, #24]
      break;
 80045c0:	e048      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 fac4 	bl	8004b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2108      	movs	r1, #8
 80045dc:	430a      	orrs	r2, r1
 80045de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69da      	ldr	r2, [r3, #28]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2104      	movs	r1, #4
 80045ec:	438a      	bics	r2, r1
 80045ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69d9      	ldr	r1, [r3, #28]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	61da      	str	r2, [r3, #28]
      break;
 8004602:	e027      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fb23 	bl	8004c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2180      	movs	r1, #128	; 0x80
 800461e:	0109      	lsls	r1, r1, #4
 8004620:	430a      	orrs	r2, r1
 8004622:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	490f      	ldr	r1, [pc, #60]	; (800466c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004630:	400a      	ands	r2, r1
 8004632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69d9      	ldr	r1, [r3, #28]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	61da      	str	r2, [r3, #28]
      break;
 8004648:	e004      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800464a:	2317      	movs	r3, #23
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
      break;
 8004652:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	223c      	movs	r2, #60	; 0x3c
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

  return status;
 800465c:	2317      	movs	r3, #23
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b006      	add	sp, #24
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	fffffbff 	.word	0xfffffbff

08004670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	230f      	movs	r3, #15
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	; 0x3c
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x20>
 800468c:	2302      	movs	r3, #2
 800468e:	e0bc      	b.n	800480a <HAL_TIM_ConfigClockSource+0x19a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223c      	movs	r2, #60	; 0x3c
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	223d      	movs	r2, #61	; 0x3d
 800469c:	2102      	movs	r1, #2
 800469e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2277      	movs	r2, #119	; 0x77
 80046ac:	4393      	bics	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_TIM_ConfigClockSource+0x1a4>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	0192      	lsls	r2, r2, #6
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d040      	beq.n	800474e <HAL_TIM_ConfigClockSource+0xde>
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	0192      	lsls	r2, r2, #6
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d900      	bls.n	80046d6 <HAL_TIM_ConfigClockSource+0x66>
 80046d4:	e088      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	0152      	lsls	r2, r2, #5
 80046da:	4293      	cmp	r3, r2
 80046dc:	d100      	bne.n	80046e0 <HAL_TIM_ConfigClockSource+0x70>
 80046de:	e088      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x182>
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	0152      	lsls	r2, r2, #5
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d900      	bls.n	80046ea <HAL_TIM_ConfigClockSource+0x7a>
 80046e8:	e07e      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046ea:	2b70      	cmp	r3, #112	; 0x70
 80046ec:	d018      	beq.n	8004720 <HAL_TIM_ConfigClockSource+0xb0>
 80046ee:	d900      	bls.n	80046f2 <HAL_TIM_ConfigClockSource+0x82>
 80046f0:	e07a      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046f2:	2b60      	cmp	r3, #96	; 0x60
 80046f4:	d04f      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x126>
 80046f6:	d900      	bls.n	80046fa <HAL_TIM_ConfigClockSource+0x8a>
 80046f8:	e076      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 80046fa:	2b50      	cmp	r3, #80	; 0x50
 80046fc:	d03b      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x106>
 80046fe:	d900      	bls.n	8004702 <HAL_TIM_ConfigClockSource+0x92>
 8004700:	e072      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d057      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x146>
 8004706:	d900      	bls.n	800470a <HAL_TIM_ConfigClockSource+0x9a>
 8004708:	e06e      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 800470a:	2b30      	cmp	r3, #48	; 0x30
 800470c:	d063      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 800470e:	d86b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d060      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 8004714:	d868      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d05d      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 800471a:	2b10      	cmp	r3, #16
 800471c:	d05b      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x166>
 800471e:	e063      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6899      	ldr	r1, [r3, #8]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f000 fb70 	bl	8004e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2277      	movs	r2, #119	; 0x77
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
      break;
 800474c:	e052      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6899      	ldr	r1, [r3, #8]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f000 fb59 	bl	8004e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	01c9      	lsls	r1, r1, #7
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e03e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	001a      	movs	r2, r3
 8004784:	f000 facc 	bl	8004d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2150      	movs	r1, #80	; 0x50
 800478e:	0018      	movs	r0, r3
 8004790:	f000 fb26 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 8004794:	e02e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	001a      	movs	r2, r3
 80047a4:	f000 faea 	bl	8004d7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2160      	movs	r1, #96	; 0x60
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fb16 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 80047b4:	e01e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	001a      	movs	r2, r3
 80047c4:	f000 faac 	bl	8004d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 fb06 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 80047d4:	e00e      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	0019      	movs	r1, r3
 80047e0:	0010      	movs	r0, r2
 80047e2:	f000 fafd 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 80047e6:	e005      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80047e8:	230f      	movs	r3, #15
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
      break;
 80047f0:	e000      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80047f2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	223d      	movs	r2, #61	; 0x3d
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	223c      	movs	r2, #60	; 0x3c
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

  return status;
 8004804:	230f      	movs	r3, #15
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	781b      	ldrb	r3, [r3, #0]
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	ffff00ff 	.word	0xffff00ff

08004818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004830:	46c0      	nop			; (mov r8, r8)
 8004832:	46bd      	mov	sp, r7
 8004834:	b002      	add	sp, #8
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a37      	ldr	r2, [pc, #220]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d008      	beq.n	8004882 <TIM_Base_SetConfig+0x2a>
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	05db      	lsls	r3, r3, #23
 8004876:	429a      	cmp	r2, r3
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0x2a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a33      	ldr	r2, [pc, #204]	; (800494c <TIM_Base_SetConfig+0xf4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2270      	movs	r2, #112	; 0x70
 8004886:	4393      	bics	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d014      	beq.n	80048c6 <TIM_Base_SetConfig+0x6e>
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	05db      	lsls	r3, r3, #23
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d00f      	beq.n	80048c6 <TIM_Base_SetConfig+0x6e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a28      	ldr	r2, [pc, #160]	; (800494c <TIM_Base_SetConfig+0xf4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0x6e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a27      	ldr	r2, [pc, #156]	; (8004950 <TIM_Base_SetConfig+0xf8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0x6e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <TIM_Base_SetConfig+0xfc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0x6e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a25      	ldr	r2, [pc, #148]	; (8004958 <TIM_Base_SetConfig+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d108      	bne.n	80048d8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <TIM_Base_SetConfig+0x104>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2280      	movs	r2, #128	; 0x80
 80048dc:	4393      	bics	r3, r2
 80048de:	001a      	movs	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <TIM_Base_SetConfig+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <TIM_Base_SetConfig+0xfc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_Base_SetConfig+0xbe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a11      	ldr	r2, [pc, #68]	; (8004958 <TIM_Base_SetConfig+0x100>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d103      	bne.n	800491e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2201      	movs	r2, #1
 800492a:	4013      	ands	r3, r2
 800492c:	2b01      	cmp	r3, #1
 800492e:	d106      	bne.n	800493e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2201      	movs	r2, #1
 8004936:	4393      	bics	r3, r2
 8004938:	001a      	movs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]
  }
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40002000 	.word	0x40002000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800
 800495c:	fffffcff 	.word	0xfffffcff

08004960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	2201      	movs	r2, #1
 8004976:	4393      	bics	r3, r2
 8004978:	001a      	movs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2270      	movs	r2, #112	; 0x70
 800498e:	4393      	bics	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2203      	movs	r2, #3
 8004996:	4393      	bics	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2202      	movs	r2, #2
 80049a8:	4393      	bics	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <TIM_OC1_SetConfig+0xe8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <TIM_OC1_SetConfig+0x6e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <TIM_OC1_SetConfig+0xec>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_OC1_SetConfig+0x6e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <TIM_OC1_SetConfig+0xf0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10c      	bne.n	80049e8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2208      	movs	r2, #8
 80049d2:	4393      	bics	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2204      	movs	r2, #4
 80049e4:	4393      	bics	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <TIM_OC1_SetConfig+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_OC1_SetConfig+0xa0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a16      	ldr	r2, [pc, #88]	; (8004a4c <TIM_OC1_SetConfig+0xec>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC1_SetConfig+0xa0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <TIM_OC1_SetConfig+0xf0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d111      	bne.n	8004a24 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <TIM_OC1_SetConfig+0xf4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <TIM_OC1_SetConfig+0xf8>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b006      	add	sp, #24
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800
 8004a54:	fffffeff 	.word	0xfffffeff
 8004a58:	fffffdff 	.word	0xfffffdff

08004a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	2210      	movs	r2, #16
 8004a72:	4393      	bics	r3, r2
 8004a74:	001a      	movs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <TIM_OC2_SetConfig+0xe0>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <TIM_OC2_SetConfig+0xe4>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	4393      	bics	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <TIM_OC2_SetConfig+0xe8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10d      	bne.n	8004ada <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2240      	movs	r2, #64	; 0x40
 8004ad6:	4393      	bics	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <TIM_OC2_SetConfig+0xe8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_OC2_SetConfig+0x96>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <TIM_OC2_SetConfig+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC2_SetConfig+0x96>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <TIM_OC2_SetConfig+0xf0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d113      	bne.n	8004b1a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <TIM_OC2_SetConfig+0xf4>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <TIM_OC2_SetConfig+0xf8>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b006      	add	sp, #24
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	ffff8fff 	.word	0xffff8fff
 8004b40:	fffffcff 	.word	0xfffffcff
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800
 8004b50:	fffffbff 	.word	0xfffffbff
 8004b54:	fffff7ff 	.word	0xfffff7ff

08004b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	4a31      	ldr	r2, [pc, #196]	; (8004c34 <TIM_OC3_SetConfig+0xdc>)
 8004b6e:	401a      	ands	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2270      	movs	r2, #112	; 0x70
 8004b84:	4393      	bics	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <TIM_OC3_SetConfig+0xe0>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <TIM_OC3_SetConfig+0xe4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10d      	bne.n	8004bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <TIM_OC3_SetConfig+0xe8>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <TIM_OC3_SetConfig+0xec>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <TIM_OC3_SetConfig+0xe4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_OC3_SetConfig+0x92>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1a      	ldr	r2, [pc, #104]	; (8004c48 <TIM_OC3_SetConfig+0xf0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC3_SetConfig+0x92>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <TIM_OC3_SetConfig+0xf4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d113      	bne.n	8004c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <TIM_OC3_SetConfig+0xf8>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <TIM_OC3_SetConfig+0xfc>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b006      	add	sp, #24
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	fffffeff 	.word	0xfffffeff
 8004c38:	fffffdff 	.word	0xfffffdff
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	fffff7ff 	.word	0xfffff7ff
 8004c44:	fffffbff 	.word	0xfffffbff
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800
 8004c50:	ffffefff 	.word	0xffffefff
 8004c54:	ffffdfff 	.word	0xffffdfff

08004c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	4a24      	ldr	r2, [pc, #144]	; (8004d00 <TIM_OC4_SetConfig+0xa8>)
 8004c6e:	401a      	ands	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <TIM_OC4_SetConfig+0xac>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <TIM_OC4_SetConfig+0xb0>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <TIM_OC4_SetConfig+0xb4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	031b      	lsls	r3, r3, #12
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <TIM_OC4_SetConfig+0xb8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_OC4_SetConfig+0x70>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <TIM_OC4_SetConfig+0xbc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_OC4_SetConfig+0x70>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <TIM_OC4_SetConfig+0xc0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d109      	bne.n	8004cdc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <TIM_OC4_SetConfig+0xc4>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	019b      	lsls	r3, r3, #6
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b006      	add	sp, #24
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	ffffefff 	.word	0xffffefff
 8004d04:	ffff8fff 	.word	0xffff8fff
 8004d08:	fffffcff 	.word	0xfffffcff
 8004d0c:	ffffdfff 	.word	0xffffdfff
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800
 8004d1c:	ffffbfff 	.word	0xffffbfff

08004d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	2201      	movs	r2, #1
 8004d38:	4393      	bics	r3, r2
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	22f0      	movs	r2, #240	; 0xf0
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b006      	add	sp, #24
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	2210      	movs	r2, #16
 8004d94:	4393      	bics	r3, r2
 8004d96:	001a      	movs	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <TIM_TI2_ConfigInputStage+0x60>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	22a0      	movs	r2, #160	; 0xa0
 8004db8:	4393      	bics	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b006      	add	sp, #24
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	ffff0fff 	.word	0xffff0fff

08004de0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2270      	movs	r2, #112	; 0x70
 8004df4:	4393      	bics	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	2207      	movs	r2, #7
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <TIM_ETR_SetConfig+0x3c>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b006      	add	sp, #24
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	ffff00ff 	.word	0xffff00ff

08004e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	221f      	movs	r2, #31
 8004e64:	4013      	ands	r3, r2
 8004e66:	2201      	movs	r2, #1
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	0013      	movs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	43d2      	mvns	r2, r2
 8004e76:	401a      	ands	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	211f      	movs	r1, #31
 8004e84:	400b      	ands	r3, r1
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4099      	lsls	r1, r3
 8004e8a:	000b      	movs	r3, r1
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b006      	add	sp, #24
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	223c      	movs	r2, #60	; 0x3c
 8004eaa:	5c9b      	ldrb	r3, [r3, r2]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e042      	b.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223c      	movs	r2, #60	; 0x3c
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	223d      	movs	r2, #61	; 0x3d
 8004ec0:	2102      	movs	r1, #2
 8004ec2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2270      	movs	r2, #112	; 0x70
 8004ed8:	4393      	bics	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00a      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	05db      	lsls	r3, r3, #23
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d004      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10c      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	4393      	bics	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	223d      	movs	r2, #61	; 0x3d
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223c      	movs	r2, #60	; 0x3c
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40000400 	.word	0x40000400

08004f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e044      	b.n	8005008 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2278      	movs	r2, #120	; 0x78
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f7fc f893 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2224      	movs	r2, #36	; 0x24
 8004f9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	438a      	bics	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f000 fc50 	bl	800585c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 fb24 	bl	800560c <UART_SetConfig>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e01c      	b.n	8005008 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	490d      	ldr	r1, [pc, #52]	; (8005010 <HAL_UART_Init+0xa4>)
 8004fda:	400a      	ands	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	212a      	movs	r1, #42	; 0x2a
 8004fea:	438a      	bics	r2, r1
 8004fec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0018      	movs	r0, r3
 8005002:	f000 fcdf 	bl	80059c4 <UART_CheckIdleState>
 8005006:	0003      	movs	r3, r0
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}
 8005010:	ffffb7ff 	.word	0xffffb7ff

08005014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b0ab      	sub	sp, #172	; 0xac
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	22a4      	movs	r2, #164	; 0xa4
 8005024:	18b9      	adds	r1, r7, r2
 8005026:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	20a0      	movs	r0, #160	; 0xa0
 8005030:	1839      	adds	r1, r7, r0
 8005032:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	219c      	movs	r1, #156	; 0x9c
 800503c:	1879      	adds	r1, r7, r1
 800503e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005040:	0011      	movs	r1, r2
 8005042:	18bb      	adds	r3, r7, r2
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a99      	ldr	r2, [pc, #612]	; (80052ac <HAL_UART_IRQHandler+0x298>)
 8005048:	4013      	ands	r3, r2
 800504a:	2298      	movs	r2, #152	; 0x98
 800504c:	18bc      	adds	r4, r7, r2
 800504e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005050:	18bb      	adds	r3, r7, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005058:	187b      	adds	r3, r7, r1
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2220      	movs	r2, #32
 800505e:	4013      	ands	r3, r2
 8005060:	d00f      	beq.n	8005082 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005062:	183b      	adds	r3, r7, r0
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2220      	movs	r2, #32
 8005068:	4013      	ands	r3, r2
 800506a:	d00a      	beq.n	8005082 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005070:	2b00      	cmp	r3, #0
 8005072:	d100      	bne.n	8005076 <HAL_UART_IRQHandler+0x62>
 8005074:	e29e      	b.n	80055b4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	0010      	movs	r0, r2
 800507e:	4798      	blx	r3
      }
      return;
 8005080:	e298      	b.n	80055b4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005082:	2398      	movs	r3, #152	; 0x98
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d100      	bne.n	800508e <HAL_UART_IRQHandler+0x7a>
 800508c:	e114      	b.n	80052b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800508e:	239c      	movs	r3, #156	; 0x9c
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2201      	movs	r2, #1
 8005096:	4013      	ands	r3, r2
 8005098:	d106      	bne.n	80050a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800509a:	23a0      	movs	r3, #160	; 0xa0
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a83      	ldr	r2, [pc, #524]	; (80052b0 <HAL_UART_IRQHandler+0x29c>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	d100      	bne.n	80050a8 <HAL_UART_IRQHandler+0x94>
 80050a6:	e107      	b.n	80052b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050a8:	23a4      	movs	r3, #164	; 0xa4
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	4013      	ands	r3, r2
 80050b2:	d012      	beq.n	80050da <HAL_UART_IRQHandler+0xc6>
 80050b4:	23a0      	movs	r3, #160	; 0xa0
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	d00b      	beq.n	80050da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2201      	movs	r2, #1
 80050c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2284      	movs	r2, #132	; 0x84
 80050ce:	589b      	ldr	r3, [r3, r2]
 80050d0:	2201      	movs	r2, #1
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2184      	movs	r1, #132	; 0x84
 80050d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050da:	23a4      	movs	r3, #164	; 0xa4
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2202      	movs	r2, #2
 80050e2:	4013      	ands	r3, r2
 80050e4:	d011      	beq.n	800510a <HAL_UART_IRQHandler+0xf6>
 80050e6:	239c      	movs	r3, #156	; 0x9c
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	d00b      	beq.n	800510a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2284      	movs	r2, #132	; 0x84
 80050fe:	589b      	ldr	r3, [r3, r2]
 8005100:	2204      	movs	r2, #4
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2184      	movs	r1, #132	; 0x84
 8005108:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800510a:	23a4      	movs	r3, #164	; 0xa4
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2204      	movs	r2, #4
 8005112:	4013      	ands	r3, r2
 8005114:	d011      	beq.n	800513a <HAL_UART_IRQHandler+0x126>
 8005116:	239c      	movs	r3, #156	; 0x9c
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2201      	movs	r2, #1
 800511e:	4013      	ands	r3, r2
 8005120:	d00b      	beq.n	800513a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2204      	movs	r2, #4
 8005128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2284      	movs	r2, #132	; 0x84
 800512e:	589b      	ldr	r3, [r3, r2]
 8005130:	2202      	movs	r2, #2
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2184      	movs	r1, #132	; 0x84
 8005138:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800513a:	23a4      	movs	r3, #164	; 0xa4
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2208      	movs	r2, #8
 8005142:	4013      	ands	r3, r2
 8005144:	d017      	beq.n	8005176 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005146:	23a0      	movs	r3, #160	; 0xa0
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2220      	movs	r2, #32
 800514e:	4013      	ands	r3, r2
 8005150:	d105      	bne.n	800515e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005152:	239c      	movs	r3, #156	; 0x9c
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2201      	movs	r2, #1
 800515a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800515c:	d00b      	beq.n	8005176 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2208      	movs	r2, #8
 8005164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2284      	movs	r2, #132	; 0x84
 800516a:	589b      	ldr	r3, [r3, r2]
 800516c:	2208      	movs	r2, #8
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2184      	movs	r1, #132	; 0x84
 8005174:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005176:	23a4      	movs	r3, #164	; 0xa4
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	4013      	ands	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_UART_IRQHandler+0x198>
 8005184:	23a0      	movs	r3, #160	; 0xa0
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	04db      	lsls	r3, r3, #19
 800518e:	4013      	ands	r3, r2
 8005190:	d00c      	beq.n	80051ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2284      	movs	r2, #132	; 0x84
 80051a0:	589b      	ldr	r3, [r3, r2]
 80051a2:	2220      	movs	r2, #32
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2184      	movs	r1, #132	; 0x84
 80051aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2284      	movs	r2, #132	; 0x84
 80051b0:	589b      	ldr	r3, [r3, r2]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d100      	bne.n	80051b8 <HAL_UART_IRQHandler+0x1a4>
 80051b6:	e1ff      	b.n	80055b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051b8:	23a4      	movs	r3, #164	; 0xa4
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2220      	movs	r2, #32
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051c4:	23a0      	movs	r3, #160	; 0xa0
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2220      	movs	r2, #32
 80051cc:	4013      	ands	r3, r2
 80051ce:	d008      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	0010      	movs	r0, r2
 80051e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2284      	movs	r2, #132	; 0x84
 80051e6:	589b      	ldr	r3, [r3, r2]
 80051e8:	2194      	movs	r1, #148	; 0x94
 80051ea:	187a      	adds	r2, r7, r1
 80051ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2240      	movs	r2, #64	; 0x40
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d004      	beq.n	8005206 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051fc:	187b      	adds	r3, r7, r1
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2228      	movs	r2, #40	; 0x28
 8005202:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005204:	d047      	beq.n	8005296 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0018      	movs	r0, r3
 800520a:	f000 fcf3 	bl	8005bf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2240      	movs	r2, #64	; 0x40
 8005216:	4013      	ands	r3, r2
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d137      	bne.n	800528c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521c:	f3ef 8310 	mrs	r3, PRIMASK
 8005220:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005224:	2090      	movs	r0, #144	; 0x90
 8005226:	183a      	adds	r2, r7, r0
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	2301      	movs	r3, #1
 800522c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	438a      	bics	r2, r1
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	183b      	adds	r3, r7, r0
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800524e:	f383 8810 	msr	PRIMASK, r3
}
 8005252:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	2b00      	cmp	r3, #0
 800525a:	d012      	beq.n	8005282 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <HAL_UART_IRQHandler+0x2a0>)
 8005262:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	0018      	movs	r0, r3
 800526a:	f7fc fa15 	bl	8001698 <HAL_DMA_Abort_IT>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d01a      	beq.n	80052a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527c:	0018      	movs	r0, r3
 800527e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e012      	b.n	80052a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f000 f9ad 	bl	80055e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528a:	e00d      	b.n	80052a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	0018      	movs	r0, r3
 8005290:	f000 f9a8 	bl	80055e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	e008      	b.n	80052a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f000 f9a3 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2284      	movs	r2, #132	; 0x84
 80052a2:	2100      	movs	r1, #0
 80052a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80052a6:	e187      	b.n	80055b8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	46c0      	nop			; (mov r8, r8)
    return;
 80052aa:	e185      	b.n	80055b8 <HAL_UART_IRQHandler+0x5a4>
 80052ac:	0000080f 	.word	0x0000080f
 80052b0:	04000120 	.word	0x04000120
 80052b4:	08005cbd 	.word	0x08005cbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d000      	beq.n	80052c2 <HAL_UART_IRQHandler+0x2ae>
 80052c0:	e139      	b.n	8005536 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052c2:	23a4      	movs	r3, #164	; 0xa4
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2210      	movs	r2, #16
 80052ca:	4013      	ands	r3, r2
 80052cc:	d100      	bne.n	80052d0 <HAL_UART_IRQHandler+0x2bc>
 80052ce:	e132      	b.n	8005536 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052d0:	23a0      	movs	r3, #160	; 0xa0
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2210      	movs	r2, #16
 80052d8:	4013      	ands	r3, r2
 80052da:	d100      	bne.n	80052de <HAL_UART_IRQHandler+0x2ca>
 80052dc:	e12b      	b.n	8005536 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2210      	movs	r2, #16
 80052e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d000      	beq.n	80052f6 <HAL_UART_IRQHandler+0x2e2>
 80052f4:	e09f      	b.n	8005436 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	217e      	movs	r1, #126	; 0x7e
 8005300:	187b      	adds	r3, r7, r1
 8005302:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005304:	187b      	adds	r3, r7, r1
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d100      	bne.n	800530e <HAL_UART_IRQHandler+0x2fa>
 800530c:	e156      	b.n	80055bc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2258      	movs	r2, #88	; 0x58
 8005312:	5a9b      	ldrh	r3, [r3, r2]
 8005314:	187a      	adds	r2, r7, r1
 8005316:	8812      	ldrh	r2, [r2, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d300      	bcc.n	800531e <HAL_UART_IRQHandler+0x30a>
 800531c:	e14e      	b.n	80055bc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	187a      	adds	r2, r7, r1
 8005322:	215a      	movs	r1, #90	; 0x5a
 8005324:	8812      	ldrh	r2, [r2, #0]
 8005326:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b20      	cmp	r3, #32
 8005330:	d06f      	beq.n	8005412 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005332:	f3ef 8310 	mrs	r3, PRIMASK
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800533a:	67bb      	str	r3, [r7, #120]	; 0x78
 800533c:	2301      	movs	r3, #1
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	f383 8810 	msr	PRIMASK, r3
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	499e      	ldr	r1, [pc, #632]	; (80055cc <HAL_UART_IRQHandler+0x5b8>)
 8005354:	400a      	ands	r2, r1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800535a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	f383 8810 	msr	PRIMASK, r3
}
 8005362:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005364:	f3ef 8310 	mrs	r3, PRIMASK
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536c:	677b      	str	r3, [r7, #116]	; 0x74
 800536e:	2301      	movs	r3, #1
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005374:	f383 8810 	msr	PRIMASK, r3
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2101      	movs	r1, #1
 8005386:	438a      	bics	r2, r1
 8005388:	609a      	str	r2, [r3, #8]
 800538a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005396:	f3ef 8310 	mrs	r3, PRIMASK
 800539a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800539c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539e:	673b      	str	r3, [r7, #112]	; 0x70
 80053a0:	2301      	movs	r3, #1
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2140      	movs	r1, #64	; 0x40
 80053b8:	438a      	bics	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2280      	movs	r2, #128	; 0x80
 80053cc:	2120      	movs	r1, #32
 80053ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d6:	f3ef 8310 	mrs	r3, PRIMASK
 80053da:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80053dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e0:	2301      	movs	r3, #1
 80053e2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2110      	movs	r1, #16
 80053f8:	438a      	bics	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540c:	0018      	movs	r0, r3
 800540e:	f7fc f90b 	bl	8001628 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2258      	movs	r2, #88	; 0x58
 800541c:	5a9a      	ldrh	r2, [r3, r2]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	215a      	movs	r1, #90	; 0x5a
 8005422:	5a5b      	ldrh	r3, [r3, r1]
 8005424:	b29b      	uxth	r3, r3
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	b29a      	uxth	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	0011      	movs	r1, r2
 800542e:	0018      	movs	r0, r3
 8005430:	f000 f8e0 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005434:	e0c2      	b.n	80055bc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2258      	movs	r2, #88	; 0x58
 800543a:	5a99      	ldrh	r1, [r3, r2]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	225a      	movs	r2, #90	; 0x5a
 8005440:	5a9b      	ldrh	r3, [r3, r2]
 8005442:	b29a      	uxth	r2, r3
 8005444:	208e      	movs	r0, #142	; 0x8e
 8005446:	183b      	adds	r3, r7, r0
 8005448:	1a8a      	subs	r2, r1, r2
 800544a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	225a      	movs	r2, #90	; 0x5a
 8005450:	5a9b      	ldrh	r3, [r3, r2]
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d100      	bne.n	800545a <HAL_UART_IRQHandler+0x446>
 8005458:	e0b2      	b.n	80055c0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800545a:	183b      	adds	r3, r7, r0
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d100      	bne.n	8005464 <HAL_UART_IRQHandler+0x450>
 8005462:	e0ad      	b.n	80055c0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005464:	f3ef 8310 	mrs	r3, PRIMASK
 8005468:	60fb      	str	r3, [r7, #12]
  return(result);
 800546a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546c:	2488      	movs	r4, #136	; 0x88
 800546e:	193a      	adds	r2, r7, r4
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	2301      	movs	r3, #1
 8005474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f383 8810 	msr	PRIMASK, r3
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4951      	ldr	r1, [pc, #324]	; (80055d0 <HAL_UART_IRQHandler+0x5bc>)
 800548a:	400a      	ands	r2, r1
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	193b      	adds	r3, r7, r4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549c:	f3ef 8310 	mrs	r3, PRIMASK
 80054a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80054a2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a4:	2484      	movs	r4, #132	; 0x84
 80054a6:	193a      	adds	r2, r7, r4
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	2301      	movs	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f383 8810 	msr	PRIMASK, r3
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2101      	movs	r1, #1
 80054c2:	438a      	bics	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	193b      	adds	r3, r7, r4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	2120      	movs	r1, #32
 80054da:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f0:	2480      	movs	r4, #128	; 0x80
 80054f2:	193a      	adds	r2, r7, r4
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	2301      	movs	r3, #1
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	f383 8810 	msr	PRIMASK, r3
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2110      	movs	r1, #16
 800550e:	438a      	bics	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	193b      	adds	r3, r7, r4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005526:	183b      	adds	r3, r7, r0
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0011      	movs	r1, r2
 800552e:	0018      	movs	r0, r3
 8005530:	f000 f860 	bl	80055f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005534:	e044      	b.n	80055c0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005536:	23a4      	movs	r3, #164	; 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	035b      	lsls	r3, r3, #13
 8005540:	4013      	ands	r3, r2
 8005542:	d010      	beq.n	8005566 <HAL_UART_IRQHandler+0x552>
 8005544:	239c      	movs	r3, #156	; 0x9c
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	03db      	lsls	r3, r3, #15
 800554e:	4013      	ands	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	0352      	lsls	r2, r2, #13
 800555a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0018      	movs	r0, r3
 8005560:	f000 fbee 	bl	8005d40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005564:	e02f      	b.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005566:	23a4      	movs	r3, #164	; 0xa4
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	4013      	ands	r3, r2
 8005570:	d00f      	beq.n	8005592 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005572:	23a0      	movs	r3, #160	; 0xa0
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2280      	movs	r2, #128	; 0x80
 800557a:	4013      	ands	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01e      	beq.n	80055c4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	0010      	movs	r0, r2
 800558e:	4798      	blx	r3
    }
    return;
 8005590:	e018      	b.n	80055c4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005592:	23a4      	movs	r3, #164	; 0xa4
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2240      	movs	r2, #64	; 0x40
 800559a:	4013      	ands	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
 800559e:	23a0      	movs	r3, #160	; 0xa0
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2240      	movs	r2, #64	; 0x40
 80055a6:	4013      	ands	r3, r2
 80055a8:	d00d      	beq.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 fb9c 	bl	8005cea <UART_EndTransmit_IT>
    return;
 80055b2:	e008      	b.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80055b4:	46c0      	nop			; (mov r8, r8)
 80055b6:	e006      	b.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	e004      	b.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	e002      	b.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	e000      	b.n	80055c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80055c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b02b      	add	sp, #172	; 0xac
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	fffffeff 	.word	0xfffffeff
 80055d0:	fffffedf 	.word	0xfffffedf

080055d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	000a      	movs	r2, r1
 80055fe:	1cbb      	adds	r3, r7, #2
 8005600:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b002      	add	sp, #8
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005614:	231e      	movs	r3, #30
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a83      	ldr	r2, [pc, #524]	; (8005848 <UART_SetConfig+0x23c>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	430a      	orrs	r2, r1
 8005648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a7e      	ldr	r2, [pc, #504]	; (800584c <UART_SetConfig+0x240>)
 8005652:	4013      	ands	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a75      	ldr	r2, [pc, #468]	; (8005850 <UART_SetConfig+0x244>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005688:	4b72      	ldr	r3, [pc, #456]	; (8005854 <UART_SetConfig+0x248>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	2203      	movs	r2, #3
 800568e:	4013      	ands	r3, r2
 8005690:	2b03      	cmp	r3, #3
 8005692:	d00d      	beq.n	80056b0 <UART_SetConfig+0xa4>
 8005694:	d81b      	bhi.n	80056ce <UART_SetConfig+0xc2>
 8005696:	2b02      	cmp	r3, #2
 8005698:	d014      	beq.n	80056c4 <UART_SetConfig+0xb8>
 800569a:	d818      	bhi.n	80056ce <UART_SetConfig+0xc2>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <UART_SetConfig+0x9a>
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d00a      	beq.n	80056ba <UART_SetConfig+0xae>
 80056a4:	e013      	b.n	80056ce <UART_SetConfig+0xc2>
 80056a6:	231f      	movs	r3, #31
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	e012      	b.n	80056d6 <UART_SetConfig+0xca>
 80056b0:	231f      	movs	r3, #31
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	2202      	movs	r2, #2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	e00d      	b.n	80056d6 <UART_SetConfig+0xca>
 80056ba:	231f      	movs	r3, #31
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	2204      	movs	r2, #4
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e008      	b.n	80056d6 <UART_SetConfig+0xca>
 80056c4:	231f      	movs	r3, #31
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2208      	movs	r2, #8
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <UART_SetConfig+0xca>
 80056ce:	231f      	movs	r3, #31
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2210      	movs	r2, #16
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d15c      	bne.n	800579e <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80056e4:	231f      	movs	r3, #31
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d015      	beq.n	800571a <UART_SetConfig+0x10e>
 80056ee:	dc18      	bgt.n	8005722 <UART_SetConfig+0x116>
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d00d      	beq.n	8005710 <UART_SetConfig+0x104>
 80056f4:	dc15      	bgt.n	8005722 <UART_SetConfig+0x116>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <UART_SetConfig+0xf4>
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d005      	beq.n	800570a <UART_SetConfig+0xfe>
 80056fe:	e010      	b.n	8005722 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fd fb42 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8005704:	0003      	movs	r3, r0
 8005706:	61bb      	str	r3, [r7, #24]
        break;
 8005708:	e012      	b.n	8005730 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570a:	4b53      	ldr	r3, [pc, #332]	; (8005858 <UART_SetConfig+0x24c>)
 800570c:	61bb      	str	r3, [r7, #24]
        break;
 800570e:	e00f      	b.n	8005730 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005710:	f7fd fada 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8005714:	0003      	movs	r3, r0
 8005716:	61bb      	str	r3, [r7, #24]
        break;
 8005718:	e00a      	b.n	8005730 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	61bb      	str	r3, [r7, #24]
        break;
 8005720:	e006      	b.n	8005730 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005726:	231e      	movs	r3, #30
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
        break;
 800572e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d100      	bne.n	8005738 <UART_SetConfig+0x12c>
 8005736:	e07a      	b.n	800582e <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	005a      	lsls	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	18d2      	adds	r2, r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	0019      	movs	r1, r3
 800574a:	0010      	movs	r0, r2
 800574c:	f7fa fcdc 	bl	8000108 <__udivsi3>
 8005750:	0003      	movs	r3, r0
 8005752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b0f      	cmp	r3, #15
 8005758:	d91c      	bls.n	8005794 <UART_SetConfig+0x188>
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	025b      	lsls	r3, r3, #9
 8005760:	429a      	cmp	r2, r3
 8005762:	d217      	bcs.n	8005794 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	b29a      	uxth	r2, r3
 8005768:	200e      	movs	r0, #14
 800576a:	183b      	adds	r3, r7, r0
 800576c:	210f      	movs	r1, #15
 800576e:	438a      	bics	r2, r1
 8005770:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	b29b      	uxth	r3, r3
 8005778:	2207      	movs	r2, #7
 800577a:	4013      	ands	r3, r2
 800577c:	b299      	uxth	r1, r3
 800577e:	183b      	adds	r3, r7, r0
 8005780:	183a      	adds	r2, r7, r0
 8005782:	8812      	ldrh	r2, [r2, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	183a      	adds	r2, r7, r0
 800578e:	8812      	ldrh	r2, [r2, #0]
 8005790:	60da      	str	r2, [r3, #12]
 8005792:	e04c      	b.n	800582e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8005794:	231e      	movs	r3, #30
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e047      	b.n	800582e <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 800579e:	231f      	movs	r3, #31
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d015      	beq.n	80057d4 <UART_SetConfig+0x1c8>
 80057a8:	dc18      	bgt.n	80057dc <UART_SetConfig+0x1d0>
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d00d      	beq.n	80057ca <UART_SetConfig+0x1be>
 80057ae:	dc15      	bgt.n	80057dc <UART_SetConfig+0x1d0>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <UART_SetConfig+0x1ae>
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d005      	beq.n	80057c4 <UART_SetConfig+0x1b8>
 80057b8:	e010      	b.n	80057dc <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ba:	f7fd fae5 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 80057be:	0003      	movs	r3, r0
 80057c0:	61bb      	str	r3, [r7, #24]
        break;
 80057c2:	e012      	b.n	80057ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c4:	4b24      	ldr	r3, [pc, #144]	; (8005858 <UART_SetConfig+0x24c>)
 80057c6:	61bb      	str	r3, [r7, #24]
        break;
 80057c8:	e00f      	b.n	80057ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ca:	f7fd fa7d 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 80057ce:	0003      	movs	r3, r0
 80057d0:	61bb      	str	r3, [r7, #24]
        break;
 80057d2:	e00a      	b.n	80057ea <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	61bb      	str	r3, [r7, #24]
        break;
 80057da:	e006      	b.n	80057ea <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057e0:	231e      	movs	r3, #30
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2201      	movs	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]
        break;
 80057e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01e      	beq.n	800582e <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	085a      	lsrs	r2, r3, #1
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	18d2      	adds	r2, r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	0019      	movs	r1, r3
 8005800:	0010      	movs	r0, r2
 8005802:	f7fa fc81 	bl	8000108 <__udivsi3>
 8005806:	0003      	movs	r3, r0
 8005808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b0f      	cmp	r3, #15
 800580e:	d90a      	bls.n	8005826 <UART_SetConfig+0x21a>
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	2380      	movs	r3, #128	; 0x80
 8005814:	025b      	lsls	r3, r3, #9
 8005816:	429a      	cmp	r2, r3
 8005818:	d205      	bcs.n	8005826 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	e003      	b.n	800582e <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8005826:	231e      	movs	r3, #30
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800583a:	231e      	movs	r3, #30
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	781b      	ldrb	r3, [r3, #0]
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b008      	add	sp, #32
 8005846:	bd80      	pop	{r7, pc}
 8005848:	ffff69f3 	.word	0xffff69f3
 800584c:	ffffcfff 	.word	0xffffcfff
 8005850:	fffff4ff 	.word	0xfffff4ff
 8005854:	40021000 	.word	0x40021000
 8005858:	007a1200 	.word	0x007a1200

0800585c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	2208      	movs	r2, #8
 800586a:	4013      	ands	r3, r2
 800586c:	d00b      	beq.n	8005886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a4a      	ldr	r2, [pc, #296]	; (80059a0 <UART_AdvFeatureConfig+0x144>)
 8005876:	4013      	ands	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2201      	movs	r2, #1
 800588c:	4013      	ands	r3, r2
 800588e:	d00b      	beq.n	80058a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4a43      	ldr	r2, [pc, #268]	; (80059a4 <UART_AdvFeatureConfig+0x148>)
 8005898:	4013      	ands	r3, r2
 800589a:	0019      	movs	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2202      	movs	r2, #2
 80058ae:	4013      	ands	r3, r2
 80058b0:	d00b      	beq.n	80058ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a3b      	ldr	r2, [pc, #236]	; (80059a8 <UART_AdvFeatureConfig+0x14c>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	0019      	movs	r1, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2204      	movs	r2, #4
 80058d0:	4013      	ands	r3, r2
 80058d2:	d00b      	beq.n	80058ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4a34      	ldr	r2, [pc, #208]	; (80059ac <UART_AdvFeatureConfig+0x150>)
 80058dc:	4013      	ands	r3, r2
 80058de:	0019      	movs	r1, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2210      	movs	r2, #16
 80058f2:	4013      	ands	r3, r2
 80058f4:	d00b      	beq.n	800590e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	4a2c      	ldr	r2, [pc, #176]	; (80059b0 <UART_AdvFeatureConfig+0x154>)
 80058fe:	4013      	ands	r3, r2
 8005900:	0019      	movs	r1, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2220      	movs	r2, #32
 8005914:	4013      	ands	r3, r2
 8005916:	d00b      	beq.n	8005930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <UART_AdvFeatureConfig+0x158>)
 8005920:	4013      	ands	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2240      	movs	r2, #64	; 0x40
 8005936:	4013      	ands	r3, r2
 8005938:	d01d      	beq.n	8005976 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <UART_AdvFeatureConfig+0x15c>)
 8005942:	4013      	ands	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	035b      	lsls	r3, r3, #13
 800595a:	429a      	cmp	r2, r3
 800595c:	d10b      	bne.n	8005976 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a15      	ldr	r2, [pc, #84]	; (80059bc <UART_AdvFeatureConfig+0x160>)
 8005966:	4013      	ands	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	4013      	ands	r3, r2
 800597e:	d00b      	beq.n	8005998 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4a0e      	ldr	r2, [pc, #56]	; (80059c0 <UART_AdvFeatureConfig+0x164>)
 8005988:	4013      	ands	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }
}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b002      	add	sp, #8
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	ffff7fff 	.word	0xffff7fff
 80059a4:	fffdffff 	.word	0xfffdffff
 80059a8:	fffeffff 	.word	0xfffeffff
 80059ac:	fffbffff 	.word	0xfffbffff
 80059b0:	ffffefff 	.word	0xffffefff
 80059b4:	ffffdfff 	.word	0xffffdfff
 80059b8:	ffefffff 	.word	0xffefffff
 80059bc:	ff9fffff 	.word	0xff9fffff
 80059c0:	fff7ffff 	.word	0xfff7ffff

080059c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b092      	sub	sp, #72	; 0x48
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2284      	movs	r2, #132	; 0x84
 80059d0:	2100      	movs	r1, #0
 80059d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d4:	f7fb fcd4 	bl	8001380 <HAL_GetTick>
 80059d8:	0003      	movs	r3, r0
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2208      	movs	r2, #8
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d12c      	bne.n	8005a44 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	0391      	lsls	r1, r2, #14
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4a46      	ldr	r2, [pc, #280]	; (8005b0c <UART_CheckIdleState+0x148>)
 80059f4:	9200      	str	r2, [sp, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f000 f88c 	bl	8005b14 <UART_WaitOnFlagUntilTimeout>
 80059fc:	1e03      	subs	r3, r0, #0
 80059fe:	d021      	beq.n	8005a44 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a00:	f3ef 8310 	mrs	r3, PRIMASK
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	f383 8810 	msr	PRIMASK, r3
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	438a      	bics	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	f383 8810 	msr	PRIMASK, r3
}
 8005a30:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2278      	movs	r2, #120	; 0x78
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e05f      	b.n	8005b04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d146      	bne.n	8005ae0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	03d1      	lsls	r1, r2, #15
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <UART_CheckIdleState+0x148>)
 8005a5c:	9200      	str	r2, [sp, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f000 f858 	bl	8005b14 <UART_WaitOnFlagUntilTimeout>
 8005a64:	1e03      	subs	r3, r0, #0
 8005a66:	d03b      	beq.n	8005ae0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a68:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
 8005a72:	2301      	movs	r3, #1
 8005a74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4921      	ldr	r1, [pc, #132]	; (8005b10 <UART_CheckIdleState+0x14c>)
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2101      	movs	r1, #1
 8005abc:	438a      	bics	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	2120      	movs	r1, #32
 8005ad2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2278      	movs	r2, #120	; 0x78
 8005ad8:	2100      	movs	r1, #0
 8005ada:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e011      	b.n	8005b04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2280      	movs	r2, #128	; 0x80
 8005aea:	2120      	movs	r1, #32
 8005aec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2278      	movs	r2, #120	; 0x78
 8005afe:	2100      	movs	r1, #0
 8005b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b010      	add	sp, #64	; 0x40
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	01ffffff 	.word	0x01ffffff
 8005b10:	fffffedf 	.word	0xfffffedf

08005b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	1dfb      	adds	r3, r7, #7
 8005b22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b24:	e051      	b.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	d04e      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2c:	f7fb fc28 	bl	8001380 <HAL_GetTick>
 8005b30:	0002      	movs	r2, r0
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d302      	bcc.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e051      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d03b      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d038      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb6>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d035      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2208      	movs	r2, #8
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d111      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2208      	movs	r2, #8
 8005b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f000 f83c 	bl	8005bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2284      	movs	r2, #132	; 0x84
 8005b80:	2108      	movs	r1, #8
 8005b82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2278      	movs	r2, #120	; 0x78
 8005b88:	2100      	movs	r1, #0
 8005b8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e02c      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d112      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	0112      	lsls	r2, r2, #4
 8005bac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 f81f 	bl	8005bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2284      	movs	r2, #132	; 0x84
 8005bba:	2120      	movs	r1, #32
 8005bbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2278      	movs	r2, #120	; 0x78
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e00f      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	425a      	negs	r2, r3
 8005bda:	4153      	adcs	r3, r2
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	001a      	movs	r2, r3
 8005be0:	1dfb      	adds	r3, r7, #7
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d09e      	beq.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	0018      	movs	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b004      	add	sp, #16
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08e      	sub	sp, #56	; 0x38
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005c00:	617b      	str	r3, [r7, #20]
  return(result);
 8005c02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
 8005c06:	2301      	movs	r3, #1
 8005c08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f383 8810 	msr	PRIMASK, r3
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4926      	ldr	r1, [pc, #152]	; (8005cb8 <UART_EndRxTransfer+0xc4>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c32:	623b      	str	r3, [r7, #32]
  return(result);
 8005c34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
 8005c38:	2301      	movs	r3, #1
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f383 8810 	msr	PRIMASK, r3
}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2101      	movs	r1, #1
 8005c50:	438a      	bics	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d118      	bne.n	8005c9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c68:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c72:	2301      	movs	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f383 8810 	msr	PRIMASK, r3
}
 8005c7c:	46c0      	nop			; (mov r8, r8)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2110      	movs	r1, #16
 8005c8a:	438a      	bics	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f383 8810 	msr	PRIMASK, r3
}
 8005c98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2280      	movs	r2, #128	; 0x80
 8005c9e:	2120      	movs	r1, #32
 8005ca0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b00e      	add	sp, #56	; 0x38
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	fffffedf 	.word	0xfffffedf

08005cbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	225a      	movs	r2, #90	; 0x5a
 8005cce:	2100      	movs	r1, #0
 8005cd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2252      	movs	r2, #82	; 0x52
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7ff fc81 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b004      	add	sp, #16
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b086      	sub	sp, #24
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2140      	movs	r1, #64	; 0x40
 8005d14:	438a      	bics	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f383 8810 	msr	PRIMASK, r3
}
 8005d22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7ff fc4e 	bl	80055d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b006      	add	sp, #24
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b002      	add	sp, #8
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <__libc_init_array>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	2600      	movs	r6, #0
 8005d54:	4d0c      	ldr	r5, [pc, #48]	; (8005d88 <__libc_init_array+0x38>)
 8005d56:	4c0d      	ldr	r4, [pc, #52]	; (8005d8c <__libc_init_array+0x3c>)
 8005d58:	1b64      	subs	r4, r4, r5
 8005d5a:	10a4      	asrs	r4, r4, #2
 8005d5c:	42a6      	cmp	r6, r4
 8005d5e:	d109      	bne.n	8005d74 <__libc_init_array+0x24>
 8005d60:	2600      	movs	r6, #0
 8005d62:	f000 f821 	bl	8005da8 <_init>
 8005d66:	4d0a      	ldr	r5, [pc, #40]	; (8005d90 <__libc_init_array+0x40>)
 8005d68:	4c0a      	ldr	r4, [pc, #40]	; (8005d94 <__libc_init_array+0x44>)
 8005d6a:	1b64      	subs	r4, r4, r5
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	42a6      	cmp	r6, r4
 8005d70:	d105      	bne.n	8005d7e <__libc_init_array+0x2e>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	00b3      	lsls	r3, r6, #2
 8005d76:	58eb      	ldr	r3, [r5, r3]
 8005d78:	4798      	blx	r3
 8005d7a:	3601      	adds	r6, #1
 8005d7c:	e7ee      	b.n	8005d5c <__libc_init_array+0xc>
 8005d7e:	00b3      	lsls	r3, r6, #2
 8005d80:	58eb      	ldr	r3, [r5, r3]
 8005d82:	4798      	blx	r3
 8005d84:	3601      	adds	r6, #1
 8005d86:	e7f2      	b.n	8005d6e <__libc_init_array+0x1e>
 8005d88:	08005e08 	.word	0x08005e08
 8005d8c:	08005e08 	.word	0x08005e08
 8005d90:	08005e08 	.word	0x08005e08
 8005d94:	08005e0c 	.word	0x08005e0c

08005d98 <memset>:
 8005d98:	0003      	movs	r3, r0
 8005d9a:	1882      	adds	r2, r0, r2
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	7019      	strb	r1, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
