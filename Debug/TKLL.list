
TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006508  08006508  00007508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006630  08006630  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006630  08006630  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006630  08006630  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006630  08006630  00007630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006634  08006634  00007634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006638  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000068  080066a0  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080066a0  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001572e  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350f  00000000  00000000  0001d7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00020cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f25  00000000  00000000  00022028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d5d  00000000  00000000  00022f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2cf  00000000  00000000  00036caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b52a  00000000  00000000  00051f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd4a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d4  00000000  00000000  000bd4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000c1dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080064f0 	.word	0x080064f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080064f0 	.word	0x080064f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af02      	add	r7, sp, #8
 800040a:	0002      	movs	r2, r0
 800040c:	1dfb      	adds	r3, r7, #7
 800040e:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000410:	240f      	movs	r4, #15
 8000412:	193a      	adds	r2, r7, r4
 8000414:	1df9      	adds	r1, r7, #7
 8000416:	4806      	ldr	r0, [pc, #24]	@ (8000430 <RC522_SPI_Transfer+0x2c>)
 8000418:	2364      	movs	r3, #100	@ 0x64
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2301      	movs	r3, #1
 800041e:	f003 fb01 	bl	8003a24 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	781b      	ldrb	r3, [r3, #0]
}
 8000426:	0018      	movs	r0, r3
 8000428:	46bd      	mov	sp, r7
 800042a:	b005      	add	sp, #20
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	200000f0 	.word	0x200000f0

08000434 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	0002      	movs	r2, r0
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	1dbb      	adds	r3, r7, #6
 8000442:	1c0a      	adds	r2, r1, #0
 8000444:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000446:	2390      	movs	r3, #144	@ 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	0018      	movs	r0, r3
 8000450:	f002 f849 	bl	80024e6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	227e      	movs	r2, #126	@ 0x7e
 800045e:	4013      	ands	r3, r2
 8000460:	b2db      	uxtb	r3, r3
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff ffce 	bl	8000404 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ffc9 	bl	8000404 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000472:	2390      	movs	r3, #144	@ 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2201      	movs	r2, #1
 8000478:	2110      	movs	r1, #16
 800047a:	0018      	movs	r0, r3
 800047c:	f002 f833 	bl	80024e6 <HAL_GPIO_WritePin>
}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	0002      	movs	r2, r0
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000494:	2390      	movs	r3, #144	@ 0x90
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	2200      	movs	r2, #0
 800049a:	2110      	movs	r1, #16
 800049c:	0018      	movs	r0, r3
 800049e:	f002 f822 	bl	80024e6 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	227e      	movs	r2, #126	@ 0x7e
 80004ac:	4013      	ands	r3, r2
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	4252      	negs	r2, r2
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff ffa2 	bl	8000404 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80004c0:	250f      	movs	r5, #15
 80004c2:	197c      	adds	r4, r7, r5
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ff9d 	bl	8000404 <RC522_SPI_Transfer>
 80004ca:	0003      	movs	r3, r0
 80004cc:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80004ce:	2390      	movs	r3, #144	@ 0x90
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	2201      	movs	r2, #1
 80004d4:	2110      	movs	r1, #16
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 f805 	bl	80024e6 <HAL_GPIO_WritePin>

	return val;
 80004dc:	197b      	adds	r3, r7, r5
 80004de:	781b      	ldrb	r3, [r3, #0]

}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}

080004e8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	1c0a      	adds	r2, r1, #0
 80004f8:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80004fa:	250f      	movs	r5, #15
 80004fc:	197c      	adds	r4, r7, r5
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ffc0 	bl	8000488 <Read_MFRC522>
 8000508:	0003      	movs	r3, r0
 800050a:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800050c:	197a      	adds	r2, r7, r5
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	7812      	ldrb	r2, [r2, #0]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff ff88 	bl	8000434 <Write_MFRC522>
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bdb0      	pop	{r4, r5, r7, pc}

0800052c <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800053e:	250f      	movs	r5, #15
 8000540:	197c      	adds	r4, r7, r5
 8000542:	1dfb      	adds	r3, r7, #7
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ff9e 	bl	8000488 <Read_MFRC522>
 800054c:	0003      	movs	r3, r0
 800054e:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b25b      	sxtb	r3, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	b25b      	sxtb	r3, r3
 800055a:	197a      	adds	r2, r7, r5
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	b252      	sxtb	r2, r2
 8000560:	4013      	ands	r3, r2
 8000562:	b25b      	sxtb	r3, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ff61 	bl	8000434 <Write_MFRC522>
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b004      	add	sp, #16
 8000578:	bdb0      	pop	{r4, r5, r7, pc}

0800057a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800057e:	2014      	movs	r0, #20
 8000580:	f7ff ff82 	bl	8000488 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000584:	2103      	movs	r1, #3
 8000586:	2014      	movs	r0, #20
 8000588:	f7ff ffae 	bl	80004e8 <SetBitMask>
}
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000596:	210f      	movs	r1, #15
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ff4b 	bl	8000434 <Write_MFRC522>
}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005a8:	2390      	movs	r3, #144	@ 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 ff98 	bl	80024e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80005b6:	2390      	movs	r3, #144	@ 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2201      	movs	r2, #1
 80005bc:	2101      	movs	r1, #1
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 ff91 	bl	80024e6 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80005c4:	f7ff ffe5 	bl	8000592 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80005c8:	218d      	movs	r1, #141	@ 0x8d
 80005ca:	202a      	movs	r0, #42	@ 0x2a
 80005cc:	f7ff ff32 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80005d0:	213e      	movs	r1, #62	@ 0x3e
 80005d2:	202b      	movs	r0, #43	@ 0x2b
 80005d4:	f7ff ff2e 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80005d8:	211e      	movs	r1, #30
 80005da:	202d      	movs	r0, #45	@ 0x2d
 80005dc:	f7ff ff2a 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	202c      	movs	r0, #44	@ 0x2c
 80005e4:	f7ff ff26 	bl	8000434 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80005e8:	2140      	movs	r1, #64	@ 0x40
 80005ea:	2015      	movs	r0, #21
 80005ec:	f7ff ff22 	bl	8000434 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80005f0:	213d      	movs	r1, #61	@ 0x3d
 80005f2:	2011      	movs	r0, #17
 80005f4:	f7ff ff1e 	bl	8000434 <Write_MFRC522>

	AntennaOn();
 80005f8:	f7ff ffbf 	bl	800057a <AntennaOn>
}
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000602:	b5b0      	push	{r4, r5, r7, lr}
 8000604:	b088      	sub	sp, #32
 8000606:	af00      	add	r7, sp, #0
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	0011      	movs	r1, r2
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	240f      	movs	r4, #15
 8000610:	193b      	adds	r3, r7, r4
 8000612:	1c02      	adds	r2, r0, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	230e      	movs	r3, #14
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	1c0a      	adds	r2, r1, #0
 800061c:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 800061e:	231f      	movs	r3, #31
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	2202      	movs	r2, #2
 8000624:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 8000626:	211e      	movs	r1, #30
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 800062e:	201d      	movs	r0, #29
 8000630:	183b      	adds	r3, r7, r0
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000636:	193b      	adds	r3, r7, r4
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b0c      	cmp	r3, #12
 800063c:	d008      	beq.n	8000650 <MFRC522_ToCard+0x4e>
 800063e:	2b0e      	cmp	r3, #14
 8000640:	d10f      	bne.n	8000662 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2212      	movs	r2, #18
 8000646:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8000648:	183b      	adds	r3, r7, r0
 800064a:	2210      	movs	r2, #16
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e009      	b.n	8000664 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000650:	231e      	movs	r3, #30
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2277      	movs	r2, #119	@ 0x77
 8000656:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8000658:	231d      	movs	r3, #29
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2230      	movs	r2, #48	@ 0x30
 800065e:	701a      	strb	r2, [r3, #0]
			break;
 8000660:	e000      	b.n	8000664 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 8000662:	46c0      	nop			@ (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000664:	231e      	movs	r3, #30
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2280      	movs	r2, #128	@ 0x80
 800066c:	4252      	negs	r2, r2
 800066e:	4313      	orrs	r3, r2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	0019      	movs	r1, r3
 8000674:	2002      	movs	r0, #2
 8000676:	f7ff fedd 	bl	8000434 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff55 	bl	800052c <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000682:	2180      	movs	r1, #128	@ 0x80
 8000684:	200a      	movs	r0, #10
 8000686:	f7ff ff2f 	bl	80004e8 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fed1 	bl	8000434 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	e00a      	b.n	80006ae <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	18d3      	adds	r3, r2, r3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	2009      	movs	r0, #9
 80006a4:	f7ff fec6 	bl	8000434 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	3301      	adds	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	230e      	movs	r3, #14
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d3ee      	bcc.n	8000698 <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80006ba:	240f      	movs	r4, #15
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	0019      	movs	r1, r3
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff feb6 	bl	8000434 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b0c      	cmp	r3, #12
 80006ce:	d103      	bne.n	80006d8 <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80006d0:	2180      	movs	r1, #128	@ 0x80
 80006d2:	200d      	movs	r0, #13
 80006d4:	f7ff ff08 	bl	80004e8 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80006d8:	23fa      	movs	r3, #250	@ 0xfa
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80006de:	251c      	movs	r5, #28
 80006e0:	197c      	adds	r4, r7, r5
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff fed0 	bl	8000488 <Read_MFRC522>
 80006e8:	0003      	movs	r3, r0
 80006ea:	7023      	strb	r3, [r4, #0]
        i--;
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00d      	beq.n	8000714 <MFRC522_ToCard+0x112>
 80006f8:	197b      	adds	r3, r7, r5
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4013      	ands	r3, r2
 8000700:	d108      	bne.n	8000714 <MFRC522_ToCard+0x112>
 8000702:	197b      	adds	r3, r7, r5
 8000704:	221d      	movs	r2, #29
 8000706:	18ba      	adds	r2, r7, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	7812      	ldrb	r2, [r2, #0]
 800070c:	4013      	ands	r3, r2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0e4      	beq.n	80006de <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	200d      	movs	r0, #13
 8000718:	f7ff ff08 	bl	800052c <ClearBitMask>

    if (i != 0)
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d100      	bne.n	8000724 <MFRC522_ToCard+0x122>
 8000722:	e070      	b.n	8000806 <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000724:	2006      	movs	r0, #6
 8000726:	f7ff feaf 	bl	8000488 <Read_MFRC522>
 800072a:	0003      	movs	r3, r0
 800072c:	001a      	movs	r2, r3
 800072e:	231b      	movs	r3, #27
 8000730:	4013      	ands	r3, r2
 8000732:	d164      	bne.n	80007fe <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8000734:	211f      	movs	r1, #31
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 800073c:	231c      	movs	r3, #28
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	221e      	movs	r2, #30
 8000742:	18ba      	adds	r2, r7, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	4013      	ands	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	001a      	movs	r2, r3
 800074e:	2301      	movs	r3, #1
 8000750:	4013      	ands	r3, r2
 8000752:	d002      	beq.n	800075a <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 800075a:	230f      	movs	r3, #15
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	d150      	bne.n	8000806 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000764:	251c      	movs	r5, #28
 8000766:	197c      	adds	r4, r7, r5
 8000768:	200a      	movs	r0, #10
 800076a:	f7ff fe8d 	bl	8000488 <Read_MFRC522>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000772:	200c      	movs	r0, #12
 8000774:	f7ff fe88 	bl	8000488 <Read_MFRC522>
 8000778:	0003      	movs	r3, r0
 800077a:	0019      	movs	r1, r3
 800077c:	2017      	movs	r0, #23
 800077e:	183b      	adds	r3, r7, r0
 8000780:	2207      	movs	r2, #7
 8000782:	400a      	ands	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8000786:	0001      	movs	r1, r0
 8000788:	187b      	adds	r3, r7, r1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 8000790:	197b      	adds	r3, r7, r5
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	00da      	lsls	r2, r3, #3
 8000798:	187b      	adds	r3, r7, r1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	001a      	movs	r2, r3
 80007a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e006      	b.n	80007b4 <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 80007a6:	231c      	movs	r3, #28
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	001a      	movs	r2, r3
 80007b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007b2:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80007b4:	221c      	movs	r2, #28
 80007b6:	18bb      	adds	r3, r7, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d102      	bne.n	80007c4 <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 80007be:	18bb      	adds	r3, r7, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 80007c4:	221c      	movs	r2, #28
 80007c6:	18bb      	adds	r3, r7, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b10      	cmp	r3, #16
 80007cc:	d902      	bls.n	80007d4 <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 80007ce:	18bb      	adds	r3, r7, r2
 80007d0:	2210      	movs	r2, #16
 80007d2:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	e00a      	b.n	80007f0 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	18d4      	adds	r4, r2, r3
 80007e0:	2009      	movs	r0, #9
 80007e2:	f7ff fe51 	bl	8000488 <Read_MFRC522>
 80007e6:	0003      	movs	r3, r0
 80007e8:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3301      	adds	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	231c      	movs	r3, #28
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3ee      	bcc.n	80007da <MFRC522_ToCard+0x1d8>
 80007fc:	e003      	b.n	8000806 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80007fe:	231f      	movs	r3, #31
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	2202      	movs	r2, #2
 8000804:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000806:	231f      	movs	r3, #31
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	781b      	ldrb	r3, [r3, #0]
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b008      	add	sp, #32
 8000812:	bdb0      	pop	{r4, r5, r7, pc}

08000814 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000814:	b5b0      	push	{r4, r5, r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	0002      	movs	r2, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000822:	2107      	movs	r1, #7
 8000824:	200d      	movs	r0, #13
 8000826:	f7ff fe05 	bl	8000434 <Write_MFRC522>

	TagType[0] = reqMode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	1dfa      	adds	r2, r7, #7
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000832:	250f      	movs	r5, #15
 8000834:	197c      	adds	r4, r7, r5
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	2308      	movs	r3, #8
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	0013      	movs	r3, r2
 8000842:	2201      	movs	r2, #1
 8000844:	200c      	movs	r0, #12
 8000846:	f7ff fedc 	bl	8000602 <MFRC522_ToCard>
 800084a:	0003      	movs	r3, r0
 800084c:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 800084e:	197b      	adds	r3, r7, r5
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d102      	bne.n	800085c <MFRC522_Request+0x48>
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b10      	cmp	r3, #16
 800085a:	d003      	beq.n	8000864 <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 800085c:	230f      	movs	r3, #15
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000864:	230f      	movs	r3, #15
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	781b      	ldrb	r3, [r3, #0]
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bdb0      	pop	{r4, r5, r7, pc}

08000872 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000872:	b5b0      	push	{r4, r5, r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af02      	add	r7, sp, #8
 8000878:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800087a:	230d      	movs	r3, #13
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000882:	2100      	movs	r1, #0
 8000884:	200d      	movs	r0, #13
 8000886:	f7ff fdd5 	bl	8000434 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2293      	movs	r2, #147	@ 0x93
 800088e:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3301      	adds	r3, #1
 8000894:	2220      	movs	r2, #32
 8000896:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000898:	250f      	movs	r5, #15
 800089a:	197c      	adds	r4, r7, r5
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	2308      	movs	r3, #8
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	0013      	movs	r3, r2
 80008a8:	2202      	movs	r2, #2
 80008aa:	200c      	movs	r0, #12
 80008ac:	f7ff fea9 	bl	8000602 <MFRC522_ToCard>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 80008b4:	197b      	adds	r3, r7, r5
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d128      	bne.n	800090e <MFRC522_Anticoll+0x9c>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80008bc:	230e      	movs	r3, #14
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e010      	b.n	80008e8 <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 80008c6:	200e      	movs	r0, #14
 80008c8:	183b      	adds	r3, r7, r0
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	7819      	ldrb	r1, [r3, #0]
 80008d2:	220d      	movs	r2, #13
 80008d4:	18bb      	adds	r3, r7, r2
 80008d6:	18ba      	adds	r2, r7, r2
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	404a      	eors	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 80008de:	183b      	adds	r3, r7, r0
 80008e0:	781a      	ldrb	r2, [r3, #0]
 80008e2:	183b      	adds	r3, r7, r0
 80008e4:	3201      	adds	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	220e      	movs	r2, #14
 80008ea:	18bb      	adds	r3, r7, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d9e9      	bls.n	80008c6 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 80008f2:	18bb      	adds	r3, r7, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	220d      	movs	r2, #13
 80008fe:	18ba      	adds	r2, r7, r2
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d003      	beq.n	800090e <MFRC522_Anticoll+0x9c>
		{
			status = MI_ERR;
 8000906:	230f      	movs	r3, #15
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2202      	movs	r2, #2
 800090c:	701a      	strb	r2, [r3, #0]
		}
    }

    return status;
 800090e:	230f      	movs	r3, #15
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bdb0      	pop	{r4, r5, r7, pc}

0800091c <rgb>:
int red = 0;
int status_led =1;
int increasing = 1;
int decreasing = 0;

void rgb(int red, int green, int blue){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100 - blue);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2264      	movs	r2, #100	@ 0x64
 800092c:	1ad2      	subs	r2, r2, r3
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <rgb+0x38>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 110 - green);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	226e      	movs	r2, #110	@ 0x6e
 8000938:	1ad2      	subs	r2, r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <rgb+0x38>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 120 - red);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2278      	movs	r2, #120	@ 0x78
 8000944:	1ad2      	subs	r2, r2, r3
 8000946:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <rgb+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b004      	add	sp, #16
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000154 	.word	0x20000154

08000958 <getKeyinput>:
 */
#include "button.h"

int count  = 0;
int buttonFlag[2] = {0,0};
void getKeyinput(){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	if (count > 0) count--;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <getKeyinput+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd04      	ble.n	800096e <getKeyinput+0x16>
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <getKeyinput+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <getKeyinput+0x64>)
 800096c:	601a      	str	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <getKeyinput+0x64>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10d      	bne.n	8000992 <getKeyinput+0x3a>
 8000976:	2390      	movs	r3, #144	@ 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2102      	movs	r1, #2
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fd95 	bl	80024ac <HAL_GPIO_ReadPin>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d105      	bne.n	8000992 <getKeyinput+0x3a>
		buttonFlag[0] = 1;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <getKeyinput+0x68>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
		count = 10;
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <getKeyinput+0x64>)
 800098e:	220a      	movs	r2, #10
 8000990:	601a      	str	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <getKeyinput+0x64>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10d      	bne.n	80009b6 <getKeyinput+0x5e>
 800099a:	2390      	movs	r3, #144	@ 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2108      	movs	r1, #8
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fd83 	bl	80024ac <HAL_GPIO_ReadPin>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d105      	bne.n	80009b6 <getKeyinput+0x5e>
		buttonFlag[1] = 1;
 80009aa:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <getKeyinput+0x68>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	605a      	str	r2, [r3, #4]
		count = 10;
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <getKeyinput+0x64>)
 80009b2:	220a      	movs	r2, #10
 80009b4:	601a      	str	r2, [r3, #0]
	}
}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000084 	.word	0x20000084
 80009c0:	20000088 	.word	0x20000088

080009c4 <isButtonPress>:
int isButtonPress(int i){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <isButtonPress+0x2c>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	58d3      	ldr	r3, [r2, r3]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d106      	bne.n	80009e6 <isButtonPress+0x22>
		buttonFlag[i] = 0;
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <isButtonPress+0x2c>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	0092      	lsls	r2, r2, #2
 80009de:	2100      	movs	r1, #0
 80009e0:	50d1      	str	r1, [r2, r3]
		return 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <isButtonPress+0x24>
	}
	return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000088 	.word	0x20000088

080009f4 <fsm>:

#include "fsm.h"

int status = INIT;
uint8_t * data_uart ;
void fsm(uint8_t * readCard, uint8_t status_read){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	000a      	movs	r2, r1
 80009fe:	1cfb      	adds	r3, r7, #3
 8000a00:	701a      	strb	r2, [r3, #0]
	switch (status) {
 8000a02:	4b98      	ldr	r3, [pc, #608]	@ (8000c64 <fsm+0x270>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d900      	bls.n	8000a0c <fsm+0x18>
 8000a0a:	e112      	b.n	8000c32 <fsm+0x23e>
 8000a0c:	009a      	lsls	r2, r3, #2
 8000a0e:	4b96      	ldr	r3, [pc, #600]	@ (8000c68 <fsm+0x274>)
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	469f      	mov	pc, r3
		case INIT:
			lcd_clear_display();
 8000a16:	f000 fb2f 	bl	8001078 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fb36 	bl	800108e <lcd_goto_XY>
			lcd_send_string("PUT ON YOUR CARD");
 8000a22:	4b92      	ldr	r3, [pc, #584]	@ (8000c6c <fsm+0x278>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fb12 	bl	800104e <lcd_send_string>
			lcd_goto_XY(0, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fb2e 	bl	800108e <lcd_goto_XY>
			lcd_send_string("TO CONTROL LED");
 8000a32:	4b8f      	ldr	r3, [pc, #572]	@ (8000c70 <fsm+0x27c>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fb0a 	bl	800104e <lcd_send_string>
			status = WAITCARD;
 8000a3a:	4b8a      	ldr	r3, [pc, #552]	@ (8000c64 <fsm+0x270>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
		case WAITCARD:
			if(status_read != MI_OK){
 8000a40:	1cfb      	adds	r3, r7, #3
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d000      	beq.n	8000a4a <fsm+0x56>
 8000a48:	e0f5      	b.n	8000c36 <fsm+0x242>
				break;
			}
			if(check_Card(readCard) == 2){ // MASTER CARD
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 f92d 	bl	8000cac <check_Card>
 8000a52:	0003      	movs	r3, r0
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d123      	bne.n	8000aa0 <fsm+0xac>
				sendDataToESP32("MASTER LOGGIN\r\n");
 8000a58:	4b86      	ldr	r3, [pc, #536]	@ (8000c74 <fsm+0x280>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 f894 	bl	8001b88 <sendDataToESP32>
				setTimer(0, 3000);
 8000a60:	4b85      	ldr	r3, [pc, #532]	@ (8000c78 <fsm+0x284>)
 8000a62:	0019      	movs	r1, r3
 8000a64:	2000      	movs	r0, #0
 8000a66:	f001 f835 	bl	8001ad4 <setTimer>
				rgb(60, 60, 60); // PINK
 8000a6a:	223c      	movs	r2, #60	@ 0x3c
 8000a6c:	213c      	movs	r1, #60	@ 0x3c
 8000a6e:	203c      	movs	r0, #60	@ 0x3c
 8000a70:	f7ff ff54 	bl	800091c <rgb>
				status = MASTER_INIT;
 8000a74:	4b7b      	ldr	r3, [pc, #492]	@ (8000c64 <fsm+0x270>)
 8000a76:	2202      	movs	r2, #2
 8000a78:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 8000a7a:	f000 fafd 	bl	8001078 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fb04 	bl	800108e <lcd_goto_XY>
				lcd_send_string("1. ADD CARD");
 8000a86:	4b7d      	ldr	r3, [pc, #500]	@ (8000c7c <fsm+0x288>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fae0 	bl	800104e <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 fafc 	bl	800108e <lcd_goto_XY>
				lcd_send_string("2. DELETE CARD");
 8000a96:	4b7a      	ldr	r3, [pc, #488]	@ (8000c80 <fsm+0x28c>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fad8 	bl	800104e <lcd_send_string>
				break;
 8000a9e:	e0d3      	b.n	8000c48 <fsm+0x254>
			}
			if( check_Card(readCard) == 1){ // NORMAL CARD
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f902 	bl	8000cac <check_Card>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d10e      	bne.n	8000acc <fsm+0xd8>
				sendDataToESP32("TURN LED\r\n");
 8000aae:	4b75      	ldr	r3, [pc, #468]	@ (8000c84 <fsm+0x290>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 f869 	bl	8001b88 <sendDataToESP32>
				setTimer(0, 3000);
 8000ab6:	4b70      	ldr	r3, [pc, #448]	@ (8000c78 <fsm+0x284>)
 8000ab8:	0019      	movs	r1, r3
 8000aba:	2000      	movs	r0, #0
 8000abc:	f001 f80a 	bl	8001ad4 <setTimer>
				rgb(0, 100, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2164      	movs	r1, #100	@ 0x64
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff ff29 	bl	800091c <rgb>
				break;
 8000aca:	e0bd      	b.n	8000c48 <fsm+0x254>
			}
			if (check_Card(readCard) == 0) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f8ec 	bl	8000cac <check_Card>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d000      	beq.n	8000ada <fsm+0xe6>
 8000ad8:	e0af      	b.n	8000c3a <fsm+0x246>
				lcd_clear_display();
 8000ada:	f000 facd 	bl	8001078 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 fad4 	bl	800108e <lcd_goto_XY>
				lcd_send_string("CARD NOT EXIST");
 8000ae6:	4b68      	ldr	r3, [pc, #416]	@ (8000c88 <fsm+0x294>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fab0 	bl	800104e <lcd_send_string>
				HAL_Delay(1000);
 8000aee:	23fa      	movs	r3, #250	@ 0xfa
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 f8ec 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000af8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c64 <fsm+0x270>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
			}
			break;
 8000afe:	e09c      	b.n	8000c3a <fsm+0x246>
		case MASTER_INIT:
			if(isButtonPress(0) == 1){
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff ff5f 	bl	80009c4 <isButtonPress>
 8000b06:	0003      	movs	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d10c      	bne.n	8000b26 <fsm+0x132>
				lcd_clear_display();
 8000b0c:	f000 fab4 	bl	8001078 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fabb 	bl	800108e <lcd_goto_XY>
				lcd_send_string("SET CLOSER CARD");
 8000b18:	4b5c      	ldr	r3, [pc, #368]	@ (8000c8c <fsm+0x298>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fa97 	bl	800104e <lcd_send_string>
				status = MASTER_ADDCARD;
 8000b20:	4b50      	ldr	r3, [pc, #320]	@ (8000c64 <fsm+0x270>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(1) == 1){
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff ff4c 	bl	80009c4 <isButtonPress>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d000      	beq.n	8000b34 <fsm+0x140>
 8000b32:	e084      	b.n	8000c3e <fsm+0x24a>
				lcd_clear_display();
 8000b34:	f000 faa0 	bl	8001078 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 faa7 	bl	800108e <lcd_goto_XY>
				lcd_send_string("SET CLOSER CARD");
 8000b40:	4b52      	ldr	r3, [pc, #328]	@ (8000c8c <fsm+0x298>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fa83 	bl	800104e <lcd_send_string>
				status = MASTER_DELCARD;
 8000b48:	4b46      	ldr	r3, [pc, #280]	@ (8000c64 <fsm+0x270>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b4e:	e076      	b.n	8000c3e <fsm+0x24a>
		case MASTER_ADDCARD:
			if(status_read == MI_OK){
 8000b50:	1cfb      	adds	r3, r7, #3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d000      	beq.n	8000b5a <fsm+0x166>
 8000b58:	e073      	b.n	8000c42 <fsm+0x24e>
				if(check_Card(readCard) == 1){
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 f8a5 	bl	8000cac <check_Card>
 8000b62:	0003      	movs	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d108      	bne.n	8000b7a <fsm+0x186>
					lcd_goto_XY(0, 0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fa8f 	bl	800108e <lcd_goto_XY>
					lcd_send_string("CARD EXISTED");
 8000b70:	4b47      	ldr	r3, [pc, #284]	@ (8000c90 <fsm+0x29c>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fa6b 	bl	800104e <lcd_send_string>
 8000b78:	e015      	b.n	8000ba6 <fsm+0x1b2>
				}
				else {
					add_Card(readCard);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 f8bf 	bl	8000d00 <add_Card>
					lcd_goto_XY(0, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 fa82 	bl	800108e <lcd_goto_XY>
					lcd_send_string("ADDED CARD");
 8000b8a:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <fsm+0x2a0>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fa5e 	bl	800104e <lcd_send_string>
					sendDataToESP32("ADDED CARD\r\n");
 8000b92:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <fsm+0x2a4>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fff7 	bl	8001b88 <sendDataToESP32>
					setTimer(3, 2000);
 8000b9a:	23fa      	movs	r3, #250	@ 0xfa
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 ff97 	bl	8001ad4 <setTimer>
				}
				HAL_Delay(1000);
 8000ba6:	23fa      	movs	r3, #250	@ 0xfa
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 f890 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <fsm+0x270>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bb6:	e044      	b.n	8000c42 <fsm+0x24e>
		case MASTER_DELCARD:
			if(num_Card() == 0){
 8000bb8:	f000 f948 	bl	8000e4c <num_Card>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d110      	bne.n	8000be2 <fsm+0x1ee>
				lcd_goto_XY(0, 0);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fa63 	bl	800108e <lcd_goto_XY>
				lcd_send_string(" LIST CARD EMPTY");
 8000bc8:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <fsm+0x2a8>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fa3f 	bl	800104e <lcd_send_string>
				HAL_Delay(1000);
 8000bd0:	23fa      	movs	r3, #250	@ 0xfa
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 f87b 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <fsm+0x270>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
				break;
 8000be0:	e032      	b.n	8000c48 <fsm+0x254>
			}
			if(status_read == MI_OK){
 8000be2:	1cfb      	adds	r3, r7, #3
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d12d      	bne.n	8000c46 <fsm+0x252>
				if( delete_Card(readCard) == 0){
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 f937 	bl	8000e60 <delete_Card>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d108      	bne.n	8000c08 <fsm+0x214>
					lcd_goto_XY(0, 0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 fa48 	bl	800108e <lcd_goto_XY>
					lcd_send_string("CARD NOT EXIST");
 8000bfe:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <fsm+0x294>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fa24 	bl	800104e <lcd_send_string>
 8000c06:	e00b      	b.n	8000c20 <fsm+0x22c>
				}
				else {
					lcd_goto_XY(0, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 fa3f 	bl	800108e <lcd_goto_XY>
					lcd_send_string("DELETED CARD");
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <fsm+0x2ac>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fa1b 	bl	800104e <lcd_send_string>
					sendDataToESP32("DELETED CARD\r\n");
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <fsm+0x2b0>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 ffb4 	bl	8001b88 <sendDataToESP32>
				}
				HAL_Delay(1000);
 8000c20:	23fa      	movs	r3, #250	@ 0xfa
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 f853 	bl	8001cd0 <HAL_Delay>
				status = INIT;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <fsm+0x270>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
				break;
 8000c30:	e00a      	b.n	8000c48 <fsm+0x254>
			}
			break;
		default:
			break;
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	e008      	b.n	8000c48 <fsm+0x254>
				break;
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	e006      	b.n	8000c48 <fsm+0x254>
			break;
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	e004      	b.n	8000c48 <fsm+0x254>
			break;
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	e002      	b.n	8000c48 <fsm+0x254>
			break;
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	e000      	b.n	8000c48 <fsm+0x254>
			break;
 8000c46:	46c0      	nop			@ (mov r8, r8)
	}

	if(timer_flag[0] == 1){ // sang trong 3 s
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <fsm+0x2b4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <fsm+0x266>
		rgb(100, 0, 0); // RED
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2064      	movs	r0, #100	@ 0x64
 8000c56:	f7ff fe61 	bl	800091c <rgb>
	}
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	20000090 	.word	0x20000090
 8000c68:	080065e4 	.word	0x080065e4
 8000c6c:	08006508 	.word	0x08006508
 8000c70:	0800651c 	.word	0x0800651c
 8000c74:	0800652c 	.word	0x0800652c
 8000c78:	00000bb8 	.word	0x00000bb8
 8000c7c:	0800653c 	.word	0x0800653c
 8000c80:	08006548 	.word	0x08006548
 8000c84:	08006558 	.word	0x08006558
 8000c88:	08006564 	.word	0x08006564
 8000c8c:	08006574 	.word	0x08006574
 8000c90:	08006584 	.word	0x08006584
 8000c94:	08006594 	.word	0x08006594
 8000c98:	080065a0 	.word	0x080065a0
 8000c9c:	080065b0 	.word	0x080065b0
 8000ca0:	080065c4 	.word	0x080065c4
 8000ca4:	080065d4 	.word	0x080065d4
 8000ca8:	20000004 	.word	0x20000004

08000cac <check_Card>:

const uint8_t master[4] = {243, 25, 142, 19};
uint8_t ** data = NULL;
uint8_t numCard = 0;

uint8_t check_Card(uint8_t * readCard){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if(readCard[0] == master[0] && readCard[1] == master[1] && readCard[2] == master[2] && readCard[3] == master[3]){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	22f3      	movs	r2, #243	@ 0xf3
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d113      	bne.n	8000ce6 <check_Card+0x3a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2219      	movs	r2, #25
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10d      	bne.n	8000ce6 <check_Card+0x3a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	228e      	movs	r2, #142	@ 0x8e
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d107      	bne.n	8000ce6 <check_Card+0x3a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3303      	adds	r3, #3
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2213      	movs	r2, #19
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <check_Card+0x3a>
		return 2; // MASTERCARD
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e008      	b.n	8000cf8 <check_Card+0x4c>
	}
	if (search_Card(readCard) >= 0){
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 f85f 	bl	8000dac <search_Card>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	db01      	blt.n	8000cf6 <check_Card+0x4a>
		return 1; // NORMAL CARD
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <check_Card+0x4c>
	}
	return 0; // CARD not exist
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <add_Card>:

void add_Card(uint8_t * readCard){
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	data = (uint8_t **)realloc(data, (numCard + 1) * sizeof(uint8_t *));
 8000d08:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <add_Card+0xa4>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <add_Card+0xa8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	0019      	movs	r1, r3
 8000d16:	0010      	movs	r0, r2
 8000d18:	f005 fb0e 	bl	8006338 <realloc>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <add_Card+0xa4>)
 8000d20:	601a      	str	r2, [r3, #0]
	data[numCard] = (uint8_t *)malloc(4 * sizeof(int));
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <add_Card+0xa4>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <add_Card+0xa8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	18d4      	adds	r4, r2, r3
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f005 fa3c 	bl	80061ac <malloc>
 8000d34:	0003      	movs	r3, r0
 8000d36:	6023      	str	r3, [r4, #0]
	data[numCard][0] = readCard[0];
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <add_Card+0xa4>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <add_Card+0xa8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
	data[numCard][1] = readCard[1];
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <add_Card+0xa4>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <add_Card+0xa8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	18d3      	adds	r3, r2, r3
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	7852      	ldrb	r2, [r2, #1]
 8000d60:	701a      	strb	r2, [r3, #0]
	data[numCard][2] = readCard[2];
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <add_Card+0xa4>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <add_Card+0xa8>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3302      	adds	r3, #2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	7892      	ldrb	r2, [r2, #2]
 8000d76:	701a      	strb	r2, [r3, #0]
	data[numCard][3] = readCard[3];
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <add_Card+0xa4>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <add_Card+0xa8>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	18d3      	adds	r3, r2, r3
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3303      	adds	r3, #3
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	78d2      	ldrb	r2, [r2, #3]
 8000d8c:	701a      	strb	r2, [r3, #0]
	numCard++;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <add_Card+0xa8>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <add_Card+0xa8>)
 8000d98:	701a      	strb	r2, [r3, #0]
}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b003      	add	sp, #12
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	20000094 	.word	0x20000094
 8000da8:	20000098 	.word	0x20000098

08000dac <search_Card>:

int8_t search_Card(uint8_t *readCard){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < numCard; i++){
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	e037      	b.n	8000e2a <search_Card+0x7e>
		if(data[i][0] == readCard[0] && data[i][1] == readCard[1] && data[i][2] == readCard[2] && data[i][3] == readCard[3] ){
 8000dba:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <search_Card+0x98>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	18d3      	adds	r3, r2, r3
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d129      	bne.n	8000e24 <search_Card+0x78>
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <search_Card+0x98>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	18d3      	adds	r3, r2, r3
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3301      	adds	r3, #1
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d11c      	bne.n	8000e24 <search_Card+0x78>
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <search_Card+0x98>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	18d3      	adds	r3, r2, r3
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3302      	adds	r3, #2
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d10f      	bne.n	8000e24 <search_Card+0x78>
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <search_Card+0x98>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3303      	adds	r3, #3
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3303      	adds	r3, #3
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d102      	bne.n	8000e24 <search_Card+0x78>
			return i;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	e00a      	b.n	8000e3a <search_Card+0x8e>
	for(int i = 0; i < numCard; i++){
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <search_Card+0x9c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	001a      	movs	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	dbc1      	blt.n	8000dba <search_Card+0xe>
		}
	}
	return -1; // can't searched
 8000e36:	2301      	movs	r3, #1
 8000e38:	425b      	negs	r3, r3
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	20000094 	.word	0x20000094
 8000e48:	20000098 	.word	0x20000098

08000e4c <num_Card>:
uint8_t num_Card(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	return numCard;
 8000e50:	4b02      	ldr	r3, [pc, #8]	@ (8000e5c <num_Card+0x10>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	20000098 	.word	0x20000098

08000e60 <delete_Card>:
uint8_t delete_Card(uint8_t * readCard){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	int index = search_Card(readCard);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff ff9e 	bl	8000dac <search_Card>
 8000e70:	0003      	movs	r3, r0
 8000e72:	60bb      	str	r3, [r7, #8]
	if(index == -1){
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	d101      	bne.n	8000e7e <delete_Card+0x1e>
		return 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e034      	b.n	8000ee8 <delete_Card+0x88>
	}
	free(data[index]);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <delete_Card+0x90>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	18d3      	adds	r3, r2, r3
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f005 f998 	bl	80061c0 <free>
	for (int i = index; i < numCard - 1; i++) {
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e00f      	b.n	8000eb6 <delete_Card+0x56>
	    data[i] = data[i + 1];
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <delete_Card+0x90>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	18d2      	adds	r2, r2, r3
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <delete_Card+0x90>)
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	601a      	str	r2, [r3, #0]
	for (int i = index; i < numCard - 1; i++) {
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <delete_Card+0x94>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dbe9      	blt.n	8000e96 <delete_Card+0x36>
	}
	data = (uint8_t **)realloc(data, numCard * sizeof(uint8_t *));
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <delete_Card+0x90>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <delete_Card+0x94>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	0019      	movs	r1, r3
 8000ece:	0010      	movs	r0, r2
 8000ed0:	f005 fa32 	bl	8006338 <realloc>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <delete_Card+0x90>)
 8000ed8:	601a      	str	r2, [r3, #0]
	numCard--;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <delete_Card+0x94>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <delete_Card+0x94>)
 8000ee4:	701a      	strb	r2, [r3, #0]
	return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	20000098 	.word	0x20000098

08000ef8 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

extern I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	0002      	movs	r2, r0
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f04:	200f      	movs	r0, #15
 8000f06:	183b      	adds	r3, r7, r0
 8000f08:	1dfa      	adds	r2, r7, #7
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	438a      	bics	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	011a      	lsls	r2, r3, #4
 8000f18:	240e      	movs	r4, #14
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f1e:	183b      	adds	r3, r7, r0
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	220c      	movs	r2, #12
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	2108      	movs	r1, #8
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f2e:	183b      	adds	r3, r7, r0
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2208      	movs	r2, #8
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	220c      	movs	r2, #12
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2208      	movs	r2, #8
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f58:	187a      	adds	r2, r7, r1
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <lcd_send_cmd+0x78>)
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2304      	movs	r3, #4
 8000f62:	214e      	movs	r1, #78	@ 0x4e
 8000f64:	f001 fb82 	bl	800266c <HAL_I2C_Master_Transmit>
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b005      	add	sp, #20
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	2000009c 	.word	0x2000009c

08000f74 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f80:	200f      	movs	r0, #15
 8000f82:	183b      	adds	r3, r7, r0
 8000f84:	1dfa      	adds	r2, r7, #7
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	210f      	movs	r1, #15
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	011a      	lsls	r2, r3, #4
 8000f94:	240e      	movs	r4, #14
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f9a:	183b      	adds	r3, r7, r0
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	220d      	movs	r2, #13
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000faa:	183b      	adds	r3, r7, r0
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2209      	movs	r2, #9
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	220d      	movs	r2, #13
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2209      	movs	r2, #9
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fd4:	187a      	adds	r2, r7, r1
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <lcd_send_data+0x78>)
 8000fd8:	2364      	movs	r3, #100	@ 0x64
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2304      	movs	r3, #4
 8000fde:	214e      	movs	r1, #78	@ 0x4e
 8000fe0:	f001 fb44 	bl	800266c <HAL_I2C_Master_Transmit>
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b005      	add	sp, #20
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	2000009c 	.word	0x2000009c

08000ff0 <lcd_init>:

void lcd_init (void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000ff4:	2033      	movs	r0, #51	@ 0x33
 8000ff6:	f7ff ff7f 	bl	8000ef8 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000ffa:	2032      	movs	r0, #50	@ 0x32
 8000ffc:	f7ff ff7c 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(50);
 8001000:	2032      	movs	r0, #50	@ 0x32
 8001002:	f000 fe65 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001006:	2028      	movs	r0, #40	@ 0x28
 8001008:	f7ff ff76 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(50);
 800100c:	2032      	movs	r0, #50	@ 0x32
 800100e:	f000 fe5f 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff ff70 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(50);
 8001018:	2032      	movs	r0, #50	@ 0x32
 800101a:	f000 fe59 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800101e:	2006      	movs	r0, #6
 8001020:	f7ff ff6a 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(50);
 8001024:	2032      	movs	r0, #50	@ 0x32
 8001026:	f000 fe53 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800102a:	200c      	movs	r0, #12
 800102c:	f7ff ff64 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	@ 0x32
 8001032:	f000 fe4d 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001036:	2002      	movs	r0, #2
 8001038:	f7ff ff5e 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(50);
 800103c:	2032      	movs	r0, #50	@ 0x32
 800103e:	f000 fe47 	bl	8001cd0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001042:	2080      	movs	r0, #128	@ 0x80
 8001044:	f7ff ff58 	bl	8000ef8 <lcd_send_cmd>
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001056:	e006      	b.n	8001066 <lcd_send_string+0x18>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ff87 	bl	8000f74 <lcd_send_data>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f4      	bne.n	8001058 <lcd_send_string+0xa>
}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}

08001078 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ff3b 	bl	8000ef8 <lcd_send_cmd>
	HAL_Delay(20);
 8001082:	2014      	movs	r0, #20
 8001084:	f000 fe24 	bl	8001cd0 <HAL_Delay>
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <lcd_goto_XY>:

void lcd_goto_XY (int row, int col) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 1) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d106      	bne.n	80010ac <lcd_goto_XY+0x1e>
        pos_Addr = 0x80 + col; // Địa chỉ cho dòng đầu tiên
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	230f      	movs	r3, #15
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	3a80      	subs	r2, #128	@ 0x80
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e005      	b.n	80010b8 <lcd_goto_XY+0x2a>
    } else {
        pos_Addr = 0xC0 + col; // Địa chỉ cho dòng thứ hai
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	3a40      	subs	r2, #64	@ 0x40
 80010b6:	701a      	strb	r2, [r3, #0]
    }
    lcd_send_cmd(pos_Addr);
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff ff1a 	bl	8000ef8 <lcd_send_cmd>
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b004      	add	sp, #16
 80010ca:	bd80      	pop	{r7, pc}

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 fd9a 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f86a 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 fa22 	bl	8001520 <MX_GPIO_Init>
  MX_TIM3_Init();
 80010dc:	f000 f93e 	bl	800135c <MX_TIM3_Init>
  MX_DMA_Init();
 80010e0:	f000 fa00 	bl	80014e4 <MX_DMA_Init>
  MX_SPI1_Init();
 80010e4:	f000 f8fc 	bl	80012e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010e8:	f000 f9cc 	bl	8001484 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010ec:	f000 f8b8 	bl	8001260 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 80010f0:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <main+0xc8>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f003 f946 	bl	8004384 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <main+0xc8>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	0018      	movs	r0, r3
 80010fe:	f003 f9e5 	bl	80044cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001102:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <main+0xc8>)
 8001104:	2104      	movs	r1, #4
 8001106:	0018      	movs	r0, r3
 8001108:	f003 f9e0 	bl	80044cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800110c:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <main+0xc8>)
 800110e:	210c      	movs	r1, #12
 8001110:	0018      	movs	r0, r3
 8001112:	f003 f9db 	bl	80044cc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 8001116:	f7ff ff6b 	bl	8000ff0 <lcd_init>
  MFRC522_Init();
 800111a:	f7ff fa43 	bl	80005a4 <MFRC522_Init>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <main+0xcc>)
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	0018      	movs	r0, r3
 8001126:	f001 f9de 	bl	80024e6 <HAL_GPIO_WritePin>

   while (1)
   {
		status_read = MFRC522_Request(PICC_REQIDL, str);
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <main+0xd0>)
 800112c:	0019      	movs	r1, r3
 800112e:	2026      	movs	r0, #38	@ 0x26
 8001130:	f7ff fb70 	bl	8000814 <MFRC522_Request>
 8001134:	0003      	movs	r3, r0
 8001136:	001a      	movs	r2, r3
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <main+0xd4>)
 800113a:	701a      	strb	r2, [r3, #0]
		status_read = MFRC522_Anticoll(str);
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <main+0xd0>)
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff fb97 	bl	8000872 <MFRC522_Anticoll>
 8001144:	0003      	movs	r3, r0
 8001146:	001a      	movs	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <main+0xd4>)
 800114a:	701a      	strb	r2, [r3, #0]
		memcpy(readCard, str, 4);
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <main+0xd0>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <main+0xd8>)
 8001152:	601a      	str	r2, [r3, #0]

		if(status_read == MI_OK){
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <main+0xd4>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d109      	bne.n	8001170 <main+0xa4>
			setTimer(1, 60);// buzz
 800115c:	213c      	movs	r1, #60	@ 0x3c
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fcb8 	bl	8001ad4 <setTimer>
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 1);
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <main+0xcc>)
 8001166:	2201      	movs	r2, #1
 8001168:	2101      	movs	r1, #1
 800116a:	0018      	movs	r0, r3
 800116c:	f001 f9bb 	bl	80024e6 <HAL_GPIO_WritePin>
		}
		if(timer_flag[1] == 1){
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <main+0xdc>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <main+0xb8>
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <main+0xcc>)
 800117a:	2200      	movs	r2, #0
 800117c:	2101      	movs	r1, #1
 800117e:	0018      	movs	r0, r3
 8001180:	f001 f9b1 	bl	80024e6 <HAL_GPIO_WritePin>
		}
		fsm(readCard, status_read);
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <main+0xd4>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <main+0xd8>)
 800118a:	0011      	movs	r1, r2
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fc31 	bl	80009f4 <fsm>
		status_read = MFRC522_Request(PICC_REQIDL, str);
 8001192:	e7ca      	b.n	800112a <main+0x5e>
 8001194:	20000154 	.word	0x20000154
 8001198:	48001400 	.word	0x48001400
 800119c:	2000026c 	.word	0x2000026c
 80011a0:	20000268 	.word	0x20000268
 80011a4:	2000027c 	.word	0x2000027c
 80011a8:	20000004 	.word	0x20000004

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b095      	sub	sp, #84	@ 0x54
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	2420      	movs	r4, #32
 80011b4:	193b      	adds	r3, r7, r4
 80011b6:	0018      	movs	r0, r3
 80011b8:	2330      	movs	r3, #48	@ 0x30
 80011ba:	001a      	movs	r2, r3
 80011bc:	2100      	movs	r1, #0
 80011be:	f005 f8f4 	bl	80063aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c2:	2310      	movs	r3, #16
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	0018      	movs	r0, r3
 80011c8:	2310      	movs	r3, #16
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f005 f8ec 	bl	80063aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d2:	003b      	movs	r3, r7
 80011d4:	0018      	movs	r0, r3
 80011d6:	2310      	movs	r3, #16
 80011d8:	001a      	movs	r2, r3
 80011da:	2100      	movs	r1, #0
 80011dc:	f005 f8e5 	bl	80063aa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e0:	0021      	movs	r1, r4
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2202      	movs	r2, #2
 80011e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2201      	movs	r2, #1
 80011ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2210      	movs	r2, #16
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	0018      	movs	r0, r3
 80011fe:	f001 fe2d 	bl	8002e5c <HAL_RCC_OscConfig>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001206:	f000 fa25 	bl	8001654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120a:	2110      	movs	r1, #16
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2207      	movs	r2, #7
 8001210:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2100      	movs	r1, #0
 8001228:	0018      	movs	r0, r3
 800122a:	f002 f931 	bl	8003490 <HAL_RCC_ClockConfig>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001232:	f000 fa0f 	bl	8001654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001236:	003b      	movs	r3, r7
 8001238:	2221      	movs	r2, #33	@ 0x21
 800123a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001248:	003b      	movs	r3, r7
 800124a:	0018      	movs	r0, r3
 800124c:	f002 fa64 	bl	8003718 <HAL_RCCEx_PeriphCLKConfig>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001254:	f000 f9fe 	bl	8001654 <Error_Handler>
  }
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b015      	add	sp, #84	@ 0x54
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_I2C1_Init+0x74>)
 8001266:	4a1c      	ldr	r2, [pc, #112]	@ (80012d8 <MX_I2C1_Init+0x78>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_I2C1_Init+0x74>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <MX_I2C1_Init+0x7c>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <MX_I2C1_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <MX_I2C1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_I2C1_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_I2C1_Init+0x74>)
 800129c:	0018      	movs	r0, r3
 800129e:	f001 f93f 	bl	8002520 <HAL_I2C_Init>
 80012a2:	1e03      	subs	r3, r0, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012a6:	f000 f9d5 	bl	8001654 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <MX_I2C1_Init+0x74>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 fd3c 	bl	8002d2c <HAL_I2CEx_ConfigAnalogFilter>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 f9cc 	bl	8001654 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <MX_I2C1_Init+0x74>)
 80012be:	2100      	movs	r1, #0
 80012c0:	0018      	movs	r0, r3
 80012c2:	f001 fd7f 	bl	8002dc4 <HAL_I2CEx_ConfigDigitalFilter>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f9c3 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000009c 	.word	0x2000009c
 80012d8:	40005400 	.word	0x40005400
 80012dc:	2000090e 	.word	0x2000090e

080012e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <MX_SPI1_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <MX_SPI1_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_SPI1_Init+0x74>)
 80012ec:	2282      	movs	r2, #130	@ 0x82
 80012ee:	0052      	lsls	r2, r2, #1
 80012f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <MX_SPI1_Init+0x74>)
 80012fa:	22e0      	movs	r2, #224	@ 0xe0
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <MX_SPI1_Init+0x74>)
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <MX_SPI1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <MX_SPI1_Init+0x74>)
 800132e:	2207      	movs	r2, #7
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <MX_SPI1_Init+0x74>)
 800133a:	2208      	movs	r2, #8
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <MX_SPI1_Init+0x74>)
 8001340:	0018      	movs	r0, r3
 8001342:	f002 fab7 	bl	80038b4 <HAL_SPI_Init>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 f983 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000f0 	.word	0x200000f0
 8001358:	40013000 	.word	0x40013000

0800135c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	@ 0x38
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	2328      	movs	r3, #40	@ 0x28
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	0018      	movs	r0, r3
 8001368:	2310      	movs	r3, #16
 800136a:	001a      	movs	r2, r3
 800136c:	2100      	movs	r1, #0
 800136e:	f005 f81c 	bl	80063aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	2320      	movs	r3, #32
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	0018      	movs	r0, r3
 8001378:	2308      	movs	r3, #8
 800137a:	001a      	movs	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f005 f814 	bl	80063aa <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	0018      	movs	r0, r3
 8001386:	231c      	movs	r3, #28
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f005 f80d 	bl	80063aa <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <MX_TIM3_Init+0x11c>)
 8001392:	4a3a      	ldr	r2, [pc, #232]	@ (800147c <MX_TIM3_Init+0x120>)
 8001394:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8001396:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <MX_TIM3_Init+0x11c>)
 8001398:	4a39      	ldr	r2, [pc, #228]	@ (8001480 <MX_TIM3_Init+0x124>)
 800139a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b36      	ldr	r3, [pc, #216]	@ (8001478 <MX_TIM3_Init+0x11c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80013a2:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <MX_TIM3_Init+0x11c>)
 80013a4:	2263      	movs	r2, #99	@ 0x63
 80013a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <MX_TIM3_Init+0x11c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b32      	ldr	r3, [pc, #200]	@ (8001478 <MX_TIM3_Init+0x11c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <MX_TIM3_Init+0x11c>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f002 ff94 	bl	80042e4 <HAL_TIM_Base_Init>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013c0:	f000 f948 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	2128      	movs	r1, #40	@ 0x28
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	0152      	lsls	r2, r2, #5
 80013cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ce:	187a      	adds	r2, r7, r1
 80013d0:	4b29      	ldr	r3, [pc, #164]	@ (8001478 <MX_TIM3_Init+0x11c>)
 80013d2:	0011      	movs	r1, r2
 80013d4:	0018      	movs	r0, r3
 80013d6:	f003 fad9 	bl	800498c <HAL_TIM_ConfigClockSource>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013de:	f000 f939 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e2:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <MX_TIM3_Init+0x11c>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f003 f819 	bl	800441c <HAL_TIM_PWM_Init>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013ee:	f000 f931 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2120      	movs	r1, #32
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001400:	187a      	adds	r2, r7, r1
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_TIM3_Init+0x11c>)
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f003 fed6 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001410:	f000 f920 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2260      	movs	r2, #96	@ 0x60
 8001418:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	1d39      	adds	r1, r7, #4
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_TIM3_Init+0x11c>)
 8001430:	2200      	movs	r2, #0
 8001432:	0018      	movs	r0, r3
 8001434:	f003 f9e4 	bl	8004800 <HAL_TIM_PWM_ConfigChannel>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800143c:	f000 f90a 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001440:	1d39      	adds	r1, r7, #4
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <MX_TIM3_Init+0x11c>)
 8001444:	2204      	movs	r2, #4
 8001446:	0018      	movs	r0, r3
 8001448:	f003 f9da 	bl	8004800 <HAL_TIM_PWM_ConfigChannel>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8001450:	f000 f900 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_TIM3_Init+0x11c>)
 8001458:	220c      	movs	r2, #12
 800145a:	0018      	movs	r0, r3
 800145c:	f003 f9d0 	bl	8004800 <HAL_TIM_PWM_ConfigChannel>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8001464:	f000 f8f6 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <MX_TIM3_Init+0x11c>)
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fa16 	bl	800189c <HAL_TIM_MspPostInit>

}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b00e      	add	sp, #56	@ 0x38
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000154 	.word	0x20000154
 800147c:	40000400 	.word	0x40000400
 8001480:	0000031f 	.word	0x0000031f

08001484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 800148a:	4a15      	ldr	r2, [pc, #84]	@ (80014e0 <MX_USART1_UART_Init+0x5c>)
 800148c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 8001490:	22e1      	movs	r2, #225	@ 0xe1
 8001492:	0252      	lsls	r2, r2, #9
 8001494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <MX_USART1_UART_Init+0x58>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f003 fedd 	bl	8005288 <HAL_UART_Init>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014d2:	f000 f8bf 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d6:	46c0      	nop			@ (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200001e0 	.word	0x200001e0
 80014e0:	40013800 	.word	0x40013800

080014e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_DMA_Init+0x38>)
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <MX_DMA_Init+0x38>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	430a      	orrs	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_DMA_Init+0x38>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2201      	movs	r2, #1
 80014fc:	4013      	ands	r3, r2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	200a      	movs	r0, #10
 8001508:	f000 fcb2 	bl	8001e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800150c:	200a      	movs	r0, #10
 800150e:	f000 fcc4 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	40021000 	.word	0x40021000

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	240c      	movs	r4, #12
 8001528:	193b      	adds	r3, r7, r4
 800152a:	0018      	movs	r0, r3
 800152c:	2314      	movs	r3, #20
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f004 ff3a 	bl	80063aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001536:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	4b43      	ldr	r3, [pc, #268]	@ (8001648 <MX_GPIO_Init+0x128>)
 800153c:	2180      	movs	r1, #128	@ 0x80
 800153e:	03c9      	lsls	r1, r1, #15
 8001540:	430a      	orrs	r2, r1
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	2380      	movs	r3, #128	@ 0x80
 800154a:	03db      	lsls	r3, r3, #15
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	4b3c      	ldr	r3, [pc, #240]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	0289      	lsls	r1, r1, #10
 800155c:	430a      	orrs	r2, r1
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b39      	ldr	r3, [pc, #228]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	029b      	lsls	r3, r3, #10
 8001568:	4013      	ands	r3, r2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <MX_GPIO_Init+0x128>)
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	02c9      	lsls	r1, r1, #11
 8001578:	430a      	orrs	r2, r1
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <MX_GPIO_Init+0x128>)
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	02db      	lsls	r3, r3, #11
 8001584:	4013      	ands	r3, r2
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 800158a:	4b30      	ldr	r3, [pc, #192]	@ (800164c <MX_GPIO_Init+0x12c>)
 800158c:	2200      	movs	r2, #0
 800158e:	2101      	movs	r1, #1
 8001590:	0018      	movs	r0, r3
 8001592:	f000 ffa8 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_RESET_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 8001596:	2390      	movs	r3, #144	@ 0x90
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	2200      	movs	r2, #0
 800159c:	2111      	movs	r1, #17
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 ffa1 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 80015a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <MX_GPIO_Init+0x130>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	2108      	movs	r1, #8
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 ff9b 	bl	80024e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2201      	movs	r2, #1
 80015ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	4a20      	ldr	r2, [pc, #128]	@ (800164c <MX_GPIO_Init+0x12c>)
 80015cc:	0019      	movs	r1, r3
 80015ce:	0010      	movs	r0, r2
 80015d0:	f000 fe04 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_RESET_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin|RC522_CS_Pin;
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	2211      	movs	r2, #17
 80015d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	2201      	movs	r2, #1
 80015de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	193a      	adds	r2, r7, r4
 80015ee:	2390      	movs	r3, #144	@ 0x90
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fdf1 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin;
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	220a      	movs	r2, #10
 80015fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	193b      	adds	r3, r7, r4
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	193b      	adds	r3, r7, r4
 8001608:	2201      	movs	r2, #1
 800160a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	193a      	adds	r2, r7, r4
 800160e:	2390      	movs	r3, #144	@ 0x90
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f000 fde1 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 800161a:	0021      	movs	r1, r4
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2208      	movs	r2, #8
 8001620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2201      	movs	r2, #1
 8001626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001634:	187b      	adds	r3, r7, r1
 8001636:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <MX_GPIO_Init+0x130>)
 8001638:	0019      	movs	r1, r3
 800163a:	0010      	movs	r0, r2
 800163c:	f000 fdce 	bl	80021dc <HAL_GPIO_Init>

}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b009      	add	sp, #36	@ 0x24
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	48001400 	.word	0x48001400
 8001650:	48000400 	.word	0x48000400

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	46c0      	nop			@ (mov r8, r8)
 800165e:	e7fd      	b.n	800165c <Error_Handler+0x8>

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_MspInit+0x44>)
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_MspInit+0x44>)
 800166c:	2101      	movs	r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	619a      	str	r2, [r3, #24]
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_MspInit+0x44>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2201      	movs	r2, #1
 8001678:	4013      	ands	r3, r2
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_MspInit+0x44>)
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_MspInit+0x44>)
 8001684:	2180      	movs	r1, #128	@ 0x80
 8001686:	0549      	lsls	r1, r1, #21
 8001688:	430a      	orrs	r2, r1
 800168a:	61da      	str	r2, [r3, #28]
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_MspInit+0x44>)
 800168e:	69da      	ldr	r2, [r3, #28]
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	055b      	lsls	r3, r3, #21
 8001694:	4013      	ands	r3, r2
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08b      	sub	sp, #44	@ 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	2414      	movs	r4, #20
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0018      	movs	r0, r3
 80016b6:	2314      	movs	r3, #20
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f004 fe75 	bl	80063aa <memset>
  if(hi2c->Instance==I2C1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_I2C_MspInit+0x94>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d133      	bne.n	8001732 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_I2C_MspInit+0x98>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_I2C_MspInit+0x98>)
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	0289      	lsls	r1, r1, #10
 80016d4:	430a      	orrs	r2, r1
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_I2C_MspInit+0x98>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	22c0      	movs	r2, #192	@ 0xc0
 80016ea:	00d2      	lsls	r2, r2, #3
 80016ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ee:	0021      	movs	r1, r4
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	2212      	movs	r2, #18
 80016f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2203      	movs	r2, #3
 8001700:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2204      	movs	r2, #4
 8001706:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	187a      	adds	r2, r7, r1
 800170a:	2390      	movs	r3, #144	@ 0x90
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	0011      	movs	r1, r2
 8001710:	0018      	movs	r0, r3
 8001712:	f000 fd63 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_I2C_MspInit+0x98>)
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_I2C_MspInit+0x98>)
 800171c:	2180      	movs	r1, #128	@ 0x80
 800171e:	0389      	lsls	r1, r1, #14
 8001720:	430a      	orrs	r2, r1
 8001722:	61da      	str	r2, [r3, #28]
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_I2C_MspInit+0x98>)
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	039b      	lsls	r3, r3, #14
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b00b      	add	sp, #44	@ 0x2c
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	40005400 	.word	0x40005400
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	@ 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	2414      	movs	r4, #20
 800174e:	193b      	adds	r3, r7, r4
 8001750:	0018      	movs	r0, r3
 8001752:	2314      	movs	r3, #20
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f004 fe27 	bl	80063aa <memset>
  if(hspi->Instance==SPI1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a20      	ldr	r2, [pc, #128]	@ (80017e4 <HAL_SPI_MspInit+0xa0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d13a      	bne.n	80017dc <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001768:	699a      	ldr	r2, [r3, #24]
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_SPI_MspInit+0xa4>)
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0149      	lsls	r1, r1, #5
 8001770:	430a      	orrs	r2, r1
 8001772:	619a      	str	r2, [r3, #24]
 8001774:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	015b      	lsls	r3, r3, #5
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0289      	lsls	r1, r1, #10
 800178c:	430a      	orrs	r2, r1
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800179e:	0021      	movs	r1, r4
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	22e0      	movs	r2, #224	@ 0xe0
 80017a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2202      	movs	r2, #2
 80017aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2203      	movs	r2, #3
 80017b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	187a      	adds	r2, r7, r1
 80017c0:	2390      	movs	r3, #144	@ 0x90
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fd08 	bl	80021dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2019      	movs	r0, #25
 80017d2:	f000 fb4d 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017d6:	2019      	movs	r0, #25
 80017d8:	f000 fb5f 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017dc:	46c0      	nop			@ (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b00b      	add	sp, #44	@ 0x2c
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a24      	ldr	r2, [pc, #144]	@ (800188c <HAL_TIM_Base_MspInit+0xa0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d141      	bne.n	8001882 <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_TIM_Base_MspInit+0xa4>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_TIM_Base_MspInit+0xa4>)
 8001804:	2102      	movs	r1, #2
 8001806:	430a      	orrs	r2, r1
 8001808:	61da      	str	r2, [r3, #28]
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <HAL_TIM_Base_MspInit+0xa4>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001818:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <HAL_TIM_Base_MspInit+0xac>)
 800181a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 800181e:	2210      	movs	r2, #16
 8001820:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 800182a:	2280      	movs	r2, #128	@ 0x80
 800182c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	0052      	lsls	r2, r2, #1
 8001834:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001838:	2280      	movs	r2, #128	@ 0x80
 800183a:	00d2      	lsls	r2, r2, #3
 800183c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 800184c:	0018      	movs	r0, r3
 800184e:	f000 fb41 	bl	8001ed4 <HAL_DMA_Init>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d001      	beq.n	800185a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001856:	f7ff fefd 	bl	8001654 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 800185e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 800186a:	621a      	str	r2, [r3, #32]
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_TIM_Base_MspInit+0xa8>)
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2010      	movs	r0, #16
 8001878:	f000 fafa 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800187c:	2010      	movs	r0, #16
 800187e:	f000 fb0c 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b004      	add	sp, #16
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	40000400 	.word	0x40000400
 8001890:	40021000 	.word	0x40021000
 8001894:	2000019c 	.word	0x2000019c
 8001898:	40020030 	.word	0x40020030

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	240c      	movs	r4, #12
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	0018      	movs	r0, r3
 80018aa:	2314      	movs	r3, #20
 80018ac:	001a      	movs	r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	f004 fd7b 	bl	80063aa <memset>
  if(htim->Instance==TIM3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a15      	ldr	r2, [pc, #84]	@ (8001910 <HAL_TIM_MspPostInit+0x74>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d123      	bne.n	8001906 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_TIM_MspPostInit+0x78>)
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_TIM_MspPostInit+0x78>)
 80018c4:	2180      	movs	r1, #128	@ 0x80
 80018c6:	02c9      	lsls	r1, r1, #11
 80018c8:	430a      	orrs	r2, r1
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_TIM_MspPostInit+0x78>)
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	02db      	lsls	r3, r3, #11
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 80018da:	0021      	movs	r1, r4
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2232      	movs	r2, #50	@ 0x32
 80018e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2202      	movs	r2, #2
 80018e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2201      	movs	r2, #1
 80018f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <HAL_TIM_MspPostInit+0x7c>)
 80018fe:	0019      	movs	r1, r3
 8001900:	0010      	movs	r0, r2
 8001902:	f000 fc6b 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b009      	add	sp, #36	@ 0x24
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40000400 	.word	0x40000400
 8001914:	40021000 	.word	0x40021000
 8001918:	48000400 	.word	0x48000400

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b08b      	sub	sp, #44	@ 0x2c
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	2414      	movs	r4, #20
 8001926:	193b      	adds	r3, r7, r4
 8001928:	0018      	movs	r0, r3
 800192a:	2314      	movs	r3, #20
 800192c:	001a      	movs	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	f004 fd3b 	bl	80063aa <memset>
  if(huart->Instance==USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <HAL_UART_MspInit+0xa0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d139      	bne.n	80019b2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_UART_MspInit+0xa4>)
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <HAL_UART_MspInit+0xa4>)
 8001944:	2180      	movs	r1, #128	@ 0x80
 8001946:	01c9      	lsls	r1, r1, #7
 8001948:	430a      	orrs	r2, r1
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <HAL_UART_MspInit+0xa4>)
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	01db      	lsls	r3, r3, #7
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_UART_MspInit+0xa4>)
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_UART_MspInit+0xa4>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	02c9      	lsls	r1, r1, #11
 8001964:	430a      	orrs	r2, r1
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_UART_MspInit+0xa4>)
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	02db      	lsls	r3, r3, #11
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001976:	0021      	movs	r1, r4
 8001978:	187b      	adds	r3, r7, r1
 800197a:	22c0      	movs	r2, #192	@ 0xc0
 800197c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2202      	movs	r2, #2
 8001982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2203      	movs	r2, #3
 800198e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	187b      	adds	r3, r7, r1
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_UART_MspInit+0xa8>)
 800199a:	0019      	movs	r1, r3
 800199c:	0010      	movs	r0, r2
 800199e:	f000 fc1d 	bl	80021dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201b      	movs	r0, #27
 80019a8:	f000 fa62 	bl	8001e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ac:	201b      	movs	r0, #27
 80019ae:	f000 fa74 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b00b      	add	sp, #44	@ 0x2c
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	46c0      	nop			@ (mov r8, r8)
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f952 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	46c0      	nop			@ (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 fb2b 	bl	800205e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	2000019c 	.word	0x2000019c

08001a14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <TIM3_IRQHandler+0x14>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 fe02 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	20000154 	.word	0x20000154

08001a2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <SPI1_IRQHandler+0x14>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f002 f9d8 	bl	8003de8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	200000f0 	.word	0x200000f0

08001a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <USART1_IRQHandler+0x14>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f003 fd10 	bl	8005470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	200001e0 	.word	0x200001e0

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f004 fca8 	bl	80063e0 <__errno>
 8001a90:	0003      	movs	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	425b      	negs	r3, r3
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	18d2      	adds	r2, r2, r3
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <_sbrk+0x64>)
 8001aac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b006      	add	sp, #24
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20001000 	.word	0x20001000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	20000280 	.word	0x20000280
 8001ac4:	200003e0 	.word	0x200003e0

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <setTimer>:


int counter[3] = {0, 0, 0};
int timer_flag[3] = {0, 0, 1};// FLAG[2] = 1 TO READY READ BUTTON
									// FLAG[4] = 1 TO READY READ CARD
void setTimer(int timer, int duration){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7fe fba2 	bl	800022c <__divsi3>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	0019      	movs	r1, r3
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <setTimer+0x34>)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <setTimer+0x38>)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	2100      	movs	r1, #0
 8001afc:	50d1      	str	r1, [r2, r3]
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	20000284 	.word	0x20000284
 8001b0c:	20000004 	.word	0x20000004

08001b10 <timer_run>:
void timer_run(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	e01c      	b.n	8001b56 <timer_run+0x46>
		if(counter[i] > 0){
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <timer_run+0x58>)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	58d3      	ldr	r3, [r2, r3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dd13      	ble.n	8001b50 <timer_run+0x40>
			counter[i]--;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <timer_run+0x58>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	58d3      	ldr	r3, [r2, r3]
 8001b30:	1e59      	subs	r1, r3, #1
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <timer_run+0x58>)
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <timer_run+0x58>)
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	58d3      	ldr	r3, [r2, r3]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dc04      	bgt.n	8001b50 <timer_run+0x40>
				timer_flag[i] = 1;
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <timer_run+0x5c>)
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 3; i++){
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	dddf      	ble.n	8001b1c <timer_run+0xc>
		}
	}
}
 8001b5c:	46c0      	nop			@ (mov r8, r8)
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	20000284 	.word	0x20000284
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8001b78:	f7fe feee 	bl	8000958 <getKeyinput>
	timer_run();
 8001b7c:	f7ff ffc8 	bl	8001b10 <timer_run>
}
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <sendDataToESP32>:
 *  Created on: Nov 17, 2024
 *      Author: HOME
 */
#include "uart_ESP.h"

void sendDataToESP32(char *data) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)data, strlen(data), HAL_MAX_DELAY); // Gửi dữ liệu qua UART
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fab8 	bl	8000108 <strlen>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <sendDataToESP32+0x28>)
 8001ba4:	f003 fbc4 	bl	8005330 <HAL_UART_Transmit>
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200001e0 	.word	0x200001e0

08001bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb4:	480d      	ldr	r0, [pc, #52]	@ (8001bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bb8:	f7ff ff86 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	@ (8001bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <LoopForever+0xe>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c00 <LoopForever+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be2:	f004 fc03 	bl	80063ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001be6:	f7ff fa71 	bl	80010cc <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   r0, =_estack
 8001bec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001bf8:	08006638 	.word	0x08006638
  ldr r2, =_sbss
 8001bfc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c00:	200003dc 	.word	0x200003dc

08001c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_IRQHandler>
	...

08001c08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <HAL_Init+0x24>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_Init+0x24>)
 8001c12:	2110      	movs	r1, #16
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f809 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1e:	f7ff fd1f 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_InitTick+0x5c>)
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0019      	movs	r1, r3
 8001c42:	23fa      	movs	r3, #250	@ 0xfa
 8001c44:	0098      	lsls	r0, r3, #2
 8001c46:	f7fe fa67 	bl	8000118 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0020      	movs	r0, r4
 8001c50:	f7fe fa62 	bl	8000118 <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f92f 	bl	8001eba <HAL_SYSTICK_Config>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e00f      	b.n	8001c84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d80b      	bhi.n	8001c82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	425b      	negs	r3, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f8fc 	bl	8001e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_InitTick+0x64>)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b003      	add	sp, #12
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000014 	.word	0x20000014
 8001c94:	20000010 	.word	0x20000010

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	18d2      	adds	r2, r2, r3
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	20000014 	.word	0x20000014
 8001cb8:	20000290 	.word	0x20000290

08001cbc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	20000290 	.word	0x20000290

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	001a      	movs	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	189b      	adds	r3, r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b004      	add	sp, #16
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	20000014 	.word	0x20000014

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	0002      	movs	r2, r0
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	1dfb      	adds	r3, r7, #7
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d2a:	d809      	bhi.n	8001d40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	001a      	movs	r2, r3
 8001d32:	231f      	movs	r3, #31
 8001d34:	401a      	ands	r2, r3
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_EnableIRQ+0x30>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4091      	lsls	r1, r2
 8001d3c:	000a      	movs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
  }
}
 8001d40:	46c0      	nop			@ (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	0002      	movs	r2, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d60:	d828      	bhi.n	8001db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d62:	4a2f      	ldr	r2, [pc, #188]	@ (8001e20 <__NVIC_SetPriority+0xd4>)
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	33c0      	adds	r3, #192	@ 0xc0
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	589b      	ldr	r3, [r3, r2]
 8001d72:	1dfa      	adds	r2, r7, #7
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	0011      	movs	r1, r2
 8001d78:	2203      	movs	r2, #3
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	21ff      	movs	r1, #255	@ 0xff
 8001d80:	4091      	lsls	r1, r2
 8001d82:	000a      	movs	r2, r1
 8001d84:	43d2      	mvns	r2, r2
 8001d86:	401a      	ands	r2, r3
 8001d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	22ff      	movs	r2, #255	@ 0xff
 8001d90:	401a      	ands	r2, r3
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	2303      	movs	r3, #3
 8001d9a:	4003      	ands	r3, r0
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da0:	481f      	ldr	r0, [pc, #124]	@ (8001e20 <__NVIC_SetPriority+0xd4>)
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	430a      	orrs	r2, r1
 8001dac:	33c0      	adds	r3, #192	@ 0xc0
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001db2:	e031      	b.n	8001e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e24 <__NVIC_SetPriority+0xd8>)
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	0019      	movs	r1, r3
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	3b08      	subs	r3, #8
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	3304      	adds	r3, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1dfa      	adds	r2, r7, #7
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	00d2      	lsls	r2, r2, #3
 8001dda:	21ff      	movs	r1, #255	@ 0xff
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	43d2      	mvns	r2, r2
 8001de2:	401a      	ands	r2, r3
 8001de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	22ff      	movs	r2, #255	@ 0xff
 8001dec:	401a      	ands	r2, r3
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0018      	movs	r0, r3
 8001df4:	2303      	movs	r3, #3
 8001df6:	4003      	ands	r3, r0
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dfc:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <__NVIC_SetPriority+0xd8>)
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	001c      	movs	r4, r3
 8001e04:	230f      	movs	r3, #15
 8001e06:	4023      	ands	r3, r4
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	3306      	adds	r3, #6
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	18c3      	adds	r3, r0, r3
 8001e14:	3304      	adds	r3, #4
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	46c0      	nop			@ (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b003      	add	sp, #12
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	045b      	lsls	r3, r3, #17
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d301      	bcc.n	8001e40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e010      	b.n	8001e62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <SysTick_Config+0x44>)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	3a01      	subs	r2, #1
 8001e46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e48:	2301      	movs	r3, #1
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff ff7c 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x44>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x44>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	1c02      	adds	r2, r0, #0
 8001e80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ff33 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ffaf 	bl	8001e28 <SysTick_Config>
 8001eca:	0003      	movs	r3, r0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e036      	b.n	8001f58 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2221      	movs	r2, #33	@ 0x21
 8001eee:	2102      	movs	r1, #2
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <HAL_DMA_Init+0x8c>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f932 	bl	80021a4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2221      	movs	r2, #33	@ 0x21
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b004      	add	sp, #16
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	ffffc00f 	.word	0xffffc00f

08001f64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2221      	movs	r2, #33	@ 0x21
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e020      	b.n	8001fcc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	210e      	movs	r1, #14
 8001f96:	438a      	bics	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4091      	lsls	r1, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2221      	movs	r2, #33	@ 0x21
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	210f      	movs	r1, #15
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2221      	movs	r2, #33	@ 0x21
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d006      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e028      	b.n	8002050 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	210e      	movs	r1, #14
 800200a:	438a      	bics	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	438a      	bics	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	2101      	movs	r1, #1
 8002028:	4091      	lsls	r1, r2
 800202a:	000a      	movs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2221      	movs	r2, #33	@ 0x21
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	0010      	movs	r0, r2
 800204e:	4798      	blx	r3
    }
  }
  return status;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2204      	movs	r2, #4
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	d024      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x72>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2204      	movs	r2, #4
 800208a:	4013      	ands	r3, r2
 800208c:	d020      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
 8002098:	d107      	bne.n	80020aa <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2104      	movs	r1, #4
 80020a6:	438a      	bics	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	2104      	movs	r1, #4
 80020b4:	4091      	lsls	r1, r2
 80020b6:	000a      	movs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x66>
 80020c2:	e06a      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	0010      	movs	r0, r2
 80020cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020ce:	e064      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	2202      	movs	r2, #2
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	d02b      	beq.n	8002138 <HAL_DMA_IRQHandler+0xda>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d027      	beq.n	8002138 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2220      	movs	r2, #32
 80020f0:	4013      	ands	r3, r2
 80020f2:	d10b      	bne.n	800210c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	210a      	movs	r1, #10
 8002100:	438a      	bics	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2221      	movs	r2, #33	@ 0x21
 8002108:	2101      	movs	r1, #1
 800210a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	2102      	movs	r1, #2
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d036      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	0010      	movs	r0, r2
 8002134:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002136:	e030      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	2208      	movs	r2, #8
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4013      	ands	r3, r2
 8002146:	d028      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2208      	movs	r2, #8
 800214c:	4013      	ands	r3, r2
 800214e:	d024      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	210e      	movs	r1, #14
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2101      	movs	r1, #1
 800216a:	4091      	lsls	r1, r2
 800216c:	000a      	movs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2221      	movs	r2, #33	@ 0x21
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	0010      	movs	r0, r2
 8002196:	4798      	blx	r3
    }
  }
}
 8002198:	e7ff      	b.n	800219a <HAL_DMA_IRQHandler+0x13c>
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <DMA_CalcBaseAndBitshift+0x30>)
 80021b2:	4694      	mov	ip, r2
 80021b4:	4463      	add	r3, ip
 80021b6:	2114      	movs	r1, #20
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fd ffad 	bl	8000118 <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	009a      	lsls	r2, r3, #2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a03      	ldr	r2, [pc, #12]	@ (80021d8 <DMA_CalcBaseAndBitshift+0x34>)
 80021ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80021cc:	46c0      	nop			@ (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	bffdfff8 	.word	0xbffdfff8
 80021d8:	40020000 	.word	0x40020000

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e149      	b.n	8002480 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4091      	lsls	r1, r2
 80021f6:	000a      	movs	r2, r1
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d100      	bne.n	8002204 <HAL_GPIO_Init+0x28>
 8002202:	e13a      	b.n	800247a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	4013      	ands	r3, r2
 800220c:	2b01      	cmp	r3, #1
 800220e:	d005      	beq.n	800221c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2203      	movs	r2, #3
 8002216:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002218:	2b02      	cmp	r3, #2
 800221a:	d130      	bne.n	800227e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	409a      	lsls	r2, r3
 800222a:	0013      	movs	r3, r2
 800222c:	43da      	mvns	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	0013      	movs	r3, r2
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002252:	2201      	movs	r2, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
 8002258:	0013      	movs	r3, r2
 800225a:	43da      	mvns	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	2201      	movs	r2, #1
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2203      	movs	r2, #3
 8002284:	4013      	ands	r3, r2
 8002286:	2b03      	cmp	r3, #3
 8002288:	d017      	beq.n	80022ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d123      	bne.n	800230e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	58d3      	ldr	r3, [r2, r3]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2207      	movs	r2, #7
 80022d8:	4013      	ands	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2107      	movs	r1, #7
 80022f2:	400b      	ands	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	0092      	lsls	r2, r2, #2
 800230a:	6939      	ldr	r1, [r7, #16]
 800230c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	401a      	ands	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	23c0      	movs	r3, #192	@ 0xc0
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d100      	bne.n	8002350 <HAL_GPIO_Init+0x174>
 800234e:	e094      	b.n	800247a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002350:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <HAL_GPIO_Init+0x2bc>)
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <HAL_GPIO_Init+0x2bc>)
 8002356:	2101      	movs	r1, #1
 8002358:	430a      	orrs	r2, r1
 800235a:	619a      	str	r2, [r3, #24]
 800235c:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <HAL_GPIO_Init+0x2bc>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002368:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <HAL_GPIO_Init+0x2c0>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	589b      	ldr	r3, [r3, r2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2203      	movs	r2, #3
 800237a:	4013      	ands	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	43da      	mvns	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	2390      	movs	r3, #144	@ 0x90
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	429a      	cmp	r2, r3
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x1d6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <HAL_GPIO_Init+0x2c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x1d2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a40      	ldr	r2, [pc, #256]	@ (80024a4 <HAL_GPIO_Init+0x2c8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x1ce>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023aa:	2305      	movs	r3, #5
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x1d8>
 80023b2:	2300      	movs	r3, #0
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	2103      	movs	r1, #3
 80023b8:	400a      	ands	r2, r1
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c4:	4935      	ldr	r1, [pc, #212]	@ (800249c <HAL_GPIO_Init+0x2c0>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b35      	ldr	r3, [pc, #212]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43da      	mvns	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	035b      	lsls	r3, r3, #13
 80023ea:	4013      	ands	r3, r2
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023f6:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023fc:	4b2a      	ldr	r3, [pc, #168]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43da      	mvns	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	039b      	lsls	r3, r3, #14
 8002414:	4013      	ands	r3, r2
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002420:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43da      	mvns	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	4013      	ands	r3, r2
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43da      	mvns	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	4013      	ands	r3, r2
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_GPIO_Init+0x2cc>)
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3301      	adds	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	40da      	lsrs	r2, r3
 8002488:	1e13      	subs	r3, r2, #0
 800248a:	d000      	beq.n	800248e <HAL_GPIO_Init+0x2b2>
 800248c:	e6ae      	b.n	80021ec <HAL_GPIO_Init+0x10>
  } 
}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b006      	add	sp, #24
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48000800 	.word	0x48000800
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	000a      	movs	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	1cba      	adds	r2, r7, #2
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	4013      	ands	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024c6:	230f      	movs	r3, #15
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d0:	230f      	movs	r3, #15
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
  }
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	0008      	movs	r0, r1
 80024f0:	0011      	movs	r1, r2
 80024f2:	1cbb      	adds	r3, r7, #2
 80024f4:	1c02      	adds	r2, r0, #0
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	1c7b      	adds	r3, r7, #1
 80024fa:	1c0a      	adds	r2, r1, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fe:	1c7b      	adds	r3, r7, #1
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	1cbb      	adds	r3, r7, #2
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250e:	e003      	b.n	8002518 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002510:	1cbb      	adds	r3, r7, #2
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e08f      	b.n	8002652 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2241      	movs	r2, #65	@ 0x41
 8002536:	5c9b      	ldrb	r3, [r3, r2]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2240      	movs	r2, #64	@ 0x40
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff f8ad 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2241      	movs	r2, #65	@ 0x41
 8002552:	2124      	movs	r1, #36	@ 0x24
 8002554:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	438a      	bics	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	493b      	ldr	r1, [pc, #236]	@ (800265c <HAL_I2C_Init+0x13c>)
 8002570:	400a      	ands	r2, r1
 8002572:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4938      	ldr	r1, [pc, #224]	@ (8002660 <HAL_I2C_Init+0x140>)
 8002580:	400a      	ands	r2, r1
 8002582:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	@ 0x80
 8002596:	0209      	lsls	r1, r1, #8
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e007      	b.n	80025ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2184      	movs	r1, #132	@ 0x84
 80025a8:	0209      	lsls	r1, r1, #8
 80025aa:	430a      	orrs	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d109      	bne.n	80025ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2180      	movs	r1, #128	@ 0x80
 80025c2:	0109      	lsls	r1, r1, #4
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	e007      	b.n	80025da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4923      	ldr	r1, [pc, #140]	@ (8002664 <HAL_I2C_Init+0x144>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4920      	ldr	r1, [pc, #128]	@ (8002668 <HAL_I2C_Init+0x148>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	491a      	ldr	r1, [pc, #104]	@ (8002660 <HAL_I2C_Init+0x140>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	431a      	orrs	r2, r3
 8002604:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2241      	movs	r2, #65	@ 0x41
 800263e:	2120      	movs	r1, #32
 8002640:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2242      	movs	r2, #66	@ 0x42
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	f0ffffff 	.word	0xf0ffffff
 8002660:	ffff7fff 	.word	0xffff7fff
 8002664:	fffff7ff 	.word	0xfffff7ff
 8002668:	02008000 	.word	0x02008000

0800266c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	0008      	movs	r0, r1
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	0019      	movs	r1, r3
 800267a:	230a      	movs	r3, #10
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	1c02      	adds	r2, r0, #0
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	2308      	movs	r3, #8
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	1c0a      	adds	r2, r1, #0
 8002688:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2241      	movs	r2, #65	@ 0x41
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	d000      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x2c>
 8002696:	e10a      	b.n	80028ae <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Master_Transmit+0x3a>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e104      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ae:	f7ff fb05 	bl	8001cbc <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	0219      	lsls	r1, r3, #8
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2319      	movs	r3, #25
 80026c2:	2201      	movs	r2, #1
 80026c4:	f000 f91e 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0ef      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2241      	movs	r2, #65	@ 0x41
 80026d4:	2121      	movs	r1, #33	@ 0x21
 80026d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2242      	movs	r2, #66	@ 0x42
 80026dc:	2110      	movs	r1, #16
 80026de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2208      	movs	r2, #8
 80026f0:	18ba      	adds	r2, r7, r2
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	@ 0xff
 8002704:	d906      	bls.n	8002714 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	@ 0xff
 800270a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	045b      	lsls	r3, r3, #17
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e007      	b.n	8002724 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	049b      	lsls	r3, r3, #18
 8002722:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d027      	beq.n	800277c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	697c      	ldr	r4, [r7, #20]
 8002768:	230a      	movs	r3, #10
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	8819      	ldrh	r1, [r3, #0]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	4b51      	ldr	r3, [pc, #324]	@ (80028b8 <HAL_I2C_Master_Transmit+0x24c>)
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	0023      	movs	r3, r4
 8002776:	f000 fa9f 	bl	8002cb8 <I2C_TransferConfig>
 800277a:	e06f      	b.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	b2da      	uxtb	r2, r3
 8002782:	697c      	ldr	r4, [r7, #20]
 8002784:	230a      	movs	r3, #10
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	8819      	ldrh	r1, [r3, #0]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	4b4a      	ldr	r3, [pc, #296]	@ (80028b8 <HAL_I2C_Master_Transmit+0x24c>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	0023      	movs	r3, r4
 8002792:	f000 fa91 	bl	8002cb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002796:	e061      	b.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f908 	bl	80029b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e081      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03a      	beq.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d136      	bne.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	0013      	movs	r3, r2
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	f000 f882 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e053      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2bff      	cmp	r3, #255	@ 0xff
 8002810:	d911      	bls.n	8002836 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22ff      	movs	r2, #255	@ 0xff
 8002816:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	b2da      	uxtb	r2, r3
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	045c      	lsls	r4, r3, #17
 8002822:	230a      	movs	r3, #10
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	8819      	ldrh	r1, [r3, #0]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	0023      	movs	r3, r4
 8002830:	f000 fa42 	bl	8002cb8 <I2C_TransferConfig>
 8002834:	e012      	b.n	800285c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	b2da      	uxtb	r2, r3
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	049c      	lsls	r4, r3, #18
 800284a:	230a      	movs	r3, #10
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	8819      	ldrh	r1, [r3, #0]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	0023      	movs	r3, r4
 8002858:	f000 fa2e 	bl	8002cb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d198      	bne.n	8002798 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f8e7 	bl	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002872:	1e03      	subs	r3, r0, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e01a      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	490b      	ldr	r1, [pc, #44]	@ (80028bc <HAL_I2C_Master_Transmit+0x250>)
 800288e:	400a      	ands	r2, r1
 8002890:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2241      	movs	r2, #65	@ 0x41
 8002896:	2120      	movs	r1, #32
 8002898:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2242      	movs	r2, #66	@ 0x42
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2240      	movs	r2, #64	@ 0x40
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
  }
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b007      	add	sp, #28
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	80002000 	.word	0x80002000
 80028bc:	fe00e800 	.word	0xfe00e800

080028c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d103      	bne.n	80028de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d007      	beq.n	80028fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	619a      	str	r2, [r3, #24]
  }
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	e03a      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f8d3 	bl	8002ac8 <I2C_IsErrorOccurred>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d001      	beq.n	800292a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e040      	b.n	80029ac <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	d02d      	beq.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002930:	f7ff f9c4 	bl	8001cbc <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d302      	bcc.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d122      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	425a      	negs	r2, r3
 8002956:	4153      	adcs	r3, r2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	001a      	movs	r2, r3
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d113      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	2220      	movs	r2, #32
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2241      	movs	r2, #65	@ 0x41
 8002974:	2120      	movs	r1, #32
 8002976:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2242      	movs	r2, #66	@ 0x42
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2240      	movs	r2, #64	@ 0x40
 8002984:	2100      	movs	r1, #0
 8002986:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00f      	b.n	80029ac <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	425a      	negs	r2, r3
 800299c:	4153      	adcs	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	001a      	movs	r2, r3
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d0b5      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b004      	add	sp, #16
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c0:	e032      	b.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f87d 	bl	8002ac8 <I2C_IsErrorOccurred>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e030      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	d025      	beq.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029dc:	f7ff f96e 	bl	8001cbc <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11a      	bne.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d013      	beq.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	2220      	movs	r2, #32
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2241      	movs	r2, #65	@ 0x41
 8002a10:	2120      	movs	r1, #32
 8002a12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2242      	movs	r2, #66	@ 0x42
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2240      	movs	r2, #64	@ 0x40
 8002a20:	2100      	movs	r1, #0
 8002a22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d1c5      	bne.n	80029c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4c:	e02f      	b.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 f837 	bl	8002ac8 <I2C_IsErrorOccurred>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e02d      	b.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff f92b 	bl	8001cbc <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11a      	bne.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d013      	beq.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2241      	movs	r2, #65	@ 0x41
 8002a96:	2120      	movs	r1, #32
 8002a98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2242      	movs	r2, #66	@ 0x42
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2240      	movs	r2, #64	@ 0x40
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d1c8      	bne.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	@ 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2327      	movs	r3, #39	@ 0x27
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2210      	movs	r2, #16
 8002af0:	4013      	ands	r3, r2
 8002af2:	d100      	bne.n	8002af6 <I2C_IsErrorOccurred+0x2e>
 8002af4:	e079      	b.n	8002bea <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2210      	movs	r2, #16
 8002afc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002afe:	e057      	b.n	8002bb0 <I2C_IsErrorOccurred+0xe8>
 8002b00:	2227      	movs	r2, #39	@ 0x27
 8002b02:	18bb      	adds	r3, r7, r2
 8002b04:	18ba      	adds	r2, r7, r2
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	d04f      	beq.n	8002bb0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f8d4 	bl	8001cbc <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_IsErrorOccurred+0x5e>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d144      	bne.n	8002bb0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	4013      	ands	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b34:	2013      	movs	r0, #19
 8002b36:	183b      	adds	r3, r7, r0
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	2142      	movs	r1, #66	@ 0x42
 8002b3c:	5c52      	ldrb	r2, [r2, r1]
 8002b3e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d126      	bne.n	8002ba2 <I2C_IsErrorOccurred+0xda>
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	01db      	lsls	r3, r3, #7
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d021      	beq.n	8002ba2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d01d      	beq.n	8002ba2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	01c9      	lsls	r1, r1, #7
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b78:	f7ff f8a0 	bl	8001cbc <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b80:	e00f      	b.n	8002ba2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b82:	f7ff f89b 	bl	8001cbc <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b19      	cmp	r3, #25
 8002b8e:	d908      	bls.n	8002ba2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2220      	movs	r2, #32
 8002b94:	4313      	orrs	r3, r2
 8002b96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b98:	2327      	movs	r3, #39	@ 0x27
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]

              break;
 8002ba0:	e006      	b.n	8002bb0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d1e8      	bne.n	8002b82 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d004      	beq.n	8002bc8 <I2C_IsErrorOccurred+0x100>
 8002bbe:	2327      	movs	r3, #39	@ 0x27
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d09b      	beq.n	8002b00 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bc8:	2327      	movs	r3, #39	@ 0x27
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4313      	orrs	r3, r2
 8002be0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002be2:	2327      	movs	r3, #39	@ 0x27
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d00c      	beq.n	8002c16 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4313      	orrs	r3, r2
 8002c02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	0052      	lsls	r2, r2, #1
 8002c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c0e:	2327      	movs	r3, #39	@ 0x27
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d00c      	beq.n	8002c3a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2208      	movs	r2, #8
 8002c24:	4313      	orrs	r3, r2
 8002c26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	00d2      	lsls	r2, r2, #3
 8002c30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c32:	2327      	movs	r3, #39	@ 0x27
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	2380      	movs	r3, #128	@ 0x80
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d00c      	beq.n	8002c5e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2202      	movs	r2, #2
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c56:	2327      	movs	r3, #39	@ 0x27
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c5e:	2327      	movs	r3, #39	@ 0x27
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01d      	beq.n	8002ca4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff fe28 	bl	80028c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	490e      	ldr	r1, [pc, #56]	@ (8002cb4 <I2C_IsErrorOccurred+0x1ec>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2241      	movs	r2, #65	@ 0x41
 8002c90:	2120      	movs	r1, #32
 8002c92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2242      	movs	r2, #66	@ 0x42
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2240      	movs	r2, #64	@ 0x40
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002ca4:	2327      	movs	r3, #39	@ 0x27
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b00a      	add	sp, #40	@ 0x28
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	fe00e800 	.word	0xfe00e800

08002cb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	0008      	movs	r0, r1
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	240a      	movs	r4, #10
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	1c02      	adds	r2, r0, #0
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	2009      	movs	r0, #9
 8002cd0:	183b      	adds	r3, r7, r0
 8002cd2:	1c0a      	adds	r2, r1, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	059b      	lsls	r3, r3, #22
 8002cdc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cde:	183b      	adds	r3, r7, r0
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	0419      	lsls	r1, r3, #16
 8002ce4:	23ff      	movs	r3, #255	@ 0xff
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d02:	0d51      	lsrs	r1, r2, #21
 8002d04:	2280      	movs	r2, #128	@ 0x80
 8002d06:	00d2      	lsls	r2, r2, #3
 8002d08:	400a      	ands	r2, r1
 8002d0a:	4907      	ldr	r1, [pc, #28]	@ (8002d28 <I2C_TransferConfig+0x70>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	43d2      	mvns	r2, r2
 8002d10:	401a      	ands	r2, r3
 8002d12:	0011      	movs	r1, r2
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b007      	add	sp, #28
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	03ff63ff 	.word	0x03ff63ff

08002d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2241      	movs	r2, #65	@ 0x41
 8002d3a:	5c9b      	ldrb	r3, [r3, r2]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d138      	bne.n	8002db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2240      	movs	r2, #64	@ 0x40
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e032      	b.n	8002db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2240      	movs	r2, #64	@ 0x40
 8002d54:	2101      	movs	r1, #1
 8002d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2241      	movs	r2, #65	@ 0x41
 8002d5c:	2124      	movs	r1, #36	@ 0x24
 8002d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4911      	ldr	r1, [pc, #68]	@ (8002dc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2241      	movs	r2, #65	@ 0x41
 8002da4:	2120      	movs	r1, #32
 8002da6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2240      	movs	r2, #64	@ 0x40
 8002dac:	2100      	movs	r1, #0
 8002dae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	ffffefff 	.word	0xffffefff

08002dc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2241      	movs	r2, #65	@ 0x41
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d139      	bne.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2240      	movs	r2, #64	@ 0x40
 8002dde:	5c9b      	ldrb	r3, [r3, r2]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e033      	b.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2240      	movs	r2, #64	@ 0x40
 8002dec:	2101      	movs	r1, #1
 8002dee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2241      	movs	r2, #65	@ 0x41
 8002df4:	2124      	movs	r1, #36	@ 0x24
 8002df6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2241      	movs	r2, #65	@ 0x41
 8002e3e:	2120      	movs	r1, #32
 8002e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2240      	movs	r2, #64	@ 0x40
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b004      	add	sp, #16
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	fffff0ff 	.word	0xfffff0ff

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e301      	b.n	8003472 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d100      	bne.n	8002e7a <HAL_RCC_OscConfig+0x1e>
 8002e78:	e08d      	b.n	8002f96 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e7a:	4bc3      	ldr	r3, [pc, #780]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	220c      	movs	r2, #12
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d00e      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e86:	4bc0      	ldr	r3, [pc, #768]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x64>
 8002e92:	4bbd      	ldr	r3, [pc, #756]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	2380      	movs	r3, #128	@ 0x80
 8002e98:	025b      	lsls	r3, r3, #9
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4bb8      	ldr	r3, [pc, #736]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x56>
 8002eb0:	e070      	b.n	8002f94 <HAL_RCC_OscConfig+0x138>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d000      	beq.n	8002ebc <HAL_RCC_OscConfig+0x60>
 8002eba:	e06b      	b.n	8002f94 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e2d8      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x7c>
 8002ec8:	4baf      	ldr	r3, [pc, #700]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4bae      	ldr	r3, [pc, #696]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	0249      	lsls	r1, r1, #9
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e02f      	b.n	8002f38 <HAL_RCC_OscConfig+0xdc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x9e>
 8002ee0:	4ba9      	ldr	r3, [pc, #676]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4ba8      	ldr	r3, [pc, #672]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	49a9      	ldr	r1, [pc, #676]	@ (800318c <HAL_RCC_OscConfig+0x330>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	4ba6      	ldr	r3, [pc, #664]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4ba5      	ldr	r3, [pc, #660]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002ef2:	49a7      	ldr	r1, [pc, #668]	@ (8003190 <HAL_RCC_OscConfig+0x334>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e01e      	b.n	8002f38 <HAL_RCC_OscConfig+0xdc>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10e      	bne.n	8002f20 <HAL_RCC_OscConfig+0xc4>
 8002f02:	4ba1      	ldr	r3, [pc, #644]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4ba0      	ldr	r3, [pc, #640]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f08:	2180      	movs	r1, #128	@ 0x80
 8002f0a:	02c9      	lsls	r1, r1, #11
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	4b9d      	ldr	r3, [pc, #628]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b9c      	ldr	r3, [pc, #624]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f16:	2180      	movs	r1, #128	@ 0x80
 8002f18:	0249      	lsls	r1, r1, #9
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0xdc>
 8002f20:	4b99      	ldr	r3, [pc, #612]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b98      	ldr	r3, [pc, #608]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f26:	4999      	ldr	r1, [pc, #612]	@ (800318c <HAL_RCC_OscConfig+0x330>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	4b96      	ldr	r3, [pc, #600]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b95      	ldr	r3, [pc, #596]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f32:	4997      	ldr	r1, [pc, #604]	@ (8003190 <HAL_RCC_OscConfig+0x334>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d014      	beq.n	8002f6a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe febc 	bl	8001cbc <HAL_GetTick>
 8002f44:	0003      	movs	r3, r0
 8002f46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4a:	f7fe feb7 	bl	8001cbc <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b64      	cmp	r3, #100	@ 0x64
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e28a      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	@ 0x80
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	4013      	ands	r3, r2
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0xee>
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fea7 	bl	8001cbc <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fea2 	bl	8001cbc <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	@ 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e275      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b80      	ldr	r3, [pc, #512]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2380      	movs	r3, #128	@ 0x80
 8002f8c:	029b      	lsls	r3, r3, #10
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x118>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x146>
 8002fa0:	e069      	b.n	8003076 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fa2:	4b79      	ldr	r3, [pc, #484]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d00b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fac:	4b76      	ldr	r3, [pc, #472]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d11c      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x196>
 8002fb8:	4b73      	ldr	r3, [pc, #460]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d116      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc4:	4b70      	ldr	r3, [pc, #448]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x17e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e24b      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b6b      	ldr	r3, [pc, #428]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	22f8      	movs	r2, #248	@ 0xf8
 8002fe0:	4393      	bics	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	00da      	lsls	r2, r3, #3
 8002fea:	4b67      	ldr	r3, [pc, #412]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff0:	e041      	b.n	8003076 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d024      	beq.n	8003044 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffa:	4b63      	ldr	r3, [pc, #396]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b62      	ldr	r3, [pc, #392]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003000:	2101      	movs	r1, #1
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fe fe59 	bl	8001cbc <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe fe54 	bl	8001cbc <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e227      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b59      	ldr	r3, [pc, #356]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b56      	ldr	r3, [pc, #344]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	22f8      	movs	r2, #248	@ 0xf8
 8003032:	4393      	bics	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	4b52      	ldr	r3, [pc, #328]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	4b50      	ldr	r3, [pc, #320]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b4f      	ldr	r3, [pc, #316]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800304a:	2101      	movs	r1, #1
 800304c:	438a      	bics	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fe34 	bl	8001cbc <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305a:	f7fe fe2f 	bl	8001cbc <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e202      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306c:	4b46      	ldr	r3, [pc, #280]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2202      	movs	r2, #2
 8003072:	4013      	ands	r3, r2
 8003074:	d1f1      	bne.n	800305a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2208      	movs	r2, #8
 800307c:	4013      	ands	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003088:	4b3f      	ldr	r3, [pc, #252]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800308a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308c:	4b3e      	ldr	r3, [pc, #248]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800308e:	2101      	movs	r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe fe12 	bl	8001cbc <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fe0d 	bl	8001cbc <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1e0      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d0f1      	beq.n	800309e <HAL_RCC_OscConfig+0x242>
 80030ba:	e018      	b.n	80030ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030bc:	4b32      	ldr	r3, [pc, #200]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 80030be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c0:	4b31      	ldr	r3, [pc, #196]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	438a      	bics	r2, r1
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe fdf8 	bl	8001cbc <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fe fdf3 	bl	8001cbc <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1c6      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b28      	ldr	r3, [pc, #160]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d1f1      	bne.n	80030d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2204      	movs	r2, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	d100      	bne.n	80030fa <HAL_RCC_OscConfig+0x29e>
 80030f8:	e0b4      	b.n	8003264 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fa:	201f      	movs	r0, #31
 80030fc:	183b      	adds	r3, r7, r0
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	055b      	lsls	r3, r3, #21
 800310a:	4013      	ands	r3, r2
 800310c:	d110      	bne.n	8003130 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003114:	2180      	movs	r1, #128	@ 0x80
 8003116:	0549      	lsls	r1, r1, #21
 8003118:	430a      	orrs	r2, r1
 800311a:	61da      	str	r2, [r3, #28]
 800311c:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	055b      	lsls	r3, r3, #21
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800312a:	183b      	adds	r3, r7, r0
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <HAL_RCC_OscConfig+0x338>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4013      	ands	r3, r2
 800313a:	d11a      	bne.n	8003172 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313c:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <HAL_RCC_OscConfig+0x338>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_RCC_OscConfig+0x338>)
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	0049      	lsls	r1, r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fe fdb7 	bl	8001cbc <HAL_GetTick>
 800314e:	0003      	movs	r3, r0
 8003150:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003154:	f7fe fdb2 	bl	8001cbc <HAL_GetTick>
 8003158:	0002      	movs	r2, r0
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e185      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_OscConfig+0x338>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4013      	ands	r3, r2
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10e      	bne.n	8003198 <HAL_RCC_OscConfig+0x33c>
 800317a:	4b03      	ldr	r3, [pc, #12]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 800317c:	6a1a      	ldr	r2, [r3, #32]
 800317e:	4b02      	ldr	r3, [pc, #8]	@ (8003188 <HAL_RCC_OscConfig+0x32c>)
 8003180:	2101      	movs	r1, #1
 8003182:	430a      	orrs	r2, r1
 8003184:	621a      	str	r2, [r3, #32]
 8003186:	e035      	b.n	80031f4 <HAL_RCC_OscConfig+0x398>
 8003188:	40021000 	.word	0x40021000
 800318c:	fffeffff 	.word	0xfffeffff
 8003190:	fffbffff 	.word	0xfffbffff
 8003194:	40007000 	.word	0x40007000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x35e>
 80031a0:	4bb6      	ldr	r3, [pc, #728]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	4bb5      	ldr	r3, [pc, #724]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	438a      	bics	r2, r1
 80031aa:	621a      	str	r2, [r3, #32]
 80031ac:	4bb3      	ldr	r3, [pc, #716]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	4bb2      	ldr	r3, [pc, #712]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031b2:	2104      	movs	r1, #4
 80031b4:	438a      	bics	r2, r1
 80031b6:	621a      	str	r2, [r3, #32]
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x398>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x380>
 80031c2:	4bae      	ldr	r3, [pc, #696]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	4bad      	ldr	r3, [pc, #692]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031c8:	2104      	movs	r1, #4
 80031ca:	430a      	orrs	r2, r1
 80031cc:	621a      	str	r2, [r3, #32]
 80031ce:	4bab      	ldr	r3, [pc, #684]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	4baa      	ldr	r3, [pc, #680]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	621a      	str	r2, [r3, #32]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x398>
 80031dc:	4ba7      	ldr	r3, [pc, #668]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	4ba6      	ldr	r3, [pc, #664]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	438a      	bics	r2, r1
 80031e6:	621a      	str	r2, [r3, #32]
 80031e8:	4ba4      	ldr	r3, [pc, #656]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	4ba3      	ldr	r3, [pc, #652]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80031ee:	2104      	movs	r1, #4
 80031f0:	438a      	bics	r2, r1
 80031f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d014      	beq.n	8003226 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fe fd5e 	bl	8001cbc <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e009      	b.n	800321a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fd59 	bl	8001cbc <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	4a9b      	ldr	r2, [pc, #620]	@ (8003480 <HAL_RCC_OscConfig+0x624>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e12b      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	4b98      	ldr	r3, [pc, #608]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	2202      	movs	r2, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x3aa>
 8003224:	e013      	b.n	800324e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fe fd49 	bl	8001cbc <HAL_GetTick>
 800322a:	0003      	movs	r3, r0
 800322c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	e009      	b.n	8003244 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fd44 	bl	8001cbc <HAL_GetTick>
 8003234:	0002      	movs	r2, r0
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	4a91      	ldr	r2, [pc, #580]	@ (8003480 <HAL_RCC_OscConfig+0x624>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e116      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	4b8d      	ldr	r3, [pc, #564]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	2202      	movs	r2, #2
 800324a:	4013      	ands	r3, r2
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800324e:	231f      	movs	r3, #31
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b88      	ldr	r3, [pc, #544]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	4b87      	ldr	r3, [pc, #540]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800325e:	4989      	ldr	r1, [pc, #548]	@ (8003484 <HAL_RCC_OscConfig+0x628>)
 8003260:	400a      	ands	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2210      	movs	r2, #16
 800326a:	4013      	ands	r3, r2
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d12a      	bne.n	80032cc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003276:	4b81      	ldr	r3, [pc, #516]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800327a:	4b80      	ldr	r3, [pc, #512]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800327c:	2104      	movs	r1, #4
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003282:	4b7e      	ldr	r3, [pc, #504]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003286:	4b7d      	ldr	r3, [pc, #500]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003288:	2101      	movs	r1, #1
 800328a:	430a      	orrs	r2, r1
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fd15 	bl	8001cbc <HAL_GetTick>
 8003292:	0003      	movs	r3, r0
 8003294:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003298:	f7fe fd10 	bl	8001cbc <HAL_GetTick>
 800329c:	0002      	movs	r2, r0
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0e3      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032aa:	4b74      	ldr	r3, [pc, #464]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	2202      	movs	r2, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	d0f1      	beq.n	8003298 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032b4:	4b71      	ldr	r3, [pc, #452]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b8:	22f8      	movs	r2, #248	@ 0xf8
 80032ba:	4393      	bics	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	00da      	lsls	r2, r3, #3
 80032c4:	4b6d      	ldr	r3, [pc, #436]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80032ca:	e034      	b.n	8003336 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	3305      	adds	r3, #5
 80032d2:	d111      	bne.n	80032f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032d4:	4b69      	ldr	r3, [pc, #420]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d8:	4b68      	ldr	r3, [pc, #416]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032da:	2104      	movs	r1, #4
 80032dc:	438a      	bics	r2, r1
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032e0:	4b66      	ldr	r3, [pc, #408]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e4:	22f8      	movs	r2, #248	@ 0xf8
 80032e6:	4393      	bics	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	00da      	lsls	r2, r3, #3
 80032f0:	4b62      	ldr	r3, [pc, #392]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80032f6:	e01e      	b.n	8003336 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032f8:	4b60      	ldr	r3, [pc, #384]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fc:	4b5f      	ldr	r3, [pc, #380]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80032fe:	2104      	movs	r1, #4
 8003300:	430a      	orrs	r2, r1
 8003302:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003304:	4b5d      	ldr	r3, [pc, #372]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003308:	4b5c      	ldr	r3, [pc, #368]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800330a:	2101      	movs	r1, #1
 800330c:	438a      	bics	r2, r1
 800330e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003310:	f7fe fcd4 	bl	8001cbc <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800331a:	f7fe fccf 	bl	8001cbc <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0a2      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800332c:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d1f1      	bne.n	800331a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d100      	bne.n	8003340 <HAL_RCC_OscConfig+0x4e4>
 800333e:	e097      	b.n	8003470 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003340:	4b4e      	ldr	r3, [pc, #312]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	220c      	movs	r2, #12
 8003346:	4013      	ands	r3, r2
 8003348:	2b08      	cmp	r3, #8
 800334a:	d100      	bne.n	800334e <HAL_RCC_OscConfig+0x4f2>
 800334c:	e06b      	b.n	8003426 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d14c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b49      	ldr	r3, [pc, #292]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b48      	ldr	r3, [pc, #288]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800335c:	494a      	ldr	r1, [pc, #296]	@ (8003488 <HAL_RCC_OscConfig+0x62c>)
 800335e:	400a      	ands	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fcab 	bl	8001cbc <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fca6 	bl	8001cbc <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e079      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	4b3f      	ldr	r3, [pc, #252]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	049b      	lsls	r3, r3, #18
 8003386:	4013      	ands	r3, r2
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	4b3c      	ldr	r3, [pc, #240]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	220f      	movs	r2, #15
 8003390:	4393      	bics	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003398:	4b38      	ldr	r3, [pc, #224]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800339a:	430a      	orrs	r2, r1
 800339c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800339e:	4b37      	ldr	r3, [pc, #220]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4a3a      	ldr	r2, [pc, #232]	@ (800348c <HAL_RCC_OscConfig+0x630>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	0019      	movs	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	431a      	orrs	r2, r3
 80033b2:	4b32      	ldr	r3, [pc, #200]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b30      	ldr	r3, [pc, #192]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b2f      	ldr	r3, [pc, #188]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033be:	2180      	movs	r1, #128	@ 0x80
 80033c0:	0449      	lsls	r1, r1, #17
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe fc79 	bl	8001cbc <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fe fc74 	bl	8001cbc <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e047      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e2:	4b26      	ldr	r3, [pc, #152]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	049b      	lsls	r3, r3, #18
 80033ea:	4013      	ands	r3, r2
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x574>
 80033ee:	e03f      	b.n	8003470 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f0:	4b22      	ldr	r3, [pc, #136]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 80033f6:	4924      	ldr	r1, [pc, #144]	@ (8003488 <HAL_RCC_OscConfig+0x62c>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fc5e 	bl	8001cbc <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fc59 	bl	8001cbc <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e02c      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	4b18      	ldr	r3, [pc, #96]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	049b      	lsls	r3, r3, #18
 8003420:	4013      	ands	r3, r2
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x5aa>
 8003424:	e024      	b.n	8003470 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01f      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003432:	4b12      	ldr	r3, [pc, #72]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003438:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_RCC_OscConfig+0x620>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	025b      	lsls	r3, r3, #9
 8003444:	401a      	ands	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	429a      	cmp	r2, r3
 800344c:	d10e      	bne.n	800346c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	220f      	movs	r2, #15
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	23f0      	movs	r3, #240	@ 0xf0
 8003460:	039b      	lsls	r3, r3, #14
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b008      	add	sp, #32
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	40021000 	.word	0x40021000
 8003480:	00001388 	.word	0x00001388
 8003484:	efffffff 	.word	0xefffffff
 8003488:	feffffff 	.word	0xfeffffff
 800348c:	ffc2ffff 	.word	0xffc2ffff

08003490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b3      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d911      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4393      	bics	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	4b55      	ldr	r3, [pc, #340]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c4:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e09a      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2202      	movs	r2, #2
 80034dc:	4013      	ands	r3, r2
 80034de:	d015      	beq.n	800350c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2204      	movs	r2, #4
 80034e6:	4013      	ands	r3, r2
 80034e8:	d006      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 80034f0:	21e0      	movs	r1, #224	@ 0xe0
 80034f2:	00c9      	lsls	r1, r1, #3
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f8:	4b47      	ldr	r3, [pc, #284]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	22f0      	movs	r2, #240	@ 0xf0
 80034fe:	4393      	bics	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	4b44      	ldr	r3, [pc, #272]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	d040      	beq.n	8003598 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b3e      	ldr	r3, [pc, #248]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	029b      	lsls	r3, r3, #10
 8003526:	4013      	ands	r3, r2
 8003528:	d114      	bne.n	8003554 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06e      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d107      	bne.n	8003546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	4b38      	ldr	r3, [pc, #224]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	049b      	lsls	r3, r3, #18
 800353e:	4013      	ands	r3, r2
 8003540:	d108      	bne.n	8003554 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e062      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e05b      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003554:	4b30      	ldr	r3, [pc, #192]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	4393      	bics	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4b2d      	ldr	r3, [pc, #180]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003568:	f7fe fba8 	bl	8001cbc <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003570:	e009      	b.n	8003586 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003572:	f7fe fba3 	bl	8001cbc <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	4a27      	ldr	r2, [pc, #156]	@ (800361c <HAL_RCC_ClockConfig+0x18c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e042      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003586:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	220c      	movs	r2, #12
 800358c:	401a      	ands	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	429a      	cmp	r2, r3
 8003596:	d1ec      	bne.n	8003572 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003598:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	4013      	ands	r3, r2
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d211      	bcs.n	80035ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2201      	movs	r2, #1
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <HAL_RCC_ClockConfig+0x184>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e020      	b.n	800360c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035d4:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a11      	ldr	r2, [pc, #68]	@ (8003620 <HAL_RCC_ClockConfig+0x190>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035e8:	f000 f820 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035ec:	0001      	movs	r1, r0
 80035ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <HAL_RCC_ClockConfig+0x188>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	220f      	movs	r2, #15
 80035f6:	4013      	ands	r3, r2
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x194>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	000a      	movs	r2, r1
 80035fe:	40da      	lsrs	r2, r3
 8003600:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <HAL_RCC_ClockConfig+0x198>)
 8003602:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003604:	2000      	movs	r0, #0
 8003606:	f7fe fb13 	bl	8001c30 <HAL_InitTick>
  
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
 800361c:	00001388 	.word	0x00001388
 8003620:	fffff8ff 	.word	0xfffff8ff
 8003624:	080065f8 	.word	0x080065f8
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	220c      	movs	r2, #12
 8003650:	4013      	ands	r3, r2
 8003652:	2b04      	cmp	r3, #4
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x30>
 8003656:	2b08      	cmp	r3, #8
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x36>
 800365a:	e02c      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800365e:	613b      	str	r3, [r7, #16]
      break;
 8003660:	e02c      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	0c9b      	lsrs	r3, r3, #18
 8003666:	220f      	movs	r2, #15
 8003668:	4013      	ands	r3, r2
 800366a:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003670:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	220f      	movs	r2, #15
 8003676:	4013      	ands	r3, r2
 8003678:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	025b      	lsls	r3, r3, #9
 8003684:	4013      	ands	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4810      	ldr	r0, [pc, #64]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xa0>)
 800368c:	f7fc fd44 	bl	8000118 <__udivsi3>
 8003690:	0003      	movs	r3, r0
 8003692:	001a      	movs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4353      	muls	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e009      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	000a      	movs	r2, r1
 80036a0:	0152      	lsls	r2, r2, #5
 80036a2:	1a52      	subs	r2, r2, r1
 80036a4:	0193      	lsls	r3, r2, #6
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	613b      	str	r3, [r7, #16]
      break;
 80036b4:	e002      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036b6:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_RCC_GetSysClockFreq+0xa0>)
 80036b8:	613b      	str	r3, [r7, #16]
      break;
 80036ba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036bc:	693b      	ldr	r3, [r7, #16]
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b006      	add	sp, #24
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	40021000 	.word	0x40021000
 80036cc:	007a1200 	.word	0x007a1200
 80036d0:	08006610 	.word	0x08006610
 80036d4:	08006620 	.word	0x08006620

080036d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036dc:	4b02      	ldr	r3, [pc, #8]	@ (80036e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80036f0:	f7ff fff2 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 80036f4:	0001      	movs	r1, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	2207      	movs	r2, #7
 80036fe:	4013      	ands	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	40d9      	lsrs	r1, r3
 8003706:	000b      	movs	r3, r1
}    
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	40021000 	.word	0x40021000
 8003714:	08006608 	.word	0x08006608

08003718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	025b      	lsls	r3, r3, #9
 8003730:	4013      	ands	r3, r2
 8003732:	d100      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003734:	e08e      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2017      	movs	r0, #23
 8003738:	183b      	adds	r3, r7, r0
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b57      	ldr	r3, [pc, #348]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	055b      	lsls	r3, r3, #21
 8003746:	4013      	ands	r3, r2
 8003748:	d110      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b54      	ldr	r3, [pc, #336]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	4b53      	ldr	r3, [pc, #332]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003750:	2180      	movs	r1, #128	@ 0x80
 8003752:	0549      	lsls	r1, r1, #21
 8003754:	430a      	orrs	r2, r1
 8003756:	61da      	str	r2, [r3, #28]
 8003758:	4b50      	ldr	r3, [pc, #320]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	055b      	lsls	r3, r3, #21
 8003760:	4013      	ands	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	183b      	adds	r3, r7, r0
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	4b4c      	ldr	r3, [pc, #304]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d11a      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003778:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800377e:	2180      	movs	r1, #128	@ 0x80
 8003780:	0049      	lsls	r1, r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe fa99 	bl	8001cbc <HAL_GetTick>
 800378a:	0003      	movs	r3, r0
 800378c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	e008      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fe fa94 	bl	8001cbc <HAL_GetTick>
 8003794:	0002      	movs	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	@ 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e077      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b3f      	ldr	r3, [pc, #252]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	2380      	movs	r3, #128	@ 0x80
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4013      	ands	r3, r2
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ae:	4b3b      	ldr	r3, [pc, #236]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	23c0      	movs	r3, #192	@ 0xc0
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4013      	ands	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d034      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	23c0      	movs	r3, #192	@ 0xc0
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4013      	ands	r3, r2
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d02c      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d0:	4b32      	ldr	r3, [pc, #200]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4a33      	ldr	r2, [pc, #204]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037da:	4b30      	ldr	r3, [pc, #192]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037e0:	2180      	movs	r1, #128	@ 0x80
 80037e2:	0249      	lsls	r1, r1, #9
 80037e4:	430a      	orrs	r2, r1
 80037e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	4b2c      	ldr	r3, [pc, #176]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ee:	492e      	ldr	r1, [pc, #184]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037f4:	4b29      	ldr	r3, [pc, #164]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fa5b 	bl	8001cbc <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	e009      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fe fa56 	bl	8001cbc <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	4a25      	ldr	r2, [pc, #148]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e038      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	2202      	movs	r2, #2
 8003826:	4013      	ands	r3, r2
 8003828:	d0f0      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382a:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a1d      	ldr	r2, [pc, #116]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800383a:	430a      	orrs	r2, r1
 800383c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800383e:	2317      	movs	r3, #23
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b14      	ldr	r3, [pc, #80]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384e:	4918      	ldr	r1, [pc, #96]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003850:	400a      	ands	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800385e:	4b0f      	ldr	r3, [pc, #60]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	2203      	movs	r2, #3
 8003864:	4393      	bics	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800386e:	430a      	orrs	r2, r1
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800387c:	4b07      	ldr	r3, [pc, #28]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	2210      	movs	r2, #16
 8003882:	4393      	bics	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	4b04      	ldr	r3, [pc, #16]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800388c:	430a      	orrs	r2, r1
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b006      	add	sp, #24
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
 80038a4:	fffffcff 	.word	0xfffffcff
 80038a8:	fffeffff 	.word	0xfffeffff
 80038ac:	00001388 	.word	0x00001388
 80038b0:	efffffff 	.word	0xefffffff

080038b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a8      	b.n	8003a18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	2382      	movs	r3, #130	@ 0x82
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d009      	beq.n	80038ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	61da      	str	r2, [r3, #28]
 80038e0:	e005      	b.n	80038ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	225d      	movs	r2, #93	@ 0x5d
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	225c      	movs	r2, #92	@ 0x5c
 8003904:	2100      	movs	r1, #0
 8003906:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0018      	movs	r0, r3
 800390c:	f7fd ff1a 	bl	8001744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	225d      	movs	r2, #93	@ 0x5d
 8003914:	2102      	movs	r1, #2
 8003916:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2140      	movs	r1, #64	@ 0x40
 8003924:	438a      	bics	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	23e0      	movs	r3, #224	@ 0xe0
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	429a      	cmp	r2, r3
 8003932:	d902      	bls.n	800393a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e002      	b.n	8003940 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	015b      	lsls	r3, r3, #5
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	23f0      	movs	r3, #240	@ 0xf0
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	429a      	cmp	r2, r3
 800394a:	d008      	beq.n	800395e <HAL_SPI_Init+0xaa>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	23e0      	movs	r3, #224	@ 0xe0
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	429a      	cmp	r2, r3
 8003956:	d002      	beq.n	800395e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	2382      	movs	r3, #130	@ 0x82
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	401a      	ands	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	2384      	movs	r3, #132	@ 0x84
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	400b      	ands	r3, r1
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2102      	movs	r1, #2
 800397a:	400b      	ands	r3, r1
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2101      	movs	r1, #1
 8003984:	400b      	ands	r3, r1
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6999      	ldr	r1, [r3, #24]
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	400b      	ands	r3, r1
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2138      	movs	r1, #56	@ 0x38
 800399a:	400b      	ands	r3, r1
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	2180      	movs	r1, #128	@ 0x80
 80039a4:	400b      	ands	r3, r1
 80039a6:	431a      	orrs	r2, r3
 80039a8:	0011      	movs	r1, r2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	2204      	movs	r2, #4
 80039c4:	401a      	ands	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	2110      	movs	r1, #16
 80039cc:	400b      	ands	r3, r1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d4:	2108      	movs	r1, #8
 80039d6:	400b      	ands	r3, r1
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68d9      	ldr	r1, [r3, #12]
 80039de:	23f0      	movs	r3, #240	@ 0xf0
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	400b      	ands	r3, r1
 80039e4:	431a      	orrs	r2, r3
 80039e6:	0011      	movs	r1, r2
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	2380      	movs	r3, #128	@ 0x80
 80039ec:	015b      	lsls	r3, r3, #5
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4907      	ldr	r1, [pc, #28]	@ (8003a20 <HAL_SPI_Init+0x16c>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	225d      	movs	r2, #93	@ 0x5d
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fffff7ff 	.word	0xfffff7ff

08003a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	@ 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	001a      	movs	r2, r3
 8003a32:	1cbb      	adds	r3, r7, #2
 8003a34:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a36:	2301      	movs	r3, #1
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a3a:	2323      	movs	r3, #35	@ 0x23
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	225c      	movs	r2, #92	@ 0x5c
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x2c>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e1c4      	b.n	8003dda <HAL_SPI_TransmitReceive+0x3b6>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	225c      	movs	r2, #92	@ 0x5c
 8003a54:	2101      	movs	r1, #1
 8003a56:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a58:	f7fe f930 	bl	8001cbc <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a60:	201b      	movs	r0, #27
 8003a62:	183b      	adds	r3, r7, r0
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	215d      	movs	r1, #93	@ 0x5d
 8003a68:	5c52      	ldrb	r2, [r2, r1]
 8003a6a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a72:	2312      	movs	r3, #18
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	1cba      	adds	r2, r7, #2
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d011      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x84>
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	2382      	movs	r3, #130	@ 0x82
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d107      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x7a>
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d004      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003a9e:	2323      	movs	r3, #35	@ 0x23
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003aa6:	e191      	b.n	8003dcc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <HAL_SPI_TransmitReceive+0x98>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_SPI_TransmitReceive+0x98>
 8003ab4:	1cbb      	adds	r3, r7, #2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003abc:	2323      	movs	r3, #35	@ 0x23
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ac4:	e182      	b.n	8003dcc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	225d      	movs	r2, #93	@ 0x5d
 8003aca:	5c9b      	ldrb	r3, [r3, r2]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d003      	beq.n	8003ada <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	225d      	movs	r2, #93	@ 0x5d
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1cba      	adds	r2, r7, #2
 8003aea:	2146      	movs	r1, #70	@ 0x46
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1cba      	adds	r2, r7, #2
 8003af4:	2144      	movs	r1, #68	@ 0x44
 8003af6:	8812      	ldrh	r2, [r2, #0]
 8003af8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1cba      	adds	r2, r7, #2
 8003b04:	8812      	ldrh	r2, [r2, #0]
 8003b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1cba      	adds	r2, r7, #2
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	23e0      	movs	r3, #224	@ 0xe0
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d908      	bls.n	8003b3a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	49ac      	ldr	r1, [pc, #688]	@ (8003de4 <HAL_SPI_TransmitReceive+0x3c0>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	e008      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2180      	movs	r1, #128	@ 0x80
 8003b46:	0149      	lsls	r1, r1, #5
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2240      	movs	r2, #64	@ 0x40
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d007      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	23e0      	movs	r3, #224	@ 0xe0
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d800      	bhi.n	8003b78 <HAL_SPI_TransmitReceive+0x154>
 8003b76:	e083      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x168>
 8003b80:	2312      	movs	r3, #18
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d000      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x168>
 8003b8a:	e06d      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb0:	e05a      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d4>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d4>
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d113      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d11c      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x21c>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2246      	movs	r2, #70	@ 0x46
 8003c0a:	5a9b      	ldrh	r3, [r3, r2]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2246      	movs	r2, #70	@ 0x46
 8003c2e:	5a9b      	ldrh	r3, [r3, r2]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b299      	uxth	r1, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2246      	movs	r2, #70	@ 0x46
 8003c3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c40:	f7fe f83c 	bl	8001cbc <HAL_GetTick>
 8003c44:	0002      	movs	r2, r0
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d80b      	bhi.n	8003c68 <HAL_SPI_TransmitReceive+0x244>
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	3301      	adds	r3, #1
 8003c54:	d008      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003c56:	2323      	movs	r3, #35	@ 0x23
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	225d      	movs	r2, #93	@ 0x5d
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
        goto error;
 8003c66:	e0b1      	b.n	8003dcc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d19f      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x18e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2246      	movs	r2, #70	@ 0x46
 8003c76:	5a9b      	ldrh	r3, [r3, r2]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d199      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x18e>
 8003c7e:	e089      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x270>
 8003c88:	2312      	movs	r3, #18
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d000      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x270>
 8003c92:	e074      	b.n	8003d7e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	7812      	ldrb	r2, [r2, #0]
 8003ca0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cba:	e060      	b.n	8003d7e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d11c      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x2e0>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d017      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x2e0>
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d114      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d11e      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x32c>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2246      	movs	r2, #70	@ 0x46
 8003d16:	5a9b      	ldrh	r3, [r3, r2]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d018      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	001a      	movs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	7812      	ldrb	r2, [r2, #0]
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2246      	movs	r2, #70	@ 0x46
 8003d3e:	5a9b      	ldrh	r3, [r3, r2]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b299      	uxth	r1, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2246      	movs	r2, #70	@ 0x46
 8003d4a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d50:	f7fd ffb4 	bl	8001cbc <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d802      	bhi.n	8003d66 <HAL_SPI_TransmitReceive+0x342>
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	3301      	adds	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x348>
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003d6c:	2323      	movs	r3, #35	@ 0x23
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2203      	movs	r2, #3
 8003d72:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	225d      	movs	r2, #93	@ 0x5d
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5499      	strb	r1, [r3, r2]
        goto error;
 8003d7c:	e026      	b.n	8003dcc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d199      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x298>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2246      	movs	r2, #70	@ 0x46
 8003d8c:	5a9b      	ldrh	r3, [r3, r2]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d193      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 fa5c 	bl	8004258 <SPI_EndRxTxTransaction>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d006      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003da4:	2323      	movs	r3, #35	@ 0x23
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003dba:	2323      	movs	r3, #35	@ 0x23
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e003      	b.n	8003dcc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	225d      	movs	r2, #93	@ 0x5d
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	225c      	movs	r2, #92	@ 0x5c
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dd4:	2323      	movs	r3, #35	@ 0x23
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	781b      	ldrb	r3, [r3, #0]
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b00a      	add	sp, #40	@ 0x28
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	ffffefff 	.word	0xffffefff

08003de8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	4013      	ands	r3, r2
 8003e06:	d10d      	bne.n	8003e24 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e0e:	d009      	beq.n	8003e24 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2240      	movs	r2, #64	@ 0x40
 8003e14:	4013      	ands	r3, r2
 8003e16:	d005      	beq.n	8003e24 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	0010      	movs	r0, r2
 8003e20:	4798      	blx	r3
    return;
 8003e22:	e0c5      	b.n	8003fb0 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_SPI_IRQHandler+0x58>
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2280      	movs	r2, #128	@ 0x80
 8003e30:	4013      	ands	r3, r2
 8003e32:	d005      	beq.n	8003e40 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	4798      	blx	r3
    return;
 8003e3e:	e0b7      	b.n	8003fb0 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2220      	movs	r2, #32
 8003e44:	4013      	ands	r3, r2
 8003e46:	d109      	bne.n	8003e5c <HAL_SPI_IRQHandler+0x74>
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d105      	bne.n	8003e5c <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4013      	ands	r3, r2
 8003e58:	d100      	bne.n	8003e5c <HAL_SPI_IRQHandler+0x74>
 8003e5a:	e0a9      	b.n	8003fb0 <HAL_SPI_IRQHandler+0x1c8>
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	4013      	ands	r3, r2
 8003e62:	d100      	bne.n	8003e66 <HAL_SPI_IRQHandler+0x7e>
 8003e64:	e0a4      	b.n	8003fb0 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d023      	beq.n	8003eb6 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	225d      	movs	r2, #93	@ 0x5d
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d011      	beq.n	8003e9e <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7e:	2204      	movs	r2, #4
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	e00b      	b.n	8003eb6 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]
        return;
 8003eb4:	e07c      	b.n	8003fb0 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d014      	beq.n	8003ee8 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2140      	movs	r1, #64	@ 0x40
 8003ee2:	438a      	bics	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00c      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d04c      	beq.n	8003fae <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	21e0      	movs	r1, #224	@ 0xe0
 8003f20:	438a      	bics	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	225d      	movs	r2, #93	@ 0x5d
 8003f28:	2101      	movs	r1, #1
 8003f2a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	4013      	ands	r3, r2
 8003f32:	d103      	bne.n	8003f3c <HAL_SPI_IRQHandler+0x154>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2201      	movs	r2, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d032      	beq.n	8003fa2 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2103      	movs	r1, #3
 8003f48:	438a      	bics	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <HAL_SPI_IRQHandler+0x1d0>)
 8003f5a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fe f837 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6e:	2240      	movs	r2, #64	@ 0x40
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <HAL_SPI_IRQHandler+0x1d0>)
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fe f822 	bl	8001fd4 <HAL_DMA_Abort_IT>
 8003f90:	1e03      	subs	r3, r0, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f98:	2240      	movs	r2, #64	@ 0x40
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003fa0:	e004      	b.n	8003fac <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f809 	bl	8003fbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003faa:	e000      	b.n	8003fae <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8003fac:	46c0      	nop			@ (mov r8, r8)
    return;
 8003fae:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b008      	add	sp, #32
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	08003fcd 	.word	0x08003fcd

08003fbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fc4:	46c0      	nop			@ (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2246      	movs	r2, #70	@ 0x46
 8003fde:	2100      	movs	r1, #0
 8003fe0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff ffe6 	bl	8003fbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ff0:	46c0      	nop			@ (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b004      	add	sp, #16
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	1dfb      	adds	r3, r7, #7
 8004006:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004008:	f7fd fe58 	bl	8001cbc <HAL_GetTick>
 800400c:	0002      	movs	r2, r0
 800400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004018:	f7fd fe50 	bl	8001cbc <HAL_GetTick>
 800401c:	0003      	movs	r3, r0
 800401e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004020:	4b3a      	ldr	r3, [pc, #232]	@ (800410c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	015b      	lsls	r3, r3, #5
 8004026:	0d1b      	lsrs	r3, r3, #20
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	4353      	muls	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402e:	e058      	b.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	d055      	beq.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004036:	f7fd fe41 	bl	8001cbc <HAL_GetTick>
 800403a:	0002      	movs	r2, r0
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	429a      	cmp	r2, r3
 8004044:	d902      	bls.n	800404c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d142      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	21e0      	movs	r1, #224	@ 0xe0
 8004058:	438a      	bics	r2, r1
 800405a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	2382      	movs	r3, #130	@ 0x82
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	429a      	cmp	r2, r3
 8004066:	d113      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	2380      	movs	r3, #128	@ 0x80
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	429a      	cmp	r2, r3
 8004072:	d005      	beq.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	429a      	cmp	r2, r3
 800407e:	d107      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2140      	movs	r1, #64	@ 0x40
 800408c:	438a      	bics	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	019b      	lsls	r3, r3, #6
 8004098:	429a      	cmp	r2, r3
 800409a:	d110      	bne.n	80040be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	491a      	ldr	r1, [pc, #104]	@ (8004110 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2180      	movs	r1, #128	@ 0x80
 80040b8:	0189      	lsls	r1, r1, #6
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	225d      	movs	r2, #93	@ 0x5d
 80040c2:	2101      	movs	r1, #1
 80040c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	225c      	movs	r2, #92	@ 0x5c
 80040ca:	2100      	movs	r1, #0
 80040cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e017      	b.n	8004102 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3b01      	subs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	425a      	negs	r2, r3
 80040f2:	4153      	adcs	r3, r2
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	001a      	movs	r2, r3
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d197      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b008      	add	sp, #32
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	20000000 	.word	0x20000000
 8004110:	ffffdfff 	.word	0xffffdfff

08004114 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	@ 0x28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004122:	2317      	movs	r3, #23
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800412a:	f7fd fdc7 	bl	8001cbc <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800413a:	f7fd fdbf 	bl	8001cbc <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800414a:	4b41      	ldr	r3, [pc, #260]	@ (8004250 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	0013      	movs	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	189b      	adds	r3, r3, r2
 8004154:	00da      	lsls	r2, r3, #3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415c:	4353      	muls	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004160:	e068      	b.n	8004234 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	23c0      	movs	r3, #192	@ 0xc0
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	429a      	cmp	r2, r3
 800416a:	d10a      	bne.n	8004182 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	2117      	movs	r1, #23
 800417a:	187b      	adds	r3, r7, r1
 800417c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800417e:	187b      	adds	r3, r7, r1
 8004180:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	d055      	beq.n	8004234 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004188:	f7fd fd98 	bl	8001cbc <HAL_GetTick>
 800418c:	0002      	movs	r2, r0
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004194:	429a      	cmp	r2, r3
 8004196:	d902      	bls.n	800419e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d142      	bne.n	8004224 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	21e0      	movs	r1, #224	@ 0xe0
 80041aa:	438a      	bics	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	2382      	movs	r3, #130	@ 0x82
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d113      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	2380      	movs	r3, #128	@ 0x80
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d005      	beq.n	80041d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d107      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2140      	movs	r1, #64	@ 0x40
 80041de:	438a      	bics	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e6:	2380      	movs	r3, #128	@ 0x80
 80041e8:	019b      	lsls	r3, r3, #6
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d110      	bne.n	8004210 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4916      	ldr	r1, [pc, #88]	@ (8004254 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2180      	movs	r1, #128	@ 0x80
 800420a:	0189      	lsls	r1, r1, #6
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	225d      	movs	r2, #93	@ 0x5d
 8004214:	2101      	movs	r1, #1
 8004216:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	225c      	movs	r2, #92	@ 0x5c
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e010      	b.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3b01      	subs	r3, #1
 8004232:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d18e      	bne.n	8004162 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b00a      	add	sp, #40	@ 0x28
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	20000000 	.word	0x20000000
 8004254:	ffffdfff 	.word	0xffffdfff

08004258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	23c0      	movs	r3, #192	@ 0xc0
 8004268:	0159      	lsls	r1, r3, #5
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	0013      	movs	r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	f7ff ff4e 	bl	8004114 <SPI_WaitFifoStateUntilTimeout>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d007      	beq.n	800428c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004280:	2220      	movs	r2, #32
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e027      	b.n	80042dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	0013      	movs	r3, r2
 8004296:	2200      	movs	r2, #0
 8004298:	2180      	movs	r1, #128	@ 0x80
 800429a:	f7ff fead 	bl	8003ff8 <SPI_WaitFlagStateUntilTimeout>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d007      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a6:	2220      	movs	r2, #32
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e014      	b.n	80042dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	23c0      	movs	r3, #192	@ 0xc0
 80042b6:	00d9      	lsls	r1, r3, #3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	0013      	movs	r3, r2
 80042c0:	2200      	movs	r2, #0
 80042c2:	f7ff ff27 	bl	8004114 <SPI_WaitFifoStateUntilTimeout>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d007      	beq.n	80042da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	2220      	movs	r2, #32
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e000      	b.n	80042dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b004      	add	sp, #16
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e042      	b.n	800437c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	223d      	movs	r2, #61	@ 0x3d
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223c      	movs	r2, #60	@ 0x3c
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0018      	movs	r0, r3
 800430e:	f7fd fa6d 	bl	80017ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	223d      	movs	r2, #61	@ 0x3d
 8004316:	2102      	movs	r1, #2
 8004318:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	0019      	movs	r1, r3
 8004324:	0010      	movs	r0, r2
 8004326:	f000 fc25 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2246      	movs	r2, #70	@ 0x46
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	223e      	movs	r2, #62	@ 0x3e
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223f      	movs	r2, #63	@ 0x3f
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2240      	movs	r2, #64	@ 0x40
 8004346:	2101      	movs	r1, #1
 8004348:	5499      	strb	r1, [r3, r2]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2241      	movs	r2, #65	@ 0x41
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2242      	movs	r2, #66	@ 0x42
 8004356:	2101      	movs	r1, #1
 8004358:	5499      	strb	r1, [r3, r2]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2243      	movs	r2, #67	@ 0x43
 800435e:	2101      	movs	r1, #1
 8004360:	5499      	strb	r1, [r3, r2]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2244      	movs	r2, #68	@ 0x44
 8004366:	2101      	movs	r1, #1
 8004368:	5499      	strb	r1, [r3, r2]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2245      	movs	r2, #69	@ 0x45
 800436e:	2101      	movs	r1, #1
 8004370:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	223d      	movs	r2, #61	@ 0x3d
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	223d      	movs	r2, #61	@ 0x3d
 8004390:	5c9b      	ldrb	r3, [r3, r2]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e036      	b.n	800440a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	223d      	movs	r2, #61	@ 0x3d
 80043a0:	2102      	movs	r1, #2
 80043a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2101      	movs	r1, #1
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <HAL_TIM_Base_Start_IT+0x90>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00a      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x50>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	2380      	movs	r3, #128	@ 0x80
 80043c4:	05db      	lsls	r3, r3, #23
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x50>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a12      	ldr	r2, [pc, #72]	@ (8004418 <HAL_TIM_Base_Start_IT+0x94>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d111      	bne.n	80043f8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2207      	movs	r2, #7
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d010      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2101      	movs	r1, #1
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e007      	b.n	8004408 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2101      	movs	r1, #1
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400

0800441c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e042      	b.n	80044b4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	223d      	movs	r2, #61	@ 0x3d
 8004432:	5c9b      	ldrb	r3, [r3, r2]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223c      	movs	r2, #60	@ 0x3c
 800443e:	2100      	movs	r1, #0
 8004440:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0018      	movs	r0, r3
 8004446:	f000 f839 	bl	80044bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	223d      	movs	r2, #61	@ 0x3d
 800444e:	2102      	movs	r1, #2
 8004450:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	0019      	movs	r1, r3
 800445c:	0010      	movs	r0, r2
 800445e:	f000 fb89 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2246      	movs	r2, #70	@ 0x46
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	223e      	movs	r2, #62	@ 0x3e
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	223f      	movs	r2, #63	@ 0x3f
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2240      	movs	r2, #64	@ 0x40
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2241      	movs	r2, #65	@ 0x41
 8004486:	2101      	movs	r1, #1
 8004488:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2242      	movs	r2, #66	@ 0x42
 800448e:	2101      	movs	r1, #1
 8004490:	5499      	strb	r1, [r3, r2]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2243      	movs	r2, #67	@ 0x43
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2244      	movs	r2, #68	@ 0x44
 800449e:	2101      	movs	r1, #1
 80044a0:	5499      	strb	r1, [r3, r2]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2245      	movs	r2, #69	@ 0x45
 80044a6:	2101      	movs	r1, #1
 80044a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223d      	movs	r2, #61	@ 0x3d
 80044ae:	2101      	movs	r1, #1
 80044b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <HAL_TIM_PWM_Start+0x22>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	223e      	movs	r2, #62	@ 0x3e
 80044e0:	5c9b      	ldrb	r3, [r3, r2]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	1e5a      	subs	r2, r3, #1
 80044e8:	4193      	sbcs	r3, r2
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e01f      	b.n	800452e <HAL_TIM_PWM_Start+0x62>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d108      	bne.n	8004506 <HAL_TIM_PWM_Start+0x3a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	223f      	movs	r2, #63	@ 0x3f
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	4193      	sbcs	r3, r2
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e013      	b.n	800452e <HAL_TIM_PWM_Start+0x62>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d108      	bne.n	800451e <HAL_TIM_PWM_Start+0x52>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2240      	movs	r2, #64	@ 0x40
 8004510:	5c9b      	ldrb	r3, [r3, r2]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	4193      	sbcs	r3, r2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e007      	b.n	800452e <HAL_TIM_PWM_Start+0x62>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2241      	movs	r2, #65	@ 0x41
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	1e5a      	subs	r2, r3, #1
 800452a:	4193      	sbcs	r3, r2
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06a      	b.n	800460c <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0x7a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	223e      	movs	r2, #62	@ 0x3e
 8004540:	2102      	movs	r1, #2
 8004542:	5499      	strb	r1, [r3, r2]
 8004544:	e013      	b.n	800456e <HAL_TIM_PWM_Start+0xa2>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start+0x8a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	223f      	movs	r2, #63	@ 0x3f
 8004550:	2102      	movs	r1, #2
 8004552:	5499      	strb	r1, [r3, r2]
 8004554:	e00b      	b.n	800456e <HAL_TIM_PWM_Start+0xa2>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Start+0x9a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2240      	movs	r2, #64	@ 0x40
 8004560:	2102      	movs	r1, #2
 8004562:	5499      	strb	r1, [r3, r2]
 8004564:	e003      	b.n	800456e <HAL_TIM_PWM_Start+0xa2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2241      	movs	r2, #65	@ 0x41
 800456a:	2102      	movs	r1, #2
 800456c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	2201      	movs	r2, #1
 8004576:	0018      	movs	r0, r3
 8004578:	f000 fdfa 	bl	8005170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a24      	ldr	r2, [pc, #144]	@ (8004614 <HAL_TIM_PWM_Start+0x148>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_TIM_PWM_Start+0xce>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a23      	ldr	r2, [pc, #140]	@ (8004618 <HAL_TIM_PWM_Start+0x14c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIM_PWM_Start+0xce>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a21      	ldr	r2, [pc, #132]	@ (800461c <HAL_TIM_PWM_Start+0x150>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_TIM_PWM_Start+0xd2>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_TIM_PWM_Start+0xd4>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2180      	movs	r1, #128	@ 0x80
 80045b0:	0209      	lsls	r1, r1, #8
 80045b2:	430a      	orrs	r2, r1
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a16      	ldr	r2, [pc, #88]	@ (8004614 <HAL_TIM_PWM_Start+0x148>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00a      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	05db      	lsls	r3, r3, #23
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x10a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a13      	ldr	r2, [pc, #76]	@ (8004620 <HAL_TIM_PWM_Start+0x154>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2207      	movs	r2, #7
 80045de:	4013      	ands	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b004      	add	sp, #16
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800
 8004620:	40000400 	.word	0x40000400

08004624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2202      	movs	r2, #2
 8004640:	4013      	ands	r3, r2
 8004642:	d021      	beq.n	8004688 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2203      	movs	r2, #3
 8004652:	4252      	negs	r2, r2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2203      	movs	r2, #3
 8004664:	4013      	ands	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	0018      	movs	r0, r3
 800466c:	f000 fa6a 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 8004670:	e007      	b.n	8004682 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fa5d 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 fa69 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2204      	movs	r2, #4
 800468c:	4013      	ands	r3, r2
 800468e:	d022      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2204      	movs	r2, #4
 8004694:	4013      	ands	r3, r2
 8004696:	d01e      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2205      	movs	r2, #5
 800469e:	4252      	negs	r2, r2
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	23c0      	movs	r3, #192	@ 0xc0
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4013      	ands	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 fa43 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 80046be:	e007      	b.n	80046d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 fa36 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 fa42 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2208      	movs	r2, #8
 80046da:	4013      	ands	r3, r2
 80046dc:	d021      	beq.n	8004722 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4013      	ands	r3, r2
 80046e4:	d01d      	beq.n	8004722 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2209      	movs	r2, #9
 80046ec:	4252      	negs	r2, r2
 80046ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2204      	movs	r2, #4
 80046f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2203      	movs	r2, #3
 80046fe:	4013      	ands	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 fa1d 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 800470a:	e007      	b.n	800471c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 fa10 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f000 fa1c 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2210      	movs	r2, #16
 8004726:	4013      	ands	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2210      	movs	r2, #16
 800472e:	4013      	ands	r3, r2
 8004730:	d01e      	beq.n	8004770 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2211      	movs	r2, #17
 8004738:	4252      	negs	r2, r2
 800473a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2208      	movs	r2, #8
 8004740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	23c0      	movs	r3, #192	@ 0xc0
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4013      	ands	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	0018      	movs	r0, r3
 8004754:	f000 f9f6 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 8004758:	e007      	b.n	800476a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f9e9 	bl	8004b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f9f5 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2201      	movs	r2, #1
 8004774:	4013      	ands	r3, r2
 8004776:	d00c      	beq.n	8004792 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	d008      	beq.n	8004792 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2202      	movs	r2, #2
 8004786:	4252      	negs	r2, r2
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f7fd f9ef 	bl	8001b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2280      	movs	r2, #128	@ 0x80
 8004796:	4013      	ands	r3, r2
 8004798:	d00c      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2280      	movs	r2, #128	@ 0x80
 800479e:	4013      	ands	r3, r2
 80047a0:	d008      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2281      	movs	r2, #129	@ 0x81
 80047a8:	4252      	negs	r2, r2
 80047aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 fd62 	bl	8005278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2240      	movs	r2, #64	@ 0x40
 80047b8:	4013      	ands	r3, r2
 80047ba:	d00c      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2240      	movs	r2, #64	@ 0x40
 80047c0:	4013      	ands	r3, r2
 80047c2:	d008      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2241      	movs	r2, #65	@ 0x41
 80047ca:	4252      	negs	r2, r2
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f9c7 	bl	8004b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2220      	movs	r2, #32
 80047da:	4013      	ands	r3, r2
 80047dc:	d00c      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	4013      	ands	r3, r2
 80047e4:	d008      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2221      	movs	r2, #33	@ 0x21
 80047ec:	4252      	negs	r2, r2
 80047ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 fd38 	bl	8005268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	46c0      	nop			@ (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b004      	add	sp, #16
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800480c:	2317      	movs	r3, #23
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	223c      	movs	r2, #60	@ 0x3c
 8004818:	5c9b      	ldrb	r3, [r3, r2]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_TIM_PWM_ConfigChannel+0x22>
 800481e:	2302      	movs	r3, #2
 8004820:	e0ad      	b.n	800497e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	223c      	movs	r2, #60	@ 0x3c
 8004826:	2101      	movs	r1, #1
 8004828:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d100      	bne.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004830:	e076      	b.n	8004920 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d900      	bls.n	800483a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004838:	e095      	b.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x166>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d04e      	beq.n	80048de <HAL_TIM_PWM_ConfigChannel+0xde>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b08      	cmp	r3, #8
 8004844:	d900      	bls.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004846:	e08e      	b.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x56>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d021      	beq.n	8004898 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004854:	e087      	b.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	0011      	movs	r1, r2
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fa0c 	bl	8004c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2108      	movs	r1, #8
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2104      	movs	r1, #4
 8004880:	438a      	bics	r2, r1
 8004882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	619a      	str	r2, [r3, #24]
      break;
 8004896:	e06b      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fa69 	bl	8004d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2180      	movs	r1, #128	@ 0x80
 80048b2:	0109      	lsls	r1, r1, #4
 80048b4:	430a      	orrs	r2, r1
 80048b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4931      	ldr	r1, [pc, #196]	@ (8004988 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80048c4:	400a      	ands	r2, r1
 80048c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6999      	ldr	r1, [r3, #24]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]
      break;
 80048dc:	e048      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	0011      	movs	r1, r2
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 fac4 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2108      	movs	r1, #8
 80048f8:	430a      	orrs	r2, r1
 80048fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69da      	ldr	r2, [r3, #28]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2104      	movs	r1, #4
 8004908:	438a      	bics	r2, r1
 800490a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69d9      	ldr	r1, [r3, #28]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	61da      	str	r2, [r3, #28]
      break;
 800491e:	e027      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	0011      	movs	r1, r2
 8004928:	0018      	movs	r0, r3
 800492a:	f000 fb23 	bl	8004f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2180      	movs	r1, #128	@ 0x80
 800493a:	0109      	lsls	r1, r1, #4
 800493c:	430a      	orrs	r2, r1
 800493e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	490f      	ldr	r1, [pc, #60]	@ (8004988 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800494c:	400a      	ands	r2, r1
 800494e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69d9      	ldr	r1, [r3, #28]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	021a      	lsls	r2, r3, #8
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	61da      	str	r2, [r3, #28]
      break;
 8004964:	e004      	b.n	8004970 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004966:	2317      	movs	r3, #23
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
      break;
 800496e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	223c      	movs	r2, #60	@ 0x3c
 8004974:	2100      	movs	r1, #0
 8004976:	5499      	strb	r1, [r3, r2]

  return status;
 8004978:	2317      	movs	r3, #23
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	781b      	ldrb	r3, [r3, #0]
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b006      	add	sp, #24
 8004984:	bd80      	pop	{r7, pc}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	fffffbff 	.word	0xfffffbff

0800498c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	230f      	movs	r3, #15
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	223c      	movs	r2, #60	@ 0x3c
 80049a2:	5c9b      	ldrb	r3, [r3, r2]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_ConfigClockSource+0x20>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0bc      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x19a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	223c      	movs	r2, #60	@ 0x3c
 80049b0:	2101      	movs	r1, #1
 80049b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	223d      	movs	r2, #61	@ 0x3d
 80049b8:	2102      	movs	r1, #2
 80049ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2277      	movs	r2, #119	@ 0x77
 80049c8:	4393      	bics	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4a58      	ldr	r2, [pc, #352]	@ (8004b30 <HAL_TIM_ConfigClockSource+0x1a4>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2280      	movs	r2, #128	@ 0x80
 80049e2:	0192      	lsls	r2, r2, #6
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d040      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0xde>
 80049e8:	2280      	movs	r2, #128	@ 0x80
 80049ea:	0192      	lsls	r2, r2, #6
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d900      	bls.n	80049f2 <HAL_TIM_ConfigClockSource+0x66>
 80049f0:	e088      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 80049f2:	2280      	movs	r2, #128	@ 0x80
 80049f4:	0152      	lsls	r2, r2, #5
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d100      	bne.n	80049fc <HAL_TIM_ConfigClockSource+0x70>
 80049fa:	e088      	b.n	8004b0e <HAL_TIM_ConfigClockSource+0x182>
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	0152      	lsls	r2, r2, #5
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d900      	bls.n	8004a06 <HAL_TIM_ConfigClockSource+0x7a>
 8004a04:	e07e      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a06:	2b70      	cmp	r3, #112	@ 0x70
 8004a08:	d018      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xb0>
 8004a0a:	d900      	bls.n	8004a0e <HAL_TIM_ConfigClockSource+0x82>
 8004a0c:	e07a      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a0e:	2b60      	cmp	r3, #96	@ 0x60
 8004a10:	d04f      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x126>
 8004a12:	d900      	bls.n	8004a16 <HAL_TIM_ConfigClockSource+0x8a>
 8004a14:	e076      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a16:	2b50      	cmp	r3, #80	@ 0x50
 8004a18:	d03b      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x106>
 8004a1a:	d900      	bls.n	8004a1e <HAL_TIM_ConfigClockSource+0x92>
 8004a1c:	e072      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a1e:	2b40      	cmp	r3, #64	@ 0x40
 8004a20:	d057      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x146>
 8004a22:	d900      	bls.n	8004a26 <HAL_TIM_ConfigClockSource+0x9a>
 8004a24:	e06e      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a26:	2b30      	cmp	r3, #48	@ 0x30
 8004a28:	d063      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x166>
 8004a2a:	d86b      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d060      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x166>
 8004a30:	d868      	bhi.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d05d      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x166>
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d05b      	beq.n	8004af2 <HAL_TIM_ConfigClockSource+0x166>
 8004a3a:	e063      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	f000 fb70 	bl	8005130 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2277      	movs	r2, #119	@ 0x77
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
      break;
 8004a68:	e052      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	f000 fb59 	bl	8005130 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	01c9      	lsls	r1, r1, #7
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
      break;
 8004a90:	e03e      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	f000 facc 	bl	800503c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2150      	movs	r1, #80	@ 0x50
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 fb26 	bl	80050fc <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e02e      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004abe:	001a      	movs	r2, r3
 8004ac0:	f000 faea 	bl	8005098 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2160      	movs	r1, #96	@ 0x60
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fb16 	bl	80050fc <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e01e      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ade:	001a      	movs	r2, r3
 8004ae0:	f000 faac 	bl	800503c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2140      	movs	r1, #64	@ 0x40
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 fb06 	bl	80050fc <TIM_ITRx_SetConfig>
      break;
 8004af0:	e00e      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	0019      	movs	r1, r3
 8004afc:	0010      	movs	r0, r2
 8004afe:	f000 fafd 	bl	80050fc <TIM_ITRx_SetConfig>
      break;
 8004b02:	e005      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b04:	230f      	movs	r3, #15
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
      break;
 8004b0c:	e000      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004b0e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	223d      	movs	r2, #61	@ 0x3d
 8004b14:	2101      	movs	r1, #1
 8004b16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	223c      	movs	r2, #60	@ 0x3c
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]

  return status;
 8004b20:	230f      	movs	r3, #15
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	781b      	ldrb	r3, [r3, #0]
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b004      	add	sp, #16
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	ffff00ff 	.word	0xffff00ff

08004b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b3c:	46c0      	nop			@ (mov r8, r8)
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4c:	46c0      	nop			@ (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a37      	ldr	r2, [pc, #220]	@ (8004c64 <TIM_Base_SetConfig+0xf0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d008      	beq.n	8004b9e <TIM_Base_SetConfig+0x2a>
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	2380      	movs	r3, #128	@ 0x80
 8004b90:	05db      	lsls	r3, r3, #23
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d003      	beq.n	8004b9e <TIM_Base_SetConfig+0x2a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a33      	ldr	r2, [pc, #204]	@ (8004c68 <TIM_Base_SetConfig+0xf4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2270      	movs	r2, #112	@ 0x70
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c64 <TIM_Base_SetConfig+0xf0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d014      	beq.n	8004be2 <TIM_Base_SetConfig+0x6e>
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d00f      	beq.n	8004be2 <TIM_Base_SetConfig+0x6e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	@ (8004c68 <TIM_Base_SetConfig+0xf4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <TIM_Base_SetConfig+0x6e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	@ (8004c6c <TIM_Base_SetConfig+0xf8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d007      	beq.n	8004be2 <TIM_Base_SetConfig+0x6e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	@ (8004c70 <TIM_Base_SetConfig+0xfc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d003      	beq.n	8004be2 <TIM_Base_SetConfig+0x6e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	@ (8004c74 <TIM_Base_SetConfig+0x100>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a24      	ldr	r2, [pc, #144]	@ (8004c78 <TIM_Base_SetConfig+0x104>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2280      	movs	r2, #128	@ 0x80
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a11      	ldr	r2, [pc, #68]	@ (8004c64 <TIM_Base_SetConfig+0xf0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xbe>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a12      	ldr	r2, [pc, #72]	@ (8004c70 <TIM_Base_SetConfig+0xfc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xbe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a11      	ldr	r2, [pc, #68]	@ (8004c74 <TIM_Base_SetConfig+0x100>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d103      	bne.n	8004c3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2201      	movs	r2, #1
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4393      	bics	r3, r2
 8004c54:	001a      	movs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	611a      	str	r2, [r3, #16]
  }
}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40002000 	.word	0x40002000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800
 8004c78:	fffffcff 	.word	0xfffffcff

08004c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4393      	bics	r3, r2
 8004c94:	001a      	movs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2270      	movs	r2, #112	@ 0x70
 8004caa:	4393      	bics	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a23      	ldr	r2, [pc, #140]	@ (8004d64 <TIM_OC1_SetConfig+0xe8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_OC1_SetConfig+0x6e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <TIM_OC1_SetConfig+0xec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_OC1_SetConfig+0x6e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <TIM_OC1_SetConfig+0xf0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10c      	bne.n	8004d04 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2208      	movs	r2, #8
 8004cee:	4393      	bics	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	4393      	bics	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a17      	ldr	r2, [pc, #92]	@ (8004d64 <TIM_OC1_SetConfig+0xe8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_OC1_SetConfig+0xa0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	@ (8004d68 <TIM_OC1_SetConfig+0xec>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC1_SetConfig+0xa0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <TIM_OC1_SetConfig+0xf0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d111      	bne.n	8004d40 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	@ (8004d70 <TIM_OC1_SetConfig+0xf4>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4a13      	ldr	r2, [pc, #76]	@ (8004d74 <TIM_OC1_SetConfig+0xf8>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b006      	add	sp, #24
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800
 8004d70:	fffffeff 	.word	0xfffffeff
 8004d74:	fffffdff 	.word	0xfffffdff

08004d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	4393      	bics	r3, r2
 8004d90:	001a      	movs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e58 <TIM_OC2_SetConfig+0xe0>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <TIM_OC2_SetConfig+0xe4>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	@ (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10d      	bne.n	8004df6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2280      	movs	r2, #128	@ 0x80
 8004dde:	4393      	bics	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2240      	movs	r2, #64	@ 0x40
 8004df2:	4393      	bics	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_OC2_SetConfig+0x96>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <TIM_OC2_SetConfig+0xec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC2_SetConfig+0x96>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <TIM_OC2_SetConfig+0xf0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d113      	bne.n	8004e36 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <TIM_OC2_SetConfig+0xf4>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <TIM_OC2_SetConfig+0xf8>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b006      	add	sp, #24
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	ffff8fff 	.word	0xffff8fff
 8004e5c:	fffffcff 	.word	0xfffffcff
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	fffffbff 	.word	0xfffffbff
 8004e70:	fffff7ff 	.word	0xfffff7ff

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a31      	ldr	r2, [pc, #196]	@ (8004f50 <TIM_OC3_SetConfig+0xdc>)
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2270      	movs	r2, #112	@ 0x70
 8004ea0:	4393      	bics	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	4393      	bics	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	@ (8004f54 <TIM_OC3_SetConfig+0xe0>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	@ (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10d      	bne.n	8004eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4a21      	ldr	r2, [pc, #132]	@ (8004f5c <TIM_OC3_SetConfig+0xe8>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <TIM_OC3_SetConfig+0xec>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a19      	ldr	r2, [pc, #100]	@ (8004f58 <TIM_OC3_SetConfig+0xe4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_OC3_SetConfig+0x92>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <TIM_OC3_SetConfig+0xf0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC3_SetConfig+0x92>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <TIM_OC3_SetConfig+0xf4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d113      	bne.n	8004f2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC3_SetConfig+0xf8>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC3_SetConfig+0xfc>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b006      	add	sp, #24
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	fffffeff 	.word	0xfffffeff
 8004f54:	fffffdff 	.word	0xfffffdff
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	fffff7ff 	.word	0xfffff7ff
 8004f60:	fffffbff 	.word	0xfffffbff
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800
 8004f6c:	ffffefff 	.word	0xffffefff
 8004f70:	ffffdfff 	.word	0xffffdfff

08004f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4a24      	ldr	r2, [pc, #144]	@ (800501c <TIM_OC4_SetConfig+0xa8>)
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a20      	ldr	r2, [pc, #128]	@ (8005020 <TIM_OC4_SetConfig+0xac>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8005024 <TIM_OC4_SetConfig+0xb0>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <TIM_OC4_SetConfig+0xb4>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a17      	ldr	r2, [pc, #92]	@ (800502c <TIM_OC4_SetConfig+0xb8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_OC4_SetConfig+0x70>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <TIM_OC4_SetConfig+0xbc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_OC4_SetConfig+0x70>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <TIM_OC4_SetConfig+0xc0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d109      	bne.n	8004ff8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	@ (8005038 <TIM_OC4_SetConfig+0xc4>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	621a      	str	r2, [r3, #32]
}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	46bd      	mov	sp, r7
 8005016:	b006      	add	sp, #24
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	ffffefff 	.word	0xffffefff
 8005020:	ffff8fff 	.word	0xffff8fff
 8005024:	fffffcff 	.word	0xfffffcff
 8005028:	ffffdfff 	.word	0xffffdfff
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40014400 	.word	0x40014400
 8005034:	40014800 	.word	0x40014800
 8005038:	ffffbfff 	.word	0xffffbfff

0800503c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	2201      	movs	r2, #1
 8005054:	4393      	bics	r3, r2
 8005056:	001a      	movs	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	22f0      	movs	r2, #240	@ 0xf0
 8005066:	4393      	bics	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	220a      	movs	r2, #10
 8005078:	4393      	bics	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	46c0      	nop			@ (mov r8, r8)
 8005092:	46bd      	mov	sp, r7
 8005094:	b006      	add	sp, #24
 8005096:	bd80      	pop	{r7, pc}

08005098 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	2210      	movs	r2, #16
 80050b0:	4393      	bics	r3, r2
 80050b2:	001a      	movs	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4a0d      	ldr	r2, [pc, #52]	@ (80050f8 <TIM_TI2_ConfigInputStage+0x60>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	22a0      	movs	r2, #160	@ 0xa0
 80050d4:	4393      	bics	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b006      	add	sp, #24
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	ffff0fff 	.word	0xffff0fff

080050fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2270      	movs	r2, #112	@ 0x70
 8005110:	4393      	bics	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	2207      	movs	r2, #7
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	609a      	str	r2, [r3, #8]
}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b004      	add	sp, #16
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4a09      	ldr	r2, [pc, #36]	@ (800516c <TIM_ETR_SetConfig+0x3c>)
 8005148:	4013      	ands	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	431a      	orrs	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	46c0      	nop			@ (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b006      	add	sp, #24
 800516a:	bd80      	pop	{r7, pc}
 800516c:	ffff00ff 	.word	0xffff00ff

08005170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	221f      	movs	r2, #31
 8005180:	4013      	ands	r3, r2
 8005182:	2201      	movs	r2, #1
 8005184:	409a      	lsls	r2, r3
 8005186:	0013      	movs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	43d2      	mvns	r2, r2
 8005192:	401a      	ands	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	211f      	movs	r1, #31
 80051a0:	400b      	ands	r3, r1
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4099      	lsls	r1, r3
 80051a6:	000b      	movs	r3, r1
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b006      	add	sp, #24
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	223c      	movs	r2, #60	@ 0x3c
 80051c6:	5c9b      	ldrb	r3, [r3, r2]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e042      	b.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	223c      	movs	r2, #60	@ 0x3c
 80051d4:	2101      	movs	r1, #1
 80051d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	223d      	movs	r2, #61	@ 0x3d
 80051dc:	2102      	movs	r1, #2
 80051de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2270      	movs	r2, #112	@ 0x70
 80051f4:	4393      	bics	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a14      	ldr	r2, [pc, #80]	@ (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00a      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	05db      	lsls	r3, r3, #23
 800521c:	429a      	cmp	r2, r3
 800521e:	d004      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0f      	ldr	r2, [pc, #60]	@ (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10c      	bne.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2280      	movs	r2, #128	@ 0x80
 800522e:	4393      	bics	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	223d      	movs	r2, #61	@ 0x3d
 8005248:	2101      	movs	r1, #1
 800524a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	223c      	movs	r2, #60	@ 0x3c
 8005250:	2100      	movs	r1, #0
 8005252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	0018      	movs	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	b004      	add	sp, #16
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400

08005268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005270:	46c0      	nop			@ (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e044      	b.n	8005324 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d107      	bne.n	80052b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2278      	movs	r2, #120	@ 0x78
 80052a6:	2100      	movs	r1, #0
 80052a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7fc fb35 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2224      	movs	r2, #36	@ 0x24
 80052b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2101      	movs	r1, #1
 80052c4:	438a      	bics	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 fcf0 	bl	8005cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 fbc4 	bl	8005a68 <UART_SetConfig>
 80052e0:	0003      	movs	r3, r0
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e01c      	b.n	8005324 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	490d      	ldr	r1, [pc, #52]	@ (800532c <HAL_UART_Init+0xa4>)
 80052f6:	400a      	ands	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	212a      	movs	r1, #42	@ 0x2a
 8005306:	438a      	bics	r2, r1
 8005308:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2101      	movs	r1, #1
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0018      	movs	r0, r3
 800531e:	f000 fd7f 	bl	8005e20 <UART_CheckIdleState>
 8005322:	0003      	movs	r3, r0
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}
 800532c:	ffffb7ff 	.word	0xffffb7ff

08005330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005344:	2b20      	cmp	r3, #32
 8005346:	d000      	beq.n	800534a <HAL_UART_Transmit+0x1a>
 8005348:	e08c      	b.n	8005464 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_UART_Transmit+0x28>
 8005350:	1dbb      	adds	r3, r7, #6
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e084      	b.n	8005466 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	015b      	lsls	r3, r3, #5
 8005364:	429a      	cmp	r2, r3
 8005366:	d109      	bne.n	800537c <HAL_UART_Transmit+0x4c>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2201      	movs	r2, #1
 8005374:	4013      	ands	r3, r2
 8005376:	d001      	beq.n	800537c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e074      	b.n	8005466 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2284      	movs	r2, #132	@ 0x84
 8005380:	2100      	movs	r1, #0
 8005382:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2221      	movs	r2, #33	@ 0x21
 8005388:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538a:	f7fc fc97 	bl	8001cbc <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1dba      	adds	r2, r7, #6
 8005396:	2150      	movs	r1, #80	@ 0x50
 8005398:	8812      	ldrh	r2, [r2, #0]
 800539a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1dba      	adds	r2, r7, #6
 80053a0:	2152      	movs	r1, #82	@ 0x52
 80053a2:	8812      	ldrh	r2, [r2, #0]
 80053a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	2380      	movs	r3, #128	@ 0x80
 80053ac:	015b      	lsls	r3, r3, #5
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d108      	bne.n	80053c4 <HAL_UART_Transmit+0x94>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d104      	bne.n	80053c4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e003      	b.n	80053cc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053cc:	e02f      	b.n	800542e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	0013      	movs	r3, r2
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	@ 0x80
 80053dc:	f000 fdc8 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 80053e0:	1e03      	subs	r3, r0, #0
 80053e2:	d004      	beq.n	80053ee <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e03b      	b.n	8005466 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	05d2      	lsls	r2, r2, #23
 80053fe:	0dd2      	lsrs	r2, r2, #23
 8005400:	b292      	uxth	r2, r2
 8005402:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	3302      	adds	r3, #2
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e007      	b.n	800541c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2252      	movs	r2, #82	@ 0x52
 8005420:	5a9b      	ldrh	r3, [r3, r2]
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b299      	uxth	r1, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2252      	movs	r2, #82	@ 0x52
 800542c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2252      	movs	r2, #82	@ 0x52
 8005432:	5a9b      	ldrh	r3, [r3, r2]
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1c9      	bne.n	80053ce <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	0013      	movs	r3, r2
 8005444:	2200      	movs	r2, #0
 8005446:	2140      	movs	r1, #64	@ 0x40
 8005448:	f000 fd92 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 800544c:	1e03      	subs	r3, r0, #0
 800544e:	d004      	beq.n	800545a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e005      	b.n	8005466 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b008      	add	sp, #32
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b0ab      	sub	sp, #172	@ 0xac
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	22a4      	movs	r2, #164	@ 0xa4
 8005480:	18b9      	adds	r1, r7, r2
 8005482:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	20a0      	movs	r0, #160	@ 0xa0
 800548c:	1839      	adds	r1, r7, r0
 800548e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	219c      	movs	r1, #156	@ 0x9c
 8005498:	1879      	adds	r1, r7, r1
 800549a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800549c:	0011      	movs	r1, r2
 800549e:	18bb      	adds	r3, r7, r2
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a99      	ldr	r2, [pc, #612]	@ (8005708 <HAL_UART_IRQHandler+0x298>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	2298      	movs	r2, #152	@ 0x98
 80054a8:	18bc      	adds	r4, r7, r2
 80054aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80054ac:	18bb      	adds	r3, r7, r2
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d114      	bne.n	80054de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2220      	movs	r2, #32
 80054ba:	4013      	ands	r3, r2
 80054bc:	d00f      	beq.n	80054de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2220      	movs	r2, #32
 80054c4:	4013      	ands	r3, r2
 80054c6:	d00a      	beq.n	80054de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d100      	bne.n	80054d2 <HAL_UART_IRQHandler+0x62>
 80054d0:	e29e      	b.n	8005a10 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	0010      	movs	r0, r2
 80054da:	4798      	blx	r3
      }
      return;
 80054dc:	e298      	b.n	8005a10 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054de:	2398      	movs	r3, #152	@ 0x98
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d100      	bne.n	80054ea <HAL_UART_IRQHandler+0x7a>
 80054e8:	e114      	b.n	8005714 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054ea:	239c      	movs	r3, #156	@ 0x9c
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2201      	movs	r2, #1
 80054f2:	4013      	ands	r3, r2
 80054f4:	d106      	bne.n	8005504 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054f6:	23a0      	movs	r3, #160	@ 0xa0
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a83      	ldr	r2, [pc, #524]	@ (800570c <HAL_UART_IRQHandler+0x29c>)
 80054fe:	4013      	ands	r3, r2
 8005500:	d100      	bne.n	8005504 <HAL_UART_IRQHandler+0x94>
 8005502:	e107      	b.n	8005714 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005504:	23a4      	movs	r3, #164	@ 0xa4
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2201      	movs	r2, #1
 800550c:	4013      	ands	r3, r2
 800550e:	d012      	beq.n	8005536 <HAL_UART_IRQHandler+0xc6>
 8005510:	23a0      	movs	r3, #160	@ 0xa0
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	@ 0x80
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4013      	ands	r3, r2
 800551c:	d00b      	beq.n	8005536 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2284      	movs	r2, #132	@ 0x84
 800552a:	589b      	ldr	r3, [r3, r2]
 800552c:	2201      	movs	r2, #1
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2184      	movs	r1, #132	@ 0x84
 8005534:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005536:	23a4      	movs	r3, #164	@ 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2202      	movs	r2, #2
 800553e:	4013      	ands	r3, r2
 8005540:	d011      	beq.n	8005566 <HAL_UART_IRQHandler+0xf6>
 8005542:	239c      	movs	r3, #156	@ 0x9c
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	4013      	ands	r3, r2
 800554c:	d00b      	beq.n	8005566 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2202      	movs	r2, #2
 8005554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2284      	movs	r2, #132	@ 0x84
 800555a:	589b      	ldr	r3, [r3, r2]
 800555c:	2204      	movs	r2, #4
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2184      	movs	r1, #132	@ 0x84
 8005564:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005566:	23a4      	movs	r3, #164	@ 0xa4
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2204      	movs	r2, #4
 800556e:	4013      	ands	r3, r2
 8005570:	d011      	beq.n	8005596 <HAL_UART_IRQHandler+0x126>
 8005572:	239c      	movs	r3, #156	@ 0x9c
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	4013      	ands	r3, r2
 800557c:	d00b      	beq.n	8005596 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2204      	movs	r2, #4
 8005584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2284      	movs	r2, #132	@ 0x84
 800558a:	589b      	ldr	r3, [r3, r2]
 800558c:	2202      	movs	r2, #2
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2184      	movs	r1, #132	@ 0x84
 8005594:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005596:	23a4      	movs	r3, #164	@ 0xa4
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2208      	movs	r2, #8
 800559e:	4013      	ands	r3, r2
 80055a0:	d017      	beq.n	80055d2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055a2:	23a0      	movs	r3, #160	@ 0xa0
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	d105      	bne.n	80055ba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055ae:	239c      	movs	r3, #156	@ 0x9c
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2208      	movs	r2, #8
 80055c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2284      	movs	r2, #132	@ 0x84
 80055c6:	589b      	ldr	r3, [r3, r2]
 80055c8:	2208      	movs	r2, #8
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2184      	movs	r1, #132	@ 0x84
 80055d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055d2:	23a4      	movs	r3, #164	@ 0xa4
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	4013      	ands	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_UART_IRQHandler+0x198>
 80055e0:	23a0      	movs	r3, #160	@ 0xa0
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	04db      	lsls	r3, r3, #19
 80055ea:	4013      	ands	r3, r2
 80055ec:	d00c      	beq.n	8005608 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2280      	movs	r2, #128	@ 0x80
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2284      	movs	r2, #132	@ 0x84
 80055fc:	589b      	ldr	r3, [r3, r2]
 80055fe:	2220      	movs	r2, #32
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2184      	movs	r1, #132	@ 0x84
 8005606:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2284      	movs	r2, #132	@ 0x84
 800560c:	589b      	ldr	r3, [r3, r2]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d100      	bne.n	8005614 <HAL_UART_IRQHandler+0x1a4>
 8005612:	e1ff      	b.n	8005a14 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005614:	23a4      	movs	r3, #164	@ 0xa4
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2220      	movs	r2, #32
 800561c:	4013      	ands	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005620:	23a0      	movs	r3, #160	@ 0xa0
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2220      	movs	r2, #32
 8005628:	4013      	ands	r3, r2
 800562a:	d008      	beq.n	800563e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	0010      	movs	r0, r2
 800563c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2284      	movs	r2, #132	@ 0x84
 8005642:	589b      	ldr	r3, [r3, r2]
 8005644:	2194      	movs	r1, #148	@ 0x94
 8005646:	187a      	adds	r2, r7, r1
 8005648:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2240      	movs	r2, #64	@ 0x40
 8005652:	4013      	ands	r3, r2
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d004      	beq.n	8005662 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005658:	187b      	adds	r3, r7, r1
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2228      	movs	r2, #40	@ 0x28
 800565e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005660:	d047      	beq.n	80056f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fcf3 	bl	8006050 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2240      	movs	r2, #64	@ 0x40
 8005672:	4013      	ands	r3, r2
 8005674:	2b40      	cmp	r3, #64	@ 0x40
 8005676:	d137      	bne.n	80056e8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800567e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005680:	2090      	movs	r0, #144	@ 0x90
 8005682:	183a      	adds	r2, r7, r0
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	2301      	movs	r3, #1
 8005688:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568c:	f383 8810 	msr	PRIMASK, r3
}
 8005690:	46c0      	nop			@ (mov r8, r8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2140      	movs	r1, #64	@ 0x40
 800569e:	438a      	bics	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
 80056a2:	183b      	adds	r3, r7, r0
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056aa:	f383 8810 	msr	PRIMASK, r3
}
 80056ae:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056bc:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <HAL_UART_IRQHandler+0x2a0>)
 80056be:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fc fc85 	bl	8001fd4 <HAL_DMA_Abort_IT>
 80056ca:	1e03      	subs	r3, r0, #0
 80056cc:	d01a      	beq.n	8005704 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d8:	0018      	movs	r0, r3
 80056da:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e012      	b.n	8005704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 f9ad 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e6:	e00d      	b.n	8005704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 f9a8 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e008      	b.n	8005704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 f9a3 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2284      	movs	r2, #132	@ 0x84
 80056fe:	2100      	movs	r1, #0
 8005700:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005702:	e187      	b.n	8005a14 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	46c0      	nop			@ (mov r8, r8)
    return;
 8005706:	e185      	b.n	8005a14 <HAL_UART_IRQHandler+0x5a4>
 8005708:	0000080f 	.word	0x0000080f
 800570c:	04000120 	.word	0x04000120
 8005710:	08006119 	.word	0x08006119

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005718:	2b01      	cmp	r3, #1
 800571a:	d000      	beq.n	800571e <HAL_UART_IRQHandler+0x2ae>
 800571c:	e139      	b.n	8005992 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800571e:	23a4      	movs	r3, #164	@ 0xa4
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2210      	movs	r2, #16
 8005726:	4013      	ands	r3, r2
 8005728:	d100      	bne.n	800572c <HAL_UART_IRQHandler+0x2bc>
 800572a:	e132      	b.n	8005992 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800572c:	23a0      	movs	r3, #160	@ 0xa0
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2210      	movs	r2, #16
 8005734:	4013      	ands	r3, r2
 8005736:	d100      	bne.n	800573a <HAL_UART_IRQHandler+0x2ca>
 8005738:	e12b      	b.n	8005992 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2210      	movs	r2, #16
 8005740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2240      	movs	r2, #64	@ 0x40
 800574a:	4013      	ands	r3, r2
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d000      	beq.n	8005752 <HAL_UART_IRQHandler+0x2e2>
 8005750:	e09f      	b.n	8005892 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	217e      	movs	r1, #126	@ 0x7e
 800575c:	187b      	adds	r3, r7, r1
 800575e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005760:	187b      	adds	r3, r7, r1
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d100      	bne.n	800576a <HAL_UART_IRQHandler+0x2fa>
 8005768:	e156      	b.n	8005a18 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2258      	movs	r2, #88	@ 0x58
 800576e:	5a9b      	ldrh	r3, [r3, r2]
 8005770:	187a      	adds	r2, r7, r1
 8005772:	8812      	ldrh	r2, [r2, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d300      	bcc.n	800577a <HAL_UART_IRQHandler+0x30a>
 8005778:	e14e      	b.n	8005a18 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	187a      	adds	r2, r7, r1
 800577e:	215a      	movs	r1, #90	@ 0x5a
 8005780:	8812      	ldrh	r2, [r2, #0]
 8005782:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b20      	cmp	r3, #32
 800578c:	d06f      	beq.n	800586e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578e:	f3ef 8310 	mrs	r3, PRIMASK
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005798:	2301      	movs	r3, #1
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	f383 8810 	msr	PRIMASK, r3
}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	499e      	ldr	r1, [pc, #632]	@ (8005a28 <HAL_UART_IRQHandler+0x5b8>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8310 	mrs	r3, PRIMASK
 80057c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80057c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80057ca:	2301      	movs	r3, #1
 80057cc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			@ (mov r8, r8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2101      	movs	r1, #1
 80057e2:	438a      	bics	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
 80057e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f2:	f3ef 8310 	mrs	r3, PRIMASK
 80057f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80057f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80057fc:	2301      	movs	r3, #1
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005802:	f383 8810 	msr	PRIMASK, r3
}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2140      	movs	r1, #64	@ 0x40
 8005814:	438a      	bics	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800581a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800581e:	f383 8810 	msr	PRIMASK, r3
}
 8005822:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2280      	movs	r2, #128	@ 0x80
 8005828:	2120      	movs	r1, #32
 800582a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005832:	f3ef 8310 	mrs	r3, PRIMASK
 8005836:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800583c:	2301      	movs	r3, #1
 800583e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005842:	f383 8810 	msr	PRIMASK, r3
}
 8005846:	46c0      	nop			@ (mov r8, r8)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2110      	movs	r1, #16
 8005854:	438a      	bics	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800585a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005868:	0018      	movs	r0, r3
 800586a:	f7fc fb7b 	bl	8001f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2258      	movs	r2, #88	@ 0x58
 8005878:	5a9a      	ldrh	r2, [r3, r2]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	215a      	movs	r1, #90	@ 0x5a
 800587e:	5a5b      	ldrh	r3, [r3, r1]
 8005880:	b29b      	uxth	r3, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0011      	movs	r1, r2
 800588a:	0018      	movs	r0, r3
 800588c:	f000 f8e0 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005890:	e0c2      	b.n	8005a18 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2258      	movs	r2, #88	@ 0x58
 8005896:	5a99      	ldrh	r1, [r3, r2]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	225a      	movs	r2, #90	@ 0x5a
 800589c:	5a9b      	ldrh	r3, [r3, r2]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	208e      	movs	r0, #142	@ 0x8e
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	1a8a      	subs	r2, r1, r2
 80058a6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	225a      	movs	r2, #90	@ 0x5a
 80058ac:	5a9b      	ldrh	r3, [r3, r2]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d100      	bne.n	80058b6 <HAL_UART_IRQHandler+0x446>
 80058b4:	e0b2      	b.n	8005a1c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d100      	bne.n	80058c0 <HAL_UART_IRQHandler+0x450>
 80058be:	e0ad      	b.n	8005a1c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c0:	f3ef 8310 	mrs	r3, PRIMASK
 80058c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80058c6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c8:	2488      	movs	r4, #136	@ 0x88
 80058ca:	193a      	adds	r2, r7, r4
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	2301      	movs	r3, #1
 80058d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f383 8810 	msr	PRIMASK, r3
}
 80058d8:	46c0      	nop			@ (mov r8, r8)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4951      	ldr	r1, [pc, #324]	@ (8005a2c <HAL_UART_IRQHandler+0x5bc>)
 80058e6:	400a      	ands	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	193b      	adds	r3, r7, r4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f8:	f3ef 8310 	mrs	r3, PRIMASK
 80058fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80058fe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005900:	2484      	movs	r4, #132	@ 0x84
 8005902:	193a      	adds	r2, r7, r4
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	2301      	movs	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f383 8810 	msr	PRIMASK, r3
}
 8005910:	46c0      	nop			@ (mov r8, r8)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2101      	movs	r1, #1
 800591e:	438a      	bics	r2, r1
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	193b      	adds	r3, r7, r4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2280      	movs	r2, #128	@ 0x80
 8005934:	2120      	movs	r1, #32
 8005936:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005944:	f3ef 8310 	mrs	r3, PRIMASK
 8005948:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594c:	2480      	movs	r4, #128	@ 0x80
 800594e:	193a      	adds	r2, r7, r4
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	2301      	movs	r3, #1
 8005954:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2110      	movs	r1, #16
 800596a:	438a      	bics	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	193b      	adds	r3, r7, r4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005982:	183b      	adds	r3, r7, r0
 8005984:	881a      	ldrh	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0011      	movs	r1, r2
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f860 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005990:	e044      	b.n	8005a1c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005992:	23a4      	movs	r3, #164	@ 0xa4
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2380      	movs	r3, #128	@ 0x80
 800599a:	035b      	lsls	r3, r3, #13
 800599c:	4013      	ands	r3, r2
 800599e:	d010      	beq.n	80059c2 <HAL_UART_IRQHandler+0x552>
 80059a0:	239c      	movs	r3, #156	@ 0x9c
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	03db      	lsls	r3, r3, #15
 80059aa:	4013      	ands	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2280      	movs	r2, #128	@ 0x80
 80059b4:	0352      	lsls	r2, r2, #13
 80059b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 fbee 	bl	800619c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059c0:	e02f      	b.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059c2:	23a4      	movs	r3, #164	@ 0xa4
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2280      	movs	r2, #128	@ 0x80
 80059ca:	4013      	ands	r3, r2
 80059cc:	d00f      	beq.n	80059ee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059ce:	23a0      	movs	r3, #160	@ 0xa0
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2280      	movs	r2, #128	@ 0x80
 80059d6:	4013      	ands	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01e      	beq.n	8005a20 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	0010      	movs	r0, r2
 80059ea:	4798      	blx	r3
    }
    return;
 80059ec:	e018      	b.n	8005a20 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ee:	23a4      	movs	r3, #164	@ 0xa4
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2240      	movs	r2, #64	@ 0x40
 80059f6:	4013      	ands	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
 80059fa:	23a0      	movs	r3, #160	@ 0xa0
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2240      	movs	r2, #64	@ 0x40
 8005a02:	4013      	ands	r3, r2
 8005a04:	d00d      	beq.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 fb9c 	bl	8006146 <UART_EndTransmit_IT>
    return;
 8005a0e:	e008      	b.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005a10:	46c0      	nop			@ (mov r8, r8)
 8005a12:	e006      	b.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005a14:	46c0      	nop			@ (mov r8, r8)
 8005a16:	e004      	b.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	e002      	b.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005a1c:	46c0      	nop			@ (mov r8, r8)
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005a20:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005a22:	46bd      	mov	sp, r7
 8005a24:	b02b      	add	sp, #172	@ 0xac
 8005a26:	bd90      	pop	{r4, r7, pc}
 8005a28:	fffffeff 	.word	0xfffffeff
 8005a2c:	fffffedf 	.word	0xfffffedf

08005a30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	000a      	movs	r2, r1
 8005a5a:	1cbb      	adds	r3, r7, #2
 8005a5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b002      	add	sp, #8
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a70:	231e      	movs	r3, #30
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a83      	ldr	r2, [pc, #524]	@ (8005ca4 <UART_SetConfig+0x23c>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	0019      	movs	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a7e      	ldr	r2, [pc, #504]	@ (8005ca8 <UART_SetConfig+0x240>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4a75      	ldr	r2, [pc, #468]	@ (8005cac <UART_SetConfig+0x244>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ae4:	4b72      	ldr	r3, [pc, #456]	@ (8005cb0 <UART_SetConfig+0x248>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d00d      	beq.n	8005b0c <UART_SetConfig+0xa4>
 8005af0:	d81b      	bhi.n	8005b2a <UART_SetConfig+0xc2>
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d014      	beq.n	8005b20 <UART_SetConfig+0xb8>
 8005af6:	d818      	bhi.n	8005b2a <UART_SetConfig+0xc2>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <UART_SetConfig+0x9a>
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d00a      	beq.n	8005b16 <UART_SetConfig+0xae>
 8005b00:	e013      	b.n	8005b2a <UART_SetConfig+0xc2>
 8005b02:	231f      	movs	r3, #31
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e012      	b.n	8005b32 <UART_SetConfig+0xca>
 8005b0c:	231f      	movs	r3, #31
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	2202      	movs	r2, #2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e00d      	b.n	8005b32 <UART_SetConfig+0xca>
 8005b16:	231f      	movs	r3, #31
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e008      	b.n	8005b32 <UART_SetConfig+0xca>
 8005b20:	231f      	movs	r3, #31
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	2208      	movs	r2, #8
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e003      	b.n	8005b32 <UART_SetConfig+0xca>
 8005b2a:	231f      	movs	r3, #31
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2210      	movs	r2, #16
 8005b30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69da      	ldr	r2, [r3, #28]
 8005b36:	2380      	movs	r3, #128	@ 0x80
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d15c      	bne.n	8005bf8 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8005b3e:	231f      	movs	r3, #31
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d015      	beq.n	8005b74 <UART_SetConfig+0x10c>
 8005b48:	dc18      	bgt.n	8005b7c <UART_SetConfig+0x114>
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d00d      	beq.n	8005b6a <UART_SetConfig+0x102>
 8005b4e:	dc15      	bgt.n	8005b7c <UART_SetConfig+0x114>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <UART_SetConfig+0xf2>
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d005      	beq.n	8005b64 <UART_SetConfig+0xfc>
 8005b58:	e010      	b.n	8005b7c <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b5a:	f7fd fdc7 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005b5e:	0003      	movs	r3, r0
 8005b60:	61bb      	str	r3, [r7, #24]
        break;
 8005b62:	e012      	b.n	8005b8a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b64:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <UART_SetConfig+0x24c>)
 8005b66:	61bb      	str	r3, [r7, #24]
        break;
 8005b68:	e00f      	b.n	8005b8a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b6a:	f7fd fd5f 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	61bb      	str	r3, [r7, #24]
        break;
 8005b72:	e00a      	b.n	8005b8a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b74:	2380      	movs	r3, #128	@ 0x80
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	61bb      	str	r3, [r7, #24]
        break;
 8005b7a:	e006      	b.n	8005b8a <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b80:	231e      	movs	r3, #30
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
        break;
 8005b88:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d100      	bne.n	8005b92 <UART_SetConfig+0x12a>
 8005b90:	e07a      	b.n	8005c88 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	005a      	lsls	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	18d2      	adds	r2, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	0010      	movs	r0, r2
 8005ba6:	f7fa fab7 	bl	8000118 <__udivsi3>
 8005baa:	0003      	movs	r3, r0
 8005bac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b0f      	cmp	r3, #15
 8005bb2:	d91c      	bls.n	8005bee <UART_SetConfig+0x186>
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	2380      	movs	r3, #128	@ 0x80
 8005bb8:	025b      	lsls	r3, r3, #9
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d217      	bcs.n	8005bee <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	200e      	movs	r0, #14
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	210f      	movs	r1, #15
 8005bc8:	438a      	bics	r2, r1
 8005bca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2207      	movs	r2, #7
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	b299      	uxth	r1, r3
 8005bd8:	183b      	adds	r3, r7, r0
 8005bda:	183a      	adds	r2, r7, r0
 8005bdc:	8812      	ldrh	r2, [r2, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	183a      	adds	r2, r7, r0
 8005be8:	8812      	ldrh	r2, [r2, #0]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e04c      	b.n	8005c88 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005bee:	231e      	movs	r3, #30
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	e047      	b.n	8005c88 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bf8:	231f      	movs	r3, #31
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d015      	beq.n	8005c2e <UART_SetConfig+0x1c6>
 8005c02:	dc18      	bgt.n	8005c36 <UART_SetConfig+0x1ce>
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d00d      	beq.n	8005c24 <UART_SetConfig+0x1bc>
 8005c08:	dc15      	bgt.n	8005c36 <UART_SetConfig+0x1ce>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <UART_SetConfig+0x1ac>
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d005      	beq.n	8005c1e <UART_SetConfig+0x1b6>
 8005c12:	e010      	b.n	8005c36 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c14:	f7fd fd6a 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	61bb      	str	r3, [r7, #24]
        break;
 8005c1c:	e012      	b.n	8005c44 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1e:	4b25      	ldr	r3, [pc, #148]	@ (8005cb4 <UART_SetConfig+0x24c>)
 8005c20:	61bb      	str	r3, [r7, #24]
        break;
 8005c22:	e00f      	b.n	8005c44 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c24:	f7fd fd02 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	61bb      	str	r3, [r7, #24]
        break;
 8005c2c:	e00a      	b.n	8005c44 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	61bb      	str	r3, [r7, #24]
        break;
 8005c34:	e006      	b.n	8005c44 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c3a:	231e      	movs	r3, #30
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	2201      	movs	r2, #1
 8005c40:	701a      	strb	r2, [r3, #0]
        break;
 8005c42:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01e      	beq.n	8005c88 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085a      	lsrs	r2, r3, #1
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	18d2      	adds	r2, r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	0019      	movs	r1, r3
 8005c5a:	0010      	movs	r0, r2
 8005c5c:	f7fa fa5c 	bl	8000118 <__udivsi3>
 8005c60:	0003      	movs	r3, r0
 8005c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d90a      	bls.n	8005c80 <UART_SetConfig+0x218>
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	2380      	movs	r3, #128	@ 0x80
 8005c6e:	025b      	lsls	r3, r3, #9
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d205      	bcs.n	8005c80 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e003      	b.n	8005c88 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005c80:	231e      	movs	r3, #30
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c94:	231e      	movs	r3, #30
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	781b      	ldrb	r3, [r3, #0]
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b008      	add	sp, #32
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	ffff69f3 	.word	0xffff69f3
 8005ca8:	ffffcfff 	.word	0xffffcfff
 8005cac:	fffff4ff 	.word	0xfffff4ff
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	007a1200 	.word	0x007a1200

08005cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8005dfc <UART_AdvFeatureConfig+0x144>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4a43      	ldr	r2, [pc, #268]	@ (8005e00 <UART_AdvFeatureConfig+0x148>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	2202      	movs	r2, #2
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a3b      	ldr	r2, [pc, #236]	@ (8005e04 <UART_AdvFeatureConfig+0x14c>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a34      	ldr	r2, [pc, #208]	@ (8005e08 <UART_AdvFeatureConfig+0x150>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4a2c      	ldr	r2, [pc, #176]	@ (8005e0c <UART_AdvFeatureConfig+0x154>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	2220      	movs	r2, #32
 8005d70:	4013      	ands	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	4a25      	ldr	r2, [pc, #148]	@ (8005e10 <UART_AdvFeatureConfig+0x158>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d90:	2240      	movs	r2, #64	@ 0x40
 8005d92:	4013      	ands	r3, r2
 8005d94:	d01d      	beq.n	8005dd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e14 <UART_AdvFeatureConfig+0x15c>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	0019      	movs	r1, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	035b      	lsls	r3, r3, #13
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d10b      	bne.n	8005dd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a15      	ldr	r2, [pc, #84]	@ (8005e18 <UART_AdvFeatureConfig+0x160>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4a0e      	ldr	r2, [pc, #56]	@ (8005e1c <UART_AdvFeatureConfig+0x164>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	0019      	movs	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
  }
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	ffff7fff 	.word	0xffff7fff
 8005e00:	fffdffff 	.word	0xfffdffff
 8005e04:	fffeffff 	.word	0xfffeffff
 8005e08:	fffbffff 	.word	0xfffbffff
 8005e0c:	ffffefff 	.word	0xffffefff
 8005e10:	ffffdfff 	.word	0xffffdfff
 8005e14:	ffefffff 	.word	0xffefffff
 8005e18:	ff9fffff 	.word	0xff9fffff
 8005e1c:	fff7ffff 	.word	0xfff7ffff

08005e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b092      	sub	sp, #72	@ 0x48
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2284      	movs	r2, #132	@ 0x84
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e30:	f7fb ff44 	bl	8001cbc <HAL_GetTick>
 8005e34:	0003      	movs	r3, r0
 8005e36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d12c      	bne.n	8005ea0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e48:	2280      	movs	r2, #128	@ 0x80
 8005e4a:	0391      	lsls	r1, r2, #14
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4a46      	ldr	r2, [pc, #280]	@ (8005f68 <UART_CheckIdleState+0x148>)
 8005e50:	9200      	str	r2, [sp, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f000 f88c 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005e58:	1e03      	subs	r3, r0, #0
 8005e5a:	d021      	beq.n	8005ea0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e66:	2301      	movs	r3, #1
 8005e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			@ (mov r8, r8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2180      	movs	r1, #128	@ 0x80
 8005e7e:	438a      	bics	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	f383 8810 	msr	PRIMASK, r3
}
 8005e8c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2278      	movs	r2, #120	@ 0x78
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e05f      	b.n	8005f60 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d146      	bne.n	8005f3c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb0:	2280      	movs	r2, #128	@ 0x80
 8005eb2:	03d1      	lsls	r1, r2, #15
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f68 <UART_CheckIdleState+0x148>)
 8005eb8:	9200      	str	r2, [sp, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f000 f858 	bl	8005f70 <UART_WaitOnFlagUntilTimeout>
 8005ec0:	1e03      	subs	r3, r0, #0
 8005ec2:	d03b      	beq.n	8005f3c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ece:	2301      	movs	r3, #1
 8005ed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			@ (mov r8, r8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4921      	ldr	r1, [pc, #132]	@ (8005f6c <UART_CheckIdleState+0x14c>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f383 8810 	msr	PRIMASK, r3
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8005efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8005efc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f00:	2301      	movs	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f383 8810 	msr	PRIMASK, r3
}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2101      	movs	r1, #1
 8005f18:	438a      	bics	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2280      	movs	r2, #128	@ 0x80
 8005f2c:	2120      	movs	r1, #32
 8005f2e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2278      	movs	r2, #120	@ 0x78
 8005f34:	2100      	movs	r1, #0
 8005f36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e011      	b.n	8005f60 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2280      	movs	r2, #128	@ 0x80
 8005f46:	2120      	movs	r1, #32
 8005f48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2278      	movs	r2, #120	@ 0x78
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b010      	add	sp, #64	@ 0x40
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	01ffffff 	.word	0x01ffffff
 8005f6c:	fffffedf 	.word	0xfffffedf

08005f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	1dfb      	adds	r3, r7, #7
 8005f7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f80:	e051      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	3301      	adds	r3, #1
 8005f86:	d04e      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f88:	f7fb fe98 	bl	8001cbc <HAL_GetTick>
 8005f8c:	0002      	movs	r2, r0
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d302      	bcc.n	8005f9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e051      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	4013      	ands	r3, r2
 8005fac:	d03b      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b80      	cmp	r3, #128	@ 0x80
 8005fb2:	d038      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b40      	cmp	r3, #64	@ 0x40
 8005fb8:	d035      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d111      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 f83c 	bl	8006050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2284      	movs	r2, #132	@ 0x84
 8005fdc:	2108      	movs	r1, #8
 8005fde:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2278      	movs	r2, #120	@ 0x78
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e02c      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	2380      	movs	r3, #128	@ 0x80
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d112      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2280      	movs	r2, #128	@ 0x80
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	0018      	movs	r0, r3
 800600e:	f000 f81f 	bl	8006050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2284      	movs	r2, #132	@ 0x84
 8006016:	2120      	movs	r1, #32
 8006018:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2278      	movs	r2, #120	@ 0x78
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e00f      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	425a      	negs	r2, r3
 8006036:	4153      	adcs	r3, r2
 8006038:	b2db      	uxtb	r3, r3
 800603a:	001a      	movs	r2, r3
 800603c:	1dfb      	adds	r3, r7, #7
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d09e      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	0018      	movs	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	b004      	add	sp, #16
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	@ 0x38
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006058:	f3ef 8310 	mrs	r3, PRIMASK
 800605c:	617b      	str	r3, [r7, #20]
  return(result);
 800605e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
 8006062:	2301      	movs	r3, #1
 8006064:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f383 8810 	msr	PRIMASK, r3
}
 800606c:	46c0      	nop			@ (mov r8, r8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4926      	ldr	r1, [pc, #152]	@ (8006114 <UART_EndRxTransfer+0xc4>)
 800607a:	400a      	ands	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f383 8810 	msr	PRIMASK, r3
}
 8006088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608a:	f3ef 8310 	mrs	r3, PRIMASK
 800608e:	623b      	str	r3, [r7, #32]
  return(result);
 8006090:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
 8006094:	2301      	movs	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			@ (mov r8, r8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	438a      	bics	r2, r1
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	f383 8810 	msr	PRIMASK, r3
}
 80060ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d118      	bne.n	80060f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c4:	f3ef 8310 	mrs	r3, PRIMASK
 80060c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ce:	2301      	movs	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2110      	movs	r1, #16
 80060e6:	438a      	bics	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f383 8810 	msr	PRIMASK, r3
}
 80060f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2280      	movs	r2, #128	@ 0x80
 80060fa:	2120      	movs	r1, #32
 80060fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	46bd      	mov	sp, r7
 800610e:	b00e      	add	sp, #56	@ 0x38
 8006110:	bd80      	pop	{r7, pc}
 8006112:	46c0      	nop			@ (mov r8, r8)
 8006114:	fffffedf 	.word	0xfffffedf

08006118 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	225a      	movs	r2, #90	@ 0x5a
 800612a:	2100      	movs	r1, #0
 800612c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2252      	movs	r2, #82	@ 0x52
 8006132:	2100      	movs	r1, #0
 8006134:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff fc81 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613e:	46c0      	nop			@ (mov r8, r8)
 8006140:	46bd      	mov	sp, r7
 8006142:	b004      	add	sp, #16
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614e:	f3ef 8310 	mrs	r3, PRIMASK
 8006152:	60bb      	str	r3, [r7, #8]
  return(result);
 8006154:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	2301      	movs	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f383 8810 	msr	PRIMASK, r3
}
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2140      	movs	r1, #64	@ 0x40
 8006170:	438a      	bics	r2, r1
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f383 8810 	msr	PRIMASK, r3
}
 800617e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0018      	movs	r0, r3
 8006190:	f7ff fc4e 	bl	8005a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006194:	46c0      	nop			@ (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	b006      	add	sp, #24
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061a4:	46c0      	nop			@ (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b002      	add	sp, #8
 80061aa:	bd80      	pop	{r7, pc}

080061ac <malloc>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <malloc+0x10>)
 80061b0:	0001      	movs	r1, r0
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f000 f830 	bl	8006218 <_malloc_r>
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	46c0      	nop			@ (mov r8, r8)
 80061bc:	20000018 	.word	0x20000018

080061c0 <free>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4b03      	ldr	r3, [pc, #12]	@ (80061d0 <free+0x10>)
 80061c4:	0001      	movs	r1, r0
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	f000 f940 	bl	800644c <_free_r>
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	20000018 	.word	0x20000018

080061d4 <sbrk_aligned>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006214 <sbrk_aligned+0x40>)
 80061d8:	000d      	movs	r5, r1
 80061da:	6831      	ldr	r1, [r6, #0]
 80061dc:	0004      	movs	r4, r0
 80061de:	2900      	cmp	r1, #0
 80061e0:	d102      	bne.n	80061e8 <sbrk_aligned+0x14>
 80061e2:	f000 f8eb 	bl	80063bc <_sbrk_r>
 80061e6:	6030      	str	r0, [r6, #0]
 80061e8:	0029      	movs	r1, r5
 80061ea:	0020      	movs	r0, r4
 80061ec:	f000 f8e6 	bl	80063bc <_sbrk_r>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d103      	bne.n	80061fc <sbrk_aligned+0x28>
 80061f4:	2501      	movs	r5, #1
 80061f6:	426d      	negs	r5, r5
 80061f8:	0028      	movs	r0, r5
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	2303      	movs	r3, #3
 80061fe:	1cc5      	adds	r5, r0, #3
 8006200:	439d      	bics	r5, r3
 8006202:	42a8      	cmp	r0, r5
 8006204:	d0f8      	beq.n	80061f8 <sbrk_aligned+0x24>
 8006206:	1a29      	subs	r1, r5, r0
 8006208:	0020      	movs	r0, r4
 800620a:	f000 f8d7 	bl	80063bc <_sbrk_r>
 800620e:	3001      	adds	r0, #1
 8006210:	d1f2      	bne.n	80061f8 <sbrk_aligned+0x24>
 8006212:	e7ef      	b.n	80061f4 <sbrk_aligned+0x20>
 8006214:	20000294 	.word	0x20000294

08006218 <_malloc_r>:
 8006218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800621a:	2203      	movs	r2, #3
 800621c:	1ccb      	adds	r3, r1, #3
 800621e:	4393      	bics	r3, r2
 8006220:	3308      	adds	r3, #8
 8006222:	0005      	movs	r5, r0
 8006224:	001f      	movs	r7, r3
 8006226:	2b0c      	cmp	r3, #12
 8006228:	d234      	bcs.n	8006294 <_malloc_r+0x7c>
 800622a:	270c      	movs	r7, #12
 800622c:	42b9      	cmp	r1, r7
 800622e:	d833      	bhi.n	8006298 <_malloc_r+0x80>
 8006230:	0028      	movs	r0, r5
 8006232:	f000 f871 	bl	8006318 <__malloc_lock>
 8006236:	4e37      	ldr	r6, [pc, #220]	@ (8006314 <_malloc_r+0xfc>)
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	001c      	movs	r4, r3
 800623c:	2c00      	cmp	r4, #0
 800623e:	d12f      	bne.n	80062a0 <_malloc_r+0x88>
 8006240:	0039      	movs	r1, r7
 8006242:	0028      	movs	r0, r5
 8006244:	f7ff ffc6 	bl	80061d4 <sbrk_aligned>
 8006248:	0004      	movs	r4, r0
 800624a:	1c43      	adds	r3, r0, #1
 800624c:	d15f      	bne.n	800630e <_malloc_r+0xf6>
 800624e:	6834      	ldr	r4, [r6, #0]
 8006250:	9400      	str	r4, [sp, #0]
 8006252:	9b00      	ldr	r3, [sp, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d14a      	bne.n	80062ee <_malloc_r+0xd6>
 8006258:	2c00      	cmp	r4, #0
 800625a:	d052      	beq.n	8006302 <_malloc_r+0xea>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	0028      	movs	r0, r5
 8006260:	18e3      	adds	r3, r4, r3
 8006262:	9900      	ldr	r1, [sp, #0]
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	f000 f8a9 	bl	80063bc <_sbrk_r>
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	4283      	cmp	r3, r0
 800626e:	d148      	bne.n	8006302 <_malloc_r+0xea>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	0028      	movs	r0, r5
 8006274:	1aff      	subs	r7, r7, r3
 8006276:	0039      	movs	r1, r7
 8006278:	f7ff ffac 	bl	80061d4 <sbrk_aligned>
 800627c:	3001      	adds	r0, #1
 800627e:	d040      	beq.n	8006302 <_malloc_r+0xea>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	19db      	adds	r3, r3, r7
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	6833      	ldr	r3, [r6, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	2a00      	cmp	r2, #0
 800628c:	d133      	bne.n	80062f6 <_malloc_r+0xde>
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	6033      	str	r3, [r6, #0]
 8006292:	e019      	b.n	80062c8 <_malloc_r+0xb0>
 8006294:	2b00      	cmp	r3, #0
 8006296:	dac9      	bge.n	800622c <_malloc_r+0x14>
 8006298:	230c      	movs	r3, #12
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	2000      	movs	r0, #0
 800629e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062a0:	6821      	ldr	r1, [r4, #0]
 80062a2:	1bc9      	subs	r1, r1, r7
 80062a4:	d420      	bmi.n	80062e8 <_malloc_r+0xd0>
 80062a6:	290b      	cmp	r1, #11
 80062a8:	d90a      	bls.n	80062c0 <_malloc_r+0xa8>
 80062aa:	19e2      	adds	r2, r4, r7
 80062ac:	6027      	str	r7, [r4, #0]
 80062ae:	42a3      	cmp	r3, r4
 80062b0:	d104      	bne.n	80062bc <_malloc_r+0xa4>
 80062b2:	6032      	str	r2, [r6, #0]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	6011      	str	r1, [r2, #0]
 80062b8:	6053      	str	r3, [r2, #4]
 80062ba:	e005      	b.n	80062c8 <_malloc_r+0xb0>
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	e7f9      	b.n	80062b4 <_malloc_r+0x9c>
 80062c0:	6862      	ldr	r2, [r4, #4]
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	d10e      	bne.n	80062e4 <_malloc_r+0xcc>
 80062c6:	6032      	str	r2, [r6, #0]
 80062c8:	0028      	movs	r0, r5
 80062ca:	f000 f82d 	bl	8006328 <__malloc_unlock>
 80062ce:	0020      	movs	r0, r4
 80062d0:	2207      	movs	r2, #7
 80062d2:	300b      	adds	r0, #11
 80062d4:	1d23      	adds	r3, r4, #4
 80062d6:	4390      	bics	r0, r2
 80062d8:	1ac2      	subs	r2, r0, r3
 80062da:	4298      	cmp	r0, r3
 80062dc:	d0df      	beq.n	800629e <_malloc_r+0x86>
 80062de:	1a1b      	subs	r3, r3, r0
 80062e0:	50a3      	str	r3, [r4, r2]
 80062e2:	e7dc      	b.n	800629e <_malloc_r+0x86>
 80062e4:	605a      	str	r2, [r3, #4]
 80062e6:	e7ef      	b.n	80062c8 <_malloc_r+0xb0>
 80062e8:	0023      	movs	r3, r4
 80062ea:	6864      	ldr	r4, [r4, #4]
 80062ec:	e7a6      	b.n	800623c <_malloc_r+0x24>
 80062ee:	9c00      	ldr	r4, [sp, #0]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	e7ad      	b.n	8006252 <_malloc_r+0x3a>
 80062f6:	001a      	movs	r2, r3
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	d1fb      	bne.n	80062f6 <_malloc_r+0xde>
 80062fe:	2300      	movs	r3, #0
 8006300:	e7da      	b.n	80062b8 <_malloc_r+0xa0>
 8006302:	230c      	movs	r3, #12
 8006304:	0028      	movs	r0, r5
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f000 f80e 	bl	8006328 <__malloc_unlock>
 800630c:	e7c6      	b.n	800629c <_malloc_r+0x84>
 800630e:	6007      	str	r7, [r0, #0]
 8006310:	e7da      	b.n	80062c8 <_malloc_r+0xb0>
 8006312:	46c0      	nop			@ (mov r8, r8)
 8006314:	20000298 	.word	0x20000298

08006318 <__malloc_lock>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4802      	ldr	r0, [pc, #8]	@ (8006324 <__malloc_lock+0xc>)
 800631c:	f000 f88a 	bl	8006434 <__retarget_lock_acquire_recursive>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	200003d8 	.word	0x200003d8

08006328 <__malloc_unlock>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4802      	ldr	r0, [pc, #8]	@ (8006334 <__malloc_unlock+0xc>)
 800632c:	f000 f883 	bl	8006436 <__retarget_lock_release_recursive>
 8006330:	bd10      	pop	{r4, pc}
 8006332:	46c0      	nop			@ (mov r8, r8)
 8006334:	200003d8 	.word	0x200003d8

08006338 <realloc>:
 8006338:	b510      	push	{r4, lr}
 800633a:	4b03      	ldr	r3, [pc, #12]	@ (8006348 <realloc+0x10>)
 800633c:	000a      	movs	r2, r1
 800633e:	0001      	movs	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f000 f803 	bl	800634c <_realloc_r>
 8006346:	bd10      	pop	{r4, pc}
 8006348:	20000018 	.word	0x20000018

0800634c <_realloc_r>:
 800634c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634e:	0006      	movs	r6, r0
 8006350:	000c      	movs	r4, r1
 8006352:	0015      	movs	r5, r2
 8006354:	2900      	cmp	r1, #0
 8006356:	d105      	bne.n	8006364 <_realloc_r+0x18>
 8006358:	0011      	movs	r1, r2
 800635a:	f7ff ff5d 	bl	8006218 <_malloc_r>
 800635e:	0004      	movs	r4, r0
 8006360:	0020      	movs	r0, r4
 8006362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006364:	2a00      	cmp	r2, #0
 8006366:	d103      	bne.n	8006370 <_realloc_r+0x24>
 8006368:	f000 f870 	bl	800644c <_free_r>
 800636c:	2400      	movs	r4, #0
 800636e:	e7f7      	b.n	8006360 <_realloc_r+0x14>
 8006370:	f000 f8b6 	bl	80064e0 <_malloc_usable_size_r>
 8006374:	0007      	movs	r7, r0
 8006376:	4285      	cmp	r5, r0
 8006378:	d802      	bhi.n	8006380 <_realloc_r+0x34>
 800637a:	0843      	lsrs	r3, r0, #1
 800637c:	42ab      	cmp	r3, r5
 800637e:	d3ef      	bcc.n	8006360 <_realloc_r+0x14>
 8006380:	0029      	movs	r1, r5
 8006382:	0030      	movs	r0, r6
 8006384:	f7ff ff48 	bl	8006218 <_malloc_r>
 8006388:	9001      	str	r0, [sp, #4]
 800638a:	2800      	cmp	r0, #0
 800638c:	d0ee      	beq.n	800636c <_realloc_r+0x20>
 800638e:	002a      	movs	r2, r5
 8006390:	42bd      	cmp	r5, r7
 8006392:	d900      	bls.n	8006396 <_realloc_r+0x4a>
 8006394:	003a      	movs	r2, r7
 8006396:	0021      	movs	r1, r4
 8006398:	9801      	ldr	r0, [sp, #4]
 800639a:	f000 f84d 	bl	8006438 <memcpy>
 800639e:	0021      	movs	r1, r4
 80063a0:	0030      	movs	r0, r6
 80063a2:	f000 f853 	bl	800644c <_free_r>
 80063a6:	9c01      	ldr	r4, [sp, #4]
 80063a8:	e7da      	b.n	8006360 <_realloc_r+0x14>

080063aa <memset>:
 80063aa:	0003      	movs	r3, r0
 80063ac:	1882      	adds	r2, r0, r2
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d100      	bne.n	80063b4 <memset+0xa>
 80063b2:	4770      	bx	lr
 80063b4:	7019      	strb	r1, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	e7f9      	b.n	80063ae <memset+0x4>
	...

080063bc <_sbrk_r>:
 80063bc:	2300      	movs	r3, #0
 80063be:	b570      	push	{r4, r5, r6, lr}
 80063c0:	4d06      	ldr	r5, [pc, #24]	@ (80063dc <_sbrk_r+0x20>)
 80063c2:	0004      	movs	r4, r0
 80063c4:	0008      	movs	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fb fb48 	bl	8001a5c <_sbrk>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d103      	bne.n	80063d8 <_sbrk_r+0x1c>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d000      	beq.n	80063d8 <_sbrk_r+0x1c>
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	bd70      	pop	{r4, r5, r6, pc}
 80063da:	46c0      	nop			@ (mov r8, r8)
 80063dc:	200003d4 	.word	0x200003d4

080063e0 <__errno>:
 80063e0:	4b01      	ldr	r3, [pc, #4]	@ (80063e8 <__errno+0x8>)
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	4770      	bx	lr
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	20000018 	.word	0x20000018

080063ec <__libc_init_array>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	2600      	movs	r6, #0
 80063f0:	4c0c      	ldr	r4, [pc, #48]	@ (8006424 <__libc_init_array+0x38>)
 80063f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006428 <__libc_init_array+0x3c>)
 80063f4:	1b64      	subs	r4, r4, r5
 80063f6:	10a4      	asrs	r4, r4, #2
 80063f8:	42a6      	cmp	r6, r4
 80063fa:	d109      	bne.n	8006410 <__libc_init_array+0x24>
 80063fc:	2600      	movs	r6, #0
 80063fe:	f000 f877 	bl	80064f0 <_init>
 8006402:	4c0a      	ldr	r4, [pc, #40]	@ (800642c <__libc_init_array+0x40>)
 8006404:	4d0a      	ldr	r5, [pc, #40]	@ (8006430 <__libc_init_array+0x44>)
 8006406:	1b64      	subs	r4, r4, r5
 8006408:	10a4      	asrs	r4, r4, #2
 800640a:	42a6      	cmp	r6, r4
 800640c:	d105      	bne.n	800641a <__libc_init_array+0x2e>
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	00b3      	lsls	r3, r6, #2
 8006412:	58eb      	ldr	r3, [r5, r3]
 8006414:	4798      	blx	r3
 8006416:	3601      	adds	r6, #1
 8006418:	e7ee      	b.n	80063f8 <__libc_init_array+0xc>
 800641a:	00b3      	lsls	r3, r6, #2
 800641c:	58eb      	ldr	r3, [r5, r3]
 800641e:	4798      	blx	r3
 8006420:	3601      	adds	r6, #1
 8006422:	e7f2      	b.n	800640a <__libc_init_array+0x1e>
 8006424:	08006630 	.word	0x08006630
 8006428:	08006630 	.word	0x08006630
 800642c:	08006634 	.word	0x08006634
 8006430:	08006630 	.word	0x08006630

08006434 <__retarget_lock_acquire_recursive>:
 8006434:	4770      	bx	lr

08006436 <__retarget_lock_release_recursive>:
 8006436:	4770      	bx	lr

08006438 <memcpy>:
 8006438:	2300      	movs	r3, #0
 800643a:	b510      	push	{r4, lr}
 800643c:	429a      	cmp	r2, r3
 800643e:	d100      	bne.n	8006442 <memcpy+0xa>
 8006440:	bd10      	pop	{r4, pc}
 8006442:	5ccc      	ldrb	r4, [r1, r3]
 8006444:	54c4      	strb	r4, [r0, r3]
 8006446:	3301      	adds	r3, #1
 8006448:	e7f8      	b.n	800643c <memcpy+0x4>
	...

0800644c <_free_r>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	0005      	movs	r5, r0
 8006450:	1e0c      	subs	r4, r1, #0
 8006452:	d010      	beq.n	8006476 <_free_r+0x2a>
 8006454:	3c04      	subs	r4, #4
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da00      	bge.n	800645e <_free_r+0x12>
 800645c:	18e4      	adds	r4, r4, r3
 800645e:	0028      	movs	r0, r5
 8006460:	f7ff ff5a 	bl	8006318 <__malloc_lock>
 8006464:	4a1d      	ldr	r2, [pc, #116]	@ (80064dc <_free_r+0x90>)
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <_free_r+0x2c>
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	6014      	str	r4, [r2, #0]
 8006470:	0028      	movs	r0, r5
 8006472:	f7ff ff59 	bl	8006328 <__malloc_unlock>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	42a3      	cmp	r3, r4
 800647a:	d908      	bls.n	800648e <_free_r+0x42>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	1821      	adds	r1, r4, r0
 8006480:	428b      	cmp	r3, r1
 8006482:	d1f3      	bne.n	800646c <_free_r+0x20>
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	1809      	adds	r1, r1, r0
 800648a:	6021      	str	r1, [r4, #0]
 800648c:	e7ee      	b.n	800646c <_free_r+0x20>
 800648e:	001a      	movs	r2, r3
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <_free_r+0x4e>
 8006496:	42a3      	cmp	r3, r4
 8006498:	d9f9      	bls.n	800648e <_free_r+0x42>
 800649a:	6811      	ldr	r1, [r2, #0]
 800649c:	1850      	adds	r0, r2, r1
 800649e:	42a0      	cmp	r0, r4
 80064a0:	d10b      	bne.n	80064ba <_free_r+0x6e>
 80064a2:	6820      	ldr	r0, [r4, #0]
 80064a4:	1809      	adds	r1, r1, r0
 80064a6:	1850      	adds	r0, r2, r1
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	4283      	cmp	r3, r0
 80064ac:	d1e0      	bne.n	8006470 <_free_r+0x24>
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	1841      	adds	r1, r0, r1
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	6053      	str	r3, [r2, #4]
 80064b8:	e7da      	b.n	8006470 <_free_r+0x24>
 80064ba:	42a0      	cmp	r0, r4
 80064bc:	d902      	bls.n	80064c4 <_free_r+0x78>
 80064be:	230c      	movs	r3, #12
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	e7d5      	b.n	8006470 <_free_r+0x24>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428b      	cmp	r3, r1
 80064ca:	d103      	bne.n	80064d4 <_free_r+0x88>
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	1809      	adds	r1, r1, r0
 80064d2:	6021      	str	r1, [r4, #0]
 80064d4:	6063      	str	r3, [r4, #4]
 80064d6:	6054      	str	r4, [r2, #4]
 80064d8:	e7ca      	b.n	8006470 <_free_r+0x24>
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	20000298 	.word	0x20000298

080064e0 <_malloc_usable_size_r>:
 80064e0:	1f0b      	subs	r3, r1, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	1f18      	subs	r0, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da01      	bge.n	80064ee <_malloc_usable_size_r+0xe>
 80064ea:	580b      	ldr	r3, [r1, r0]
 80064ec:	18c0      	adds	r0, r0, r3
 80064ee:	4770      	bx	lr

080064f0 <_init>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr

080064fc <_fini>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr
