
TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000638c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800644c  0800644c  0001644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800651c  0800651c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800651c  0800651c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800651c  0800651c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08006594  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08006594  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187d1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b8  00000000  00000000  00038869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003cce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cd2  00000000  00000000  0003de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001829e  00000000  00000000  00050b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bb44  00000000  00000000  00068dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  000d4958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006434 	.word	0x08006434

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006434 	.word	0x08006434

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b087      	sub	sp, #28
 800040c:	af02      	add	r7, sp, #8
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000414:	240f      	movs	r4, #15
 8000416:	193a      	adds	r2, r7, r4
 8000418:	1df9      	adds	r1, r7, #7
 800041a:	4806      	ldr	r0, [pc, #24]	; (8000434 <RC522_SPI_Transfer+0x2c>)
 800041c:	2364      	movs	r3, #100	; 0x64
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2301      	movs	r3, #1
 8000422:	f003 f877 	bl	8003514 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	781b      	ldrb	r3, [r3, #0]
}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b005      	add	sp, #20
 8000430:	bd90      	pop	{r4, r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000218 	.word	0x20000218

08000438 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	0002      	movs	r2, r0
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	1c0a      	adds	r2, r1, #0
 8000448:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fdb6 	bl	8001fc4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	227e      	movs	r2, #126	; 0x7e
 8000462:	4013      	ands	r3, r2
 8000464:	b2db      	uxtb	r3, r3
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff ffce 	bl	8000408 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800046c:	1dbb      	adds	r3, r7, #6
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f7ff ffc9 	bl	8000408 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000476:	2390      	movs	r3, #144	; 0x90
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2201      	movs	r2, #1
 800047c:	2110      	movs	r1, #16
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fda0 	bl	8001fc4 <HAL_GPIO_WritePin>
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}

0800048c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	701a      	strb	r2, [r3, #0]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2200      	movs	r2, #0
 800049e:	2110      	movs	r1, #16
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fd8f 	bl	8001fc4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	227e      	movs	r2, #126	; 0x7e
 80004b0:	4013      	ands	r3, r2
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	4252      	negs	r2, r2
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	f7ff ffa2 	bl	8000408 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80004c4:	250f      	movs	r5, #15
 80004c6:	197c      	adds	r4, r7, r5
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ff9d 	bl	8000408 <RC522_SPI_Transfer>
 80004ce:	0003      	movs	r3, r0
 80004d0:	7023      	strb	r3, [r4, #0]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2201      	movs	r2, #1
 80004d8:	2110      	movs	r1, #16
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fd72 	bl	8001fc4 <HAL_GPIO_WritePin>

	return val;
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	781b      	ldrb	r3, [r3, #0]

}
 80004e4:	0018      	movs	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b004      	add	sp, #16
 80004ea:	bdb0      	pop	{r4, r5, r7, pc}

080004ec <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80004fe:	250f      	movs	r5, #15
 8000500:	197c      	adds	r4, r7, r5
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff ffc0 	bl	800048c <Read_MFRC522>
 800050c:	0003      	movs	r3, r0
 800050e:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000510:	197a      	adds	r2, r7, r5
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4313      	orrs	r3, r2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff ff88 	bl	8000438 <Write_MFRC522>
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b004      	add	sp, #16
 800052e:	bdb0      	pop	{r4, r5, r7, pc}

08000530 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	1dbb      	adds	r3, r7, #6
 800053e:	1c0a      	adds	r2, r1, #0
 8000540:	701a      	strb	r2, [r3, #0]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000542:	250f      	movs	r5, #15
 8000544:	197c      	adds	r4, r7, r5
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff ff9e 	bl	800048c <Read_MFRC522>
 8000550:	0003      	movs	r3, r0
 8000552:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b25b      	sxtb	r3, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	b25b      	sxtb	r3, r3
 800055e:	197a      	adds	r2, r7, r5
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	b252      	sxtb	r2, r2
 8000564:	4013      	ands	r3, r2
 8000566:	b25b      	sxtb	r3, r3
 8000568:	b2da      	uxtb	r2, r3
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ff61 	bl	8000438 <Write_MFRC522>
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b004      	add	sp, #16
 800057c:	bdb0      	pop	{r4, r5, r7, pc}

0800057e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000582:	2014      	movs	r0, #20
 8000584:	f7ff ff82 	bl	800048c <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000588:	2103      	movs	r1, #3
 800058a:	2014      	movs	r0, #20
 800058c:	f7ff ffae 	bl	80004ec <SetBitMask>
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800059a:	210f      	movs	r1, #15
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff4b 	bl	8000438 <Write_MFRC522>
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005ac:	2390      	movs	r3, #144	; 0x90
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	2201      	movs	r2, #1
 80005b2:	2110      	movs	r1, #16
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fd05 	bl	8001fc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2201      	movs	r2, #1
 80005c0:	2101      	movs	r1, #1
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fcfe 	bl	8001fc4 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80005c8:	f7ff ffe5 	bl	8000596 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80005cc:	218d      	movs	r1, #141	; 0x8d
 80005ce:	202a      	movs	r0, #42	; 0x2a
 80005d0:	f7ff ff32 	bl	8000438 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80005d4:	213e      	movs	r1, #62	; 0x3e
 80005d6:	202b      	movs	r0, #43	; 0x2b
 80005d8:	f7ff ff2e 	bl	8000438 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80005dc:	211e      	movs	r1, #30
 80005de:	202d      	movs	r0, #45	; 0x2d
 80005e0:	f7ff ff2a 	bl	8000438 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	202c      	movs	r0, #44	; 0x2c
 80005e8:	f7ff ff26 	bl	8000438 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80005ec:	2140      	movs	r1, #64	; 0x40
 80005ee:	2015      	movs	r0, #21
 80005f0:	f7ff ff22 	bl	8000438 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80005f4:	213d      	movs	r1, #61	; 0x3d
 80005f6:	2011      	movs	r0, #17
 80005f8:	f7ff ff1e 	bl	8000438 <Write_MFRC522>

	AntennaOn();
 80005fc:	f7ff ffbf 	bl	800057e <AntennaOn>
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000606:	b5b0      	push	{r4, r5, r7, lr}
 8000608:	b088      	sub	sp, #32
 800060a:	af00      	add	r7, sp, #0
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	0011      	movs	r1, r2
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	240f      	movs	r4, #15
 8000614:	193b      	adds	r3, r7, r4
 8000616:	1c02      	adds	r2, r0, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	230e      	movs	r3, #14
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	1c0a      	adds	r2, r1, #0
 8000620:	701a      	strb	r2, [r3, #0]
    uchar status = MI_ERR;
 8000622:	231f      	movs	r3, #31
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]
    uchar irqEn = 0x00;
 800062a:	211e      	movs	r1, #30
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
    uchar waitIRq = 0x00;
 8000632:	201d      	movs	r0, #29
 8000634:	183b      	adds	r3, r7, r0
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800063a:	193b      	adds	r3, r7, r4
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b0c      	cmp	r3, #12
 8000640:	d008      	beq.n	8000654 <MFRC522_ToCard+0x4e>
 8000642:	2b0e      	cmp	r3, #14
 8000644:	d10f      	bne.n	8000666 <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2212      	movs	r2, #18
 800064a:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 800064c:	183b      	adds	r3, r7, r0
 800064e:	2210      	movs	r2, #16
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e009      	b.n	8000668 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000654:	231e      	movs	r3, #30
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2277      	movs	r2, #119	; 0x77
 800065a:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 800065c:	231d      	movs	r3, #29
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	2230      	movs	r2, #48	; 0x30
 8000662:	701a      	strb	r2, [r3, #0]
			break;
 8000664:	e000      	b.n	8000668 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 8000666:	46c0      	nop			; (mov r8, r8)
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000668:	231e      	movs	r3, #30
 800066a:	18fb      	adds	r3, r7, r3
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4252      	negs	r2, r2
 8000672:	4313      	orrs	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	0019      	movs	r1, r3
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff fedd 	bl	8000438 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	2004      	movs	r0, #4
 8000682:	f7ff ff55 	bl	8000530 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	200a      	movs	r0, #10
 800068a:	f7ff ff2f 	bl	80004ec <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800068e:	2100      	movs	r1, #0
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff fed1 	bl	8000438 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	e00a      	b.n	80006b2 <MFRC522_ToCard+0xac>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	0019      	movs	r1, r3
 80006a6:	2009      	movs	r0, #9
 80006a8:	f7ff fec6 	bl	8000438 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3301      	adds	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	230e      	movs	r3, #14
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3ee      	bcc.n	800069c <MFRC522_ToCard+0x96>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80006be:	240f      	movs	r4, #15
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	0019      	movs	r1, r3
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff feb6 	bl	8000438 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b0c      	cmp	r3, #12
 80006d2:	d103      	bne.n	80006dc <MFRC522_ToCard+0xd6>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	200d      	movs	r0, #13
 80006d8:	f7ff ff08 	bl	80004ec <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80006e2:	251c      	movs	r5, #28
 80006e4:	197c      	adds	r4, r7, r5
 80006e6:	2004      	movs	r0, #4
 80006e8:	f7ff fed0 	bl	800048c <Read_MFRC522>
 80006ec:	0003      	movs	r3, r0
 80006ee:	7023      	strb	r3, [r4, #0]
        i--;
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00d      	beq.n	8000718 <MFRC522_ToCard+0x112>
 80006fc:	197b      	adds	r3, r7, r5
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2201      	movs	r2, #1
 8000702:	4013      	ands	r3, r2
 8000704:	d108      	bne.n	8000718 <MFRC522_ToCard+0x112>
 8000706:	197b      	adds	r3, r7, r5
 8000708:	221d      	movs	r2, #29
 800070a:	18ba      	adds	r2, r7, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	4013      	ands	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0e4      	beq.n	80006e2 <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	200d      	movs	r0, #13
 800071c:	f7ff ff08 	bl	8000530 <ClearBitMask>

    if (i != 0)
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d100      	bne.n	8000728 <MFRC522_ToCard+0x122>
 8000726:	e070      	b.n	800080a <MFRC522_ToCard+0x204>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000728:	2006      	movs	r0, #6
 800072a:	f7ff feaf 	bl	800048c <Read_MFRC522>
 800072e:	0003      	movs	r3, r0
 8000730:	001a      	movs	r2, r3
 8000732:	231b      	movs	r3, #27
 8000734:	4013      	ands	r3, r2
 8000736:	d164      	bne.n	8000802 <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8000738:	211f      	movs	r1, #31
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8000740:	231c      	movs	r3, #28
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	221e      	movs	r2, #30
 8000746:	18ba      	adds	r2, r7, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	4013      	ands	r3, r2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	001a      	movs	r2, r3
 8000752:	2301      	movs	r3, #1
 8000754:	4013      	ands	r3, r2
 8000756:	d002      	beq.n	800075e <MFRC522_ToCard+0x158>
            {
				status = MI_NOTAGERR;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 800075e:	230f      	movs	r3, #15
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	d150      	bne.n	800080a <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000768:	251c      	movs	r5, #28
 800076a:	197c      	adds	r4, r7, r5
 800076c:	200a      	movs	r0, #10
 800076e:	f7ff fe8d 	bl	800048c <Read_MFRC522>
 8000772:	0003      	movs	r3, r0
 8000774:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000776:	200c      	movs	r0, #12
 8000778:	f7ff fe88 	bl	800048c <Read_MFRC522>
 800077c:	0003      	movs	r3, r0
 800077e:	0019      	movs	r1, r3
 8000780:	2017      	movs	r0, #23
 8000782:	183b      	adds	r3, r7, r0
 8000784:	2207      	movs	r2, #7
 8000786:	400a      	ands	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 800078a:	0001      	movs	r1, r0
 800078c:	187b      	adds	r3, r7, r1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00a      	beq.n	80007aa <MFRC522_ToCard+0x1a4>
                {
					*backLen = (n-1)*8 + lastBits;
 8000794:	197b      	adds	r3, r7, r5
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	00da      	lsls	r2, r3, #3
 800079c:	187b      	adds	r3, r7, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	001a      	movs	r2, r3
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e006      	b.n	80007b8 <MFRC522_ToCard+0x1b2>
				}
                else
                {
					*backLen = n*8;
 80007aa:	231c      	movs	r3, #28
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	001a      	movs	r2, r3
 80007b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b6:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80007b8:	221c      	movs	r2, #28
 80007ba:	18bb      	adds	r3, r7, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d102      	bne.n	80007c8 <MFRC522_ToCard+0x1c2>
                {
					n = 1;
 80007c2:	18bb      	adds	r3, r7, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 80007c8:	221c      	movs	r2, #28
 80007ca:	18bb      	adds	r3, r7, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b10      	cmp	r3, #16
 80007d0:	d902      	bls.n	80007d8 <MFRC522_ToCard+0x1d2>
                {
					n = MAX_LEN;
 80007d2:	18bb      	adds	r3, r7, r2
 80007d4:	2210      	movs	r2, #16
 80007d6:	701a      	strb	r2, [r3, #0]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	e00a      	b.n	80007f4 <MFRC522_ToCard+0x1ee>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	18d4      	adds	r4, r2, r3
 80007e4:	2009      	movs	r0, #9
 80007e6:	f7ff fe51 	bl	800048c <Read_MFRC522>
 80007ea:	0003      	movs	r3, r0
 80007ec:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	3301      	adds	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	231c      	movs	r3, #28
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d3ee      	bcc.n	80007de <MFRC522_ToCard+0x1d8>
 8000800:	e003      	b.n	800080a <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000802:	231f      	movs	r3, #31
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2202      	movs	r2, #2
 8000808:	701a      	strb	r2, [r3, #0]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 800080a:	231f      	movs	r3, #31
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781b      	ldrb	r3, [r3, #0]
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	b008      	add	sp, #32
 8000816:	bdb0      	pop	{r4, r5, r7, pc}

08000818 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	0002      	movs	r2, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	701a      	strb	r2, [r3, #0]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000826:	2107      	movs	r1, #7
 8000828:	200d      	movs	r0, #13
 800082a:	f7ff fe05 	bl	8000438 <Write_MFRC522>

	TagType[0] = reqMode;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	1dfa      	adds	r2, r7, #7
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000836:	250f      	movs	r5, #15
 8000838:	197c      	adds	r4, r7, r5
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	6839      	ldr	r1, [r7, #0]
 800083e:	2308      	movs	r3, #8
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	0013      	movs	r3, r2
 8000846:	2201      	movs	r2, #1
 8000848:	200c      	movs	r0, #12
 800084a:	f7ff fedc 	bl	8000606 <MFRC522_ToCard>
 800084e:	0003      	movs	r3, r0
 8000850:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8000852:	197b      	adds	r3, r7, r5
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <MFRC522_Request+0x48>
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2b10      	cmp	r3, #16
 800085e:	d003      	beq.n	8000868 <MFRC522_Request+0x50>
	{
		status = MI_ERR;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2202      	movs	r2, #2
 8000866:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bdb0      	pop	{r4, r5, r7, pc}

08000876 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000876:	b5b0      	push	{r4, r5, r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af02      	add	r7, sp, #8
 800087c:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 800087e:	230d      	movs	r3, #13
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000886:	2100      	movs	r1, #0
 8000888:	200d      	movs	r0, #13
 800088a:	f7ff fdd5 	bl	8000438 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2293      	movs	r2, #147	; 0x93
 8000892:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	2220      	movs	r2, #32
 800089a:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800089c:	250f      	movs	r5, #15
 800089e:	197c      	adds	r4, r7, r5
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	2308      	movs	r3, #8
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	0013      	movs	r3, r2
 80008ac:	2202      	movs	r2, #2
 80008ae:	200c      	movs	r0, #12
 80008b0:	f7ff fea9 	bl	8000606 <MFRC522_ToCard>
 80008b4:	0003      	movs	r3, r0
 80008b6:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 80008b8:	197b      	adds	r3, r7, r5
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d128      	bne.n	8000912 <MFRC522_Anticoll+0x9c>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80008c0:	230e      	movs	r3, #14
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e010      	b.n	80008ec <MFRC522_Anticoll+0x76>
		{
		 	serNumCheck ^= serNum[i];
 80008ca:	200e      	movs	r0, #14
 80008cc:	183b      	adds	r3, r7, r0
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	18d3      	adds	r3, r2, r3
 80008d4:	7819      	ldrb	r1, [r3, #0]
 80008d6:	220d      	movs	r2, #13
 80008d8:	18bb      	adds	r3, r7, r2
 80008da:	18ba      	adds	r2, r7, r2
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	404a      	eors	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 80008e2:	183b      	adds	r3, r7, r0
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	183b      	adds	r3, r7, r0
 80008e8:	3201      	adds	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	220e      	movs	r2, #14
 80008ee:	18bb      	adds	r3, r7, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d9e9      	bls.n	80008ca <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 80008f6:	18bb      	adds	r3, r7, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	220d      	movs	r2, #13
 8000902:	18ba      	adds	r2, r7, r2
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d003      	beq.n	8000912 <MFRC522_Anticoll+0x9c>
		{
			status = MI_ERR;
 800090a:	230f      	movs	r3, #15
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
		}
    }

    return status;
 8000912:	230f      	movs	r3, #15
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	781b      	ldrb	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b004      	add	sp, #16
 800091e:	bdb0      	pop	{r4, r5, r7, pc}

08000920 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b087      	sub	sp, #28
 8000924:	af02      	add	r7, sp, #8
 8000926:	0002      	movs	r2, r0
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800092c:	200f      	movs	r0, #15
 800092e:	183b      	adds	r3, r7, r0
 8000930:	1dfa      	adds	r2, r7, #7
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	210f      	movs	r1, #15
 8000936:	438a      	bics	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	011a      	lsls	r2, r3, #4
 8000940:	240e      	movs	r4, #14
 8000942:	193b      	adds	r3, r7, r4
 8000944:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000946:	183b      	adds	r3, r7, r0
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	220c      	movs	r2, #12
 800094c:	4313      	orrs	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	2108      	movs	r1, #8
 8000952:	187b      	adds	r3, r7, r1
 8000954:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000956:	183b      	adds	r3, r7, r0
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2208      	movs	r2, #8
 800095c:	4313      	orrs	r3, r2
 800095e:	b2da      	uxtb	r2, r3
 8000960:	187b      	adds	r3, r7, r1
 8000962:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000964:	193b      	adds	r3, r7, r4
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	220c      	movs	r2, #12
 800096a:	4313      	orrs	r3, r2
 800096c:	b2da      	uxtb	r2, r3
 800096e:	187b      	adds	r3, r7, r1
 8000970:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000972:	193b      	adds	r3, r7, r4
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2208      	movs	r2, #8
 8000978:	4313      	orrs	r3, r2
 800097a:	b2da      	uxtb	r2, r3
 800097c:	187b      	adds	r3, r7, r1
 800097e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000980:	187a      	adds	r2, r7, r1
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <lcd_send_cmd+0x78>)
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2304      	movs	r3, #4
 800098a:	214e      	movs	r1, #78	; 0x4e
 800098c:	f001 fbde 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b005      	add	sp, #20
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	200001c4 	.word	0x200001c4

0800099c <lcd_send_data>:

void lcd_send_data (char data)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b087      	sub	sp, #28
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009a8:	200f      	movs	r0, #15
 80009aa:	183b      	adds	r3, r7, r0
 80009ac:	1dfa      	adds	r2, r7, #7
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	438a      	bics	r2, r1
 80009b4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	011a      	lsls	r2, r3, #4
 80009bc:	240e      	movs	r4, #14
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80009c2:	183b      	adds	r3, r7, r0
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	220d      	movs	r2, #13
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	2108      	movs	r1, #8
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80009d2:	183b      	adds	r3, r7, r0
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2209      	movs	r2, #9
 80009d8:	4313      	orrs	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	220d      	movs	r2, #13
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2209      	movs	r2, #9
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009fc:	187a      	adds	r2, r7, r1
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <lcd_send_data+0x78>)
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2304      	movs	r3, #4
 8000a06:	214e      	movs	r1, #78	; 0x4e
 8000a08:	f001 fba0 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b005      	add	sp, #20
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	200001c4 	.word	0x200001c4

08000a18 <lcd_init>:

void lcd_init (void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000a1c:	2033      	movs	r0, #51	; 0x33
 8000a1e:	f7ff ff7f 	bl	8000920 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000a22:	2032      	movs	r0, #50	; 0x32
 8000a24:	f7ff ff7c 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a28:	2032      	movs	r0, #50	; 0x32
 8000a2a:	f000 fedd 	bl	80017e8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000a2e:	2028      	movs	r0, #40	; 0x28
 8000a30:	f7ff ff76 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a34:	2032      	movs	r0, #50	; 0x32
 8000a36:	f000 fed7 	bl	80017e8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff ff70 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a40:	2032      	movs	r0, #50	; 0x32
 8000a42:	f000 fed1 	bl	80017e8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000a46:	2006      	movs	r0, #6
 8000a48:	f7ff ff6a 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a4c:	2032      	movs	r0, #50	; 0x32
 8000a4e:	f000 fecb 	bl	80017e8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000a52:	200c      	movs	r0, #12
 8000a54:	f7ff ff64 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a58:	2032      	movs	r0, #50	; 0x32
 8000a5a:	f000 fec5 	bl	80017e8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f7ff ff5e 	bl	8000920 <lcd_send_cmd>
	HAL_Delay(50);
 8000a64:	2032      	movs	r0, #50	; 0x32
 8000a66:	f000 febf 	bl	80017e8 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000a6a:	2080      	movs	r0, #128	; 0x80
 8000a6c:	f7ff ff58 	bl	8000920 <lcd_send_cmd>
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a7e:	e006      	b.n	8000a8e <lcd_send_string+0x18>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff ff87 	bl	800099c <lcd_send_data>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f4      	bne.n	8000a80 <lcd_send_string+0xa>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <lcd_goto_XY>:
	lcd_send_cmd (0x01); //clear display
	HAL_Delay(5);
}

void lcd_goto_XY (int row, int col)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10a      	bne.n	8000ac6 <lcd_goto_XY+0x26>
		pos_Addr = 0x80 + row - 1 + col;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	327f      	adds	r2, #127	; 0x7f
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e00b      	b.n	8000ade <lcd_goto_XY+0x3e>
	}
	else
		pos_Addr = 0x80 | (0x40 + col);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	3340      	adds	r3, #64	; 0x40
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	4252      	negs	r2, r2
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	230f      	movs	r3, #15
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(pos_Addr);
 8000ade:	230f      	movs	r3, #15
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff ff1b 	bl	8000920 <lcd_send_cmd>
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <lcd_send_int>:
void lcd_send_int(int number) {
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    char str[16];
    sprintf(str, "%d", number);
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4907      	ldr	r1, [pc, #28]	; (8000b1c <lcd_send_int+0x28>)
 8000b00:	2408      	movs	r4, #8
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	0018      	movs	r0, r3
 8000b06:	f005 f879 	bl	8005bfc <siprintf>
    lcd_send_string(str);
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ffb2 	bl	8000a76 <lcd_send_string>
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b007      	add	sp, #28
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	0800644c 	.word	0x0800644c

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b09c      	sub	sp, #112	; 0x70
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint8_t status;
	  uint8_t str[MAX_LEN]; // Max_LEN = 16
	  uint8_t sNum[5];

	  int data[4][5] =   {{183, 322, 141, 25, 100} ,
 8000b26:	1d3a      	adds	r2, r7, #4
 8000b28:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <main+0x1dc>)
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	2350      	movs	r3, #80	; 0x50
 8000b30:	001a      	movs	r2, r3
 8000b32:	f005 f851 	bl	8005bd8 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 fdf3 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f8ed 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 faa5 	bl	800108c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b42:	f000 f9c1 	bl	8000ec8 <MX_TIM3_Init>
  MX_DMA_Init();
 8000b46:	f000 fa83 	bl	8001050 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b4a:	f000 f97f 	bl	8000e4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b4e:	f000 fa4f 	bl	8000ff0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b52:	f000 f93b 	bl	8000dcc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim3);
 8000b56:	4b6a      	ldr	r3, [pc, #424]	; (8000d00 <main+0x1e0>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f003 f99f 	bl	8003e9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b5e:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <main+0x1e0>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f003 fa3e 	bl	8003fe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b68:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <main+0x1e0>)
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f003 fa39 	bl	8003fe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b72:	4b63      	ldr	r3, [pc, #396]	; (8000d00 <main+0x1e0>)
 8000b74:	210c      	movs	r1, #12
 8000b76:	0018      	movs	r0, r3
 8000b78:	f003 fa34 	bl	8003fe4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer(2, 500);
 8000b7c:	23fa      	movs	r3, #250	; 0xfa
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	0019      	movs	r1, r3
 8000b82:	2002      	movs	r0, #2
 8000b84:	f000 fd4a 	bl	800161c <setTimer>
  lcd_init();
 8000b88:	f7ff ff46 	bl	8000a18 <lcd_init>
  MFRC522_Init();
 8000b8c:	f7ff fd0c 	bl	80005a8 <MFRC522_Init>
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 8000b90:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <main+0x1e4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	2101      	movs	r1, #1
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fa14 	bl	8001fc4 <HAL_GPIO_WritePin>
   while (1)
   {
		status = MFRC522_Request(PICC_REQIDL, str);
 8000b9c:	256f      	movs	r5, #111	; 0x6f
 8000b9e:	197c      	adds	r4, r7, r5
 8000ba0:	235c      	movs	r3, #92	; 0x5c
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	2026      	movs	r0, #38	; 0x26
 8000ba8:	f7ff fe36 	bl	8000818 <MFRC522_Request>
 8000bac:	0003      	movs	r3, r0
 8000bae:	7023      	strb	r3, [r4, #0]
		if(status == MI_OK){
 8000bb0:	197b      	adds	r3, r7, r5
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d105      	bne.n	8000bc4 <main+0xa4>
			setTimer(2, 500);
 8000bb8:	23fa      	movs	r3, #250	; 0xfa
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f000 fd2c 	bl	800161c <setTimer>
		}
		if(timer_flag[2] != 1){
 8000bc4:	4b50      	ldr	r3, [pc, #320]	; (8000d08 <main+0x1e8>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d006      	beq.n	8000bda <main+0xba>
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 1);
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <main+0x1e4>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f001 f9f6 	bl	8001fc4 <HAL_GPIO_WritePin>
 8000bd8:	e005      	b.n	8000be6 <main+0xc6>
		}
		else{
			HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 8000bda:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <main+0x1e4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 f9ef 	bl	8001fc4 <HAL_GPIO_WritePin>
		}
		status = MFRC522_Anticoll(str);
 8000be6:	236f      	movs	r3, #111	; 0x6f
 8000be8:	18fc      	adds	r4, r7, r3
 8000bea:	255c      	movs	r5, #92	; 0x5c
 8000bec:	197b      	adds	r3, r7, r5
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fe41 	bl	8000876 <MFRC522_Anticoll>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	7023      	strb	r3, [r4, #0]
		memcpy(sNum, str, 5);
 8000bf8:	2454      	movs	r4, #84	; 0x54
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	197a      	adds	r2, r7, r5
 8000bfe:	6811      	ldr	r1, [r2, #0]
 8000c00:	6019      	str	r1, [r3, #0]
 8000c02:	7912      	ldrb	r2, [r2, #4]
 8000c04:	711a      	strb	r2, [r3, #4]
		HAL_Delay(100);
 8000c06:	2064      	movs	r0, #100	; 0x64
 8000c08:	f000 fdee 	bl	80017e8 <HAL_Delay>

		lcd_goto_XY(1, 0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff ff46 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_int(sNum[0]);
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ff6b 	bl	8000af4 <lcd_send_int>
		lcd_goto_XY(1, 4);
 8000c1e:	2104      	movs	r1, #4
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff ff3d 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_int(sNum[1]);
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff62 	bl	8000af4 <lcd_send_int>
		lcd_goto_XY(1, 8);
 8000c30:	2108      	movs	r1, #8
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff ff34 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_int(sNum[2]);
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff59 	bl	8000af4 <lcd_send_int>
		lcd_goto_XY(1, 12);
 8000c42:	210c      	movs	r1, #12
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff2b 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("TEST");
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <main+0x1ec>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff12 	bl	8000a76 <lcd_send_string>

		lcd_goto_XY(0, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ff23 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_int(sNum[3]);
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	78db      	ldrb	r3, [r3, #3]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff48 	bl	8000af4 <lcd_send_int>
		lcd_goto_XY(0, 4);
 8000c64:	2104      	movs	r1, #4
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff1a 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_int(sNum[4]);
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ff3f 	bl	8000af4 <lcd_send_int>
		lcd_goto_XY(0, 8);
 8000c76:	2108      	movs	r1, #8
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff ff11 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_int(sNum[5]);
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff ff36 	bl	8000af4 <lcd_send_int>
		lcd_goto_XY(0, 12);
 8000c88:	210c      	movs	r1, #12
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ff08 	bl	8000aa0 <lcd_goto_XY>
		lcd_send_string("FAIL");
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <main+0x1f0>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff feef 	bl	8000a76 <lcd_send_string>

		if(sNum[0] == 183 && sNum[1] == 92 && sNum[2] == 141 && sNum[3] == 02){
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2bb7      	cmp	r3, #183	; 0xb7
 8000c9e:	d111      	bne.n	8000cc4 <main+0x1a4>
 8000ca0:	193b      	adds	r3, r7, r4
 8000ca2:	785b      	ldrb	r3, [r3, #1]
 8000ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8000ca6:	d10d      	bne.n	8000cc4 <main+0x1a4>
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	789b      	ldrb	r3, [r3, #2]
 8000cac:	2b8d      	cmp	r3, #141	; 0x8d
 8000cae:	d109      	bne.n	8000cc4 <main+0x1a4>
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d105      	bne.n	8000cc4 <main+0x1a4>
			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 1);
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <main+0x1f4>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 f980 	bl	8001fc4 <HAL_GPIO_WritePin>
		}
		if(sNum[0] == 27 && sNum[1] == 153 && sNum[2] == 140 && sNum[3] == 02){
 8000cc4:	2254      	movs	r2, #84	; 0x54
 8000cc6:	18bb      	adds	r3, r7, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b1b      	cmp	r3, #27
 8000ccc:	d000      	beq.n	8000cd0 <main+0x1b0>
 8000cce:	e765      	b.n	8000b9c <main+0x7c>
 8000cd0:	18bb      	adds	r3, r7, r2
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	2b99      	cmp	r3, #153	; 0x99
 8000cd6:	d000      	beq.n	8000cda <main+0x1ba>
 8000cd8:	e760      	b.n	8000b9c <main+0x7c>
 8000cda:	18bb      	adds	r3, r7, r2
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	2b8c      	cmp	r3, #140	; 0x8c
 8000ce0:	d000      	beq.n	8000ce4 <main+0x1c4>
 8000ce2:	e75b      	b.n	8000b9c <main+0x7c>
 8000ce4:	18bb      	adds	r3, r7, r2
 8000ce6:	78db      	ldrb	r3, [r3, #3]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d000      	beq.n	8000cee <main+0x1ce>
 8000cec:	e756      	b.n	8000b9c <main+0x7c>
			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 0);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <main+0x1f4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 f965 	bl	8001fc4 <HAL_GPIO_WritePin>
		status = MFRC522_Request(PICC_REQIDL, str);
 8000cfa:	e74f      	b.n	8000b9c <main+0x7c>
 8000cfc:	08006460 	.word	0x08006460
 8000d00:	200000b0 	.word	0x200000b0
 8000d04:	48001400 	.word	0x48001400
 8000d08:	2000009c 	.word	0x2000009c
 8000d0c:	08006450 	.word	0x08006450
 8000d10:	08006458 	.word	0x08006458
 8000d14:	48000400 	.word	0x48000400

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b095      	sub	sp, #84	; 0x54
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	2420      	movs	r4, #32
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	0018      	movs	r0, r3
 8000d24:	2330      	movs	r3, #48	; 0x30
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f004 ff5e 	bl	8005bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2e:	2310      	movs	r3, #16
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	0018      	movs	r0, r3
 8000d34:	2310      	movs	r3, #16
 8000d36:	001a      	movs	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f004 ff56 	bl	8005bea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3e:	003b      	movs	r3, r7
 8000d40:	0018      	movs	r0, r3
 8000d42:	2310      	movs	r3, #16
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f004 ff4f 	bl	8005bea <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	0021      	movs	r1, r4
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2202      	movs	r2, #2
 8000d52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2201      	movs	r2, #1
 8000d58:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2210      	movs	r2, #16
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f001 fdef 	bl	800294c <HAL_RCC_OscConfig>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d72:	f000 fa15 	bl	80011a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	2110      	movs	r1, #16
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2100      	movs	r1, #0
 8000d94:	0018      	movs	r0, r3
 8000d96:	f002 f8f3 	bl	8002f80 <HAL_RCC_ClockConfig>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d9e:	f000 f9ff 	bl	80011a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2221      	movs	r2, #33	; 0x21
 8000da6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	003b      	movs	r3, r7
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 fa26 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dc0:	f000 f9ee 	bl	80011a0 <Error_Handler>
  }
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b015      	add	sp, #84	; 0x54
 8000dca:	bd90      	pop	{r4, r7, pc}

08000dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <MX_I2C1_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <MX_I2C1_Init+0x7c>)
 8000dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f001 f8f9 	bl	8002000 <HAL_I2C_Init>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e12:	f000 f9c5 	bl	80011a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 fcfe 	bl	800281c <HAL_I2CEx_ConfigAnalogFilter>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e24:	f000 f9bc 	bl	80011a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <MX_I2C1_Init+0x74>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fd41 	bl	80028b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f9b3 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200001c4 	.word	0x200001c4
 8000e44:	40005400 	.word	0x40005400
 8000e48:	2000090e 	.word	0x2000090e

08000e4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_SPI1_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e58:	2282      	movs	r2, #130	; 0x82
 8000e5a:	0052      	lsls	r2, r2, #1
 8000e5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e66:	22e0      	movs	r2, #224	; 0xe0
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000e9a:	2207      	movs	r2, #7
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <MX_SPI1_Init+0x74>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 fa79 	bl	80033a4 <HAL_SPI_Init>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 f973 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000218 	.word	0x20000218
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	; 0x38
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	2328      	movs	r3, #40	; 0x28
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f004 fe86 	bl	8005bea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	2320      	movs	r3, #32
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f004 fe7e 	bl	8005bea <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	231c      	movs	r3, #28
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f004 fe77 	bl	8005bea <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000efe:	4a3a      	ldr	r2, [pc, #232]	; (8000fe8 <MX_TIM3_Init+0x120>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000f02:	4b38      	ldr	r3, [pc, #224]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f04:	4a39      	ldr	r2, [pc, #228]	; (8000fec <MX_TIM3_Init+0x124>)
 8000f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f10:	2263      	movs	r2, #99	; 0x63
 8000f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 ff6a 	bl	8003dfc <HAL_TIM_Base_Init>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f2c:	f000 f938 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	2128      	movs	r1, #40	; 0x28
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0152      	lsls	r2, r2, #5
 8000f38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f3a:	187a      	adds	r2, r7, r1
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f003 faaf 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f4a:	f000 f929 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 ffef 	bl	8003f34 <HAL_TIM_PWM_Init>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f5a:	f000 f921 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2120      	movs	r1, #32
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f6c:	187a      	adds	r2, r7, r1
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f70:	0011      	movs	r1, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f003 feac 	bl	8004cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000f7c:	f000 f910 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2260      	movs	r2, #96	; 0x60
 8000f84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f98:	1d39      	adds	r1, r7, #4
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 f9ba 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000fa8:	f000 f8fa 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f003 f9b0 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000fbc:	f000 f8f0 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fc0:	1d39      	adds	r1, r7, #4
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f003 f9a6 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000fd0:	f000 f8e6 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <MX_TIM3_Init+0x11c>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 fa06 	bl	80013e8 <HAL_TIM_MspPostInit>

}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b00e      	add	sp, #56	; 0x38
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000b0 	.word	0x200000b0
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	0000031f 	.word	0x0000031f

08000ff0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <MX_USART1_UART_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8000ffc:	22e1      	movs	r2, #225	; 0xe1
 8000ffe:	0252      	lsls	r2, r2, #9
 8001000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USART1_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART1_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART1_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <MX_USART1_UART_Init+0x58>)
 8001034:	0018      	movs	r0, r3
 8001036:	f003 feb3 	bl	8004da0 <HAL_UART_Init>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800103e:	f000 f8af 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000013c 	.word	0x2000013c
 800104c:	40013800 	.word	0x40013800

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_DMA_Init+0x38>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_DMA_Init+0x38>)
 800105c:	2101      	movs	r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_DMA_Init+0x38>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	2201      	movs	r2, #1
 8001068:	4013      	ands	r3, r2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200a      	movs	r0, #10
 8001074:	f000 fc88 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001078:	200a      	movs	r0, #10
 800107a:	f000 fc9a 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40021000 	.word	0x40021000

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	240c      	movs	r4, #12
 8001094:	193b      	adds	r3, r7, r4
 8001096:	0018      	movs	r0, r3
 8001098:	2314      	movs	r3, #20
 800109a:	001a      	movs	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	f004 fda4 	bl	8005bea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <MX_GPIO_Init+0x108>)
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <MX_GPIO_Init+0x108>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	03c9      	lsls	r1, r1, #15
 80010ac:	430a      	orrs	r2, r1
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	4b38      	ldr	r3, [pc, #224]	; (8001194 <MX_GPIO_Init+0x108>)
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	03db      	lsls	r3, r3, #15
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b35      	ldr	r3, [pc, #212]	; (8001194 <MX_GPIO_Init+0x108>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <MX_GPIO_Init+0x108>)
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	0289      	lsls	r1, r1, #10
 80010c8:	430a      	orrs	r2, r1
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_GPIO_Init+0x108>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	029b      	lsls	r3, r3, #10
 80010d4:	4013      	ands	r3, r2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <MX_GPIO_Init+0x108>)
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_GPIO_Init+0x108>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	02c9      	lsls	r1, r1, #11
 80010e4:	430a      	orrs	r2, r1
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_GPIO_Init+0x108>)
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	02db      	lsls	r3, r3, #11
 80010f0:	4013      	ands	r3, r2
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, GPIO_PIN_RESET);
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_GPIO_Init+0x10c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	2101      	movs	r1, #1
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 ff61 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_RESET_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 8001102:	2390      	movs	r3, #144	; 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2200      	movs	r2, #0
 8001108:	2111      	movs	r1, #17
 800110a:	0018      	movs	r0, r3
 800110c:	f000 ff5a 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_GPIO_Init+0x110>)
 8001112:	2200      	movs	r2, #0
 8001114:	2108      	movs	r1, #8
 8001116:	0018      	movs	r0, r3
 8001118:	f000 ff54 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZ_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin;
 800111c:	193b      	adds	r3, r7, r4
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2201      	movs	r2, #1
 8001126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001134:	193b      	adds	r3, r7, r4
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_GPIO_Init+0x10c>)
 8001138:	0019      	movs	r1, r3
 800113a:	0010      	movs	r0, r2
 800113c:	f000 fdda 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_RESET_Pin RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin|RC522_CS_Pin;
 8001140:	193b      	adds	r3, r7, r4
 8001142:	2211      	movs	r2, #17
 8001144:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2201      	movs	r2, #1
 800114a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	193a      	adds	r2, r7, r4
 800115a:	2390      	movs	r3, #144	; 0x90
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f000 fdc7 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8001166:	0021      	movs	r1, r4
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2208      	movs	r2, #8
 800116c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2201      	movs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001180:	187b      	adds	r3, r7, r1
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <MX_GPIO_Init+0x110>)
 8001184:	0019      	movs	r1, r3
 8001186:	0010      	movs	r0, r2
 8001188:	f000 fdb4 	bl	8001cf4 <HAL_GPIO_Init>

}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b009      	add	sp, #36	; 0x24
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	48001400 	.word	0x48001400
 800119c:	48000400 	.word	0x48000400

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_MspInit+0x44>)
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_MspInit+0x44>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	619a      	str	r2, [r3, #24]
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_MspInit+0x44>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x44>)
 80011cc:	69da      	ldr	r2, [r3, #28]
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_MspInit+0x44>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0549      	lsls	r1, r1, #21
 80011d4:	430a      	orrs	r2, r1
 80011d6:	61da      	str	r2, [r3, #28]
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_MspInit+0x44>)
 80011da:	69da      	ldr	r2, [r3, #28]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	055b      	lsls	r3, r3, #21
 80011e0:	4013      	ands	r3, r2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b08b      	sub	sp, #44	; 0x2c
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	2414      	movs	r4, #20
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f004 fcef 	bl	8005bea <memset>
  if(hi2c->Instance==I2C1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_I2C_MspInit+0x94>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d133      	bne.n	800127e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_I2C_MspInit+0x98>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0289      	lsls	r1, r1, #10
 8001220:	430a      	orrs	r2, r1
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	22c0      	movs	r2, #192	; 0xc0
 8001236:	00d2      	lsls	r2, r2, #3
 8001238:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123a:	0021      	movs	r1, r4
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2212      	movs	r2, #18
 8001240:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2203      	movs	r2, #3
 800124c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2204      	movs	r2, #4
 8001252:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	187a      	adds	r2, r7, r1
 8001256:	2390      	movs	r3, #144	; 0x90
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	0011      	movs	r1, r2
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fd49 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0389      	lsls	r1, r1, #14
 800126c:	430a      	orrs	r2, r1
 800126e:	61da      	str	r2, [r3, #28]
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	039b      	lsls	r3, r3, #14
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b00b      	add	sp, #44	; 0x2c
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40005400 	.word	0x40005400
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b08b      	sub	sp, #44	; 0x2c
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	2414      	movs	r4, #20
 800129a:	193b      	adds	r3, r7, r4
 800129c:	0018      	movs	r0, r3
 800129e:	2314      	movs	r3, #20
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f004 fca1 	bl	8005bea <memset>
  if(hspi->Instance==SPI1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_SPI_MspInit+0xa0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d13a      	bne.n	8001328 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_SPI_MspInit+0xa4>)
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_SPI_MspInit+0xa4>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0149      	lsls	r1, r1, #5
 80012bc:	430a      	orrs	r2, r1
 80012be:	619a      	str	r2, [r3, #24]
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_SPI_MspInit+0xa4>)
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_SPI_MspInit+0xa4>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_SPI_MspInit+0xa4>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0289      	lsls	r1, r1, #10
 80012d8:	430a      	orrs	r2, r1
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_SPI_MspInit+0xa4>)
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ea:	0021      	movs	r1, r4
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	22e0      	movs	r2, #224	; 0xe0
 80012f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2202      	movs	r2, #2
 80012f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2203      	movs	r2, #3
 8001302:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	187a      	adds	r2, r7, r1
 800130c:	2390      	movs	r3, #144	; 0x90
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f000 fcee 	bl	8001cf4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2019      	movs	r0, #25
 800131e:	f000 fb33 	bl	8001988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001322:	2019      	movs	r0, #25
 8001324:	f000 fb45 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b00b      	add	sp, #44	; 0x2c
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	40013000 	.word	0x40013000
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d141      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_TIM_Base_MspInit+0xa4>)
 800134c:	69da      	ldr	r2, [r3, #28]
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_TIM_Base_MspInit+0xa4>)
 8001350:	2102      	movs	r1, #2
 8001352:	430a      	orrs	r2, r1
 8001354:	61da      	str	r2, [r3, #28]
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_TIM_Base_MspInit+0xa4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_TIM_Base_MspInit+0xac>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 800136a:	2210      	movs	r2, #16
 800136c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	00d2      	lsls	r2, r2, #3
 8001388:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001398:	0018      	movs	r0, r3
 800139a:	f000 fb27 	bl	80019ec <HAL_DMA_Init>
 800139e:	1e03      	subs	r3, r0, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80013a2:	f7ff fefd 	bl	80011a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 80013b6:	621a      	str	r2, [r3, #32]
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0xa8>)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2010      	movs	r0, #16
 80013c4:	f000 fae0 	bl	8001988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013c8:	2010      	movs	r0, #16
 80013ca:	f000 faf2 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40000400 	.word	0x40000400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	200000f8 	.word	0x200000f8
 80013e4:	40020030 	.word	0x40020030

080013e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	240c      	movs	r4, #12
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	0018      	movs	r0, r3
 80013f6:	2314      	movs	r3, #20
 80013f8:	001a      	movs	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	f004 fbf5 	bl	8005bea <memset>
  if(htim->Instance==TIM3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <HAL_TIM_MspPostInit+0x74>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d123      	bne.n	8001452 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_TIM_MspPostInit+0x78>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_TIM_MspPostInit+0x78>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	02c9      	lsls	r1, r1, #11
 8001414:	430a      	orrs	r2, r1
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_TIM_MspPostInit+0x78>)
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	02db      	lsls	r3, r3, #11
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 8001426:	0021      	movs	r1, r4
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2232      	movs	r2, #50	; 0x32
 800142c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2202      	movs	r2, #2
 8001432:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2201      	movs	r2, #1
 8001444:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	187b      	adds	r3, r7, r1
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_TIM_MspPostInit+0x7c>)
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f000 fc51 	bl	8001cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b009      	add	sp, #36	; 0x24
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40000400 	.word	0x40000400
 8001460:	40021000 	.word	0x40021000
 8001464:	48000400 	.word	0x48000400

08001468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2414      	movs	r4, #20
 8001472:	193b      	adds	r3, r7, r4
 8001474:	0018      	movs	r0, r3
 8001476:	2314      	movs	r3, #20
 8001478:	001a      	movs	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	f004 fbb5 	bl	8005bea <memset>
  if(huart->Instance==USART1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <HAL_UART_MspInit+0xa0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d139      	bne.n	80014fe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_UART_MspInit+0xa4>)
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_UART_MspInit+0xa4>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	01c9      	lsls	r1, r1, #7
 8001494:	430a      	orrs	r2, r1
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_UART_MspInit+0xa4>)
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	01db      	lsls	r3, r3, #7
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_UART_MspInit+0xa4>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_UART_MspInit+0xa4>)
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	02c9      	lsls	r1, r1, #11
 80014b0:	430a      	orrs	r2, r1
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_UART_MspInit+0xa4>)
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	02db      	lsls	r3, r3, #11
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c2:	0021      	movs	r1, r4
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	22c0      	movs	r2, #192	; 0xc0
 80014c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2202      	movs	r2, #2
 80014ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2203      	movs	r2, #3
 80014da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_UART_MspInit+0xa8>)
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f000 fc03 	bl	8001cf4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201b      	movs	r0, #27
 80014f4:	f000 fa48 	bl	8001988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014f8:	201b      	movs	r0, #27
 80014fa:	f000 fa5a 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b00b      	add	sp, #44	; 0x2c
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40013800 	.word	0x40013800
 800150c:	40021000 	.word	0x40021000
 8001510:	48000400 	.word	0x48000400

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 f93a 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <DMA1_Channel2_3_IRQHandler+0x14>)
 800154a:	0018      	movs	r0, r3
 800154c:	f000 fb13 	bl	8001b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	200000f8 	.word	0x200000f8

0800155c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <TIM3_IRQHandler+0x14>)
 8001562:	0018      	movs	r0, r3
 8001564:	f002 fdea 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	200000b0 	.word	0x200000b0

08001574 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <SPI1_IRQHandler+0x14>)
 800157a:	0018      	movs	r0, r3
 800157c:	f002 f9ac 	bl	80038d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000218 	.word	0x20000218

0800158c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <USART1_IRQHandler+0x14>)
 8001592:	0018      	movs	r0, r3
 8001594:	f003 fc58 	bl	8004e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	2000013c 	.word	0x2000013c

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f004 fad6 	bl	8005b84 <__errno>
 80015d8:	0003      	movs	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	18d2      	adds	r2, r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b006      	add	sp, #24
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20001000 	.word	0x20001000
 8001604:	00000400 	.word	0x00000400
 8001608:	2000008c 	.word	0x2000008c
 800160c:	20000290 	.word	0x20000290

08001610 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <setTimer>:
#include "timer.h"

int counter[3] = {0, 0, 0};
int timer_flag[3] = {0, 0, 0};// FLAG[3] = 1 TO CHECK BUTTON PRESS( GO TO FUNCTION getKeyinput())

void setTimer(int timer, int duration){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	210a      	movs	r1, #10
 800162a:	0018      	movs	r0, r3
 800162c:	f7fe fe00 	bl	8000230 <__divsi3>
 8001630:	0003      	movs	r3, r0
 8001632:	0019      	movs	r1, r3
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <setTimer+0x34>)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <setTimer+0x38>)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	2100      	movs	r1, #0
 8001644:	50d1      	str	r1, [r2, r3]
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	20000090 	.word	0x20000090
 8001654:	2000009c 	.word	0x2000009c

08001658 <timer_run>:
void timer_run(){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){ // 3 timer
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	e01c      	b.n	800169e <timer_run+0x46>
		if(counter[i] > 0){
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <timer_run+0x58>)
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	58d3      	ldr	r3, [r2, r3]
 800166c:	2b00      	cmp	r3, #0
 800166e:	dd13      	ble.n	8001698 <timer_run+0x40>
			counter[i]--;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <timer_run+0x58>)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	58d3      	ldr	r3, [r2, r3]
 8001678:	1e59      	subs	r1, r3, #1
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <timer_run+0x58>)
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <timer_run+0x58>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	58d3      	ldr	r3, [r2, r3]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dc04      	bgt.n	8001698 <timer_run+0x40>
				timer_flag[i] = 1;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <timer_run+0x5c>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	2101      	movs	r1, #1
 8001696:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 3; i++){ // 3 timer
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	dddf      	ble.n	8001664 <timer_run+0xc>
		}
	}
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000090 	.word	0x20000090
 80016b4:	2000009c 	.word	0x2000009c

080016b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	//getKeyinput();
	timer_run();
 80016c0:	f7ff ffca 	bl	8001658 <timer_run>
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d0:	f7ff ff9e 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016fa:	f004 fa49 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016fe:	f7ff fa0f 	bl	8000b20 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   r0, =_estack
 8001704:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001710:	08006524 	.word	0x08006524
  ldr r2, =_sbss
 8001714:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001718:	20000290 	.word	0x20000290

0800171c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_IRQHandler>
	...

08001720 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_Init+0x24>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_Init+0x24>)
 800172a:	2110      	movs	r1, #16
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001730:	2000      	movs	r0, #0
 8001732:	f000 f809 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001736:	f7ff fd39 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40022000 	.word	0x40022000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_InitTick+0x5c>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_InitTick+0x60>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	0019      	movs	r1, r3
 800175a:	23fa      	movs	r3, #250	; 0xfa
 800175c:	0098      	lsls	r0, r3, #2
 800175e:	f7fe fcdd 	bl	800011c <__udivsi3>
 8001762:	0003      	movs	r3, r0
 8001764:	0019      	movs	r1, r3
 8001766:	0020      	movs	r0, r4
 8001768:	f7fe fcd8 	bl	800011c <__udivsi3>
 800176c:	0003      	movs	r3, r0
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f92f 	bl	80019d2 <HAL_SYSTICK_Config>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e00f      	b.n	800179c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d80b      	bhi.n	800179a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	2301      	movs	r3, #1
 8001786:	425b      	negs	r3, r3
 8001788:	2200      	movs	r2, #0
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f8fc 	bl	8001988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_InitTick+0x64>)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b003      	add	sp, #12
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	001a      	movs	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	18d2      	adds	r2, r2, r3
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_IncTick+0x20>)
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	20000008 	.word	0x20000008
 80017d0:	2000027c 	.word	0x2000027c

080017d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	2000027c 	.word	0x2000027c

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	001a      	movs	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	189b      	adds	r3, r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	f7ff ffe0 	bl	80017d4 <HAL_GetTick>
 8001814:	0002      	movs	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	20000008 	.word	0x20000008

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b7f      	cmp	r3, #127	; 0x7f
 8001842:	d809      	bhi.n	8001858 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	001a      	movs	r2, r3
 800184a:	231f      	movs	r3, #31
 800184c:	401a      	ands	r2, r3
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_EnableIRQ+0x30>)
 8001850:	2101      	movs	r1, #1
 8001852:	4091      	lsls	r1, r2
 8001854:	000a      	movs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
  }
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b7f      	cmp	r3, #127	; 0x7f
 8001878:	d828      	bhi.n	80018cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <__NVIC_SetPriority+0xd4>)
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b25b      	sxtb	r3, r3
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	33c0      	adds	r3, #192	; 0xc0
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	589b      	ldr	r3, [r3, r2]
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	2203      	movs	r2, #3
 8001892:	400a      	ands	r2, r1
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	21ff      	movs	r1, #255	; 0xff
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	43d2      	mvns	r2, r2
 800189e:	401a      	ands	r2, r3
 80018a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	22ff      	movs	r2, #255	; 0xff
 80018a8:	401a      	ands	r2, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	4003      	ands	r3, r0
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	481f      	ldr	r0, [pc, #124]	; (8001938 <__NVIC_SetPriority+0xd4>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	430a      	orrs	r2, r1
 80018c4:	33c0      	adds	r3, #192	; 0xc0
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ca:	e031      	b.n	8001930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <__NVIC_SetPriority+0xd8>)
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	0019      	movs	r1, r3
 80018d4:	230f      	movs	r3, #15
 80018d6:	400b      	ands	r3, r1
 80018d8:	3b08      	subs	r3, #8
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3306      	adds	r3, #6
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1dfa      	adds	r2, r7, #7
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	0011      	movs	r1, r2
 80018ec:	2203      	movs	r2, #3
 80018ee:	400a      	ands	r2, r1
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	21ff      	movs	r1, #255	; 0xff
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	401a      	ands	r2, r3
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	0018      	movs	r0, r3
 800190c:	2303      	movs	r3, #3
 800190e:	4003      	ands	r3, r0
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <__NVIC_SetPriority+0xd8>)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	001c      	movs	r4, r3
 800191c:	230f      	movs	r3, #15
 800191e:	4023      	ands	r3, r4
 8001920:	3b08      	subs	r3, #8
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	430a      	orrs	r2, r1
 8001926:	3306      	adds	r3, #6
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	18c3      	adds	r3, r0, r3
 800192c:	3304      	adds	r3, #4
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b003      	add	sp, #12
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	045b      	lsls	r3, r3, #17
 8001950:	429a      	cmp	r2, r3
 8001952:	d301      	bcc.n	8001958 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001954:	2301      	movs	r3, #1
 8001956:	e010      	b.n	800197a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <SysTick_Config+0x44>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	3a01      	subs	r2, #1
 800195e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001960:	2301      	movs	r3, #1
 8001962:	425b      	negs	r3, r3
 8001964:	2103      	movs	r1, #3
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff ff7c 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x44>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x44>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	210f      	movs	r1, #15
 8001994:	187b      	adds	r3, r7, r1
 8001996:	1c02      	adds	r2, r0, #0
 8001998:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	187b      	adds	r3, r7, r1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	0002      	movs	r2, r0
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ff33 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff ffaf 	bl	8001940 <SysTick_Config>
 80019e2:	0003      	movs	r3, r0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e036      	b.n	8001a70 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2221      	movs	r2, #33	; 0x21
 8001a06:	2102      	movs	r1, #2
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_DMA_Init+0x8c>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f932 	bl	8001cbc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2221      	movs	r2, #33	; 0x21
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	ffffc00f 	.word	0xffffc00f

08001a7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2221      	movs	r2, #33	; 0x21
 8001a88:	5c9b      	ldrb	r3, [r3, r2]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e020      	b.n	8001ae4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	210e      	movs	r1, #14
 8001aae:	438a      	bics	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	438a      	bics	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aca:	2101      	movs	r1, #1
 8001acc:	4091      	lsls	r1, r2
 8001ace:	000a      	movs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2221      	movs	r2, #33	; 0x21
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	210f      	movs	r1, #15
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2221      	movs	r2, #33	; 0x21
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d006      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e028      	b.n	8001b68 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	210e      	movs	r1, #14
 8001b22:	438a      	bics	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	438a      	bics	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2221      	movs	r2, #33	; 0x21
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	0010      	movs	r0, r2
 8001b66:	4798      	blx	r3
    }
  }
  return status;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b004      	add	sp, #16
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2204      	movs	r2, #4
 8001b94:	409a      	lsls	r2, r3
 8001b96:	0013      	movs	r3, r2
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d024      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x72>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d020      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2220      	movs	r2, #32
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	438a      	bics	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4091      	lsls	r1, r2
 8001bce:	000a      	movs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d100      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x66>
 8001bda:	e06a      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	0010      	movs	r0, r2
 8001be4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001be6:	e064      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2202      	movs	r2, #2
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d02b      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xda>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d027      	beq.n	8001c50 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2220      	movs	r2, #32
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d10b      	bne.n	8001c24 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	210a      	movs	r1, #10
 8001c18:	438a      	bics	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2221      	movs	r2, #33	; 0x21
 8001c20:	2101      	movs	r1, #1
 8001c22:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4091      	lsls	r1, r2
 8001c30:	000a      	movs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d036      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c4e:	e030      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	2208      	movs	r2, #8
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d028      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2208      	movs	r2, #8
 8001c64:	4013      	ands	r3, r2
 8001c66:	d024      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	210e      	movs	r1, #14
 8001c74:	438a      	bics	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	2101      	movs	r1, #1
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2221      	movs	r2, #33	; 0x21
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	0010      	movs	r0, r2
 8001cae:	4798      	blx	r3
    }
  }
}
 8001cb0:	e7ff      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x13c>
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a08      	ldr	r2, [pc, #32]	; (8001cec <DMA_CalcBaseAndBitshift+0x30>)
 8001cca:	4694      	mov	ip, r2
 8001ccc:	4463      	add	r3, ip
 8001cce:	2114      	movs	r1, #20
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7fe fa23 	bl	800011c <__udivsi3>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	009a      	lsls	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <DMA_CalcBaseAndBitshift+0x34>)
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	bffdfff8 	.word	0xbffdfff8
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e149      	b.n	8001f98 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4091      	lsls	r1, r2
 8001d0e:	000a      	movs	r2, r1
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d100      	bne.n	8001d1c <HAL_GPIO_Init+0x28>
 8001d1a:	e13a      	b.n	8001f92 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d130      	bne.n	8001d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	409a      	lsls	r2, r3
 8001d42:	0013      	movs	r3, r2
 8001d44:	43da      	mvns	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	43da      	mvns	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	2201      	movs	r2, #1
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d017      	beq.n	8001dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d123      	bne.n	8001e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	58d3      	ldr	r3, [r2, r3]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2107      	movs	r1, #7
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	6939      	ldr	r1, [r7, #16]
 8001e24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	43da      	mvns	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	401a      	ands	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	23c0      	movs	r3, #192	; 0xc0
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_GPIO_Init+0x174>
 8001e66:	e094      	b.n	8001f92 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e68:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	619a      	str	r2, [r3, #24]
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_GPIO_Init+0x2bc>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	589b      	ldr	r3, [r3, r2]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	2390      	movs	r3, #144	; 0x90
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x1d6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <HAL_GPIO_Init+0x2c4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x1d2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <HAL_GPIO_Init+0x2c8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x1ce>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x1d8>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	2103      	movs	r1, #3
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x2c0>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	035b      	lsls	r3, r3, #13
 8001f02:	4013      	ands	r3, r2
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	039b      	lsls	r3, r3, #14
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43da      	mvns	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	4013      	ands	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	025b      	lsls	r3, r3, #9
 8001f80:	4013      	ands	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_GPIO_Init+0x2cc>)
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	40da      	lsrs	r2, r3
 8001fa0:	1e13      	subs	r3, r2, #0
 8001fa2:	d000      	beq.n	8001fa6 <HAL_GPIO_Init+0x2b2>
 8001fa4:	e6ae      	b.n	8001d04 <HAL_GPIO_Init+0x10>
  } 
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b006      	add	sp, #24
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	0008      	movs	r0, r1
 8001fce:	0011      	movs	r1, r2
 8001fd0:	1cbb      	adds	r3, r7, #2
 8001fd2:	1c02      	adds	r2, r0, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	1c7b      	adds	r3, r7, #1
 8001fd8:	1c0a      	adds	r2, r1, #0
 8001fda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fdc:	1c7b      	adds	r3, r7, #1
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe4:	1cbb      	adds	r3, r7, #2
 8001fe6:	881a      	ldrh	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	1cbb      	adds	r3, r7, #2
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b002      	add	sp, #8
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e08f      	b.n	8002132 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2241      	movs	r2, #65	; 0x41
 8002016:	5c9b      	ldrb	r3, [r3, r2]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff f8e3 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2241      	movs	r2, #65	; 0x41
 8002032:	2124      	movs	r1, #36	; 0x24
 8002034:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	438a      	bics	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	493b      	ldr	r1, [pc, #236]	; (800213c <HAL_I2C_Init+0x13c>)
 8002050:	400a      	ands	r2, r1
 8002052:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4938      	ldr	r1, [pc, #224]	; (8002140 <HAL_I2C_Init+0x140>)
 8002060:	400a      	ands	r2, r1
 8002062:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d108      	bne.n	800207e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0209      	lsls	r1, r1, #8
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e007      	b.n	800208e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2184      	movs	r1, #132	; 0x84
 8002088:	0209      	lsls	r1, r1, #8
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d109      	bne.n	80020aa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0109      	lsls	r1, r1, #4
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	e007      	b.n	80020ba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4923      	ldr	r1, [pc, #140]	; (8002144 <HAL_I2C_Init+0x144>)
 80020b6:	400a      	ands	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4920      	ldr	r1, [pc, #128]	; (8002148 <HAL_I2C_Init+0x148>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_I2C_Init+0x140>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69d9      	ldr	r1, [r3, #28]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2241      	movs	r2, #65	; 0x41
 800211e:	2120      	movs	r1, #32
 8002120:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2242      	movs	r2, #66	; 0x42
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b002      	add	sp, #8
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	f0ffffff 	.word	0xf0ffffff
 8002140:	ffff7fff 	.word	0xffff7fff
 8002144:	fffff7ff 	.word	0xfffff7ff
 8002148:	02008000 	.word	0x02008000

0800214c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	0008      	movs	r0, r1
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	0019      	movs	r1, r3
 800215a:	230a      	movs	r3, #10
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	1c02      	adds	r2, r0, #0
 8002160:	801a      	strh	r2, [r3, #0]
 8002162:	2308      	movs	r3, #8
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	1c0a      	adds	r2, r1, #0
 8002168:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2241      	movs	r2, #65	; 0x41
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	d000      	beq.n	8002178 <HAL_I2C_Master_Transmit+0x2c>
 8002176:	e10a      	b.n	800238e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2C_Master_Transmit+0x3a>
 8002182:	2302      	movs	r3, #2
 8002184:	e104      	b.n	8002390 <HAL_I2C_Master_Transmit+0x244>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800218e:	f7ff fb21 	bl	80017d4 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	0219      	lsls	r1, r3, #8
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	f000 f91e 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0ef      	b.n	8002390 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2241      	movs	r2, #65	; 0x41
 80021b4:	2121      	movs	r1, #33	; 0x21
 80021b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2242      	movs	r2, #66	; 0x42
 80021bc:	2110      	movs	r1, #16
 80021be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2208      	movs	r2, #8
 80021d0:	18ba      	adds	r2, r7, r2
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2bff      	cmp	r3, #255	; 0xff
 80021e4:	d906      	bls.n	80021f4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	22ff      	movs	r2, #255	; 0xff
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	045b      	lsls	r3, r3, #17
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e007      	b.n	8002204 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	049b      	lsls	r3, r3, #18
 8002202:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	d027      	beq.n	800225c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	697c      	ldr	r4, [r7, #20]
 8002248:	230a      	movs	r3, #10
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	8819      	ldrh	r1, [r3, #0]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_I2C_Master_Transmit+0x24c>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0023      	movs	r3, r4
 8002256:	f000 faa7 	bl	80027a8 <I2C_TransferConfig>
 800225a:	e06f      	b.n	800233c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	b2da      	uxtb	r2, r3
 8002262:	697c      	ldr	r4, [r7, #20]
 8002264:	230a      	movs	r3, #10
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	8819      	ldrh	r1, [r3, #0]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_I2C_Master_Transmit+0x24c>)
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	0023      	movs	r3, r4
 8002272:	f000 fa99 	bl	80027a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002276:	e061      	b.n	800233c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	0018      	movs	r0, r3
 8002280:	f000 f908 	bl	8002494 <I2C_WaitOnTXISFlagUntilTimeout>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e081      	b.n	8002390 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03a      	beq.n	800233c <HAL_I2C_Master_Transmit+0x1f0>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d136      	bne.n	800233c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	0013      	movs	r3, r2
 80022d8:	2200      	movs	r2, #0
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	f000 f882 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e053      	b.n	8002390 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2bff      	cmp	r3, #255	; 0xff
 80022f0:	d911      	bls.n	8002316 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	045c      	lsls	r4, r3, #17
 8002302:	230a      	movs	r3, #10
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	8819      	ldrh	r1, [r3, #0]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	2300      	movs	r3, #0
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	0023      	movs	r3, r4
 8002310:	f000 fa4a 	bl	80027a8 <I2C_TransferConfig>
 8002314:	e012      	b.n	800233c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	b2da      	uxtb	r2, r3
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	049c      	lsls	r4, r3, #18
 800232a:	230a      	movs	r3, #10
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	8819      	ldrh	r1, [r3, #0]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	2300      	movs	r3, #0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	0023      	movs	r3, r4
 8002338:	f000 fa36 	bl	80027a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d198      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f8e7 	bl	8002520 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e01a      	b.n	8002390 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	490b      	ldr	r1, [pc, #44]	; (800239c <HAL_I2C_Master_Transmit+0x250>)
 800236e:	400a      	ands	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2241      	movs	r2, #65	; 0x41
 8002376:	2120      	movs	r1, #32
 8002378:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2242      	movs	r2, #66	; 0x42
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b007      	add	sp, #28
 8002396:	bd90      	pop	{r4, r7, pc}
 8002398:	80002000 	.word	0x80002000
 800239c:	fe00e800 	.word	0xfe00e800

080023a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d103      	bne.n	80023be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d007      	beq.n	80023dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2101      	movs	r1, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	619a      	str	r2, [r3, #24]
  }
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f4:	e03a      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f8d3 	bl	80025a8 <I2C_IsErrorOccurred>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d001      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e040      	b.n	800248c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	d02d      	beq.n	800246c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002410:	f7ff f9e0 	bl	80017d4 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d302      	bcc.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d122      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	4013      	ands	r3, r2
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	425a      	negs	r2, r3
 8002436:	4153      	adcs	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	001a      	movs	r2, r3
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d113      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	2220      	movs	r2, #32
 800244a:	431a      	orrs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2241      	movs	r2, #65	; 0x41
 8002454:	2120      	movs	r1, #32
 8002456:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2242      	movs	r2, #66	; 0x42
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2240      	movs	r2, #64	; 0x40
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e00f      	b.n	800248c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	425a      	negs	r2, r3
 800247c:	4153      	adcs	r3, r2
 800247e:	b2db      	uxtb	r3, r3
 8002480:	001a      	movs	r2, r3
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d0b5      	beq.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b004      	add	sp, #16
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a0:	e032      	b.n	8002508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 f87d 	bl	80025a8 <I2C_IsErrorOccurred>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e030      	b.n	8002518 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3301      	adds	r3, #1
 80024ba:	d025      	beq.n	8002508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024bc:	f7ff f98a 	bl	80017d4 <HAL_GetTick>
 80024c0:	0002      	movs	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d302      	bcc.n	80024d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11a      	bne.n	8002508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d013      	beq.n	8002508 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	2220      	movs	r2, #32
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2241      	movs	r2, #65	; 0x41
 80024f0:	2120      	movs	r1, #32
 80024f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2242      	movs	r2, #66	; 0x42
 80024f8:	2100      	movs	r1, #0
 80024fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2202      	movs	r2, #2
 8002510:	4013      	ands	r3, r2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d1c5      	bne.n	80024a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252c:	e02f      	b.n	800258e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f837 	bl	80025a8 <I2C_IsErrorOccurred>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e02d      	b.n	800259e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002542:	f7ff f947 	bl	80017d4 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d11a      	bne.n	800258e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2220      	movs	r2, #32
 8002560:	4013      	ands	r3, r2
 8002562:	2b20      	cmp	r3, #32
 8002564:	d013      	beq.n	800258e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	2220      	movs	r2, #32
 800256c:	431a      	orrs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2241      	movs	r2, #65	; 0x41
 8002576:	2120      	movs	r1, #32
 8002578:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2242      	movs	r2, #66	; 0x42
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2240      	movs	r2, #64	; 0x40
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e007      	b.n	800259e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2220      	movs	r2, #32
 8002596:	4013      	ands	r3, r2
 8002598:	2b20      	cmp	r3, #32
 800259a:	d1c8      	bne.n	800252e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2327      	movs	r3, #39	; 0x27
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2210      	movs	r2, #16
 80025d0:	4013      	ands	r3, r2
 80025d2:	d100      	bne.n	80025d6 <I2C_IsErrorOccurred+0x2e>
 80025d4:	e082      	b.n	80026dc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2210      	movs	r2, #16
 80025dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025de:	e060      	b.n	80026a2 <I2C_IsErrorOccurred+0xfa>
 80025e0:	2427      	movs	r4, #39	; 0x27
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	193a      	adds	r2, r7, r4
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	d058      	beq.n	80026a2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7ff f8f0 	bl	80017d4 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d306      	bcc.n	800260e <I2C_IsErrorOccurred+0x66>
 8002600:	193b      	adds	r3, r7, r4
 8002602:	193a      	adds	r2, r7, r4
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d149      	bne.n	80026a2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800261c:	2013      	movs	r0, #19
 800261e:	183b      	adds	r3, r7, r0
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	2142      	movs	r1, #66	; 0x42
 8002624:	5c52      	ldrb	r2, [r2, r1]
 8002626:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	401a      	ands	r2, r3
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	429a      	cmp	r2, r3
 800263a:	d126      	bne.n	800268a <I2C_IsErrorOccurred+0xe2>
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	01db      	lsls	r3, r3, #7
 8002642:	429a      	cmp	r2, r3
 8002644:	d021      	beq.n	800268a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002646:	183b      	adds	r3, r7, r0
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b20      	cmp	r3, #32
 800264c:	d01d      	beq.n	800268a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	01c9      	lsls	r1, r1, #7
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002660:	f7ff f8b8 	bl	80017d4 <HAL_GetTick>
 8002664:	0003      	movs	r3, r0
 8002666:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002668:	e00f      	b.n	800268a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800266a:	f7ff f8b3 	bl	80017d4 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b19      	cmp	r3, #25
 8002676:	d908      	bls.n	800268a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2220      	movs	r2, #32
 800267c:	4313      	orrs	r3, r2
 800267e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002680:	2327      	movs	r3, #39	; 0x27
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]

              break;
 8002688:	e00b      	b.n	80026a2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2220      	movs	r2, #32
 8002692:	4013      	ands	r3, r2
 8002694:	2127      	movs	r1, #39	; 0x27
 8002696:	187a      	adds	r2, r7, r1
 8002698:	1879      	adds	r1, r7, r1
 800269a:	7809      	ldrb	r1, [r1, #0]
 800269c:	7011      	strb	r1, [r2, #0]
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d1e3      	bne.n	800266a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2220      	movs	r2, #32
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d004      	beq.n	80026ba <I2C_IsErrorOccurred+0x112>
 80026b0:	2327      	movs	r3, #39	; 0x27
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d092      	beq.n	80025e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026ba:	2327      	movs	r3, #39	; 0x27
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2220      	movs	r2, #32
 80026ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2204      	movs	r2, #4
 80026d0:	4313      	orrs	r3, r2
 80026d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026d4:	2327      	movs	r3, #39	; 0x27
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	d00c      	beq.n	8002708 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4313      	orrs	r3, r2
 80026f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0052      	lsls	r2, r2, #1
 80026fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002700:	2327      	movs	r3, #39	; 0x27
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4013      	ands	r3, r2
 8002710:	d00c      	beq.n	800272c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	2208      	movs	r2, #8
 8002716:	4313      	orrs	r3, r2
 8002718:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	00d2      	lsls	r2, r2, #3
 8002722:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002724:	2327      	movs	r3, #39	; 0x27
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d00c      	beq.n	8002750 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	2202      	movs	r2, #2
 800273a:	4313      	orrs	r3, r2
 800273c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	0092      	lsls	r2, r2, #2
 8002746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002748:	2327      	movs	r3, #39	; 0x27
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002750:	2327      	movs	r3, #39	; 0x27
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01d      	beq.n	8002796 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff fe1f 	bl	80023a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	490d      	ldr	r1, [pc, #52]	; (80027a4 <I2C_IsErrorOccurred+0x1fc>)
 800276e:	400a      	ands	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	431a      	orrs	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2241      	movs	r2, #65	; 0x41
 8002782:	2120      	movs	r1, #32
 8002784:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2242      	movs	r2, #66	; 0x42
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002796:	2327      	movs	r3, #39	; 0x27
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b00b      	add	sp, #44	; 0x2c
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	fe00e800 	.word	0xfe00e800

080027a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	0008      	movs	r0, r1
 80027b2:	0011      	movs	r1, r2
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	240a      	movs	r4, #10
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	1c02      	adds	r2, r0, #0
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	2009      	movs	r0, #9
 80027c0:	183b      	adds	r3, r7, r0
 80027c2:	1c0a      	adds	r2, r1, #0
 80027c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	059b      	lsls	r3, r3, #22
 80027cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ce:	183b      	adds	r3, r7, r0
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	0419      	lsls	r1, r3, #16
 80027d4:	23ff      	movs	r3, #255	; 0xff
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	4313      	orrs	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f2:	0d51      	lsrs	r1, r2, #21
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	00d2      	lsls	r2, r2, #3
 80027f8:	400a      	ands	r2, r1
 80027fa:	4907      	ldr	r1, [pc, #28]	; (8002818 <I2C_TransferConfig+0x70>)
 80027fc:	430a      	orrs	r2, r1
 80027fe:	43d2      	mvns	r2, r2
 8002800:	401a      	ands	r2, r3
 8002802:	0011      	movs	r1, r2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b007      	add	sp, #28
 8002814:	bd90      	pop	{r4, r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	03ff63ff 	.word	0x03ff63ff

0800281c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2241      	movs	r2, #65	; 0x41
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	d138      	bne.n	80028a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	5c9b      	ldrb	r3, [r3, r2]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800283c:	2302      	movs	r3, #2
 800283e:	e032      	b.n	80028a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2240      	movs	r2, #64	; 0x40
 8002844:	2101      	movs	r1, #1
 8002846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2241      	movs	r2, #65	; 0x41
 800284c:	2124      	movs	r1, #36	; 0x24
 800284e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	438a      	bics	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4911      	ldr	r1, [pc, #68]	; (80028b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2241      	movs	r2, #65	; 0x41
 8002894:	2120      	movs	r1, #32
 8002896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b002      	add	sp, #8
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	ffffefff 	.word	0xffffefff

080028b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2241      	movs	r2, #65	; 0x41
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d139      	bne.n	800293e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e033      	b.n	8002940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2241      	movs	r2, #65	; 0x41
 80028e4:	2124      	movs	r1, #36	; 0x24
 80028e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2241      	movs	r2, #65	; 0x41
 800292e:	2120      	movs	r1, #32
 8002930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	fffff0ff 	.word	0xfffff0ff

0800294c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e301      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d100      	bne.n	800296a <HAL_RCC_OscConfig+0x1e>
 8002968:	e08d      	b.n	8002a86 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800296a:	4bc3      	ldr	r3, [pc, #780]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	220c      	movs	r2, #12
 8002970:	4013      	ands	r3, r2
 8002972:	2b04      	cmp	r3, #4
 8002974:	d00e      	beq.n	8002994 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002976:	4bc0      	ldr	r3, [pc, #768]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	220c      	movs	r2, #12
 800297c:	4013      	ands	r3, r2
 800297e:	2b08      	cmp	r3, #8
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x64>
 8002982:	4bbd      	ldr	r3, [pc, #756]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	025b      	lsls	r3, r3, #9
 800298a:	401a      	ands	r2, r3
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	025b      	lsls	r3, r3, #9
 8002990:	429a      	cmp	r2, r3
 8002992:	d10d      	bne.n	80029b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	4bb8      	ldr	r3, [pc, #736]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCC_OscConfig+0x56>
 80029a0:	e070      	b.n	8002a84 <HAL_RCC_OscConfig+0x138>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d000      	beq.n	80029ac <HAL_RCC_OscConfig+0x60>
 80029aa:	e06b      	b.n	8002a84 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e2d8      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x7c>
 80029b8:	4baf      	ldr	r3, [pc, #700]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4bae      	ldr	r3, [pc, #696]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	0249      	lsls	r1, r1, #9
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e02f      	b.n	8002a28 <HAL_RCC_OscConfig+0xdc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10c      	bne.n	80029ea <HAL_RCC_OscConfig+0x9e>
 80029d0:	4ba9      	ldr	r3, [pc, #676]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4ba8      	ldr	r3, [pc, #672]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029d6:	49a9      	ldr	r1, [pc, #676]	; (8002c7c <HAL_RCC_OscConfig+0x330>)
 80029d8:	400a      	ands	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	4ba6      	ldr	r3, [pc, #664]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4ba5      	ldr	r3, [pc, #660]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029e2:	49a7      	ldr	r1, [pc, #668]	; (8002c80 <HAL_RCC_OscConfig+0x334>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e01e      	b.n	8002a28 <HAL_RCC_OscConfig+0xdc>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d10e      	bne.n	8002a10 <HAL_RCC_OscConfig+0xc4>
 80029f2:	4ba1      	ldr	r3, [pc, #644]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4ba0      	ldr	r3, [pc, #640]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	02c9      	lsls	r1, r1, #11
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	4b9d      	ldr	r3, [pc, #628]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b9c      	ldr	r3, [pc, #624]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a06:	2180      	movs	r1, #128	; 0x80
 8002a08:	0249      	lsls	r1, r1, #9
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xdc>
 8002a10:	4b99      	ldr	r3, [pc, #612]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b98      	ldr	r3, [pc, #608]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	4999      	ldr	r1, [pc, #612]	; (8002c7c <HAL_RCC_OscConfig+0x330>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b96      	ldr	r3, [pc, #600]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b95      	ldr	r3, [pc, #596]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a22:	4997      	ldr	r1, [pc, #604]	; (8002c80 <HAL_RCC_OscConfig+0x334>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d014      	beq.n	8002a5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fed0 	bl	80017d4 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fecb 	bl	80017d4 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e28a      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	4013      	ands	r3, r2
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0xee>
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe febb 	bl	80017d4 <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe feb6 	bl	80017d4 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e275      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b80      	ldr	r3, [pc, #512]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	029b      	lsls	r3, r3, #10
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x118>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <HAL_RCC_OscConfig+0x146>
 8002a90:	e069      	b.n	8002b66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a92:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	220c      	movs	r2, #12
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a9c:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d11c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x196>
 8002aa8:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab4:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x17e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e24b      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	22f8      	movs	r2, #248	; 0xf8
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	00da      	lsls	r2, r3, #3
 8002ada:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae0:	e041      	b.n	8002b66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d024      	beq.n	8002b34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fe6d 	bl	80017d4 <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fe68 	bl	80017d4 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e227      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d0f1      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	22f8      	movs	r2, #248	; 0xf8
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00da      	lsls	r2, r3, #3
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e018      	b.n	8002b66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fe48 	bl	80017d4 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fe43 	bl	80017d4 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e202      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5c:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d1f1      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d036      	beq.n	8002bde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d019      	beq.n	8002bac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fe26 	bl	80017d4 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fe21 	bl	80017d4 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1e0      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d0f1      	beq.n	8002b8e <HAL_RCC_OscConfig+0x242>
 8002baa:	e018      	b.n	8002bde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fe0c 	bl	80017d4 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fe07 	bl	80017d4 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1c6      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d1f1      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2204      	movs	r2, #4
 8002be4:	4013      	ands	r3, r2
 8002be6:	d100      	bne.n	8002bea <HAL_RCC_OscConfig+0x29e>
 8002be8:	e0b4      	b.n	8002d54 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	201f      	movs	r0, #31
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	055b      	lsls	r3, r3, #21
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d110      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0549      	lsls	r1, r1, #21
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	61da      	str	r2, [r3, #28]
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	055b      	lsls	r3, r3, #21
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_RCC_OscConfig+0x338>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d11a      	bne.n	8002c62 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x338>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_RCC_OscConfig+0x338>)
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0049      	lsls	r1, r1, #1
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fdcb 	bl	80017d4 <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fe fdc6 	bl	80017d4 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e185      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x338>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10e      	bne.n	8002c88 <HAL_RCC_OscConfig+0x33c>
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002c6c:	6a1a      	ldr	r2, [r3, #32]
 8002c6e:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_RCC_OscConfig+0x32c>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	621a      	str	r2, [r3, #32]
 8002c76:	e035      	b.n	8002ce4 <HAL_RCC_OscConfig+0x398>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	fffeffff 	.word	0xfffeffff
 8002c80:	fffbffff 	.word	0xfffbffff
 8002c84:	40007000 	.word	0x40007000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_OscConfig+0x35e>
 8002c90:	4bb6      	ldr	r3, [pc, #728]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	4bb5      	ldr	r3, [pc, #724]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	438a      	bics	r2, r1
 8002c9a:	621a      	str	r2, [r3, #32]
 8002c9c:	4bb3      	ldr	r3, [pc, #716]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002c9e:	6a1a      	ldr	r2, [r3, #32]
 8002ca0:	4bb2      	ldr	r3, [pc, #712]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	621a      	str	r2, [r3, #32]
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x398>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x380>
 8002cb2:	4bae      	ldr	r3, [pc, #696]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	4bad      	ldr	r3, [pc, #692]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cb8:	2104      	movs	r1, #4
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	621a      	str	r2, [r3, #32]
 8002cbe:	4bab      	ldr	r3, [pc, #684]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	4baa      	ldr	r3, [pc, #680]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	621a      	str	r2, [r3, #32]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x398>
 8002ccc:	4ba7      	ldr	r3, [pc, #668]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	4ba6      	ldr	r3, [pc, #664]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	621a      	str	r2, [r3, #32]
 8002cd8:	4ba4      	ldr	r3, [pc, #656]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cda:	6a1a      	ldr	r2, [r3, #32]
 8002cdc:	4ba3      	ldr	r3, [pc, #652]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002cde:	2104      	movs	r1, #4
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d014      	beq.n	8002d16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cec:	f7fe fd72 	bl	80017d4 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	e009      	b.n	8002d0a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fe fd6d 	bl	80017d4 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	4a9b      	ldr	r2, [pc, #620]	; (8002f70 <HAL_RCC_OscConfig+0x624>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e12b      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0a:	4b98      	ldr	r3, [pc, #608]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4013      	ands	r3, r2
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x3aa>
 8002d14:	e013      	b.n	8002d3e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fd5d 	bl	80017d4 <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	e009      	b.n	8002d34 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe fd58 	bl	80017d4 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	4a91      	ldr	r2, [pc, #580]	; (8002f70 <HAL_RCC_OscConfig+0x624>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e116      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	4b8d      	ldr	r3, [pc, #564]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d3e:	231f      	movs	r3, #31
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	4b87      	ldr	r3, [pc, #540]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d4e:	4989      	ldr	r1, [pc, #548]	; (8002f74 <HAL_RCC_OscConfig+0x628>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d063      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d12a      	bne.n	8002dbc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d66:	4b81      	ldr	r3, [pc, #516]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6a:	4b80      	ldr	r3, [pc, #512]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d6c:	2104      	movs	r1, #4
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002d72:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d76:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fd29 	bl	80017d4 <HAL_GetTick>
 8002d82:	0003      	movs	r3, r0
 8002d84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d88:	f7fe fd24 	bl	80017d4 <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0e3      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0f1      	beq.n	8002d88 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002da4:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	22f8      	movs	r2, #248	; 0xf8
 8002daa:	4393      	bics	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	00da      	lsls	r2, r3, #3
 8002db4:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002db6:	430a      	orrs	r2, r1
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dba:	e034      	b.n	8002e26 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	3305      	adds	r3, #5
 8002dc2:	d111      	bne.n	8002de8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002dca:	2104      	movs	r1, #4
 8002dcc:	438a      	bics	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002dd0:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	22f8      	movs	r2, #248	; 0xf8
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	00da      	lsls	r2, r3, #3
 8002de0:	4b62      	ldr	r3, [pc, #392]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002de2:	430a      	orrs	r2, r1
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
 8002de6:	e01e      	b.n	8002e26 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002de8:	4b60      	ldr	r3, [pc, #384]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dec:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002dee:	2104      	movs	r1, #4
 8002df0:	430a      	orrs	r2, r1
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002df4:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df8:	4b5c      	ldr	r3, [pc, #368]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fce8 	bl	80017d4 <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e0a:	f7fe fce3 	bl	80017d4 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0a2      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002e1c:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	2202      	movs	r2, #2
 8002e22:	4013      	ands	r3, r2
 8002e24:	d1f1      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d100      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4e4>
 8002e2e:	e097      	b.n	8002f60 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e30:	4b4e      	ldr	r3, [pc, #312]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	220c      	movs	r2, #12
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4f2>
 8002e3c:	e06b      	b.n	8002f16 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d14c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e4c:	494a      	ldr	r1, [pc, #296]	; (8002f78 <HAL_RCC_OscConfig+0x62c>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fcbf 	bl	80017d4 <HAL_GetTick>
 8002e56:	0003      	movs	r3, r0
 8002e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fcba 	bl	80017d4 <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e079      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	049b      	lsls	r3, r3, #18
 8002e76:	4013      	ands	r3, r2
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	220f      	movs	r2, #15
 8002e80:	4393      	bics	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <HAL_RCC_OscConfig+0x630>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	0449      	lsls	r1, r1, #17
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fc8d 	bl	80017d4 <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fe fc88 	bl	80017d4 <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e047      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	049b      	lsls	r3, r3, #18
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x574>
 8002ede:	e03f      	b.n	8002f60 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002ee6:	4924      	ldr	r1, [pc, #144]	; (8002f78 <HAL_RCC_OscConfig+0x62c>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fc72 	bl	80017d4 <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe fc6d 	bl	80017d4 <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e02c      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f08:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	049b      	lsls	r3, r3, #18
 8002f10:	4013      	ands	r3, r2
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x5aa>
 8002f14:	e024      	b.n	8002f60 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01f      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x620>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	025b      	lsls	r3, r3, #9
 8002f34:	401a      	ands	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d10e      	bne.n	8002f5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	220f      	movs	r2, #15
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	23f0      	movs	r3, #240	; 0xf0
 8002f50:	039b      	lsls	r3, r3, #14
 8002f52:	401a      	ands	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b008      	add	sp, #32
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	00001388 	.word	0x00001388
 8002f74:	efffffff 	.word	0xefffffff
 8002f78:	feffffff 	.word	0xfeffffff
 8002f7c:	ffc2ffff 	.word	0xffc2ffff

08002f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b3      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d911      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b58      	ldr	r3, [pc, #352]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4393      	bics	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	4b55      	ldr	r3, [pc, #340]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e09a      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d006      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fda:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8002fe0:	21e0      	movs	r1, #224	; 0xe0
 8002fe2:	00c9      	lsls	r1, r1, #3
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	22f0      	movs	r2, #240	; 0xf0
 8002fee:	4393      	bics	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d040      	beq.n	8003088 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	029b      	lsls	r3, r3, #10
 8003016:	4013      	ands	r3, r2
 8003018:	d114      	bne.n	8003044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06e      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	049b      	lsls	r3, r3, #18
 800302e:	4013      	ands	r3, r2
 8003030:	d108      	bne.n	8003044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e062      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e05b      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003044:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2203      	movs	r2, #3
 800304a:	4393      	bics	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fe fbbc 	bl	80017d4 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003060:	e009      	b.n	8003076 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fe fbb7 	bl	80017d4 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <HAL_RCC_ClockConfig+0x18c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e042      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	220c      	movs	r2, #12
 800307c:	401a      	ands	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1ec      	bne.n	8003062 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	4013      	ands	r3, r2
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d211      	bcs.n	80030ba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4393      	bics	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_RCC_ClockConfig+0x184>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e020      	b.n	80030fc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2204      	movs	r2, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_RCC_ClockConfig+0x190>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030d8:	f000 f820 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030dc:	0001      	movs	r1, r0
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x188>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	220f      	movs	r2, #15
 80030e6:	4013      	ands	r3, r2
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x194>)
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	000a      	movs	r2, r1
 80030ee:	40da      	lsrs	r2, r3
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x198>)
 80030f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fe fb27 	bl	8001748 <HAL_InitTick>
  
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40022000 	.word	0x40022000
 8003108:	40021000 	.word	0x40021000
 800310c:	00001388 	.word	0x00001388
 8003110:	fffff8ff 	.word	0xfffff8ff
 8003114:	080064b0 	.word	0x080064b0
 8003118:	20000000 	.word	0x20000000

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	220c      	movs	r2, #12
 8003140:	4013      	ands	r3, r2
 8003142:	2b04      	cmp	r3, #4
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x30>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x36>
 800314a:	e02c      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800314e:	613b      	str	r3, [r7, #16]
      break;
 8003150:	e02c      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	220f      	movs	r2, #15
 8003158:	4013      	ands	r3, r2
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	220f      	movs	r2, #15
 8003166:	4013      	ands	r3, r2
 8003168:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	025b      	lsls	r3, r3, #9
 8003174:	4013      	ands	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4810      	ldr	r0, [pc, #64]	; (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800317c:	f7fc ffce 	bl	800011c <__udivsi3>
 8003180:	0003      	movs	r3, r0
 8003182:	001a      	movs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4353      	muls	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e009      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	000a      	movs	r2, r1
 8003190:	0152      	lsls	r2, r2, #5
 8003192:	1a52      	subs	r2, r2, r1
 8003194:	0193      	lsls	r3, r2, #6
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	185b      	adds	r3, r3, r1
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	613b      	str	r3, [r7, #16]
      break;
 80031a4:	e002      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a8:	613b      	str	r3, [r7, #16]
      break;
 80031aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031ac:	693b      	ldr	r3, [r7, #16]
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b006      	add	sp, #24
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	40021000 	.word	0x40021000
 80031bc:	007a1200 	.word	0x007a1200
 80031c0:	080064c8 	.word	0x080064c8
 80031c4:	080064d8 	.word	0x080064d8

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b02      	ldr	r3, [pc, #8]	; (80031d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031e0:	f7ff fff2 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e4:	0001      	movs	r1, r0
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	2207      	movs	r2, #7
 80031ee:	4013      	ands	r3, r2
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
 80031f4:	40d9      	lsrs	r1, r3
 80031f6:	000b      	movs	r3, r1
}    
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40021000 	.word	0x40021000
 8003204:	080064c0 	.word	0x080064c0

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	4013      	ands	r3, r2
 8003222:	d100      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003224:	e08e      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2017      	movs	r0, #23
 8003228:	183b      	adds	r3, r7, r0
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4b57      	ldr	r3, [pc, #348]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	055b      	lsls	r3, r3, #21
 8003236:	4013      	ands	r3, r2
 8003238:	d110      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b54      	ldr	r3, [pc, #336]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0549      	lsls	r1, r1, #21
 8003244:	430a      	orrs	r2, r1
 8003246:	61da      	str	r2, [r3, #28]
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	055b      	lsls	r3, r3, #21
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	183b      	adds	r3, r7, r0
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4013      	ands	r3, r2
 8003266:	d11a      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003268:	4b49      	ldr	r3, [pc, #292]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	0049      	lsls	r1, r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fe faad 	bl	80017d4 <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	e008      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003280:	f7fe faa8 	bl	80017d4 <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e077      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4013      	ands	r3, r2
 800329c:	d0f0      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	23c0      	movs	r3, #192	; 0xc0
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d034      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	23c0      	movs	r3, #192	; 0xc0
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4013      	ands	r3, r2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d02c      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4a33      	ldr	r2, [pc, #204]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	0249      	lsls	r1, r1, #9
 80032d4:	430a      	orrs	r2, r1
 80032d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	4b2b      	ldr	r3, [pc, #172]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032de:	492e      	ldr	r1, [pc, #184]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032e4:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fa6f 	bl	80017d4 <HAL_GetTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e009      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe fa6a 	bl	80017d4 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	4a25      	ldr	r2, [pc, #148]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e038      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	2202      	movs	r2, #2
 8003316:	4013      	ands	r3, r2
 8003318:	d0f0      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800332a:	430a      	orrs	r2, r1
 800332c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800332e:	2317      	movs	r3, #23
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800333e:	4918      	ldr	r1, [pc, #96]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003340:	400a      	ands	r2, r1
 8003342:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	4013      	ands	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	2203      	movs	r2, #3
 8003354:	4393      	bics	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800335e:	430a      	orrs	r2, r1
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2220      	movs	r2, #32
 8003368:	4013      	ands	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	2210      	movs	r2, #16
 8003372:	4393      	bics	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	4b04      	ldr	r3, [pc, #16]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800337c:	430a      	orrs	r2, r1
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b006      	add	sp, #24
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
 8003394:	fffffcff 	.word	0xfffffcff
 8003398:	fffeffff 	.word	0xfffeffff
 800339c:	00001388 	.word	0x00001388
 80033a0:	efffffff 	.word	0xefffffff

080033a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0a8      	b.n	8003508 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	2382      	movs	r3, #130	; 0x82
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d009      	beq.n	80033de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
 80033d0:	e005      	b.n	80033de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	225d      	movs	r2, #93	; 0x5d
 80033e8:	5c9b      	ldrb	r3, [r3, r2]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	225c      	movs	r2, #92	; 0x5c
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7fd ff48 	bl	8001290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	225d      	movs	r2, #93	; 0x5d
 8003404:	2102      	movs	r1, #2
 8003406:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2140      	movs	r1, #64	; 0x40
 8003414:	438a      	bics	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	23e0      	movs	r3, #224	; 0xe0
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	429a      	cmp	r2, r3
 8003422:	d902      	bls.n	800342a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e002      	b.n	8003430 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	015b      	lsls	r3, r3, #5
 800342e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	23f0      	movs	r3, #240	; 0xf0
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	429a      	cmp	r2, r3
 800343a:	d008      	beq.n	800344e <HAL_SPI_Init+0xaa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	23e0      	movs	r3, #224	; 0xe0
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	429a      	cmp	r2, r3
 8003446:	d002      	beq.n	800344e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	2382      	movs	r3, #130	; 0x82
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	401a      	ands	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	2384      	movs	r3, #132	; 0x84
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	400b      	ands	r3, r1
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2102      	movs	r1, #2
 800346a:	400b      	ands	r3, r1
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2101      	movs	r1, #1
 8003474:	400b      	ands	r3, r1
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6999      	ldr	r1, [r3, #24]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	400b      	ands	r3, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2138      	movs	r1, #56	; 0x38
 800348a:	400b      	ands	r3, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	400b      	ands	r3, r1
 8003496:	431a      	orrs	r2, r3
 8003498:	0011      	movs	r1, r2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	401a      	ands	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	2204      	movs	r2, #4
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2110      	movs	r1, #16
 80034bc:	400b      	ands	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	2108      	movs	r1, #8
 80034c6:	400b      	ands	r3, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68d9      	ldr	r1, [r3, #12]
 80034ce:	23f0      	movs	r3, #240	; 0xf0
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	400b      	ands	r3, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	0011      	movs	r1, r2
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	015b      	lsls	r3, r3, #5
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4907      	ldr	r1, [pc, #28]	; (8003510 <HAL_SPI_Init+0x16c>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	225d      	movs	r2, #93	; 0x5d
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bd80      	pop	{r7, pc}
 8003510:	fffff7ff 	.word	0xfffff7ff

08003514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	001a      	movs	r2, r3
 8003522:	1cbb      	adds	r3, r7, #2
 8003524:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003526:	2301      	movs	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800352a:	2323      	movs	r3, #35	; 0x23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	225c      	movs	r2, #92	; 0x5c
 8003536:	5c9b      	ldrb	r3, [r3, r2]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x2c>
 800353c:	2302      	movs	r3, #2
 800353e:	e1c4      	b.n	80038ca <HAL_SPI_TransmitReceive+0x3b6>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	225c      	movs	r2, #92	; 0x5c
 8003544:	2101      	movs	r1, #1
 8003546:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003548:	f7fe f944 	bl	80017d4 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003550:	201b      	movs	r0, #27
 8003552:	183b      	adds	r3, r7, r0
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	215d      	movs	r1, #93	; 0x5d
 8003558:	5c52      	ldrb	r2, [r2, r1]
 800355a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003562:	2312      	movs	r3, #18
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	1cba      	adds	r2, r7, #2
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800356c:	183b      	adds	r3, r7, r0
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d011      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x84>
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	2382      	movs	r3, #130	; 0x82
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	429a      	cmp	r2, r3
 800357c:	d107      	bne.n	800358e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_SPI_TransmitReceive+0x7a>
 8003586:	183b      	adds	r3, r7, r0
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b04      	cmp	r3, #4
 800358c:	d004      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800358e:	2323      	movs	r3, #35	; 0x23
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	2202      	movs	r2, #2
 8003594:	701a      	strb	r2, [r3, #0]
    goto error;
 8003596:	e191      	b.n	80038bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x98>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x98>
 80035a4:	1cbb      	adds	r3, r7, #2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80035ac:	2323      	movs	r3, #35	; 0x23
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80035b4:	e182      	b.n	80038bc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	225d      	movs	r2, #93	; 0x5d
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d003      	beq.n	80035ca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	225d      	movs	r2, #93	; 0x5d
 80035c6:	2105      	movs	r1, #5
 80035c8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1cba      	adds	r2, r7, #2
 80035da:	2146      	movs	r1, #70	; 0x46
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1cba      	adds	r2, r7, #2
 80035e4:	2144      	movs	r1, #68	; 0x44
 80035e6:	8812      	ldrh	r2, [r2, #0]
 80035e8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1cba      	adds	r2, r7, #2
 80035f4:	8812      	ldrh	r2, [r2, #0]
 80035f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1cba      	adds	r2, r7, #2
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	23e0      	movs	r3, #224	; 0xe0
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	429a      	cmp	r2, r3
 8003616:	d908      	bls.n	800362a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	49ac      	ldr	r1, [pc, #688]	; (80038d4 <HAL_SPI_TransmitReceive+0x3c0>)
 8003624:	400a      	ands	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	e008      	b.n	800363c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0149      	lsls	r1, r1, #5
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	4013      	ands	r3, r2
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d007      	beq.n	800365a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	23e0      	movs	r3, #224	; 0xe0
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	429a      	cmp	r2, r3
 8003664:	d800      	bhi.n	8003668 <HAL_SPI_TransmitReceive+0x154>
 8003666:	e083      	b.n	8003770 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_SPI_TransmitReceive+0x168>
 8003670:	2312      	movs	r3, #18
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d000      	beq.n	800367c <HAL_SPI_TransmitReceive+0x168>
 800367a:	e06d      	b.n	8003758 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	1c9a      	adds	r2, r3, #2
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a0:	e05a      	b.n	8003758 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2202      	movs	r2, #2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d11b      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x1d4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x1d4>
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d113      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d11c      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x21c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2246      	movs	r2, #70	; 0x46
 80036fa:	5a9b      	ldrh	r3, [r3, r2]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	b292      	uxth	r2, r2
 800370e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2246      	movs	r2, #70	; 0x46
 800371e:	5a9b      	ldrh	r3, [r3, r2]
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b299      	uxth	r1, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2246      	movs	r2, #70	; 0x46
 800372a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800372c:	2301      	movs	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003730:	f7fe f850 	bl	80017d4 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373c:	429a      	cmp	r2, r3
 800373e:	d80b      	bhi.n	8003758 <HAL_SPI_TransmitReceive+0x244>
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	3301      	adds	r3, #1
 8003744:	d008      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003746:	2323      	movs	r3, #35	; 0x23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2203      	movs	r2, #3
 800374c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	225d      	movs	r2, #93	; 0x5d
 8003752:	2101      	movs	r1, #1
 8003754:	5499      	strb	r1, [r3, r2]
        goto error;
 8003756:	e0b1      	b.n	80038bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d19f      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x18e>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2246      	movs	r2, #70	; 0x46
 8003766:	5a9b      	ldrh	r3, [r3, r2]
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d199      	bne.n	80036a2 <HAL_SPI_TransmitReceive+0x18e>
 800376e:	e089      	b.n	8003884 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x270>
 8003778:	2312      	movs	r3, #18
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d000      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x270>
 8003782:	e074      	b.n	800386e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037aa:	e060      	b.n	800386e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d11c      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x2e0>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x2e0>
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d114      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d11e      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x32c>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2246      	movs	r2, #70	; 0x46
 8003806:	5a9b      	ldrh	r3, [r3, r2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	330c      	adds	r3, #12
 8003814:	001a      	movs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2246      	movs	r2, #70	; 0x46
 800382e:	5a9b      	ldrh	r3, [r3, r2]
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b299      	uxth	r1, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2246      	movs	r2, #70	; 0x46
 800383a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003840:	f7fd ffc8 	bl	80017d4 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	429a      	cmp	r2, r3
 800384e:	d802      	bhi.n	8003856 <HAL_SPI_TransmitReceive+0x342>
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3301      	adds	r3, #1
 8003854:	d102      	bne.n	800385c <HAL_SPI_TransmitReceive+0x348>
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800385c:	2323      	movs	r3, #35	; 0x23
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2203      	movs	r2, #3
 8003862:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	225d      	movs	r2, #93	; 0x5d
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]
        goto error;
 800386c:	e026      	b.n	80038bc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d199      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x298>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2246      	movs	r2, #70	; 0x46
 800387c:	5a9b      	ldrh	r3, [r3, r2]
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d193      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fa70 	bl	8003d70 <SPI_EndRxTxTransaction>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d006      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003894:	2323      	movs	r3, #35	; 0x23
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80038aa:	2323      	movs	r3, #35	; 0x23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e003      	b.n	80038bc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	225d      	movs	r2, #93	; 0x5d
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	225c      	movs	r2, #92	; 0x5c
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038c4:	2323      	movs	r3, #35	; 0x23
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00a      	add	sp, #40	; 0x28
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	ffffefff 	.word	0xffffefff

080038d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	001a      	movs	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d10f      	bne.n	800391c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2201      	movs	r2, #1
 8003900:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003902:	d00b      	beq.n	800391c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	001a      	movs	r2, r3
 800390a:	2301      	movs	r3, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d005      	beq.n	800391c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	0010      	movs	r0, r2
 8003918:	4798      	blx	r3
    return;
 800391a:	e0d5      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	001a      	movs	r2, r3
 8003922:	2301      	movs	r3, #1
 8003924:	4013      	ands	r3, r2
 8003926:	d00b      	beq.n	8003940 <HAL_SPI_IRQHandler+0x68>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	09db      	lsrs	r3, r3, #7
 800392c:	001a      	movs	r2, r3
 800392e:	2301      	movs	r3, #1
 8003930:	4013      	ands	r3, r2
 8003932:	d005      	beq.n	8003940 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	0010      	movs	r0, r2
 800393c:	4798      	blx	r3
    return;
 800393e:	e0c3      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	001a      	movs	r2, r3
 8003946:	2301      	movs	r3, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d10c      	bne.n	8003966 <HAL_SPI_IRQHandler+0x8e>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	001a      	movs	r2, r3
 8003952:	2301      	movs	r3, #1
 8003954:	4013      	ands	r3, r2
 8003956:	d106      	bne.n	8003966 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	001a      	movs	r2, r3
 800395e:	2301      	movs	r3, #1
 8003960:	4013      	ands	r3, r2
 8003962:	d100      	bne.n	8003966 <HAL_SPI_IRQHandler+0x8e>
 8003964:	e0b0      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	001a      	movs	r2, r3
 800396c:	2301      	movs	r3, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d100      	bne.n	8003974 <HAL_SPI_IRQHandler+0x9c>
 8003972:	e0a9      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	001a      	movs	r2, r3
 800397a:	2301      	movs	r3, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d023      	beq.n	80039c8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	225d      	movs	r2, #93	; 0x5d
 8003984:	5c9b      	ldrb	r3, [r3, r2]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d011      	beq.n	80039b0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	2204      	movs	r2, #4
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	e00b      	b.n	80039c8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
        return;
 80039c6:	e07f      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	001a      	movs	r2, r3
 80039ce:	2301      	movs	r3, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	d014      	beq.n	80039fe <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	2201      	movs	r2, #1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	438a      	bics	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	001a      	movs	r2, r3
 8003a04:	2301      	movs	r3, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	d00c      	beq.n	8003a24 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	2208      	movs	r2, #8
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d04c      	beq.n	8003ac6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	21e0      	movs	r1, #224	; 0xe0
 8003a38:	438a      	bics	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	225d      	movs	r2, #93	; 0x5d
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <HAL_SPI_IRQHandler+0x17c>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	d032      	beq.n	8003aba <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2103      	movs	r1, #3
 8003a60:	438a      	bics	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_SPI_IRQHandler+0x1f8>)
 8003a72:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7fe f837 	bl	8001aec <HAL_DMA_Abort_IT>
 8003a7e:	1e03      	subs	r3, r0, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <HAL_SPI_IRQHandler+0x1f8>)
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7fe f822 	bl	8001aec <HAL_DMA_Abort_IT>
 8003aa8:	1e03      	subs	r3, r0, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	2240      	movs	r2, #64	; 0x40
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003ab8:	e004      	b.n	8003ac4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 f809 	bl	8003ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ac2:	e000      	b.n	8003ac6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003ac4:	46c0      	nop			; (mov r8, r8)
    return;
 8003ac6:	46c0      	nop			; (mov r8, r8)
  }
}
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b008      	add	sp, #32
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	08003ae5 	.word	0x08003ae5

08003ad4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2246      	movs	r2, #70	; 0x46
 8003af6:	2100      	movs	r1, #0
 8003af8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7ff ffe6 	bl	8003ad4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b004      	add	sp, #16
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	1dfb      	adds	r3, r7, #7
 8003b1e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b20:	f7fd fe58 	bl	80017d4 <HAL_GetTick>
 8003b24:	0002      	movs	r2, r0
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b30:	f7fd fe50 	bl	80017d4 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b38:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	015b      	lsls	r3, r3, #5
 8003b3e:	0d1b      	lsrs	r3, r3, #20
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	4353      	muls	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b46:	e058      	b.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	d055      	beq.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4e:	f7fd fe41 	bl	80017d4 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d902      	bls.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d142      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	21e0      	movs	r1, #224	; 0xe0
 8003b70:	438a      	bics	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	2382      	movs	r3, #130	; 0x82
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d113      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d107      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2140      	movs	r1, #64	; 0x40
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d110      	bne.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	491a      	ldr	r1, [pc, #104]	; (8003c28 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	0189      	lsls	r1, r1, #6
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	225d      	movs	r2, #93	; 0x5d
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	225c      	movs	r2, #92	; 0x5c
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e017      	b.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	425a      	negs	r2, r3
 8003c0a:	4153      	adcs	r3, r2
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	001a      	movs	r2, r3
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d197      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b008      	add	sp, #32
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	20000000 	.word	0x20000000
 8003c28:	ffffdfff 	.word	0xffffdfff

08003c2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	; 0x28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c3a:	2317      	movs	r3, #23
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c42:	f7fd fdc7 	bl	80017d4 <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	18d3      	adds	r3, r2, r3
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c52:	f7fd fdbf 	bl	80017d4 <HAL_GetTick>
 8003c56:	0003      	movs	r3, r0
 8003c58:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	0013      	movs	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	00da      	lsls	r2, r3, #3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	0d1b      	lsrs	r3, r3, #20
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	4353      	muls	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c78:	e068      	b.n	8003d4c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	23c0      	movs	r3, #192	; 0xc0
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d10a      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	2117      	movs	r1, #23
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	d055      	beq.n	8003d4c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ca0:	f7fd fd98 	bl	80017d4 <HAL_GetTick>
 8003ca4:	0002      	movs	r2, r0
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d902      	bls.n	8003cb6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d142      	bne.n	8003d3c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	21e0      	movs	r1, #224	; 0xe0
 8003cc2:	438a      	bics	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	2382      	movs	r3, #130	; 0x82
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d113      	bne.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xce>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d005      	beq.n	8003cea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d107      	bne.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	438a      	bics	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d110      	bne.n	8003d28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4916      	ldr	r1, [pc, #88]	; (8003d6c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003d12:	400a      	ands	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	0189      	lsls	r1, r1, #6
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	225d      	movs	r2, #93	; 0x5d
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	225c      	movs	r2, #92	; 0x5c
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e010      	b.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d18e      	bne.n	8003c7a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b00a      	add	sp, #40	; 0x28
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	ffffdfff 	.word	0xffffdfff

08003d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	23c0      	movs	r3, #192	; 0xc0
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	0013      	movs	r3, r2
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f7ff ff4e 	bl	8003c2c <SPI_WaitFifoStateUntilTimeout>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d007      	beq.n	8003da4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	2220      	movs	r2, #32
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e027      	b.n	8003df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	0013      	movs	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	f7ff fead 	bl	8003b10 <SPI_WaitFlagStateUntilTimeout>
 8003db6:	1e03      	subs	r3, r0, #0
 8003db8:	d007      	beq.n	8003dca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e014      	b.n	8003df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	23c0      	movs	r3, #192	; 0xc0
 8003dce:	00d9      	lsls	r1, r3, #3
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f7ff ff27 	bl	8003c2c <SPI_WaitFifoStateUntilTimeout>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d007      	beq.n	8003df2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	2220      	movs	r2, #32
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e000      	b.n	8003df4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b004      	add	sp, #16
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e042      	b.n	8003e94 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	223d      	movs	r2, #61	; 0x3d
 8003e12:	5c9b      	ldrb	r3, [r3, r2]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	223c      	movs	r2, #60	; 0x3c
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7fd fa87 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	223d      	movs	r2, #61	; 0x3d
 8003e2e:	2102      	movs	r1, #2
 8003e30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f000 fc25 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2246      	movs	r2, #70	; 0x46
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	223e      	movs	r2, #62	; 0x3e
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	223f      	movs	r2, #63	; 0x3f
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2241      	movs	r2, #65	; 0x41
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2242      	movs	r2, #66	; 0x42
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2243      	movs	r2, #67	; 0x43
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2244      	movs	r2, #68	; 0x44
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2245      	movs	r2, #69	; 0x45
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	223d      	movs	r2, #61	; 0x3d
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223d      	movs	r2, #61	; 0x3d
 8003ea8:	5c9b      	ldrb	r3, [r3, r2]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e036      	b.n	8003f22 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	223d      	movs	r2, #61	; 0x3d
 8003eb8:	2102      	movs	r1, #2
 8003eba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_TIM_Base_Start_IT+0x90>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00a      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x50>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	05db      	lsls	r3, r3, #23
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d004      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0x50>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_TIM_Base_Start_IT+0x94>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d010      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	e007      	b.n	8003f20 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b004      	add	sp, #16
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40000400 	.word	0x40000400

08003f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e042      	b.n	8003fcc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	223d      	movs	r2, #61	; 0x3d
 8003f4a:	5c9b      	ldrb	r3, [r3, r2]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	223c      	movs	r2, #60	; 0x3c
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f839 	bl	8003fd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223d      	movs	r2, #61	; 0x3d
 8003f66:	2102      	movs	r1, #2
 8003f68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	0019      	movs	r1, r3
 8003f74:	0010      	movs	r0, r2
 8003f76:	f000 fb89 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2246      	movs	r2, #70	; 0x46
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	223e      	movs	r2, #62	; 0x3e
 8003f86:	2101      	movs	r1, #1
 8003f88:	5499      	strb	r1, [r3, r2]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	223f      	movs	r2, #63	; 0x3f
 8003f8e:	2101      	movs	r1, #1
 8003f90:	5499      	strb	r1, [r3, r2]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2240      	movs	r2, #64	; 0x40
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2241      	movs	r2, #65	; 0x41
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2242      	movs	r2, #66	; 0x42
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2243      	movs	r2, #67	; 0x43
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2244      	movs	r2, #68	; 0x44
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2245      	movs	r2, #69	; 0x45
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	223d      	movs	r2, #61	; 0x3d
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b002      	add	sp, #8
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <HAL_TIM_PWM_Start+0x22>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	223e      	movs	r2, #62	; 0x3e
 8003ff8:	5c9b      	ldrb	r3, [r3, r2]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	4193      	sbcs	r3, r2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e01f      	b.n	8004046 <HAL_TIM_PWM_Start+0x62>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d108      	bne.n	800401e <HAL_TIM_PWM_Start+0x3a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	223f      	movs	r2, #63	; 0x3f
 8004010:	5c9b      	ldrb	r3, [r3, r2]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	4193      	sbcs	r3, r2
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e013      	b.n	8004046 <HAL_TIM_PWM_Start+0x62>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d108      	bne.n	8004036 <HAL_TIM_PWM_Start+0x52>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	5c9b      	ldrb	r3, [r3, r2]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	4193      	sbcs	r3, r2
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e007      	b.n	8004046 <HAL_TIM_PWM_Start+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2241      	movs	r2, #65	; 0x41
 800403a:	5c9b      	ldrb	r3, [r3, r2]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	4193      	sbcs	r3, r2
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e06a      	b.n	8004124 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0x7a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	223e      	movs	r2, #62	; 0x3e
 8004058:	2102      	movs	r1, #2
 800405a:	5499      	strb	r1, [r3, r2]
 800405c:	e013      	b.n	8004086 <HAL_TIM_PWM_Start+0xa2>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0x8a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	223f      	movs	r2, #63	; 0x3f
 8004068:	2102      	movs	r1, #2
 800406a:	5499      	strb	r1, [r3, r2]
 800406c:	e00b      	b.n	8004086 <HAL_TIM_PWM_Start+0xa2>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0x9a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2240      	movs	r2, #64	; 0x40
 8004078:	2102      	movs	r1, #2
 800407a:	5499      	strb	r1, [r3, r2]
 800407c:	e003      	b.n	8004086 <HAL_TIM_PWM_Start+0xa2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2241      	movs	r2, #65	; 0x41
 8004082:	2102      	movs	r1, #2
 8004084:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6839      	ldr	r1, [r7, #0]
 800408c:	2201      	movs	r2, #1
 800408e:	0018      	movs	r0, r3
 8004090:	f000 fdfa 	bl	8004c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_TIM_PWM_Start+0x148>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_PWM_Start+0xce>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a23      	ldr	r2, [pc, #140]	; (8004130 <HAL_TIM_PWM_Start+0x14c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_PWM_Start+0xce>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a21      	ldr	r2, [pc, #132]	; (8004134 <HAL_TIM_PWM_Start+0x150>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_PWM_Start+0xd2>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_PWM_Start+0xd4>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	0209      	lsls	r1, r1, #8
 80040ca:	430a      	orrs	r2, r1
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_TIM_PWM_Start+0x148>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00a      	beq.n	80040ee <HAL_TIM_PWM_Start+0x10a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_PWM_Start+0x10a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a13      	ldr	r2, [pc, #76]	; (8004138 <HAL_TIM_PWM_Start+0x154>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d111      	bne.n	8004112 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2207      	movs	r2, #7
 80040f6:	4013      	ands	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d010      	beq.n	8004122 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2101      	movs	r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	e007      	b.n	8004122 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40014400 	.word	0x40014400
 8004134:	40014800 	.word	0x40014800
 8004138:	40000400 	.word	0x40000400

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	d021      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2202      	movs	r2, #2
 8004160:	4013      	ands	r3, r2
 8004162:	d01d      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2203      	movs	r2, #3
 800416a:	4252      	negs	r2, r2
 800416c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2203      	movs	r2, #3
 800417c:	4013      	ands	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fa6a 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 8004188:	e007      	b.n	800419a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 fa5d 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f000 fa69 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2204      	movs	r2, #4
 80041a4:	4013      	ands	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2204      	movs	r2, #4
 80041ac:	4013      	ands	r3, r2
 80041ae:	d01e      	beq.n	80041ee <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2205      	movs	r2, #5
 80041b6:	4252      	negs	r2, r2
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	23c0      	movs	r3, #192	; 0xc0
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4013      	ands	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 fa43 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 80041d6:	e007      	b.n	80041e8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 fa36 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 fa42 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2208      	movs	r2, #8
 80041f2:	4013      	ands	r3, r2
 80041f4:	d021      	beq.n	800423a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2208      	movs	r2, #8
 80041fa:	4013      	ands	r3, r2
 80041fc:	d01d      	beq.n	800423a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2209      	movs	r2, #9
 8004204:	4252      	negs	r2, r2
 8004206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2203      	movs	r2, #3
 8004216:	4013      	ands	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 fa1d 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 8004222:	e007      	b.n	8004234 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fa10 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	0018      	movs	r0, r3
 8004230:	f000 fa1c 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2210      	movs	r2, #16
 800423e:	4013      	ands	r3, r2
 8004240:	d022      	beq.n	8004288 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2210      	movs	r2, #16
 8004246:	4013      	ands	r3, r2
 8004248:	d01e      	beq.n	8004288 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2211      	movs	r2, #17
 8004250:	4252      	negs	r2, r2
 8004252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2208      	movs	r2, #8
 8004258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	23c0      	movs	r3, #192	; 0xc0
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4013      	ands	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f000 f9f6 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 8004270:	e007      	b.n	8004282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f000 f9e9 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f000 f9f5 	bl	800466c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2201      	movs	r2, #1
 800428c:	4013      	ands	r3, r2
 800428e:	d00c      	beq.n	80042aa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	4013      	ands	r3, r2
 8004296:	d008      	beq.n	80042aa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2202      	movs	r2, #2
 800429e:	4252      	negs	r2, r2
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fd fa07 	bl	80016b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	4013      	ands	r3, r2
 80042b0:	d00c      	beq.n	80042cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	4013      	ands	r3, r2
 80042b8:	d008      	beq.n	80042cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2281      	movs	r2, #129	; 0x81
 80042c0:	4252      	negs	r2, r2
 80042c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fd62 	bl	8004d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	4013      	ands	r3, r2
 80042d2:	d00c      	beq.n	80042ee <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2240      	movs	r2, #64	; 0x40
 80042d8:	4013      	ands	r3, r2
 80042da:	d008      	beq.n	80042ee <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2241      	movs	r2, #65	; 0x41
 80042e2:	4252      	negs	r2, r2
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 f9c7 	bl	800467c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2220      	movs	r2, #32
 80042f2:	4013      	ands	r3, r2
 80042f4:	d00c      	beq.n	8004310 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	4013      	ands	r3, r2
 80042fc:	d008      	beq.n	8004310 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2221      	movs	r2, #33	; 0x21
 8004304:	4252      	negs	r2, r2
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0018      	movs	r0, r3
 800430c:	f000 fd38 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b004      	add	sp, #16
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2317      	movs	r3, #23
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	223c      	movs	r2, #60	; 0x3c
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004336:	2302      	movs	r3, #2
 8004338:	e0ad      	b.n	8004496 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	223c      	movs	r2, #60	; 0x3c
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d100      	bne.n	800434a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004348:	e076      	b.n	8004438 <HAL_TIM_PWM_ConfigChannel+0x120>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d900      	bls.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004350:	e095      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b08      	cmp	r3, #8
 8004356:	d04e      	beq.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d900      	bls.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x48>
 800435e:	e08e      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d021      	beq.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800436c:	e087      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	0011      	movs	r1, r2
 8004376:	0018      	movs	r0, r3
 8004378:	f000 fa0c 	bl	8004794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2108      	movs	r1, #8
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2104      	movs	r1, #4
 8004398:	438a      	bics	r2, r1
 800439a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6999      	ldr	r1, [r3, #24]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	619a      	str	r2, [r3, #24]
      break;
 80043ae:	e06b      	b.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	0011      	movs	r1, r2
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 fa69 	bl	8004890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0109      	lsls	r1, r1, #4
 80043cc:	430a      	orrs	r2, r1
 80043ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4931      	ldr	r1, [pc, #196]	; (80044a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80043dc:	400a      	ands	r2, r1
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	619a      	str	r2, [r3, #24]
      break;
 80043f4:	e048      	b.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 fac4 	bl	800498c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2108      	movs	r1, #8
 8004410:	430a      	orrs	r2, r1
 8004412:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2104      	movs	r1, #4
 8004420:	438a      	bics	r2, r1
 8004422:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69d9      	ldr	r1, [r3, #28]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	61da      	str	r2, [r3, #28]
      break;
 8004436:	e027      	b.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	0011      	movs	r1, r2
 8004440:	0018      	movs	r0, r3
 8004442:	f000 fb23 	bl	8004a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0109      	lsls	r1, r1, #4
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	490f      	ldr	r1, [pc, #60]	; (80044a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004464:	400a      	ands	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69d9      	ldr	r1, [r3, #28]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	021a      	lsls	r2, r3, #8
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	61da      	str	r2, [r3, #28]
      break;
 800447c:	e004      	b.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800447e:	2317      	movs	r3, #23
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
      break;
 8004486:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	223c      	movs	r2, #60	; 0x3c
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

  return status;
 8004490:	2317      	movs	r3, #23
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	781b      	ldrb	r3, [r3, #0]
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b006      	add	sp, #24
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	fffffbff 	.word	0xfffffbff

080044a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	230f      	movs	r3, #15
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_ConfigClockSource+0x20>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e0bc      	b.n	800463e <HAL_TIM_ConfigClockSource+0x19a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	223c      	movs	r2, #60	; 0x3c
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	223d      	movs	r2, #61	; 0x3d
 80044d0:	2102      	movs	r1, #2
 80044d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2277      	movs	r2, #119	; 0x77
 80044e0:	4393      	bics	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_TIM_ConfigClockSource+0x1a4>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	0192      	lsls	r2, r2, #6
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d040      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xde>
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	0192      	lsls	r2, r2, #6
 8004504:	4293      	cmp	r3, r2
 8004506:	d900      	bls.n	800450a <HAL_TIM_ConfigClockSource+0x66>
 8004508:	e088      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	0152      	lsls	r2, r2, #5
 800450e:	4293      	cmp	r3, r2
 8004510:	d100      	bne.n	8004514 <HAL_TIM_ConfigClockSource+0x70>
 8004512:	e088      	b.n	8004626 <HAL_TIM_ConfigClockSource+0x182>
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	0152      	lsls	r2, r2, #5
 8004518:	4293      	cmp	r3, r2
 800451a:	d900      	bls.n	800451e <HAL_TIM_ConfigClockSource+0x7a>
 800451c:	e07e      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 800451e:	2b70      	cmp	r3, #112	; 0x70
 8004520:	d018      	beq.n	8004554 <HAL_TIM_ConfigClockSource+0xb0>
 8004522:	d900      	bls.n	8004526 <HAL_TIM_ConfigClockSource+0x82>
 8004524:	e07a      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 8004526:	2b60      	cmp	r3, #96	; 0x60
 8004528:	d04f      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x126>
 800452a:	d900      	bls.n	800452e <HAL_TIM_ConfigClockSource+0x8a>
 800452c:	e076      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 800452e:	2b50      	cmp	r3, #80	; 0x50
 8004530:	d03b      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x106>
 8004532:	d900      	bls.n	8004536 <HAL_TIM_ConfigClockSource+0x92>
 8004534:	e072      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d057      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x146>
 800453a:	d900      	bls.n	800453e <HAL_TIM_ConfigClockSource+0x9a>
 800453c:	e06e      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 800453e:	2b30      	cmp	r3, #48	; 0x30
 8004540:	d063      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x166>
 8004542:	d86b      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d060      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x166>
 8004548:	d868      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x178>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d05d      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x166>
 800454e:	2b10      	cmp	r3, #16
 8004550:	d05b      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x166>
 8004552:	e063      	b.n	800461c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6899      	ldr	r1, [r3, #8]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f000 fb70 	bl	8004c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2277      	movs	r2, #119	; 0x77
 8004574:	4313      	orrs	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]
      break;
 8004580:	e052      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6899      	ldr	r1, [r3, #8]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f000 fb59 	bl	8004c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2180      	movs	r1, #128	; 0x80
 80045a2:	01c9      	lsls	r1, r1, #7
 80045a4:	430a      	orrs	r2, r1
 80045a6:	609a      	str	r2, [r3, #8]
      break;
 80045a8:	e03e      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	001a      	movs	r2, r3
 80045b8:	f000 facc 	bl	8004b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2150      	movs	r1, #80	; 0x50
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 fb26 	bl	8004c14 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e02e      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	001a      	movs	r2, r3
 80045d8:	f000 faea 	bl	8004bb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2160      	movs	r1, #96	; 0x60
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fb16 	bl	8004c14 <TIM_ITRx_SetConfig>
      break;
 80045e8:	e01e      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	001a      	movs	r2, r3
 80045f8:	f000 faac 	bl	8004b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2140      	movs	r1, #64	; 0x40
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fb06 	bl	8004c14 <TIM_ITRx_SetConfig>
      break;
 8004608:	e00e      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	0019      	movs	r1, r3
 8004614:	0010      	movs	r0, r2
 8004616:	f000 fafd 	bl	8004c14 <TIM_ITRx_SetConfig>
      break;
 800461a:	e005      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800461c:	230f      	movs	r3, #15
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
      break;
 8004624:	e000      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004626:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	223d      	movs	r2, #61	; 0x3d
 800462c:	2101      	movs	r1, #1
 800462e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	223c      	movs	r2, #60	; 0x3c
 8004634:	2100      	movs	r1, #0
 8004636:	5499      	strb	r1, [r3, r2]

  return status;
 8004638:	230f      	movs	r3, #15
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	781b      	ldrb	r3, [r3, #0]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	ffff00ff 	.word	0xffff00ff

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a37      	ldr	r2, [pc, #220]	; (800477c <TIM_Base_SetConfig+0xf0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d008      	beq.n	80046b6 <TIM_Base_SetConfig+0x2a>
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	05db      	lsls	r3, r3, #23
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0x2a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a33      	ldr	r2, [pc, #204]	; (8004780 <TIM_Base_SetConfig+0xf4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2270      	movs	r2, #112	; 0x70
 80046ba:	4393      	bics	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a2c      	ldr	r2, [pc, #176]	; (800477c <TIM_Base_SetConfig+0xf0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d014      	beq.n	80046fa <TIM_Base_SetConfig+0x6e>
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	05db      	lsls	r3, r3, #23
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d00f      	beq.n	80046fa <TIM_Base_SetConfig+0x6e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <TIM_Base_SetConfig+0xf4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x6e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a27      	ldr	r2, [pc, #156]	; (8004784 <TIM_Base_SetConfig+0xf8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x6e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a26      	ldr	r2, [pc, #152]	; (8004788 <TIM_Base_SetConfig+0xfc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x6e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a25      	ldr	r2, [pc, #148]	; (800478c <TIM_Base_SetConfig+0x100>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <TIM_Base_SetConfig+0x104>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2280      	movs	r2, #128	; 0x80
 8004710:	4393      	bics	r3, r2
 8004712:	001a      	movs	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a11      	ldr	r2, [pc, #68]	; (800477c <TIM_Base_SetConfig+0xf0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0xbe>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a12      	ldr	r2, [pc, #72]	; (8004788 <TIM_Base_SetConfig+0xfc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0xbe>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <TIM_Base_SetConfig+0x100>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d103      	bne.n	8004752 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2201      	movs	r2, #1
 800475e:	4013      	ands	r3, r2
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2201      	movs	r2, #1
 800476a:	4393      	bics	r3, r2
 800476c:	001a      	movs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]
  }
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40002000 	.word	0x40002000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800
 8004790:	fffffcff 	.word	0xfffffcff

08004794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	2201      	movs	r2, #1
 80047aa:	4393      	bics	r3, r2
 80047ac:	001a      	movs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2270      	movs	r2, #112	; 0x70
 80047c2:	4393      	bics	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2203      	movs	r2, #3
 80047ca:	4393      	bics	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2202      	movs	r2, #2
 80047dc:	4393      	bics	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <TIM_OC1_SetConfig+0xe8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_OC1_SetConfig+0x6e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <TIM_OC1_SetConfig+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_OC1_SetConfig+0x6e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <TIM_OC1_SetConfig+0xf0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2208      	movs	r2, #8
 8004806:	4393      	bics	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2204      	movs	r2, #4
 8004818:	4393      	bics	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a17      	ldr	r2, [pc, #92]	; (800487c <TIM_OC1_SetConfig+0xe8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC1_SetConfig+0xa0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a16      	ldr	r2, [pc, #88]	; (8004880 <TIM_OC1_SetConfig+0xec>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC1_SetConfig+0xa0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <TIM_OC1_SetConfig+0xf0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d111      	bne.n	8004858 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <TIM_OC1_SetConfig+0xf4>)
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4a13      	ldr	r2, [pc, #76]	; (800488c <TIM_OC1_SetConfig+0xf8>)
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b006      	add	sp, #24
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	fffffeff 	.word	0xfffffeff
 800488c:	fffffdff 	.word	0xfffffdff

08004890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	2210      	movs	r2, #16
 80048a6:	4393      	bics	r3, r2
 80048a8:	001a      	movs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <TIM_OC2_SetConfig+0xe0>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a2b      	ldr	r2, [pc, #172]	; (8004974 <TIM_OC2_SetConfig+0xe4>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2220      	movs	r2, #32
 80048da:	4393      	bics	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a22      	ldr	r2, [pc, #136]	; (8004978 <TIM_OC2_SetConfig+0xe8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10d      	bne.n	800490e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2280      	movs	r2, #128	; 0x80
 80048f6:	4393      	bics	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	4393      	bics	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <TIM_OC2_SetConfig+0xe8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <TIM_OC2_SetConfig+0x96>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a18      	ldr	r2, [pc, #96]	; (800497c <TIM_OC2_SetConfig+0xec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC2_SetConfig+0x96>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <TIM_OC2_SetConfig+0xf0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d113      	bne.n	800494e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <TIM_OC2_SetConfig+0xf4>)
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4a15      	ldr	r2, [pc, #84]	; (8004988 <TIM_OC2_SetConfig+0xf8>)
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b006      	add	sp, #24
 800496e:	bd80      	pop	{r7, pc}
 8004970:	ffff8fff 	.word	0xffff8fff
 8004974:	fffffcff 	.word	0xfffffcff
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800
 8004984:	fffffbff 	.word	0xfffffbff
 8004988:	fffff7ff 	.word	0xfffff7ff

0800498c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4a31      	ldr	r2, [pc, #196]	; (8004a68 <TIM_OC3_SetConfig+0xdc>)
 80049a2:	401a      	ands	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2270      	movs	r2, #112	; 0x70
 80049b8:	4393      	bics	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2203      	movs	r2, #3
 80049c0:	4393      	bics	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4a26      	ldr	r2, [pc, #152]	; (8004a6c <TIM_OC3_SetConfig+0xe0>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <TIM_OC3_SetConfig+0xe4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d10d      	bne.n	8004a06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <TIM_OC3_SetConfig+0xe8>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <TIM_OC3_SetConfig+0xec>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <TIM_OC3_SetConfig+0xe4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_OC3_SetConfig+0x92>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <TIM_OC3_SetConfig+0xf0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC3_SetConfig+0x92>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <TIM_OC3_SetConfig+0xf4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d113      	bne.n	8004a46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <TIM_OC3_SetConfig+0xf8>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <TIM_OC3_SetConfig+0xfc>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b006      	add	sp, #24
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	fffffeff 	.word	0xfffffeff
 8004a6c:	fffffdff 	.word	0xfffffdff
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	fffff7ff 	.word	0xfffff7ff
 8004a78:	fffffbff 	.word	0xfffffbff
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800
 8004a84:	ffffefff 	.word	0xffffefff
 8004a88:	ffffdfff 	.word	0xffffdfff

08004a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <TIM_OC4_SetConfig+0xa8>)
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <TIM_OC4_SetConfig+0xac>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <TIM_OC4_SetConfig+0xb0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <TIM_OC4_SetConfig+0xb4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC4_SetConfig+0xb8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC4_SetConfig+0x70>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC4_SetConfig+0xbc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC4_SetConfig+0x70>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC4_SetConfig+0xc0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <TIM_OC4_SetConfig+0xc4>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b006      	add	sp, #24
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	ffffefff 	.word	0xffffefff
 8004b38:	ffff8fff 	.word	0xffff8fff
 8004b3c:	fffffcff 	.word	0xfffffcff
 8004b40:	ffffdfff 	.word	0xffffdfff
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800
 8004b50:	ffffbfff 	.word	0xffffbfff

08004b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	001a      	movs	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	22f0      	movs	r2, #240	; 0xf0
 8004b7e:	4393      	bics	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	220a      	movs	r2, #10
 8004b90:	4393      	bics	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b006      	add	sp, #24
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	4393      	bics	r3, r2
 8004bca:	001a      	movs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <TIM_TI2_ConfigInputStage+0x60>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	031b      	lsls	r3, r3, #12
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	22a0      	movs	r2, #160	; 0xa0
 8004bec:	4393      	bics	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b006      	add	sp, #24
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	ffff0fff 	.word	0xffff0fff

08004c14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2270      	movs	r2, #112	; 0x70
 8004c28:	4393      	bics	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	2207      	movs	r2, #7
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	609a      	str	r2, [r3, #8]
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b004      	add	sp, #16
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <TIM_ETR_SetConfig+0x3c>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b006      	add	sp, #24
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	ffff00ff 	.word	0xffff00ff

08004c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	221f      	movs	r2, #31
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	0013      	movs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	43d2      	mvns	r2, r2
 8004caa:	401a      	ands	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1a      	ldr	r2, [r3, #32]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	211f      	movs	r1, #31
 8004cb8:	400b      	ands	r3, r1
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4099      	lsls	r1, r3
 8004cbe:	000b      	movs	r3, r1
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b006      	add	sp, #24
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	223c      	movs	r2, #60	; 0x3c
 8004cde:	5c9b      	ldrb	r3, [r3, r2]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e042      	b.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	223c      	movs	r2, #60	; 0x3c
 8004cec:	2101      	movs	r1, #1
 8004cee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	223d      	movs	r2, #61	; 0x3d
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2270      	movs	r2, #112	; 0x70
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00a      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	05db      	lsls	r3, r3, #23
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d004      	beq.n	8004d42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10c      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2280      	movs	r2, #128	; 0x80
 8004d46:	4393      	bics	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223d      	movs	r2, #61	; 0x3d
 8004d60:	2101      	movs	r1, #1
 8004d62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223c      	movs	r2, #60	; 0x3c
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b004      	add	sp, #16
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40000400 	.word	0x40000400

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e044      	b.n	8004e3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2278      	movs	r2, #120	; 0x78
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fc fb4f 	bl	8001468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2224      	movs	r2, #36	; 0x24
 8004dce:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2101      	movs	r1, #1
 8004ddc:	438a      	bics	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 fc50 	bl	8005690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 fb24 	bl	8005440 <UART_SetConfig>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e01c      	b.n	8004e3c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	490d      	ldr	r1, [pc, #52]	; (8004e44 <HAL_UART_Init+0xa4>)
 8004e0e:	400a      	ands	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	212a      	movs	r1, #42	; 0x2a
 8004e1e:	438a      	bics	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 fcdf 	bl	80057f8 <UART_CheckIdleState>
 8004e3a:	0003      	movs	r3, r0
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	ffffb7ff 	.word	0xffffb7ff

08004e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b0ab      	sub	sp, #172	; 0xac
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	22a4      	movs	r2, #164	; 0xa4
 8004e58:	18b9      	adds	r1, r7, r2
 8004e5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	20a0      	movs	r0, #160	; 0xa0
 8004e64:	1839      	adds	r1, r7, r0
 8004e66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	219c      	movs	r1, #156	; 0x9c
 8004e70:	1879      	adds	r1, r7, r1
 8004e72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e74:	0011      	movs	r1, r2
 8004e76:	18bb      	adds	r3, r7, r2
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a99      	ldr	r2, [pc, #612]	; (80050e0 <HAL_UART_IRQHandler+0x298>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2298      	movs	r2, #152	; 0x98
 8004e80:	18bc      	adds	r4, r7, r2
 8004e82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004e84:	18bb      	adds	r3, r7, r2
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d114      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2220      	movs	r2, #32
 8004e92:	4013      	ands	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e96:	183b      	adds	r3, r7, r0
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d100      	bne.n	8004eaa <HAL_UART_IRQHandler+0x62>
 8004ea8:	e29e      	b.n	80053e8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	4798      	blx	r3
      }
      return;
 8004eb4:	e298      	b.n	80053e8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004eb6:	2398      	movs	r3, #152	; 0x98
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d100      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x7a>
 8004ec0:	e114      	b.n	80050ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ec2:	239c      	movs	r3, #156	; 0x9c
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d106      	bne.n	8004edc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ece:	23a0      	movs	r3, #160	; 0xa0
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a83      	ldr	r2, [pc, #524]	; (80050e4 <HAL_UART_IRQHandler+0x29c>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d100      	bne.n	8004edc <HAL_UART_IRQHandler+0x94>
 8004eda:	e107      	b.n	80050ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004edc:	23a4      	movs	r3, #164	; 0xa4
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d012      	beq.n	8004f0e <HAL_UART_IRQHandler+0xc6>
 8004ee8:	23a0      	movs	r3, #160	; 0xa0
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2284      	movs	r2, #132	; 0x84
 8004f02:	589b      	ldr	r3, [r3, r2]
 8004f04:	2201      	movs	r2, #1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2184      	movs	r1, #132	; 0x84
 8004f0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f0e:	23a4      	movs	r3, #164	; 0xa4
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2202      	movs	r2, #2
 8004f16:	4013      	ands	r3, r2
 8004f18:	d011      	beq.n	8004f3e <HAL_UART_IRQHandler+0xf6>
 8004f1a:	239c      	movs	r3, #156	; 0x9c
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2201      	movs	r2, #1
 8004f22:	4013      	ands	r3, r2
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2284      	movs	r2, #132	; 0x84
 8004f32:	589b      	ldr	r3, [r3, r2]
 8004f34:	2204      	movs	r2, #4
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2184      	movs	r1, #132	; 0x84
 8004f3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f3e:	23a4      	movs	r3, #164	; 0xa4
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2204      	movs	r2, #4
 8004f46:	4013      	ands	r3, r2
 8004f48:	d011      	beq.n	8004f6e <HAL_UART_IRQHandler+0x126>
 8004f4a:	239c      	movs	r3, #156	; 0x9c
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2284      	movs	r2, #132	; 0x84
 8004f62:	589b      	ldr	r3, [r3, r2]
 8004f64:	2202      	movs	r2, #2
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2184      	movs	r1, #132	; 0x84
 8004f6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f6e:	23a4      	movs	r3, #164	; 0xa4
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	4013      	ands	r3, r2
 8004f78:	d017      	beq.n	8004faa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f7a:	23a0      	movs	r3, #160	; 0xa0
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2220      	movs	r2, #32
 8004f82:	4013      	ands	r3, r2
 8004f84:	d105      	bne.n	8004f92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f86:	239c      	movs	r3, #156	; 0x9c
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f90:	d00b      	beq.n	8004faa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2208      	movs	r2, #8
 8004f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2284      	movs	r2, #132	; 0x84
 8004f9e:	589b      	ldr	r3, [r3, r2]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2184      	movs	r1, #132	; 0x84
 8004fa8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004faa:	23a4      	movs	r3, #164	; 0xa4
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x198>
 8004fb8:	23a0      	movs	r3, #160	; 0xa0
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	04db      	lsls	r3, r3, #19
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2280      	movs	r2, #128	; 0x80
 8004fcc:	0112      	lsls	r2, r2, #4
 8004fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2284      	movs	r2, #132	; 0x84
 8004fd4:	589b      	ldr	r3, [r3, r2]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2184      	movs	r1, #132	; 0x84
 8004fde:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2284      	movs	r2, #132	; 0x84
 8004fe4:	589b      	ldr	r3, [r3, r2]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d100      	bne.n	8004fec <HAL_UART_IRQHandler+0x1a4>
 8004fea:	e1ff      	b.n	80053ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fec:	23a4      	movs	r3, #164	; 0xa4
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff8:	23a0      	movs	r3, #160	; 0xa0
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2220      	movs	r2, #32
 8005000:	4013      	ands	r3, r2
 8005002:	d008      	beq.n	8005016 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	0010      	movs	r0, r2
 8005014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2284      	movs	r2, #132	; 0x84
 800501a:	589b      	ldr	r3, [r3, r2]
 800501c:	2194      	movs	r1, #148	; 0x94
 800501e:	187a      	adds	r2, r7, r1
 8005020:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2240      	movs	r2, #64	; 0x40
 800502a:	4013      	ands	r3, r2
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d004      	beq.n	800503a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005030:	187b      	adds	r3, r7, r1
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2228      	movs	r2, #40	; 0x28
 8005036:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005038:	d047      	beq.n	80050ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 fcf3 	bl	8005a28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2240      	movs	r2, #64	; 0x40
 800504a:	4013      	ands	r3, r2
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d137      	bne.n	80050c0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005050:	f3ef 8310 	mrs	r3, PRIMASK
 8005054:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005058:	2090      	movs	r0, #144	; 0x90
 800505a:	183a      	adds	r2, r7, r0
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	2301      	movs	r3, #1
 8005060:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	438a      	bics	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
 800507a:	183b      	adds	r3, r7, r0
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005082:	f383 8810 	msr	PRIMASK, r3
}
 8005086:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508c:	2b00      	cmp	r3, #0
 800508e:	d012      	beq.n	80050b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005094:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <HAL_UART_IRQHandler+0x2a0>)
 8005096:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509c:	0018      	movs	r0, r3
 800509e:	f7fc fd25 	bl	8001aec <HAL_DMA_Abort_IT>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d01a      	beq.n	80050dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b0:	0018      	movs	r0, r3
 80050b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	e012      	b.n	80050dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 f9ad 	bl	8005418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050be:	e00d      	b.n	80050dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	0018      	movs	r0, r3
 80050c4:	f000 f9a8 	bl	8005418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e008      	b.n	80050dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f000 f9a3 	bl	8005418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2284      	movs	r2, #132	; 0x84
 80050d6:	2100      	movs	r1, #0
 80050d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80050da:	e187      	b.n	80053ec <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	46c0      	nop			; (mov r8, r8)
    return;
 80050de:	e185      	b.n	80053ec <HAL_UART_IRQHandler+0x5a4>
 80050e0:	0000080f 	.word	0x0000080f
 80050e4:	04000120 	.word	0x04000120
 80050e8:	08005af1 	.word	0x08005af1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d000      	beq.n	80050f6 <HAL_UART_IRQHandler+0x2ae>
 80050f4:	e139      	b.n	800536a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050f6:	23a4      	movs	r3, #164	; 0xa4
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2210      	movs	r2, #16
 80050fe:	4013      	ands	r3, r2
 8005100:	d100      	bne.n	8005104 <HAL_UART_IRQHandler+0x2bc>
 8005102:	e132      	b.n	800536a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005104:	23a0      	movs	r3, #160	; 0xa0
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2210      	movs	r2, #16
 800510c:	4013      	ands	r3, r2
 800510e:	d100      	bne.n	8005112 <HAL_UART_IRQHandler+0x2ca>
 8005110:	e12b      	b.n	800536a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2210      	movs	r2, #16
 8005118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2240      	movs	r2, #64	; 0x40
 8005122:	4013      	ands	r3, r2
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d000      	beq.n	800512a <HAL_UART_IRQHandler+0x2e2>
 8005128:	e09f      	b.n	800526a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	217e      	movs	r1, #126	; 0x7e
 8005134:	187b      	adds	r3, r7, r1
 8005136:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005138:	187b      	adds	r3, r7, r1
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d100      	bne.n	8005142 <HAL_UART_IRQHandler+0x2fa>
 8005140:	e156      	b.n	80053f0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2258      	movs	r2, #88	; 0x58
 8005146:	5a9b      	ldrh	r3, [r3, r2]
 8005148:	187a      	adds	r2, r7, r1
 800514a:	8812      	ldrh	r2, [r2, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d300      	bcc.n	8005152 <HAL_UART_IRQHandler+0x30a>
 8005150:	e14e      	b.n	80053f0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	187a      	adds	r2, r7, r1
 8005156:	215a      	movs	r1, #90	; 0x5a
 8005158:	8812      	ldrh	r2, [r2, #0]
 800515a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b20      	cmp	r3, #32
 8005164:	d06f      	beq.n	8005246 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005166:	f3ef 8310 	mrs	r3, PRIMASK
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005170:	2301      	movs	r3, #1
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	499e      	ldr	r1, [pc, #632]	; (8005400 <HAL_UART_IRQHandler+0x5b8>)
 8005188:	400a      	ands	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005198:	f3ef 8310 	mrs	r3, PRIMASK
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800519e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a0:	677b      	str	r3, [r7, #116]	; 0x74
 80051a2:	2301      	movs	r3, #1
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a8:	f383 8810 	msr	PRIMASK, r3
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2101      	movs	r1, #1
 80051ba:	438a      	bics	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ca:	f3ef 8310 	mrs	r3, PRIMASK
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80051d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d2:	673b      	str	r3, [r7, #112]	; 0x70
 80051d4:	2301      	movs	r3, #1
 80051d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051da:	f383 8810 	msr	PRIMASK, r3
}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2140      	movs	r1, #64	; 0x40
 80051ec:	438a      	bics	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	2120      	movs	r1, #32
 8005202:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520a:	f3ef 8310 	mrs	r3, PRIMASK
 800520e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005210:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005214:	2301      	movs	r3, #1
 8005216:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521a:	f383 8810 	msr	PRIMASK, r3
}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2110      	movs	r1, #16
 800522c:	438a      	bics	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005236:	f383 8810 	msr	PRIMASK, r3
}
 800523a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005240:	0018      	movs	r0, r3
 8005242:	f7fc fc1b 	bl	8001a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2258      	movs	r2, #88	; 0x58
 8005250:	5a9a      	ldrh	r2, [r3, r2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	215a      	movs	r1, #90	; 0x5a
 8005256:	5a5b      	ldrh	r3, [r3, r1]
 8005258:	b29b      	uxth	r3, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	0011      	movs	r1, r2
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f8e0 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005268:	e0c2      	b.n	80053f0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2258      	movs	r2, #88	; 0x58
 800526e:	5a99      	ldrh	r1, [r3, r2]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	225a      	movs	r2, #90	; 0x5a
 8005274:	5a9b      	ldrh	r3, [r3, r2]
 8005276:	b29a      	uxth	r2, r3
 8005278:	208e      	movs	r0, #142	; 0x8e
 800527a:	183b      	adds	r3, r7, r0
 800527c:	1a8a      	subs	r2, r1, r2
 800527e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	225a      	movs	r2, #90	; 0x5a
 8005284:	5a9b      	ldrh	r3, [r3, r2]
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d100      	bne.n	800528e <HAL_UART_IRQHandler+0x446>
 800528c:	e0b2      	b.n	80053f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800528e:	183b      	adds	r3, r7, r0
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d100      	bne.n	8005298 <HAL_UART_IRQHandler+0x450>
 8005296:	e0ad      	b.n	80053f4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005298:	f3ef 8310 	mrs	r3, PRIMASK
 800529c:	60fb      	str	r3, [r7, #12]
  return(result);
 800529e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a0:	2488      	movs	r4, #136	; 0x88
 80052a2:	193a      	adds	r2, r7, r4
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	2301      	movs	r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4951      	ldr	r1, [pc, #324]	; (8005404 <HAL_UART_IRQHandler+0x5bc>)
 80052be:	400a      	ands	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d0:	f3ef 8310 	mrs	r3, PRIMASK
 80052d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80052d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d8:	2484      	movs	r4, #132	; 0x84
 80052da:	193a      	adds	r2, r7, r4
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	438a      	bics	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	2120      	movs	r1, #32
 800530e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531c:	f3ef 8310 	mrs	r3, PRIMASK
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005324:	2480      	movs	r4, #128	; 0x80
 8005326:	193a      	adds	r2, r7, r4
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	2301      	movs	r3, #1
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2110      	movs	r1, #16
 8005342:	438a      	bics	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	193b      	adds	r3, r7, r4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	f383 8810 	msr	PRIMASK, r3
}
 8005352:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800535a:	183b      	adds	r3, r7, r0
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0011      	movs	r1, r2
 8005362:	0018      	movs	r0, r3
 8005364:	f000 f860 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005368:	e044      	b.n	80053f4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800536a:	23a4      	movs	r3, #164	; 0xa4
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	035b      	lsls	r3, r3, #13
 8005374:	4013      	ands	r3, r2
 8005376:	d010      	beq.n	800539a <HAL_UART_IRQHandler+0x552>
 8005378:	239c      	movs	r3, #156	; 0x9c
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	03db      	lsls	r3, r3, #15
 8005382:	4013      	ands	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2280      	movs	r2, #128	; 0x80
 800538c:	0352      	lsls	r2, r2, #13
 800538e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	0018      	movs	r0, r3
 8005394:	f000 fbee 	bl	8005b74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005398:	e02f      	b.n	80053fa <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800539a:	23a4      	movs	r3, #164	; 0xa4
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	4013      	ands	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053a6:	23a0      	movs	r3, #160	; 0xa0
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	4013      	ands	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01e      	beq.n	80053f8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	0010      	movs	r0, r2
 80053c2:	4798      	blx	r3
    }
    return;
 80053c4:	e018      	b.n	80053f8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053c6:	23a4      	movs	r3, #164	; 0xa4
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	4013      	ands	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_UART_IRQHandler+0x5b2>
 80053d2:	23a0      	movs	r3, #160	; 0xa0
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2240      	movs	r2, #64	; 0x40
 80053da:	4013      	ands	r3, r2
 80053dc:	d00d      	beq.n	80053fa <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fb9c 	bl	8005b1e <UART_EndTransmit_IT>
    return;
 80053e6:	e008      	b.n	80053fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	e006      	b.n	80053fa <HAL_UART_IRQHandler+0x5b2>
    return;
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	e004      	b.n	80053fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	e002      	b.n	80053fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	e000      	b.n	80053fa <HAL_UART_IRQHandler+0x5b2>
    return;
 80053f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b02b      	add	sp, #172	; 0xac
 80053fe:	bd90      	pop	{r4, r7, pc}
 8005400:	fffffeff 	.word	0xfffffeff
 8005404:	fffffedf 	.word	0xfffffedf

08005408 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b002      	add	sp, #8
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	000a      	movs	r2, r1
 8005432:	1cbb      	adds	r3, r7, #2
 8005434:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	46bd      	mov	sp, r7
 800543a:	b002      	add	sp, #8
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005448:	231e      	movs	r3, #30
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a83      	ldr	r2, [pc, #524]	; (800567c <UART_SetConfig+0x23c>)
 8005470:	4013      	ands	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	430a      	orrs	r2, r1
 800547c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a7e      	ldr	r2, [pc, #504]	; (8005680 <UART_SetConfig+0x240>)
 8005486:	4013      	ands	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a75      	ldr	r2, [pc, #468]	; (8005684 <UART_SetConfig+0x244>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054bc:	4b72      	ldr	r3, [pc, #456]	; (8005688 <UART_SetConfig+0x248>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	2203      	movs	r2, #3
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d00d      	beq.n	80054e4 <UART_SetConfig+0xa4>
 80054c8:	d81b      	bhi.n	8005502 <UART_SetConfig+0xc2>
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d014      	beq.n	80054f8 <UART_SetConfig+0xb8>
 80054ce:	d818      	bhi.n	8005502 <UART_SetConfig+0xc2>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <UART_SetConfig+0x9a>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00a      	beq.n	80054ee <UART_SetConfig+0xae>
 80054d8:	e013      	b.n	8005502 <UART_SetConfig+0xc2>
 80054da:	231f      	movs	r3, #31
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e012      	b.n	800550a <UART_SetConfig+0xca>
 80054e4:	231f      	movs	r3, #31
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	2202      	movs	r2, #2
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e00d      	b.n	800550a <UART_SetConfig+0xca>
 80054ee:	231f      	movs	r3, #31
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2204      	movs	r2, #4
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e008      	b.n	800550a <UART_SetConfig+0xca>
 80054f8:	231f      	movs	r3, #31
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2208      	movs	r2, #8
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e003      	b.n	800550a <UART_SetConfig+0xca>
 8005502:	231f      	movs	r3, #31
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	2210      	movs	r2, #16
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	429a      	cmp	r2, r3
 8005516:	d15c      	bne.n	80055d2 <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8005518:	231f      	movs	r3, #31
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d015      	beq.n	800554e <UART_SetConfig+0x10e>
 8005522:	dc18      	bgt.n	8005556 <UART_SetConfig+0x116>
 8005524:	2b04      	cmp	r3, #4
 8005526:	d00d      	beq.n	8005544 <UART_SetConfig+0x104>
 8005528:	dc15      	bgt.n	8005556 <UART_SetConfig+0x116>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <UART_SetConfig+0xf4>
 800552e:	2b02      	cmp	r3, #2
 8005530:	d005      	beq.n	800553e <UART_SetConfig+0xfe>
 8005532:	e010      	b.n	8005556 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fd fe52 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005538:	0003      	movs	r3, r0
 800553a:	61bb      	str	r3, [r7, #24]
        break;
 800553c:	e012      	b.n	8005564 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800553e:	4b53      	ldr	r3, [pc, #332]	; (800568c <UART_SetConfig+0x24c>)
 8005540:	61bb      	str	r3, [r7, #24]
        break;
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005544:	f7fd fdea 	bl	800311c <HAL_RCC_GetSysClockFreq>
 8005548:	0003      	movs	r3, r0
 800554a:	61bb      	str	r3, [r7, #24]
        break;
 800554c:	e00a      	b.n	8005564 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	61bb      	str	r3, [r7, #24]
        break;
 8005554:	e006      	b.n	8005564 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800555a:	231e      	movs	r3, #30
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
        break;
 8005562:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d100      	bne.n	800556c <UART_SetConfig+0x12c>
 800556a:	e07a      	b.n	8005662 <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	005a      	lsls	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	18d2      	adds	r2, r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	0019      	movs	r1, r3
 800557e:	0010      	movs	r0, r2
 8005580:	f7fa fdcc 	bl	800011c <__udivsi3>
 8005584:	0003      	movs	r3, r0
 8005586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d91c      	bls.n	80055c8 <UART_SetConfig+0x188>
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	025b      	lsls	r3, r3, #9
 8005594:	429a      	cmp	r2, r3
 8005596:	d217      	bcs.n	80055c8 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	b29a      	uxth	r2, r3
 800559c:	200e      	movs	r0, #14
 800559e:	183b      	adds	r3, r7, r0
 80055a0:	210f      	movs	r1, #15
 80055a2:	438a      	bics	r2, r1
 80055a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2207      	movs	r2, #7
 80055ae:	4013      	ands	r3, r2
 80055b0:	b299      	uxth	r1, r3
 80055b2:	183b      	adds	r3, r7, r0
 80055b4:	183a      	adds	r2, r7, r0
 80055b6:	8812      	ldrh	r2, [r2, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	183a      	adds	r2, r7, r0
 80055c2:	8812      	ldrh	r2, [r2, #0]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	e04c      	b.n	8005662 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 80055c8:	231e      	movs	r3, #30
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e047      	b.n	8005662 <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055d2:	231f      	movs	r3, #31
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d015      	beq.n	8005608 <UART_SetConfig+0x1c8>
 80055dc:	dc18      	bgt.n	8005610 <UART_SetConfig+0x1d0>
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d00d      	beq.n	80055fe <UART_SetConfig+0x1be>
 80055e2:	dc15      	bgt.n	8005610 <UART_SetConfig+0x1d0>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <UART_SetConfig+0x1ae>
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d005      	beq.n	80055f8 <UART_SetConfig+0x1b8>
 80055ec:	e010      	b.n	8005610 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ee:	f7fd fdf5 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80055f2:	0003      	movs	r3, r0
 80055f4:	61bb      	str	r3, [r7, #24]
        break;
 80055f6:	e012      	b.n	800561e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b24      	ldr	r3, [pc, #144]	; (800568c <UART_SetConfig+0x24c>)
 80055fa:	61bb      	str	r3, [r7, #24]
        break;
 80055fc:	e00f      	b.n	800561e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fd fd8d 	bl	800311c <HAL_RCC_GetSysClockFreq>
 8005602:	0003      	movs	r3, r0
 8005604:	61bb      	str	r3, [r7, #24]
        break;
 8005606:	e00a      	b.n	800561e <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	61bb      	str	r3, [r7, #24]
        break;
 800560e:	e006      	b.n	800561e <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005614:	231e      	movs	r3, #30
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]
        break;
 800561c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01e      	beq.n	8005662 <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	085a      	lsrs	r2, r3, #1
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	18d2      	adds	r2, r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	0019      	movs	r1, r3
 8005634:	0010      	movs	r0, r2
 8005636:	f7fa fd71 	bl	800011c <__udivsi3>
 800563a:	0003      	movs	r3, r0
 800563c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d90a      	bls.n	800565a <UART_SetConfig+0x21a>
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	025b      	lsls	r3, r3, #9
 800564a:	429a      	cmp	r2, r3
 800564c:	d205      	bcs.n	800565a <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	e003      	b.n	8005662 <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 800565a:	231e      	movs	r3, #30
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800566e:	231e      	movs	r3, #30
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	781b      	ldrb	r3, [r3, #0]
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b008      	add	sp, #32
 800567a:	bd80      	pop	{r7, pc}
 800567c:	ffff69f3 	.word	0xffff69f3
 8005680:	ffffcfff 	.word	0xffffcfff
 8005684:	fffff4ff 	.word	0xfffff4ff
 8005688:	40021000 	.word	0x40021000
 800568c:	007a1200 	.word	0x007a1200

08005690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2208      	movs	r2, #8
 800569e:	4013      	ands	r3, r2
 80056a0:	d00b      	beq.n	80056ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <UART_AdvFeatureConfig+0x144>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	0019      	movs	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2201      	movs	r2, #1
 80056c0:	4013      	ands	r3, r2
 80056c2:	d00b      	beq.n	80056dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4a43      	ldr	r2, [pc, #268]	; (80057d8 <UART_AdvFeatureConfig+0x148>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2202      	movs	r2, #2
 80056e2:	4013      	ands	r3, r2
 80056e4:	d00b      	beq.n	80056fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <UART_AdvFeatureConfig+0x14c>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	0019      	movs	r1, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2204      	movs	r2, #4
 8005704:	4013      	ands	r3, r2
 8005706:	d00b      	beq.n	8005720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <UART_AdvFeatureConfig+0x150>)
 8005710:	4013      	ands	r3, r2
 8005712:	0019      	movs	r1, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2210      	movs	r2, #16
 8005726:	4013      	ands	r3, r2
 8005728:	d00b      	beq.n	8005742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <UART_AdvFeatureConfig+0x154>)
 8005732:	4013      	ands	r3, r2
 8005734:	0019      	movs	r1, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	2220      	movs	r2, #32
 8005748:	4013      	ands	r3, r2
 800574a:	d00b      	beq.n	8005764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <UART_AdvFeatureConfig+0x158>)
 8005754:	4013      	ands	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2240      	movs	r2, #64	; 0x40
 800576a:	4013      	ands	r3, r2
 800576c:	d01d      	beq.n	80057aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <UART_AdvFeatureConfig+0x15c>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	035b      	lsls	r3, r3, #13
 800578e:	429a      	cmp	r2, r3
 8005790:	d10b      	bne.n	80057aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <UART_AdvFeatureConfig+0x160>)
 800579a:	4013      	ands	r3, r2
 800579c:	0019      	movs	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	4013      	ands	r3, r2
 80057b2:	d00b      	beq.n	80057cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <UART_AdvFeatureConfig+0x164>)
 80057bc:	4013      	ands	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
  }
}
 80057cc:	46c0      	nop			; (mov r8, r8)
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b002      	add	sp, #8
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	ffff7fff 	.word	0xffff7fff
 80057d8:	fffdffff 	.word	0xfffdffff
 80057dc:	fffeffff 	.word	0xfffeffff
 80057e0:	fffbffff 	.word	0xfffbffff
 80057e4:	ffffefff 	.word	0xffffefff
 80057e8:	ffffdfff 	.word	0xffffdfff
 80057ec:	ffefffff 	.word	0xffefffff
 80057f0:	ff9fffff 	.word	0xff9fffff
 80057f4:	fff7ffff 	.word	0xfff7ffff

080057f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b092      	sub	sp, #72	; 0x48
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2284      	movs	r2, #132	; 0x84
 8005804:	2100      	movs	r1, #0
 8005806:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005808:	f7fb ffe4 	bl	80017d4 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2208      	movs	r2, #8
 8005818:	4013      	ands	r3, r2
 800581a:	2b08      	cmp	r3, #8
 800581c:	d12c      	bne.n	8005878 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	2280      	movs	r2, #128	; 0x80
 8005822:	0391      	lsls	r1, r2, #14
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4a46      	ldr	r2, [pc, #280]	; (8005940 <UART_CheckIdleState+0x148>)
 8005828:	9200      	str	r2, [sp, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	f000 f88c 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8005830:	1e03      	subs	r3, r0, #0
 8005832:	d021      	beq.n	8005878 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005834:	f3ef 8310 	mrs	r3, PRIMASK
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
 800583e:	2301      	movs	r3, #1
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	f383 8810 	msr	PRIMASK, r3
}
 8005848:	46c0      	nop			; (mov r8, r8)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	438a      	bics	r2, r1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	f383 8810 	msr	PRIMASK, r3
}
 8005864:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2278      	movs	r2, #120	; 0x78
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e05f      	b.n	8005938 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2204      	movs	r2, #4
 8005880:	4013      	ands	r3, r2
 8005882:	2b04      	cmp	r3, #4
 8005884:	d146      	bne.n	8005914 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	03d1      	lsls	r1, r2, #15
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <UART_CheckIdleState+0x148>)
 8005890:	9200      	str	r2, [sp, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	f000 f858 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8005898:	1e03      	subs	r3, r0, #0
 800589a:	d03b      	beq.n	8005914 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589c:	f3ef 8310 	mrs	r3, PRIMASK
 80058a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80058a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
 80058a6:	2301      	movs	r3, #1
 80058a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f383 8810 	msr	PRIMASK, r3
}
 80058b0:	46c0      	nop			; (mov r8, r8)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4921      	ldr	r1, [pc, #132]	; (8005944 <UART_CheckIdleState+0x14c>)
 80058be:	400a      	ands	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ce:	f3ef 8310 	mrs	r3, PRIMASK
 80058d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80058d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30
 80058d8:	2301      	movs	r3, #1
 80058da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f383 8810 	msr	PRIMASK, r3
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2101      	movs	r1, #1
 80058f0:	438a      	bics	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2280      	movs	r2, #128	; 0x80
 8005904:	2120      	movs	r1, #32
 8005906:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2278      	movs	r2, #120	; 0x78
 800590c:	2100      	movs	r1, #0
 800590e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e011      	b.n	8005938 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2280      	movs	r2, #128	; 0x80
 800591e:	2120      	movs	r1, #32
 8005920:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2278      	movs	r2, #120	; 0x78
 8005932:	2100      	movs	r1, #0
 8005934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b010      	add	sp, #64	; 0x40
 800593e:	bd80      	pop	{r7, pc}
 8005940:	01ffffff 	.word	0x01ffffff
 8005944:	fffffedf 	.word	0xfffffedf

08005948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	1dfb      	adds	r3, r7, #7
 8005956:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	e051      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	3301      	adds	r3, #1
 800595e:	d04e      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005960:	f7fb ff38 	bl	80017d4 <HAL_GetTick>
 8005964:	0002      	movs	r2, r0
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e051      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2204      	movs	r2, #4
 8005982:	4013      	ands	r3, r2
 8005984:	d03b      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d038      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d035      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2208      	movs	r2, #8
 800599a:	4013      	ands	r3, r2
 800599c:	2b08      	cmp	r3, #8
 800599e:	d111      	bne.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2208      	movs	r2, #8
 80059a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 f83c 	bl	8005a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2284      	movs	r2, #132	; 0x84
 80059b4:	2108      	movs	r1, #8
 80059b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2278      	movs	r2, #120	; 0x78
 80059bc:	2100      	movs	r1, #0
 80059be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e02c      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	401a      	ands	r2, r3
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d112      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	0112      	lsls	r2, r2, #4
 80059e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	0018      	movs	r0, r3
 80059e6:	f000 f81f 	bl	8005a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2284      	movs	r2, #132	; 0x84
 80059ee:	2120      	movs	r1, #32
 80059f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2278      	movs	r2, #120	; 0x78
 80059f6:	2100      	movs	r1, #0
 80059f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e00f      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	4013      	ands	r3, r2
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	425a      	negs	r2, r3
 8005a0e:	4153      	adcs	r3, r2
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	001a      	movs	r2, r3
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d09e      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	0018      	movs	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b004      	add	sp, #16
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08e      	sub	sp, #56	; 0x38
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a30:	f3ef 8310 	mrs	r3, PRIMASK
 8005a34:	617b      	str	r3, [r7, #20]
  return(result);
 8005a36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f383 8810 	msr	PRIMASK, r3
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4926      	ldr	r1, [pc, #152]	; (8005aec <UART_EndRxTransfer+0xc4>)
 8005a52:	400a      	ands	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f383 8810 	msr	PRIMASK, r3
}
 8005a60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a62:	f3ef 8310 	mrs	r3, PRIMASK
 8005a66:	623b      	str	r3, [r7, #32]
  return(result);
 8005a68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2101      	movs	r1, #1
 8005a84:	438a      	bics	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d118      	bne.n	8005ace <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f383 8810 	msr	PRIMASK, r3
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2110      	movs	r1, #16
 8005abe:	438a      	bics	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f383 8810 	msr	PRIMASK, r3
}
 8005acc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2280      	movs	r2, #128	; 0x80
 8005ad2:	2120      	movs	r1, #32
 8005ad4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b00e      	add	sp, #56	; 0x38
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	fffffedf 	.word	0xfffffedf

08005af0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	225a      	movs	r2, #90	; 0x5a
 8005b02:	2100      	movs	r1, #0
 8005b04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2252      	movs	r2, #82	; 0x52
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7ff fc81 	bl	8005418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b004      	add	sp, #16
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b26:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	2301      	movs	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f383 8810 	msr	PRIMASK, r3
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2140      	movs	r1, #64	; 0x40
 8005b48:	438a      	bics	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f383 8810 	msr	PRIMASK, r3
}
 8005b56:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff fc4e 	bl	8005408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b006      	add	sp, #24
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <__errno>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <__errno+0x8>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	4770      	bx	lr
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	2000000c 	.word	0x2000000c

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	2600      	movs	r6, #0
 8005b94:	4d0c      	ldr	r5, [pc, #48]	; (8005bc8 <__libc_init_array+0x38>)
 8005b96:	4c0d      	ldr	r4, [pc, #52]	; (8005bcc <__libc_init_array+0x3c>)
 8005b98:	1b64      	subs	r4, r4, r5
 8005b9a:	10a4      	asrs	r4, r4, #2
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	2600      	movs	r6, #0
 8005ba2:	f000 fc47 	bl	8006434 <_init>
 8005ba6:	4d0a      	ldr	r5, [pc, #40]	; (8005bd0 <__libc_init_array+0x40>)
 8005ba8:	4c0a      	ldr	r4, [pc, #40]	; (8005bd4 <__libc_init_array+0x44>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	42a6      	cmp	r6, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	00b3      	lsls	r3, r6, #2
 8005bb6:	58eb      	ldr	r3, [r5, r3]
 8005bb8:	4798      	blx	r3
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	00b3      	lsls	r3, r6, #2
 8005bc0:	58eb      	ldr	r3, [r5, r3]
 8005bc2:	4798      	blx	r3
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	0800651c 	.word	0x0800651c
 8005bcc:	0800651c 	.word	0x0800651c
 8005bd0:	0800651c 	.word	0x0800651c
 8005bd4:	08006520 	.word	0x08006520

08005bd8 <memcpy>:
 8005bd8:	2300      	movs	r3, #0
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d100      	bne.n	8005be2 <memcpy+0xa>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	5ccc      	ldrb	r4, [r1, r3]
 8005be4:	54c4      	strb	r4, [r0, r3]
 8005be6:	3301      	adds	r3, #1
 8005be8:	e7f8      	b.n	8005bdc <memcpy+0x4>

08005bea <memset>:
 8005bea:	0003      	movs	r3, r0
 8005bec:	1882      	adds	r2, r0, r2
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d100      	bne.n	8005bf4 <memset+0xa>
 8005bf2:	4770      	bx	lr
 8005bf4:	7019      	strb	r1, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	e7f9      	b.n	8005bee <memset+0x4>
	...

08005bfc <siprintf>:
 8005bfc:	b40e      	push	{r1, r2, r3}
 8005bfe:	b500      	push	{lr}
 8005c00:	490b      	ldr	r1, [pc, #44]	; (8005c30 <siprintf+0x34>)
 8005c02:	b09c      	sub	sp, #112	; 0x70
 8005c04:	ab1d      	add	r3, sp, #116	; 0x74
 8005c06:	9002      	str	r0, [sp, #8]
 8005c08:	9006      	str	r0, [sp, #24]
 8005c0a:	9107      	str	r1, [sp, #28]
 8005c0c:	9104      	str	r1, [sp, #16]
 8005c0e:	4809      	ldr	r0, [pc, #36]	; (8005c34 <siprintf+0x38>)
 8005c10:	4909      	ldr	r1, [pc, #36]	; (8005c38 <siprintf+0x3c>)
 8005c12:	cb04      	ldmia	r3!, {r2}
 8005c14:	9105      	str	r1, [sp, #20]
 8005c16:	6800      	ldr	r0, [r0, #0]
 8005c18:	a902      	add	r1, sp, #8
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	f000 f870 	bl	8005d00 <_svfiprintf_r>
 8005c20:	2300      	movs	r3, #0
 8005c22:	9a02      	ldr	r2, [sp, #8]
 8005c24:	7013      	strb	r3, [r2, #0]
 8005c26:	b01c      	add	sp, #112	; 0x70
 8005c28:	bc08      	pop	{r3}
 8005c2a:	b003      	add	sp, #12
 8005c2c:	4718      	bx	r3
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	7fffffff 	.word	0x7fffffff
 8005c34:	2000000c 	.word	0x2000000c
 8005c38:	ffff0208 	.word	0xffff0208

08005c3c <__ssputs_r>:
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	688e      	ldr	r6, [r1, #8]
 8005c40:	b085      	sub	sp, #20
 8005c42:	0007      	movs	r7, r0
 8005c44:	000c      	movs	r4, r1
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	429e      	cmp	r6, r3
 8005c4c:	d83c      	bhi.n	8005cc8 <__ssputs_r+0x8c>
 8005c4e:	2390      	movs	r3, #144	; 0x90
 8005c50:	898a      	ldrh	r2, [r1, #12]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	421a      	tst	r2, r3
 8005c56:	d034      	beq.n	8005cc2 <__ssputs_r+0x86>
 8005c58:	2503      	movs	r5, #3
 8005c5a:	6909      	ldr	r1, [r1, #16]
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	1a5b      	subs	r3, r3, r1
 8005c60:	9302      	str	r3, [sp, #8]
 8005c62:	6963      	ldr	r3, [r4, #20]
 8005c64:	9802      	ldr	r0, [sp, #8]
 8005c66:	435d      	muls	r5, r3
 8005c68:	0feb      	lsrs	r3, r5, #31
 8005c6a:	195d      	adds	r5, r3, r5
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	106d      	asrs	r5, r5, #1
 8005c70:	3301      	adds	r3, #1
 8005c72:	181b      	adds	r3, r3, r0
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	d900      	bls.n	8005c7a <__ssputs_r+0x3e>
 8005c78:	001d      	movs	r5, r3
 8005c7a:	0553      	lsls	r3, r2, #21
 8005c7c:	d532      	bpl.n	8005ce4 <__ssputs_r+0xa8>
 8005c7e:	0029      	movs	r1, r5
 8005c80:	0038      	movs	r0, r7
 8005c82:	f000 fb27 	bl	80062d4 <_malloc_r>
 8005c86:	1e06      	subs	r6, r0, #0
 8005c88:	d109      	bne.n	8005c9e <__ssputs_r+0x62>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	2340      	movs	r3, #64	; 0x40
 8005c90:	2001      	movs	r0, #1
 8005c92:	89a2      	ldrh	r2, [r4, #12]
 8005c94:	4240      	negs	r0, r0
 8005c96:	4313      	orrs	r3, r2
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	b005      	add	sp, #20
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9e:	9a02      	ldr	r2, [sp, #8]
 8005ca0:	6921      	ldr	r1, [r4, #16]
 8005ca2:	f7ff ff99 	bl	8005bd8 <memcpy>
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <__ssputs_r+0xc0>)
 8005caa:	401a      	ands	r2, r3
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	81a3      	strh	r3, [r4, #12]
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	6126      	str	r6, [r4, #16]
 8005cb6:	18f6      	adds	r6, r6, r3
 8005cb8:	6026      	str	r6, [r4, #0]
 8005cba:	6165      	str	r5, [r4, #20]
 8005cbc:	9e01      	ldr	r6, [sp, #4]
 8005cbe:	1aed      	subs	r5, r5, r3
 8005cc0:	60a5      	str	r5, [r4, #8]
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	429e      	cmp	r6, r3
 8005cc6:	d900      	bls.n	8005cca <__ssputs_r+0x8e>
 8005cc8:	9e01      	ldr	r6, [sp, #4]
 8005cca:	0032      	movs	r2, r6
 8005ccc:	9903      	ldr	r1, [sp, #12]
 8005cce:	6820      	ldr	r0, [r4, #0]
 8005cd0:	f000 faa3 	bl	800621a <memmove>
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	1b9b      	subs	r3, r3, r6
 8005cda:	60a3      	str	r3, [r4, #8]
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	199e      	adds	r6, r3, r6
 8005ce0:	6026      	str	r6, [r4, #0]
 8005ce2:	e7da      	b.n	8005c9a <__ssputs_r+0x5e>
 8005ce4:	002a      	movs	r2, r5
 8005ce6:	0038      	movs	r0, r7
 8005ce8:	f000 fb52 	bl	8006390 <_realloc_r>
 8005cec:	1e06      	subs	r6, r0, #0
 8005cee:	d1e0      	bne.n	8005cb2 <__ssputs_r+0x76>
 8005cf0:	0038      	movs	r0, r7
 8005cf2:	6921      	ldr	r1, [r4, #16]
 8005cf4:	f000 faa4 	bl	8006240 <_free_r>
 8005cf8:	e7c7      	b.n	8005c8a <__ssputs_r+0x4e>
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	fffffb7f 	.word	0xfffffb7f

08005d00 <_svfiprintf_r>:
 8005d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d02:	b0a1      	sub	sp, #132	; 0x84
 8005d04:	9003      	str	r0, [sp, #12]
 8005d06:	001d      	movs	r5, r3
 8005d08:	898b      	ldrh	r3, [r1, #12]
 8005d0a:	000f      	movs	r7, r1
 8005d0c:	0016      	movs	r6, r2
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	d511      	bpl.n	8005d36 <_svfiprintf_r+0x36>
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10e      	bne.n	8005d36 <_svfiprintf_r+0x36>
 8005d18:	2140      	movs	r1, #64	; 0x40
 8005d1a:	f000 fadb 	bl	80062d4 <_malloc_r>
 8005d1e:	6038      	str	r0, [r7, #0]
 8005d20:	6138      	str	r0, [r7, #16]
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d105      	bne.n	8005d32 <_svfiprintf_r+0x32>
 8005d26:	230c      	movs	r3, #12
 8005d28:	9a03      	ldr	r2, [sp, #12]
 8005d2a:	3801      	subs	r0, #1
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	b021      	add	sp, #132	; 0x84
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	2300      	movs	r3, #0
 8005d38:	ac08      	add	r4, sp, #32
 8005d3a:	6163      	str	r3, [r4, #20]
 8005d3c:	3320      	adds	r3, #32
 8005d3e:	7663      	strb	r3, [r4, #25]
 8005d40:	3310      	adds	r3, #16
 8005d42:	76a3      	strb	r3, [r4, #26]
 8005d44:	9507      	str	r5, [sp, #28]
 8005d46:	0035      	movs	r5, r6
 8005d48:	782b      	ldrb	r3, [r5, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <_svfiprintf_r+0x52>
 8005d4e:	2b25      	cmp	r3, #37	; 0x25
 8005d50:	d147      	bne.n	8005de2 <_svfiprintf_r+0xe2>
 8005d52:	1bab      	subs	r3, r5, r6
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	42b5      	cmp	r5, r6
 8005d58:	d00c      	beq.n	8005d74 <_svfiprintf_r+0x74>
 8005d5a:	0032      	movs	r2, r6
 8005d5c:	0039      	movs	r1, r7
 8005d5e:	9803      	ldr	r0, [sp, #12]
 8005d60:	f7ff ff6c 	bl	8005c3c <__ssputs_r>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d100      	bne.n	8005d6a <_svfiprintf_r+0x6a>
 8005d68:	e0ae      	b.n	8005ec8 <_svfiprintf_r+0x1c8>
 8005d6a:	6962      	ldr	r2, [r4, #20]
 8005d6c:	9b05      	ldr	r3, [sp, #20]
 8005d6e:	4694      	mov	ip, r2
 8005d70:	4463      	add	r3, ip
 8005d72:	6163      	str	r3, [r4, #20]
 8005d74:	782b      	ldrb	r3, [r5, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d100      	bne.n	8005d7c <_svfiprintf_r+0x7c>
 8005d7a:	e0a5      	b.n	8005ec8 <_svfiprintf_r+0x1c8>
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4252      	negs	r2, r2
 8005d82:	6062      	str	r2, [r4, #4]
 8005d84:	a904      	add	r1, sp, #16
 8005d86:	3254      	adds	r2, #84	; 0x54
 8005d88:	1852      	adds	r2, r2, r1
 8005d8a:	1c6e      	adds	r6, r5, #1
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	60e3      	str	r3, [r4, #12]
 8005d90:	60a3      	str	r3, [r4, #8]
 8005d92:	7013      	strb	r3, [r2, #0]
 8005d94:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d96:	2205      	movs	r2, #5
 8005d98:	7831      	ldrb	r1, [r6, #0]
 8005d9a:	4854      	ldr	r0, [pc, #336]	; (8005eec <_svfiprintf_r+0x1ec>)
 8005d9c:	f000 fa32 	bl	8006204 <memchr>
 8005da0:	1c75      	adds	r5, r6, #1
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d11f      	bne.n	8005de6 <_svfiprintf_r+0xe6>
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	06d3      	lsls	r3, r2, #27
 8005daa:	d504      	bpl.n	8005db6 <_svfiprintf_r+0xb6>
 8005dac:	2353      	movs	r3, #83	; 0x53
 8005dae:	a904      	add	r1, sp, #16
 8005db0:	185b      	adds	r3, r3, r1
 8005db2:	2120      	movs	r1, #32
 8005db4:	7019      	strb	r1, [r3, #0]
 8005db6:	0713      	lsls	r3, r2, #28
 8005db8:	d504      	bpl.n	8005dc4 <_svfiprintf_r+0xc4>
 8005dba:	2353      	movs	r3, #83	; 0x53
 8005dbc:	a904      	add	r1, sp, #16
 8005dbe:	185b      	adds	r3, r3, r1
 8005dc0:	212b      	movs	r1, #43	; 0x2b
 8005dc2:	7019      	strb	r1, [r3, #0]
 8005dc4:	7833      	ldrb	r3, [r6, #0]
 8005dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8005dc8:	d016      	beq.n	8005df8 <_svfiprintf_r+0xf8>
 8005dca:	0035      	movs	r5, r6
 8005dcc:	2100      	movs	r1, #0
 8005dce:	200a      	movs	r0, #10
 8005dd0:	68e3      	ldr	r3, [r4, #12]
 8005dd2:	782a      	ldrb	r2, [r5, #0]
 8005dd4:	1c6e      	adds	r6, r5, #1
 8005dd6:	3a30      	subs	r2, #48	; 0x30
 8005dd8:	2a09      	cmp	r2, #9
 8005dda:	d94e      	bls.n	8005e7a <_svfiprintf_r+0x17a>
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d111      	bne.n	8005e04 <_svfiprintf_r+0x104>
 8005de0:	e017      	b.n	8005e12 <_svfiprintf_r+0x112>
 8005de2:	3501      	adds	r5, #1
 8005de4:	e7b0      	b.n	8005d48 <_svfiprintf_r+0x48>
 8005de6:	4b41      	ldr	r3, [pc, #260]	; (8005eec <_svfiprintf_r+0x1ec>)
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	1ac0      	subs	r0, r0, r3
 8005dec:	2301      	movs	r3, #1
 8005dee:	4083      	lsls	r3, r0
 8005df0:	4313      	orrs	r3, r2
 8005df2:	002e      	movs	r6, r5
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	e7ce      	b.n	8005d96 <_svfiprintf_r+0x96>
 8005df8:	9b07      	ldr	r3, [sp, #28]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9107      	str	r1, [sp, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	db01      	blt.n	8005e08 <_svfiprintf_r+0x108>
 8005e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e06:	e004      	b.n	8005e12 <_svfiprintf_r+0x112>
 8005e08:	425b      	negs	r3, r3
 8005e0a:	60e3      	str	r3, [r4, #12]
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	782b      	ldrb	r3, [r5, #0]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d10a      	bne.n	8005e2e <_svfiprintf_r+0x12e>
 8005e18:	786b      	ldrb	r3, [r5, #1]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d135      	bne.n	8005e8a <_svfiprintf_r+0x18a>
 8005e1e:	9b07      	ldr	r3, [sp, #28]
 8005e20:	3502      	adds	r5, #2
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	9207      	str	r2, [sp, #28]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db2b      	blt.n	8005e84 <_svfiprintf_r+0x184>
 8005e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2e:	4e30      	ldr	r6, [pc, #192]	; (8005ef0 <_svfiprintf_r+0x1f0>)
 8005e30:	2203      	movs	r2, #3
 8005e32:	0030      	movs	r0, r6
 8005e34:	7829      	ldrb	r1, [r5, #0]
 8005e36:	f000 f9e5 	bl	8006204 <memchr>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d006      	beq.n	8005e4c <_svfiprintf_r+0x14c>
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	1b80      	subs	r0, r0, r6
 8005e42:	4083      	lsls	r3, r0
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	3501      	adds	r5, #1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	7829      	ldrb	r1, [r5, #0]
 8005e4e:	2206      	movs	r2, #6
 8005e50:	4828      	ldr	r0, [pc, #160]	; (8005ef4 <_svfiprintf_r+0x1f4>)
 8005e52:	1c6e      	adds	r6, r5, #1
 8005e54:	7621      	strb	r1, [r4, #24]
 8005e56:	f000 f9d5 	bl	8006204 <memchr>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d03c      	beq.n	8005ed8 <_svfiprintf_r+0x1d8>
 8005e5e:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <_svfiprintf_r+0x1f8>)
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d125      	bne.n	8005eb0 <_svfiprintf_r+0x1b0>
 8005e64:	2207      	movs	r2, #7
 8005e66:	9b07      	ldr	r3, [sp, #28]
 8005e68:	3307      	adds	r3, #7
 8005e6a:	4393      	bics	r3, r2
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	6963      	ldr	r3, [r4, #20]
 8005e72:	9a04      	ldr	r2, [sp, #16]
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	6163      	str	r3, [r4, #20]
 8005e78:	e765      	b.n	8005d46 <_svfiprintf_r+0x46>
 8005e7a:	4343      	muls	r3, r0
 8005e7c:	0035      	movs	r5, r6
 8005e7e:	2101      	movs	r1, #1
 8005e80:	189b      	adds	r3, r3, r2
 8005e82:	e7a6      	b.n	8005dd2 <_svfiprintf_r+0xd2>
 8005e84:	2301      	movs	r3, #1
 8005e86:	425b      	negs	r3, r3
 8005e88:	e7d0      	b.n	8005e2c <_svfiprintf_r+0x12c>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	200a      	movs	r0, #10
 8005e8e:	001a      	movs	r2, r3
 8005e90:	3501      	adds	r5, #1
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	7829      	ldrb	r1, [r5, #0]
 8005e96:	1c6e      	adds	r6, r5, #1
 8005e98:	3930      	subs	r1, #48	; 0x30
 8005e9a:	2909      	cmp	r1, #9
 8005e9c:	d903      	bls.n	8005ea6 <_svfiprintf_r+0x1a6>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0c5      	beq.n	8005e2e <_svfiprintf_r+0x12e>
 8005ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea4:	e7c3      	b.n	8005e2e <_svfiprintf_r+0x12e>
 8005ea6:	4342      	muls	r2, r0
 8005ea8:	0035      	movs	r5, r6
 8005eaa:	2301      	movs	r3, #1
 8005eac:	1852      	adds	r2, r2, r1
 8005eae:	e7f1      	b.n	8005e94 <_svfiprintf_r+0x194>
 8005eb0:	ab07      	add	r3, sp, #28
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	003a      	movs	r2, r7
 8005eb6:	0021      	movs	r1, r4
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <_svfiprintf_r+0x1fc>)
 8005eba:	9803      	ldr	r0, [sp, #12]
 8005ebc:	e000      	b.n	8005ec0 <_svfiprintf_r+0x1c0>
 8005ebe:	bf00      	nop
 8005ec0:	9004      	str	r0, [sp, #16]
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	d1d3      	bne.n	8005e70 <_svfiprintf_r+0x170>
 8005ec8:	89bb      	ldrh	r3, [r7, #12]
 8005eca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ecc:	065b      	lsls	r3, r3, #25
 8005ece:	d400      	bmi.n	8005ed2 <_svfiprintf_r+0x1d2>
 8005ed0:	e72d      	b.n	8005d2e <_svfiprintf_r+0x2e>
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	4240      	negs	r0, r0
 8005ed6:	e72a      	b.n	8005d2e <_svfiprintf_r+0x2e>
 8005ed8:	ab07      	add	r3, sp, #28
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	003a      	movs	r2, r7
 8005ede:	0021      	movs	r1, r4
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <_svfiprintf_r+0x1fc>)
 8005ee2:	9803      	ldr	r0, [sp, #12]
 8005ee4:	f000 f87c 	bl	8005fe0 <_printf_i>
 8005ee8:	e7ea      	b.n	8005ec0 <_svfiprintf_r+0x1c0>
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	080064e8 	.word	0x080064e8
 8005ef0:	080064ee 	.word	0x080064ee
 8005ef4:	080064f2 	.word	0x080064f2
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	08005c3d 	.word	0x08005c3d

08005f00 <_printf_common>:
 8005f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f02:	0015      	movs	r5, r2
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	688a      	ldr	r2, [r1, #8]
 8005f08:	690b      	ldr	r3, [r1, #16]
 8005f0a:	000c      	movs	r4, r1
 8005f0c:	9000      	str	r0, [sp, #0]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	da00      	bge.n	8005f14 <_printf_common+0x14>
 8005f12:	0013      	movs	r3, r2
 8005f14:	0022      	movs	r2, r4
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	3243      	adds	r2, #67	; 0x43
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	d001      	beq.n	8005f24 <_printf_common+0x24>
 8005f20:	3301      	adds	r3, #1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	069b      	lsls	r3, r3, #26
 8005f28:	d502      	bpl.n	8005f30 <_printf_common+0x30>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	2306      	movs	r3, #6
 8005f34:	0017      	movs	r7, r2
 8005f36:	401f      	ands	r7, r3
 8005f38:	421a      	tst	r2, r3
 8005f3a:	d027      	beq.n	8005f8c <_printf_common+0x8c>
 8005f3c:	0023      	movs	r3, r4
 8005f3e:	3343      	adds	r3, #67	; 0x43
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	1e5a      	subs	r2, r3, #1
 8005f44:	4193      	sbcs	r3, r2
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	0692      	lsls	r2, r2, #26
 8005f4a:	d430      	bmi.n	8005fae <_printf_common+0xae>
 8005f4c:	0022      	movs	r2, r4
 8005f4e:	9901      	ldr	r1, [sp, #4]
 8005f50:	9800      	ldr	r0, [sp, #0]
 8005f52:	9e08      	ldr	r6, [sp, #32]
 8005f54:	3243      	adds	r2, #67	; 0x43
 8005f56:	47b0      	blx	r6
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d025      	beq.n	8005fa8 <_printf_common+0xa8>
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	682a      	ldr	r2, [r5, #0]
 8005f62:	68e1      	ldr	r1, [r4, #12]
 8005f64:	2500      	movs	r5, #0
 8005f66:	4003      	ands	r3, r0
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d103      	bne.n	8005f74 <_printf_common+0x74>
 8005f6c:	1a8d      	subs	r5, r1, r2
 8005f6e:	43eb      	mvns	r3, r5
 8005f70:	17db      	asrs	r3, r3, #31
 8005f72:	401d      	ands	r5, r3
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	6922      	ldr	r2, [r4, #16]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	dd01      	ble.n	8005f80 <_printf_common+0x80>
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	18ed      	adds	r5, r5, r3
 8005f80:	2700      	movs	r7, #0
 8005f82:	42bd      	cmp	r5, r7
 8005f84:	d120      	bne.n	8005fc8 <_printf_common+0xc8>
 8005f86:	2000      	movs	r0, #0
 8005f88:	e010      	b.n	8005fac <_printf_common+0xac>
 8005f8a:	3701      	adds	r7, #1
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	682a      	ldr	r2, [r5, #0]
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	ddd2      	ble.n	8005f3c <_printf_common+0x3c>
 8005f96:	0022      	movs	r2, r4
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9901      	ldr	r1, [sp, #4]
 8005f9c:	9800      	ldr	r0, [sp, #0]
 8005f9e:	9e08      	ldr	r6, [sp, #32]
 8005fa0:	3219      	adds	r2, #25
 8005fa2:	47b0      	blx	r6
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d1f0      	bne.n	8005f8a <_printf_common+0x8a>
 8005fa8:	2001      	movs	r0, #1
 8005faa:	4240      	negs	r0, r0
 8005fac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fae:	2030      	movs	r0, #48	; 0x30
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	3143      	adds	r1, #67	; 0x43
 8005fb4:	7008      	strb	r0, [r1, #0]
 8005fb6:	0021      	movs	r1, r4
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	3145      	adds	r1, #69	; 0x45
 8005fbc:	7809      	ldrb	r1, [r1, #0]
 8005fbe:	18a2      	adds	r2, r4, r2
 8005fc0:	3243      	adds	r2, #67	; 0x43
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	7011      	strb	r1, [r2, #0]
 8005fc6:	e7c1      	b.n	8005f4c <_printf_common+0x4c>
 8005fc8:	0022      	movs	r2, r4
 8005fca:	2301      	movs	r3, #1
 8005fcc:	9901      	ldr	r1, [sp, #4]
 8005fce:	9800      	ldr	r0, [sp, #0]
 8005fd0:	9e08      	ldr	r6, [sp, #32]
 8005fd2:	321a      	adds	r2, #26
 8005fd4:	47b0      	blx	r6
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa8>
 8005fda:	3701      	adds	r7, #1
 8005fdc:	e7d1      	b.n	8005f82 <_printf_common+0x82>
	...

08005fe0 <_printf_i>:
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	b08b      	sub	sp, #44	; 0x2c
 8005fe4:	9206      	str	r2, [sp, #24]
 8005fe6:	000a      	movs	r2, r1
 8005fe8:	3243      	adds	r2, #67	; 0x43
 8005fea:	9307      	str	r3, [sp, #28]
 8005fec:	9005      	str	r0, [sp, #20]
 8005fee:	9204      	str	r2, [sp, #16]
 8005ff0:	7e0a      	ldrb	r2, [r1, #24]
 8005ff2:	000c      	movs	r4, r1
 8005ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ff6:	2a78      	cmp	r2, #120	; 0x78
 8005ff8:	d806      	bhi.n	8006008 <_printf_i+0x28>
 8005ffa:	2a62      	cmp	r2, #98	; 0x62
 8005ffc:	d808      	bhi.n	8006010 <_printf_i+0x30>
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	d100      	bne.n	8006004 <_printf_i+0x24>
 8006002:	e0c0      	b.n	8006186 <_printf_i+0x1a6>
 8006004:	2a58      	cmp	r2, #88	; 0x58
 8006006:	d052      	beq.n	80060ae <_printf_i+0xce>
 8006008:	0026      	movs	r6, r4
 800600a:	3642      	adds	r6, #66	; 0x42
 800600c:	7032      	strb	r2, [r6, #0]
 800600e:	e022      	b.n	8006056 <_printf_i+0x76>
 8006010:	0010      	movs	r0, r2
 8006012:	3863      	subs	r0, #99	; 0x63
 8006014:	2815      	cmp	r0, #21
 8006016:	d8f7      	bhi.n	8006008 <_printf_i+0x28>
 8006018:	f7fa f876 	bl	8000108 <__gnu_thumb1_case_shi>
 800601c:	001f0016 	.word	0x001f0016
 8006020:	fff6fff6 	.word	0xfff6fff6
 8006024:	fff6fff6 	.word	0xfff6fff6
 8006028:	fff6001f 	.word	0xfff6001f
 800602c:	fff6fff6 	.word	0xfff6fff6
 8006030:	00a8fff6 	.word	0x00a8fff6
 8006034:	009a0036 	.word	0x009a0036
 8006038:	fff6fff6 	.word	0xfff6fff6
 800603c:	fff600b9 	.word	0xfff600b9
 8006040:	fff60036 	.word	0xfff60036
 8006044:	009efff6 	.word	0x009efff6
 8006048:	0026      	movs	r6, r4
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	3642      	adds	r6, #66	; 0x42
 800604e:	1d11      	adds	r1, r2, #4
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	7033      	strb	r3, [r6, #0]
 8006056:	2301      	movs	r3, #1
 8006058:	e0a7      	b.n	80061aa <_printf_i+0x1ca>
 800605a:	6808      	ldr	r0, [r1, #0]
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	1d0a      	adds	r2, r1, #4
 8006060:	0605      	lsls	r5, r0, #24
 8006062:	d50b      	bpl.n	800607c <_printf_i+0x9c>
 8006064:	680d      	ldr	r5, [r1, #0]
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	2d00      	cmp	r5, #0
 800606a:	da03      	bge.n	8006074 <_printf_i+0x94>
 800606c:	232d      	movs	r3, #45	; 0x2d
 800606e:	9a04      	ldr	r2, [sp, #16]
 8006070:	426d      	negs	r5, r5
 8006072:	7013      	strb	r3, [r2, #0]
 8006074:	4b61      	ldr	r3, [pc, #388]	; (80061fc <_printf_i+0x21c>)
 8006076:	270a      	movs	r7, #10
 8006078:	9303      	str	r3, [sp, #12]
 800607a:	e032      	b.n	80060e2 <_printf_i+0x102>
 800607c:	680d      	ldr	r5, [r1, #0]
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	0641      	lsls	r1, r0, #25
 8006082:	d5f1      	bpl.n	8006068 <_printf_i+0x88>
 8006084:	b22d      	sxth	r5, r5
 8006086:	e7ef      	b.n	8006068 <_printf_i+0x88>
 8006088:	680d      	ldr	r5, [r1, #0]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	1d08      	adds	r0, r1, #4
 800608e:	6018      	str	r0, [r3, #0]
 8006090:	062e      	lsls	r6, r5, #24
 8006092:	d501      	bpl.n	8006098 <_printf_i+0xb8>
 8006094:	680d      	ldr	r5, [r1, #0]
 8006096:	e003      	b.n	80060a0 <_printf_i+0xc0>
 8006098:	066d      	lsls	r5, r5, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0xb4>
 800609c:	680d      	ldr	r5, [r1, #0]
 800609e:	b2ad      	uxth	r5, r5
 80060a0:	4b56      	ldr	r3, [pc, #344]	; (80061fc <_printf_i+0x21c>)
 80060a2:	270a      	movs	r7, #10
 80060a4:	9303      	str	r3, [sp, #12]
 80060a6:	2a6f      	cmp	r2, #111	; 0x6f
 80060a8:	d117      	bne.n	80060da <_printf_i+0xfa>
 80060aa:	2708      	movs	r7, #8
 80060ac:	e015      	b.n	80060da <_printf_i+0xfa>
 80060ae:	3145      	adds	r1, #69	; 0x45
 80060b0:	700a      	strb	r2, [r1, #0]
 80060b2:	4a52      	ldr	r2, [pc, #328]	; (80061fc <_printf_i+0x21c>)
 80060b4:	9203      	str	r2, [sp, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	6821      	ldr	r1, [r4, #0]
 80060ba:	ca20      	ldmia	r2!, {r5}
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	0608      	lsls	r0, r1, #24
 80060c0:	d550      	bpl.n	8006164 <_printf_i+0x184>
 80060c2:	07cb      	lsls	r3, r1, #31
 80060c4:	d502      	bpl.n	80060cc <_printf_i+0xec>
 80060c6:	2320      	movs	r3, #32
 80060c8:	4319      	orrs	r1, r3
 80060ca:	6021      	str	r1, [r4, #0]
 80060cc:	2710      	movs	r7, #16
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	d103      	bne.n	80060da <_printf_i+0xfa>
 80060d2:	2320      	movs	r3, #32
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	439a      	bics	r2, r3
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	0023      	movs	r3, r4
 80060dc:	2200      	movs	r2, #0
 80060de:	3343      	adds	r3, #67	; 0x43
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	6863      	ldr	r3, [r4, #4]
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	db03      	blt.n	80060f2 <_printf_i+0x112>
 80060ea:	2204      	movs	r2, #4
 80060ec:	6821      	ldr	r1, [r4, #0]
 80060ee:	4391      	bics	r1, r2
 80060f0:	6021      	str	r1, [r4, #0]
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	d102      	bne.n	80060fc <_printf_i+0x11c>
 80060f6:	9e04      	ldr	r6, [sp, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00c      	beq.n	8006116 <_printf_i+0x136>
 80060fc:	9e04      	ldr	r6, [sp, #16]
 80060fe:	0028      	movs	r0, r5
 8006100:	0039      	movs	r1, r7
 8006102:	f7fa f891 	bl	8000228 <__aeabi_uidivmod>
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	3e01      	subs	r6, #1
 800610a:	5c5b      	ldrb	r3, [r3, r1]
 800610c:	7033      	strb	r3, [r6, #0]
 800610e:	002b      	movs	r3, r5
 8006110:	0005      	movs	r5, r0
 8006112:	429f      	cmp	r7, r3
 8006114:	d9f3      	bls.n	80060fe <_printf_i+0x11e>
 8006116:	2f08      	cmp	r7, #8
 8006118:	d109      	bne.n	800612e <_printf_i+0x14e>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	07db      	lsls	r3, r3, #31
 800611e:	d506      	bpl.n	800612e <_printf_i+0x14e>
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	6922      	ldr	r2, [r4, #16]
 8006124:	4293      	cmp	r3, r2
 8006126:	dc02      	bgt.n	800612e <_printf_i+0x14e>
 8006128:	2330      	movs	r3, #48	; 0x30
 800612a:	3e01      	subs	r6, #1
 800612c:	7033      	strb	r3, [r6, #0]
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	1b9b      	subs	r3, r3, r6
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	9b07      	ldr	r3, [sp, #28]
 8006136:	0021      	movs	r1, r4
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	9805      	ldr	r0, [sp, #20]
 800613c:	9b06      	ldr	r3, [sp, #24]
 800613e:	aa09      	add	r2, sp, #36	; 0x24
 8006140:	f7ff fede 	bl	8005f00 <_printf_common>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d135      	bne.n	80061b4 <_printf_i+0x1d4>
 8006148:	2001      	movs	r0, #1
 800614a:	4240      	negs	r0, r0
 800614c:	b00b      	add	sp, #44	; 0x2c
 800614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006150:	2220      	movs	r2, #32
 8006152:	6809      	ldr	r1, [r1, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	0022      	movs	r2, r4
 800615a:	2178      	movs	r1, #120	; 0x78
 800615c:	3245      	adds	r2, #69	; 0x45
 800615e:	7011      	strb	r1, [r2, #0]
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <_printf_i+0x220>)
 8006162:	e7a7      	b.n	80060b4 <_printf_i+0xd4>
 8006164:	0648      	lsls	r0, r1, #25
 8006166:	d5ac      	bpl.n	80060c2 <_printf_i+0xe2>
 8006168:	b2ad      	uxth	r5, r5
 800616a:	e7aa      	b.n	80060c2 <_printf_i+0xe2>
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	680d      	ldr	r5, [r1, #0]
 8006170:	1d10      	adds	r0, r2, #4
 8006172:	6949      	ldr	r1, [r1, #20]
 8006174:	6018      	str	r0, [r3, #0]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	062e      	lsls	r6, r5, #24
 800617a:	d501      	bpl.n	8006180 <_printf_i+0x1a0>
 800617c:	6019      	str	r1, [r3, #0]
 800617e:	e002      	b.n	8006186 <_printf_i+0x1a6>
 8006180:	066d      	lsls	r5, r5, #25
 8006182:	d5fb      	bpl.n	800617c <_printf_i+0x19c>
 8006184:	8019      	strh	r1, [r3, #0]
 8006186:	2300      	movs	r3, #0
 8006188:	9e04      	ldr	r6, [sp, #16]
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	e7d2      	b.n	8006134 <_printf_i+0x154>
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	1d11      	adds	r1, r2, #4
 8006192:	6019      	str	r1, [r3, #0]
 8006194:	6816      	ldr	r6, [r2, #0]
 8006196:	2100      	movs	r1, #0
 8006198:	0030      	movs	r0, r6
 800619a:	6862      	ldr	r2, [r4, #4]
 800619c:	f000 f832 	bl	8006204 <memchr>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d001      	beq.n	80061a8 <_printf_i+0x1c8>
 80061a4:	1b80      	subs	r0, r0, r6
 80061a6:	6060      	str	r0, [r4, #4]
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	6123      	str	r3, [r4, #16]
 80061ac:	2300      	movs	r3, #0
 80061ae:	9a04      	ldr	r2, [sp, #16]
 80061b0:	7013      	strb	r3, [r2, #0]
 80061b2:	e7bf      	b.n	8006134 <_printf_i+0x154>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	0032      	movs	r2, r6
 80061b8:	9906      	ldr	r1, [sp, #24]
 80061ba:	9805      	ldr	r0, [sp, #20]
 80061bc:	9d07      	ldr	r5, [sp, #28]
 80061be:	47a8      	blx	r5
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d0c1      	beq.n	8006148 <_printf_i+0x168>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	079b      	lsls	r3, r3, #30
 80061c8:	d415      	bmi.n	80061f6 <_printf_i+0x216>
 80061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061cc:	68e0      	ldr	r0, [r4, #12]
 80061ce:	4298      	cmp	r0, r3
 80061d0:	dabc      	bge.n	800614c <_printf_i+0x16c>
 80061d2:	0018      	movs	r0, r3
 80061d4:	e7ba      	b.n	800614c <_printf_i+0x16c>
 80061d6:	0022      	movs	r2, r4
 80061d8:	2301      	movs	r3, #1
 80061da:	9906      	ldr	r1, [sp, #24]
 80061dc:	9805      	ldr	r0, [sp, #20]
 80061de:	9e07      	ldr	r6, [sp, #28]
 80061e0:	3219      	adds	r2, #25
 80061e2:	47b0      	blx	r6
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d0af      	beq.n	8006148 <_printf_i+0x168>
 80061e8:	3501      	adds	r5, #1
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dcf0      	bgt.n	80061d6 <_printf_i+0x1f6>
 80061f4:	e7e9      	b.n	80061ca <_printf_i+0x1ea>
 80061f6:	2500      	movs	r5, #0
 80061f8:	e7f7      	b.n	80061ea <_printf_i+0x20a>
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	080064f9 	.word	0x080064f9
 8006200:	0800650a 	.word	0x0800650a

08006204 <memchr>:
 8006204:	b2c9      	uxtb	r1, r1
 8006206:	1882      	adds	r2, r0, r2
 8006208:	4290      	cmp	r0, r2
 800620a:	d101      	bne.n	8006210 <memchr+0xc>
 800620c:	2000      	movs	r0, #0
 800620e:	4770      	bx	lr
 8006210:	7803      	ldrb	r3, [r0, #0]
 8006212:	428b      	cmp	r3, r1
 8006214:	d0fb      	beq.n	800620e <memchr+0xa>
 8006216:	3001      	adds	r0, #1
 8006218:	e7f6      	b.n	8006208 <memchr+0x4>

0800621a <memmove>:
 800621a:	b510      	push	{r4, lr}
 800621c:	4288      	cmp	r0, r1
 800621e:	d902      	bls.n	8006226 <memmove+0xc>
 8006220:	188b      	adds	r3, r1, r2
 8006222:	4298      	cmp	r0, r3
 8006224:	d303      	bcc.n	800622e <memmove+0x14>
 8006226:	2300      	movs	r3, #0
 8006228:	e007      	b.n	800623a <memmove+0x20>
 800622a:	5c8b      	ldrb	r3, [r1, r2]
 800622c:	5483      	strb	r3, [r0, r2]
 800622e:	3a01      	subs	r2, #1
 8006230:	d2fb      	bcs.n	800622a <memmove+0x10>
 8006232:	bd10      	pop	{r4, pc}
 8006234:	5ccc      	ldrb	r4, [r1, r3]
 8006236:	54c4      	strb	r4, [r0, r3]
 8006238:	3301      	adds	r3, #1
 800623a:	429a      	cmp	r2, r3
 800623c:	d1fa      	bne.n	8006234 <memmove+0x1a>
 800623e:	e7f8      	b.n	8006232 <memmove+0x18>

08006240 <_free_r>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	0005      	movs	r5, r0
 8006244:	2900      	cmp	r1, #0
 8006246:	d010      	beq.n	800626a <_free_r+0x2a>
 8006248:	1f0c      	subs	r4, r1, #4
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	da00      	bge.n	8006252 <_free_r+0x12>
 8006250:	18e4      	adds	r4, r4, r3
 8006252:	0028      	movs	r0, r5
 8006254:	f000 f8d4 	bl	8006400 <__malloc_lock>
 8006258:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <_free_r+0x90>)
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <_free_r+0x2c>
 8006260:	6063      	str	r3, [r4, #4]
 8006262:	6014      	str	r4, [r2, #0]
 8006264:	0028      	movs	r0, r5
 8006266:	f000 f8d3 	bl	8006410 <__malloc_unlock>
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	42a3      	cmp	r3, r4
 800626e:	d908      	bls.n	8006282 <_free_r+0x42>
 8006270:	6821      	ldr	r1, [r4, #0]
 8006272:	1860      	adds	r0, r4, r1
 8006274:	4283      	cmp	r3, r0
 8006276:	d1f3      	bne.n	8006260 <_free_r+0x20>
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	1841      	adds	r1, r0, r1
 800627e:	6021      	str	r1, [r4, #0]
 8006280:	e7ee      	b.n	8006260 <_free_r+0x20>
 8006282:	001a      	movs	r2, r3
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <_free_r+0x4e>
 800628a:	42a3      	cmp	r3, r4
 800628c:	d9f9      	bls.n	8006282 <_free_r+0x42>
 800628e:	6811      	ldr	r1, [r2, #0]
 8006290:	1850      	adds	r0, r2, r1
 8006292:	42a0      	cmp	r0, r4
 8006294:	d10b      	bne.n	80062ae <_free_r+0x6e>
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1809      	adds	r1, r1, r0
 800629a:	1850      	adds	r0, r2, r1
 800629c:	6011      	str	r1, [r2, #0]
 800629e:	4283      	cmp	r3, r0
 80062a0:	d1e0      	bne.n	8006264 <_free_r+0x24>
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	1841      	adds	r1, r0, r1
 80062a8:	6011      	str	r1, [r2, #0]
 80062aa:	6053      	str	r3, [r2, #4]
 80062ac:	e7da      	b.n	8006264 <_free_r+0x24>
 80062ae:	42a0      	cmp	r0, r4
 80062b0:	d902      	bls.n	80062b8 <_free_r+0x78>
 80062b2:	230c      	movs	r3, #12
 80062b4:	602b      	str	r3, [r5, #0]
 80062b6:	e7d5      	b.n	8006264 <_free_r+0x24>
 80062b8:	6821      	ldr	r1, [r4, #0]
 80062ba:	1860      	adds	r0, r4, r1
 80062bc:	4283      	cmp	r3, r0
 80062be:	d103      	bne.n	80062c8 <_free_r+0x88>
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	1841      	adds	r1, r0, r1
 80062c6:	6021      	str	r1, [r4, #0]
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6054      	str	r4, [r2, #4]
 80062cc:	e7ca      	b.n	8006264 <_free_r+0x24>
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	200000a8 	.word	0x200000a8

080062d4 <_malloc_r>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	2303      	movs	r3, #3
 80062d8:	1ccd      	adds	r5, r1, #3
 80062da:	439d      	bics	r5, r3
 80062dc:	3508      	adds	r5, #8
 80062de:	0006      	movs	r6, r0
 80062e0:	2d0c      	cmp	r5, #12
 80062e2:	d21f      	bcs.n	8006324 <_malloc_r+0x50>
 80062e4:	250c      	movs	r5, #12
 80062e6:	42a9      	cmp	r1, r5
 80062e8:	d81e      	bhi.n	8006328 <_malloc_r+0x54>
 80062ea:	0030      	movs	r0, r6
 80062ec:	f000 f888 	bl	8006400 <__malloc_lock>
 80062f0:	4925      	ldr	r1, [pc, #148]	; (8006388 <_malloc_r+0xb4>)
 80062f2:	680a      	ldr	r2, [r1, #0]
 80062f4:	0014      	movs	r4, r2
 80062f6:	2c00      	cmp	r4, #0
 80062f8:	d11a      	bne.n	8006330 <_malloc_r+0x5c>
 80062fa:	4f24      	ldr	r7, [pc, #144]	; (800638c <_malloc_r+0xb8>)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <_malloc_r+0x38>
 8006302:	0021      	movs	r1, r4
 8006304:	0030      	movs	r0, r6
 8006306:	f000 f869 	bl	80063dc <_sbrk_r>
 800630a:	6038      	str	r0, [r7, #0]
 800630c:	0029      	movs	r1, r5
 800630e:	0030      	movs	r0, r6
 8006310:	f000 f864 	bl	80063dc <_sbrk_r>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d12b      	bne.n	8006370 <_malloc_r+0x9c>
 8006318:	230c      	movs	r3, #12
 800631a:	0030      	movs	r0, r6
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	f000 f877 	bl	8006410 <__malloc_unlock>
 8006322:	e003      	b.n	800632c <_malloc_r+0x58>
 8006324:	2d00      	cmp	r5, #0
 8006326:	dade      	bge.n	80062e6 <_malloc_r+0x12>
 8006328:	230c      	movs	r3, #12
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	2000      	movs	r0, #0
 800632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	1b5b      	subs	r3, r3, r5
 8006334:	d419      	bmi.n	800636a <_malloc_r+0x96>
 8006336:	2b0b      	cmp	r3, #11
 8006338:	d903      	bls.n	8006342 <_malloc_r+0x6e>
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	18e4      	adds	r4, r4, r3
 800633e:	6025      	str	r5, [r4, #0]
 8006340:	e003      	b.n	800634a <_malloc_r+0x76>
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	42a2      	cmp	r2, r4
 8006346:	d10e      	bne.n	8006366 <_malloc_r+0x92>
 8006348:	600b      	str	r3, [r1, #0]
 800634a:	0030      	movs	r0, r6
 800634c:	f000 f860 	bl	8006410 <__malloc_unlock>
 8006350:	0020      	movs	r0, r4
 8006352:	2207      	movs	r2, #7
 8006354:	300b      	adds	r0, #11
 8006356:	1d23      	adds	r3, r4, #4
 8006358:	4390      	bics	r0, r2
 800635a:	1ac2      	subs	r2, r0, r3
 800635c:	4298      	cmp	r0, r3
 800635e:	d0e6      	beq.n	800632e <_malloc_r+0x5a>
 8006360:	1a1b      	subs	r3, r3, r0
 8006362:	50a3      	str	r3, [r4, r2]
 8006364:	e7e3      	b.n	800632e <_malloc_r+0x5a>
 8006366:	6053      	str	r3, [r2, #4]
 8006368:	e7ef      	b.n	800634a <_malloc_r+0x76>
 800636a:	0022      	movs	r2, r4
 800636c:	6864      	ldr	r4, [r4, #4]
 800636e:	e7c2      	b.n	80062f6 <_malloc_r+0x22>
 8006370:	2303      	movs	r3, #3
 8006372:	1cc4      	adds	r4, r0, #3
 8006374:	439c      	bics	r4, r3
 8006376:	42a0      	cmp	r0, r4
 8006378:	d0e1      	beq.n	800633e <_malloc_r+0x6a>
 800637a:	1a21      	subs	r1, r4, r0
 800637c:	0030      	movs	r0, r6
 800637e:	f000 f82d 	bl	80063dc <_sbrk_r>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	d1db      	bne.n	800633e <_malloc_r+0x6a>
 8006386:	e7c7      	b.n	8006318 <_malloc_r+0x44>
 8006388:	200000a8 	.word	0x200000a8
 800638c:	200000ac 	.word	0x200000ac

08006390 <_realloc_r>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	0007      	movs	r7, r0
 8006394:	000d      	movs	r5, r1
 8006396:	0016      	movs	r6, r2
 8006398:	2900      	cmp	r1, #0
 800639a:	d105      	bne.n	80063a8 <_realloc_r+0x18>
 800639c:	0011      	movs	r1, r2
 800639e:	f7ff ff99 	bl	80062d4 <_malloc_r>
 80063a2:	0004      	movs	r4, r0
 80063a4:	0020      	movs	r0, r4
 80063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d103      	bne.n	80063b4 <_realloc_r+0x24>
 80063ac:	f7ff ff48 	bl	8006240 <_free_r>
 80063b0:	0034      	movs	r4, r6
 80063b2:	e7f7      	b.n	80063a4 <_realloc_r+0x14>
 80063b4:	f000 f834 	bl	8006420 <_malloc_usable_size_r>
 80063b8:	002c      	movs	r4, r5
 80063ba:	42b0      	cmp	r0, r6
 80063bc:	d2f2      	bcs.n	80063a4 <_realloc_r+0x14>
 80063be:	0031      	movs	r1, r6
 80063c0:	0038      	movs	r0, r7
 80063c2:	f7ff ff87 	bl	80062d4 <_malloc_r>
 80063c6:	1e04      	subs	r4, r0, #0
 80063c8:	d0ec      	beq.n	80063a4 <_realloc_r+0x14>
 80063ca:	0029      	movs	r1, r5
 80063cc:	0032      	movs	r2, r6
 80063ce:	f7ff fc03 	bl	8005bd8 <memcpy>
 80063d2:	0029      	movs	r1, r5
 80063d4:	0038      	movs	r0, r7
 80063d6:	f7ff ff33 	bl	8006240 <_free_r>
 80063da:	e7e3      	b.n	80063a4 <_realloc_r+0x14>

080063dc <_sbrk_r>:
 80063dc:	2300      	movs	r3, #0
 80063de:	b570      	push	{r4, r5, r6, lr}
 80063e0:	4d06      	ldr	r5, [pc, #24]	; (80063fc <_sbrk_r+0x20>)
 80063e2:	0004      	movs	r4, r0
 80063e4:	0008      	movs	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fb f8dc 	bl	80015a4 <_sbrk>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d103      	bne.n	80063f8 <_sbrk_r+0x1c>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d000      	beq.n	80063f8 <_sbrk_r+0x1c>
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	20000280 	.word	0x20000280

08006400 <__malloc_lock>:
 8006400:	b510      	push	{r4, lr}
 8006402:	4802      	ldr	r0, [pc, #8]	; (800640c <__malloc_lock+0xc>)
 8006404:	f000 f814 	bl	8006430 <__retarget_lock_acquire_recursive>
 8006408:	bd10      	pop	{r4, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	20000288 	.word	0x20000288

08006410 <__malloc_unlock>:
 8006410:	b510      	push	{r4, lr}
 8006412:	4802      	ldr	r0, [pc, #8]	; (800641c <__malloc_unlock+0xc>)
 8006414:	f000 f80d 	bl	8006432 <__retarget_lock_release_recursive>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	20000288 	.word	0x20000288

08006420 <_malloc_usable_size_r>:
 8006420:	1f0b      	subs	r3, r1, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1f18      	subs	r0, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	da01      	bge.n	800642e <_malloc_usable_size_r+0xe>
 800642a:	580b      	ldr	r3, [r1, r0]
 800642c:	18c0      	adds	r0, r0, r3
 800642e:	4770      	bx	lr

08006430 <__retarget_lock_acquire_recursive>:
 8006430:	4770      	bx	lr

08006432 <__retarget_lock_release_recursive>:
 8006432:	4770      	bx	lr

08006434 <_init>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643a:	bc08      	pop	{r3}
 800643c:	469e      	mov	lr, r3
 800643e:	4770      	bx	lr

08006440 <_fini>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr
